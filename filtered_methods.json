[
    {
        "method": "def delete_dhcp_options(dhcp_options_id=None, dhcp_options_name=None, region=None, key=None, keyid=None, profile=None): \n    return _delete_resource(resource='dhcp_options', name=dhcp_options_name, resource_id=dhcp_options_id, region=region, key=key, keyid=keyid, profile=profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_fun(fun): \n    with _get_serv(ret=None, commit=True) as cur: \n      sql = 'SELECT   s.id,s.jid,   s.full_ret\\n                                                FROM   salt_returns   s\\n                                                JOIN   (   SELECT   MAX(`jid`)   as   jid\\n                                                            from   salt_returns   GROUP   BY   fun,   id)   max\\n                                                ON   s.jid   =   max.jid\\n                                                WHERE   s.fun   =   %s\\n                                                ' \n      cur.execute(sql, (fun,)) \n      data = cur.fetchall() \n      ret = {} \n      if data: \n         for (minion, _, full_ret) in data: \n            ret[minion] = full_ret \n      return ret",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_svc_avail_path(): \n    return AVAIL_SVR_DIRS",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def serializers(opts): \n    return LazyLoader(_module_dirs(opts, 'serializers'), opts, tag='serializers')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def draw_nx(G, pos, **kwds): \n    draw(G, pos, **kwds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random_bucket_name(prefix='awscli-s3integ-', num_random=10): \n    return (prefix + random_chars(num_random))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _retrieve_device_config(): \n    return __salt__['snmp.config']()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_strtime(timestr, fmt=PERFECT_TIME_FORMAT): \n    return datetime.datetime.strptime(timestr, fmt)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _expand_table(table): \n    return np.repeat([[1, 1], [1, 0], [0, 1], [0, 0]], table.ravel(), axis=0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_group_update(context, group_uuid, values): \n    return IMPL.instance_group_update(context, group_uuid, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exists(name): \n    with settings(hide('running', 'stdout', 'warnings'), warn_only=True): \n      return run(('getent   passwd   %(name)s' % locals())).succeeded",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jnp_zeros(n, nt): \n    return jnyn_zeros(n, nt)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def del_job_files(job_paths): \n    for path in job_paths: \n      if (path and clip_path(path).lower().startswith(cfg.download_dir.get_path().lower())): \n         remove_all(path, recursive=True)",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_discount_modules(): \n    return load_module_instances('SHUUP_DISCOUNT_MODULES', 'discount_module')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def problem_rheader(r, tabs=[]): \n    if (r.representation == 'html'): \n      if (r.record is None): \n         return None \n      problem = r.record \n      tabs = [(T('Problems'), 'problems'), (T('Solutions'), 'solution'), (T('Discuss'), 'discuss'), (T('Vote'), 'vote'), (T('Scale   of   Results'), 'results')] \n      duser = s3db.delphi_DelphiUser(problem.group_id) \n      if duser.authorised: \n         tabs.append((T('Edit'), None)) \n      rheader_tabs = s3_rheader_tabs(r, tabs) \n      rtable = TABLE(TR(TH(('%s:   ' % T('Problem'))), problem.name, TH(('%s:   ' % T('Active'))), problem.active), TR(TH(('%s:   ' % T('Description'))), problem.description), TR(TH(('%s:   ' % T('Criteria'))), problem.criteria)) \n      if (r.component and (r.component_name == 'solution') and r.component_id): \n         stable = s3db.delphi_solution \n         query = (stable.id == r.component_id) \n         solution = db(query).select(stable.name, stable.description, limitby=(0, 1)).first() \n         rtable.append(DIV(TR(TH(('%s:   ' % T('Solution'))), solution.name), TR(TH(('%s:   ' % T('Description'))), solution.description))) \n      rheader = DIV(rtable, rheader_tabs) \n      return rheader",
        "line_count": 17,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def capture_screenshot_for_step(step, when): \n    if world.auto_capture_screenshots: \n      scenario_num = (step.scenario.feature.scenarios.index(step.scenario) + 1) \n      step_num = (step.scenario.steps.index(step) + 1) \n      step_func_name = step.defined_at.function.func_name \n      image_name = '{prefix:03d}__{num:03d}__{name}__{postfix}'.format(prefix=scenario_num, num=step_num, name=step_func_name, postfix=when) \n      world.capture_screenshot(image_name)",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_sw_login_version(): \n    return '-'.join(get_sw_version(strip_build_num=True).split('-')[1:(-2)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _inFilesystemNamespace(path): \n    return (path[:1] != '\\x00')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to(location, code=falcon.HTTP_302): \n    raise falcon.http_status.HTTPStatus(code, {'location': location})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def config_option_show(context, data_dict): \n    return {'success': False}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_destroy_all_by_project(context, project_id): \n    return IMPL.quota_destroy_all_by_project(context, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rollback(using=None): \n    get_connection(using).rollback()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index(): \n    s3_redirect_default(URL(f='alert'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_keys_to_request(request_field_pb, key_pbs): \n    for key_pb in key_pbs: \n      request_field_pb.add().CopyFrom(key_pb)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fix_line_ending(content): \n    return content.replace('\\r\\n', '\\n').replace('\\r', '\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return FillRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_url(path): \n    return QUrl.fromLocalFile(path).toString(QUrl.FullyEncoded)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def total_seconds(td): \n    return ((td.microseconds + ((td.seconds + ((td.days * 24) * 3600)) * (10 ** 6))) / (10 ** 6))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_get_by_fixed_ip_id(context, fixed_ip_id): \n    return IMPL.floating_ip_get_by_fixed_ip_id(context, fixed_ip_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_classifier(estimator): \n    return (getattr(estimator, '_estimator_type', None) == 'classifier')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def with_pass(): \n    with ContextManager('value') as x: \n      pass",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_subclasses(c): \n    return (c.__subclasses__() + sum(map(get_subclasses, c.__subclasses__()), []))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def function_noArgs(): \n    return",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_inclusive_or_expression_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return DrillRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_reserve(context, resources, quotas, deltas, expire, until_refresh, max_age, project_id=None, is_allocated_reserve=False): \n    return IMPL.quota_reserve(context, resources, quotas, deltas, expire, until_refresh, max_age, project_id=project_id, is_allocated_reserve=is_allocated_reserve)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sendMsg(oscAddress, dataArray=[], ipAddr='127.0.0.1', port=9000, typehint=None): \n    with oscLock: \n      outSocket.sendto(createBinaryMsg(oscAddress, dataArray, typehint), (ipAddr, port))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fromstr(string, **kwargs): \n    return GEOSGeometry(string, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _wait(timeout, cloud, server, action): \n    for count in shade._utils._iterate_timeout(timeout, ('Timeout   waiting   for   server   to   complete   %s' % action)): \n      try: \n         server = cloud.get_server(server.id) \n      except Exception: \n         continue \n      if (server.status == _action_map[action]): \n         return \n      if (server.status == 'ERROR'): \n         module.fail_json(msg=('Server   reached   ERROR   state   while   attempting   to   %s' % action))",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def gf_quo_ground(f, a, p, K): \n    return gf_mul_ground(f, K.invert(a, p), p, K)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_credit_providers(providers_list=None): \n    return CreditProvider.get_credit_providers(providers_list=providers_list)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _filter_schemas(schemas, schema_tables, exclude_table_columns): \n    return [_filter_schema(s, schema_tables, exclude_table_columns) for s in schemas]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def MissingMetricsCriteria(): \n    return ([], [])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def define(name, default=None, type=None, help=None, metavar=None, multiple=False, group=None, callback=None): \n    return options.define(name, default=default, type=type, help=help, metavar=metavar, multiple=multiple, group=group, callback=callback)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def patch_os(): \n    patch_module('os')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cluster_status(**kwargs): \n    return ceph_cfg.cluster_status(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plugin_cache_dir(): \n    return os.path.join(tempfile.gettempdir(), 'UltiSnips_test_vim_plugins')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_empty(G): \n    return (not any(G.adj.values()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_random_user_agent(): \n    return random.choice(user_agents_list)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_statement_assign(t): \n    names[t[1]] = t[3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def standard_b64encode(s): \n    return b64encode(s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def correlation(X, Y, condition=None, **kwargs): \n    return (covariance(X, Y, condition, **kwargs) / (std(X, condition, **kwargs) * std(Y, condition, **kwargs)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write(fd, data): \n    return WriteEvent(fd, data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backup_get_all_by_volume(context, volume_id, filters=None): \n    return IMPL.backup_get_all_by_volume(context, volume_id, filters=filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_up(hass): \n    hass.services.call(DOMAIN, SERVICE_VOLUME_UP)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def removeEndpoints(pixelTable, layerExtrusionWidth, paths, removedEndpoints, aroundWidth): \n    for removedEndpointIndex in xrange((len(removedEndpoints) - 1), (-1), (-1)): \n      removedEndpoint = removedEndpoints[removedEndpointIndex] \n      removedEndpointPoint = removedEndpoint.point \n      if isPointAddedAroundClosest(pixelTable, layerExtrusionWidth, paths, removedEndpointPoint, aroundWidth): \n         removedEndpoints.remove(removedEndpoint)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def generative_network(z): \n    with slim.arg_scope([slim.conv2d_transpose], activation_fn=tf.nn.elu, normalizer_fn=slim.batch_norm, normalizer_params={'scale': True}): \n      net = tf.reshape(z, [M, 1, 1, d]) \n      net = slim.conv2d_transpose(net, 128, 3, padding='VALID') \n      net = slim.conv2d_transpose(net, 64, 5, padding='VALID') \n      net = slim.conv2d_transpose(net, 32, 5, stride=2) \n      net = slim.conv2d_transpose(net, 1, 5, stride=2, activation_fn=None) \n      net = slim.flatten(net) \n      return net",
        "line_count": 8,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_file_json(path): \n    with open(path, u'r') as f: \n      return json.load(f)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in6_ismlladdr(str): \n    return in6_isincluded(str, 'ff02::', 16)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return CmdlongModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_ident(): \n    return (-1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_health(**kwargs): \n    with _IpmiCommand(**kwargs) as s: \n      return s.get_health()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isunauthenticated(f): \n    return getattr(f, 'unauthenticated', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stack(tup, axis=0): \n    return concatenate([cupy.expand_dims(x, axis) for x in tup], axis)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_choices(choices): \n    return list(zip(choices, choices))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setClosedAttribute(revolutions, xmlElement): \n    xmlElement.attributeDictionary['closed'] = str(evaluate.getEvaluatedBooleanDefault((revolutions <= 1), 'closed', xmlElement)).lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_environment(): \n    return dict(_VARS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_py_file(filename, skip_encoding_cookie=True): \n    with open(filename) as f: \n      if skip_encoding_cookie: \n         return ''.join(strip_encoding_cookie(f)) \n      else: \n         return f.read()",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def factor_calculate(evaluator, types, operator): \n    for typ in types: \n      if (operator == '-'): \n         if _is_number(typ): \n            (yield create(evaluator, (- typ.obj))) \n      elif (operator == 'not'): \n         value = typ.py__bool__() \n         if (value is None): \n            return \n         (yield create(evaluator, (not value))) \n      else: \n         (yield typ)",
        "line_count": 11,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def has_change_path_cmd(sql): \n    return (u'set   search_path' in sql.lower())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hard_sigmoid(x): \n    return HardSigmoid()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pperm(accessing_obj, accessed_obj, *args, **kwargs): \n    return perm(_to_player(accessing_obj), accessed_obj, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getregentry(): \n    return _registry('latex')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tokenize(sql, encoding=None): \n    return Lexer().get_tokens(sql, encoding)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear(): \n    BACKEND.clear()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init_pool_worker(): \n    signal.signal(signal.SIGINT, signal.SIG_IGN)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CheckFreeSpace(): \n    if (cfg.download_free() and (not sabnzbd.downloader.Downloader.do.paused)): \n      if (misc.diskfree(cfg.download_dir.get_path()) < (cfg.download_free.get_float() / GIGI)): \n         logging.warning(T('Too   little   diskspace   forcing   PAUSE')) \n         Downloader.do.pause(save=False) \n         emailer.diskfull()",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def output(data, **kwargs): \n    return salt.utils.locales.sdecode(str(data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mark_plot_labels(app, document): \n    for (name, explicit) in six.iteritems(document.nametypes): \n      if (not explicit): \n         continue \n      labelid = document.nameids[name] \n      if (labelid is None): \n         continue \n      node = document.ids[labelid] \n      if (node.tagname in (u'html_only', u'latex_only')): \n         for n in node: \n            if (n.tagname == u'figure'): \n               sectname = name \n               for c in n: \n                  if (c.tagname == u'caption'): \n                     sectname = c.astext() \n                     break \n               node[u'ids'].remove(labelid) \n               node[u'names'].remove(name) \n               n[u'ids'].append(labelid) \n               n[u'names'].append(name) \n               document.settings.env.labels[name] = (document.settings.env.docname, labelid, sectname) \n               break",
        "line_count": 21,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def getNewRepository(): \n    return InterpretRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _abstractPath(case): \n    return md5(case.mktemp()).hexdigest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_kdb_reader(sub_signature, cls): \n    _kdb_readers[sub_signature] = cls",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rollback(**kwargs): \n    return _wrapper('rollback', **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def monitor_load_globals(sock, filename, ext): \n    return communicate(sock, '__load_globals__()', settings=[filename, ext])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_loc(): \n    if (LOC_KEY in __context__): \n      return __context__[LOC_KEY]",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def token_view(request): \n    return HttpResponse(_render_csrf_token_template(request))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_range_iterator(typ): \n    return cgutils.create_struct_proxy(typ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DateTime2literal(d, c): \n    return string_literal(format_TIMESTAMP(d), c)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_logger(logger, stream, filename=None, fmt=None): \n    if (len(logger.handlers) < 1): \n      console = logging.StreamHandler(stream) \n      console.setLevel(logging.DEBUG) \n      console.setFormatter(logging.Formatter(fmt)) \n      logger.addHandler(console) \n      logger.setLevel(logging.DEBUG) \n      if filename: \n         outfile = logging.FileHandler(filename) \n         outfile.setLevel(logging.INFO) \n         outfile.setFormatter(logging.Formatter(('%(asctime)s   ' + (fmt if fmt else '%(message)s')))) \n         logger.addHandler(outfile)",
        "line_count": 11,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def lonlat2grid(lon, lat): \n    return ('%d%s' % (lon2zone(lon), lat2zone(lat)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getHostByName(name, timeout=None, effort=10): \n    return getResolver().getHostByName(name, timeout, effort)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_fragments_phase(frags): \n    return [((3 - (x % 3)) % 3) for x in _get_fragments_coord(frags)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _clear_context(context): \n    for var in (x for x in __context__ if x.startswith('chocolatey.')): \n      context.pop(var)",
        "line_count": 2,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def in_bounds(x, lb, ub): \n    return np.all(((x >= lb) & (x <= ub)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isgeneratorfunction(object): \n    return bool(((isfunction(object) or ismethod(object)) and (object.func_code.co_flags & CO_GENERATOR)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_protected_type(obj): \n    return isinstance(obj, (six.integer_types + (type(None), float, Decimal, datetime.datetime, datetime.date, datetime.time)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def end_threads(): \n    for t in _threadPool: \n      t.my_thread_ended = True \n      t.join()",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def idz_frmi(m): \n    return _id.idz_frmi(m)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_pathext(val): \n    return os.path.splitext((val or u''))[1]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def crt1(m): \n    return gf_crt1(m, ZZ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user(email): \n    return User.objects.get(email=email)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(): \n    if (not directory.get_plugins()): \n      NeutronManager.get_instance()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def identity(x): \n    return x",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return HomeRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def n_to_one(arr): \n    return where((arr == 1))[0][0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_get_pools(context): \n    return IMPL.floating_ip_get_pools(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten_list(list_of_list=[[], []]): \n    return sum(list_of_list, [])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_path_traversal(path, user='root', skip_perm_errors=False): \n    for tpath in list_path_traversal(path): \n      if (not os.access(tpath, os.R_OK)): \n         msg = 'Could   not   access   {0}.'.format(tpath) \n         if (not os.path.exists(tpath)): \n            msg += '   Path   does   not   exist.' \n         else: \n            current_user = salt.utils.get_user() \n            if (user != current_user): \n               msg += '   Try   running   as   user   {0}.'.format(user) \n            else: \n               msg += '   Please   give   {0}   read   permissions.'.format(user) \n         if skip_perm_errors: \n            return \n         raise SaltClientError(msg)",
        "line_count": 14,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def getNewRepository(): \n    return SkeinforgeRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_disk_store_alt_name_abspath(): \n    with TestConfig(DISK_TEST_CONFIG) as (directory, object_store): \n      empty_dataset = MockDataset(1) \n      directory.write('', 'files1/000/dataset_1.dat') \n      absfoo = os.path.abspath(os.path.join(directory.temp_directory, 'foo.txt')) \n      with open(absfoo, 'w') as f: \n         f.write('foo') \n      try: \n         assert (object_store.get_data(empty_dataset, extra_dir='dataset_1_files', alt_name=absfoo) != 'foo') \n      except ObjectInvalid: \n         pass",
        "line_count": 10,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def infinibox_required_together(): \n    return [['user', 'password']]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _generate_group_title(group): \n    return group.name.replace('_', '   ').title()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def csc(arg): \n    return (1 / numpy.sin(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strict_dependencies(target, dep_context): \n    for declared in _resolve_aliases(target): \n      if isinstance(declared, dep_context.compiler_plugin_types): \n         for r in declared.closure(bfs=True, **dep_context.target_closure_kwargs): \n            (yield r) \n      else: \n         (yield declared)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def decode_ascii(s): \n    return s",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_exps_in_collection_are_public(collection): \n    for exploration_id in collection.exploration_ids: \n      if rights_manager.is_exploration_private(exploration_id): \n         raise utils.ValidationError(('Cannot   reference   a   private   exploration   within   a   public   collection,   exploration   ID:   %s' % exploration_id))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def space2depth(X, r): \n    return Space2Depth(r)(X)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def memoized_method(func=None, key_factory=per_instance, **kwargs): \n    return memoized(func=func, key_factory=key_factory, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_pricing_module(): \n    return load_module(u'SHUUP_PRICING_MODULE', u'pricing_module')()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _Filters(): \n    return _cpplint_state.filters",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def equatePolarDotAzimuth(point, returnValue): \n    equateCylindricalDotAzimuth(point, returnValue)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pipeline_code_wrapper(pipeline_code): \n    return '\\nexported_pipeline   =   {}\\n\\nexported_pipeline.fit(training_features,   training_classes)\\nresults   =   exported_pipeline.predict(testing_features)\\n'.format(pipeline_code)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_server_url(*args, **kwargs): \n    return urljoin(get_server_url(**kwargs), *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_struct_or_union_specifier_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plot(name=None, fig=None, abscissa=1, iteridx=None, plot_mean=True, foffset=1e-19, x_opt=None, fontsize=10): \n    CMADataLogger(name).plot(fig, abscissa, iteridx, plot_mean, foffset, x_opt, fontsize)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape_html(text, table=_escape_html_table): \n    return text.translate(table)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _neg_impl(expr, op, **kw): \n    return UnaryExpression(expr, operator=operators.neg, type_=expr.type)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode, prefix, sideLength): \n    return RoundDerivation(elementNode, prefix, sideLength)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_all_bears_names(): \n    return [bear.name for bear in get_all_bears()]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_set_type(p): \n    p[0] = (TType.SET, p[3])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'clip', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_constant_expression_opt_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fd(f): \n    return (f.fileno() if hasattr(f, 'fileno') else f)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sync_engines(saltenv='base'): \n    return salt.utils.extmods.sync(__opts__, 'engines', saltenv=saltenv)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _sphere_constraint(rd, r0, R_adj): \n    return (R_adj - np.sqrt(np.sum(((rd - r0) ** 2))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_print_bad(p): \n    p[0] = 'MALFORMED   PRINT   STATEMENT'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _item_to_variable(iterator, resource): \n    return Variable.from_api_repr(resource, iterator.config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def roi_pooling_2d(x, rois, outh, outw, spatial_scale): \n    return ROIPooling2D(outh, outw, spatial_scale)(x, rois)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_vertical_shift_value(label): \n    return _check_range_and_return('vertical   shift', label, (-5), 5)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def graph_atlas_g(): \n    return list(_generate_graphs())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getenv(key, default=None): \n    return environ.get(key, default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xy_to_array_origin(image): \n    return rgb_transpose(image[:, ::(-1)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def markmin_escape(text): \n    return regex_markmin_escape.sub((lambda m: ('\\\\' + m.group(0).replace('\\\\', '\\\\\\\\'))), text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode, prefix, sideLength): \n    return OverhangDerivation(elementNode, prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pickleStringI(stringi): \n    return (unpickleStringI, (stringi.getvalue(), stringi.tell()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Poisson(name, lamda): \n    return rv(name, PoissonDistribution, lamda)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SetNodeAnnotation(node, annotation, value): \n    setattr(node, (_NODE_ANNOTATION_PREFIX + annotation), value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(value): \n    return (value() if callable(value) else value)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def data_fun(times): \n    return ((1e-09 * np.sin((30.0 * times))) * np.exp(((- (((times - 0.15) + (0.05 * rng.randn(1))) ** 2)) / 0.01)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __tweak_field(fields, field_name, attribute, value): \n    for x in fields: \n      if (x['name'] == field_name): \n         x[attribute] = value",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def extract_context(xml): \n    return eval(xml.text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ignore_keys(endpoint_props): \n    return dict(((prop_name, prop_val) for (prop_name, prop_val) in six.iteritems(endpoint_props) if (prop_name not in _DO_NOT_COMPARE_FIELDS)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _FormatHash(h): \n    return ('%s_%s_%s_%s_%s' % (h[0:8], h[8:16], h[16:24], h[24:32], h[32:40]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def abs__file__(): \n    for m in sys.modules.values(): \n      if hasattr(m, '__loader__'): \n         continue \n      try: \n         m.__file__ = os.path.abspath(m.__file__) \n      except AttributeError: \n         continue",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def show(): \n    _macosx.show()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def slug_validator(s, ok=SLUG_OK, lower=True, spaces=False, delimiter='-', message=validate_slug.message, code=validate_slug.code): \n    if (not (s and (slugify(s, ok, lower, spaces, delimiter) == s))): \n      raise ValidationError(message, code=code)",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_sources(): \n    return yaml.load(open(OPENSHIFT_ANSIBLE_SOURCES_PATH).read())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def execvp(file, args): \n    _execvpe(file, args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render_to_kml(*args, **kwargs): \n    return HttpResponse(loader.render_to_string(*args, **kwargs), mimetype='application/vnd.google-earth.kml+xml')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getProcessValue(executable, args=(), env={}, path=None, reactor=None): \n    return _callProtocolWithDeferred(_ValueGetter, executable, args, env, path, reactor)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run(): \n    _task()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _api_translate(name, output, kwargs): \n    return report(output, keyword='value', data=Tx(kwargs.get('value', '')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def housing_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def docker_get(args, container_id, src, dst): \n    with open(dst, 'wb') as dst_fd: \n      docker_exec(args, container_id, ['dd', ('if=%s' % src), ('bs=%s' % BUFFER_SIZE)], options=['-i'], stdout=dst_fd, capture=True)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def aware_utcnow(): \n    return datetime.utcnow().replace(tzinfo=utc)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _error_page(request, status): \n    return render(request, ('%d.html' % status), status=status)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _to_seconds(td): \n    return (td.seconds + (((td.days * 24) * 60) * 60))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def split(s, sep=None, maxsplit=0): \n    return s.split(sep, maxsplit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DEFINE_multichoice(name, default, choices, help): \n    CONFIG.AddOption(type_info.MultiChoice(name=name, default=default, choices=choices, description=help))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(): \n    capabilities.register(driver.init_handler, constants.AGENT_TYPE_LINUXBRIDGE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _gluster(cmd): \n    return _gluster_ok(_gluster_xml(cmd))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def arccoth(val): \n    return numpy.arctanh((1.0 / val))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(linter): \n    linter.register_checker(ExceptionsChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_loaded(mod): \n    return (mod in mod_list())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_cache_dir(): \n    return os.path.join(__opts__['cachedir'], 's3cache')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ensure_sep(sep, s, n=2): \n    return (s + (sep * (n - s.count(sep))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def team_status(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def distro_release_info(): \n    return _distro.distro_release_info()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _type(matches, value): \n    matches.append(Match(len(matches.input_string), len(matches.input_string), name='type', value=value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start(name, call=None): \n    return _query('grid', 'server/power', args={'name': name, 'power': 'start'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def django_to_webob_request(django_request): \n    return DjangoWebobRequest(django_request)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_freesurfer(): \n    return ('FREESURFER_HOME' in os.environ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_session_user_dept(request): \n    return (request.user, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def idpXrds(request): \n    return util.renderXRDS(request, [OPENID_IDP_2_0_TYPE], [getViewURL(request, endpoint)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetManifestResources(filename, names=None, languages=None): \n    return winresource.GetResources(filename, [RT_MANIFEST], names, languages)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_config_defaults(): \n    set_cors_middleware_defaults()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def action_events_get(context, action_id): \n    return IMPL.action_events_get(context, action_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floor_to_utc_day(value): \n    return value.astimezone(pytz.utc).replace(hour=0, minute=0, second=0, microsecond=0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def StrJoin(delim, data): \n    return delim.join((str(x) for x in data))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _ptransform(p): \n    return ((-1.0) / (1.0 + (1.5 * _phi(((1.0 + p) / 2.0)))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def WignerSemicircle(name, R): \n    return rv(name, WignerSemicircleDistribution, (R,))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Confirm(message): \n    return bool((PresentDialog(message, [u'Ok', u'Cancel']) == 0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_basket_command_dispatcher(request): \n    return cached_load('SHUUP_BASKET_COMMAND_DISPATCHER_SPEC')(request=request)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_windows(profile=None, api_key=None): \n    return salt.utils.pagerduty.list_items('maintenance_windows', 'id', __salt__['config.option'](profile), api_key, opts=__opts__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_corrected_exif(image, original): \n    if ('exif' in original.info): \n      image_exif = image.info.get('exif', piexif.dump({})) \n      original_exif = original.info['exif'] \n      image_exif = _update_exif_orientation(image_exif, _get_exif_orientation(original_exif)) \n      return image_exif",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def identity(obj): \n    return obj",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_64_bit(): \n    return (sys.maxint > ((1 << 32) - 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_folders(service_instance): \n    return list_objects(service_instance, vim.Folder)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_path(*components): \n    return (u'/' + u'/'.join((urlquote(x.encode(u'utf-8'), u'').decode(u'ascii') for x in components)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ip_addrs6(interface=None, include_loopback=False, interface_data=None): \n    return _ip_addrs(interface, include_loopback, interface_data, 'inet6')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_dvr_allowed_address_pair_device_owners(): \n    return [n_const.DEVICE_OWNER_LOADBALANCER, n_const.DEVICE_OWNER_LOADBALANCERV2]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RotL_64(x, N): \n    return (np.left_shift(x, (N & 63), dtype=np.uint64) | np.right_shift(x, ((64 - N) & 63), dtype=np.uint64))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _queue_exists(queue): \n    return (queue in list_queues())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def local_git_clone(repo_url): \n    with lcd(LOGDIR): \n      local('if   [   -d   letsencrypt   ];   then   rm   -rf   letsencrypt;   fi') \n      local(('git   clone   %s   letsencrypt' % repo_url)) \n      local('tar   czf   le.tar.gz   letsencrypt')",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def function_simple(a, b, c): \n    return (a, b, c)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_scores_ba_dir(dir): \n    return FileBinnedArrayDir(dir)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_deep_copy_op_c_code(typ, code, version=()): \n    DeepCopyOp.c_code_and_version[typ] = (code, version)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_device(device): \n    if (device >= 0): \n      torch._C._cuda_setDevice(device)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _firstResult(gen): \n    return list(gen)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def term_to_integer(term): \n    return int(''.join(list(map(str, list(term)))), 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __clean_tmp(sfn): \n    if sfn.startswith(os.path.join(tempfile.gettempdir(), salt.utils.files.TEMPFILE_PREFIX)): \n      all_roots = itertools.chain.from_iterable(six.itervalues(__opts__['file_roots'])) \n      in_roots = any((sfn.startswith(root) for root in all_roots)) \n      if (os.path.exists(sfn) and (not in_roots)): \n         os.remove(sfn)",
        "line_count": 5,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def symptom_LDAP_user_enabled_emulation_dn_ignored(): \n    return ((not CONF.ldap.user_enabled_emulation) and (CONF.ldap.user_enabled_emulation_dn is not None))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def CDLEVENINGSTAR(barDs, count, penetration=(-4e+37)): \n    return call_talib_with_ohlc(barDs, count, talib.CDLEVENINGSTAR, penetration)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_ip_addr_list(value, min=None, max=None): \n    return [is_ip_addr(mem) for mem in is_list(value, min, max)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fpart(x): \n    return math.modf(x)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sequence(i=0, f=(lambda i: (i + 1))): \n    while True: \n      (yield i) \n      i = f(i)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ls(): \n    return sorted(__grains__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exec_code(lang, code, cwd=None): \n    return exec_code_all(lang, code, cwd)['stdout']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def perceptron_output(weights, bias, x): \n    return step_function((dot(weights, x) + bias))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def curdoc(): \n    return _state.document",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sysadmin(context, data_dict): \n    return {'success': False, 'msg': _('Not   authorized')}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getservbyname(servicename, protocolname=None): \n    return _ResolveService(servicename, protocolname)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_rule_dict_from_obj(rule): \n    return dict(id=rule.id, name=rule.name, description=rule.description, protocol=rule.protocol, source_port_range=rule.source_port_range, destination_port_range=rule.destination_port_range, source_address_prefix=rule.source_address_prefix, destination_address_prefix=rule.destination_address_prefix, access=rule.access, priority=rule.priority, direction=rule.direction, provisioning_state=rule.provisioning_state, etag=rule.etag)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def S_IFMT(mode): \n    return (mode & 61440)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or __virtualname__), ('token',))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_rng_state(): \n    return default_generator.get_state()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _SetVerboseLevel(level): \n    return _cpplint_state.SetVerboseLevel(level)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def not_found(request): \n    return render(request, '404.html', {'request_path': request.path, 'title': _('Page   Not   Found')}, status=404)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processXMLElement(xmlElement): \n    group.processShape(TriangleMesh, xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fg1(x): \n    return (x + (2 * np.exp(((-16) * (x ** 2)))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def color_validator(optdict, name, value): \n    return optik_ext.check_color(None, name, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_value(val_name, default=None, **kwargs): \n    return BACKEND.get_value(val_name, default, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def datetime_to_long(dt): \n    return timedelta_to_usecs((dt - dt.min))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def df2idf(docfreq, totaldocs, log_base=2.0, add=0.0): \n    return (add + math.log(((1.0 * totaldocs) / docfreq), log_base))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def throw(msg, exc=ValidationError, title=None): \n    msgprint(msg, raise_exception=exc, title=title, indicator=u'red')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_ava_value_equal(attribute_type, val1, val2): \n    return (prep_case_insensitive(val1) == prep_case_insensitive(val2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_type_access_add(context, flavor_id, project_id): \n    return IMPL.instance_type_access_add(context, flavor_id, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def logistic_function(value): \n    return (1.0 / (1.0 + math.exp((- value))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pytest_configure(config): \n    if config.getoption('--qute-profile-subprocs'): \n      try: \n         shutil.rmtree('prof') \n      except FileNotFoundError: \n         pass",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def onDBMgrReady(): \n    INFO_MSG(('onDBMgrReady:   bootstrapGroupIndex=%s,   bootstrapGlobalIndex=%s' % (os.getenv('KBE_BOOTIDX_GROUP'), os.getenv('KBE_BOOTIDX_GLOBAL'))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def package_to_path(package): \n    return package.replace('.', '/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _root_krylov_doc(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def process(mtree): \n    for c in mtree.children: \n      groups = find_first_level_groups(c.value, group_delimiters[0]) \n      for delimiters in group_delimiters: \n         flatten = (lambda l, x: (l + find_first_level_groups(x, delimiters))) \n         groups = functools.reduce(flatten, groups, []) \n      c.split_on_components(groups)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _get_container_inspect(c_id): \n    for (co, _, _, _, _) in TestServiceDiscovery.container_inspects: \n      if (co.get('Id') == c_id): \n         return co \n      return None",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_limits(): \n    return frappe._dict((frappe.local.conf.limits or {}))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def writestatus(text, mute=False): \n    if ((not mute) and config.SHOW_STATUS.get): \n      _writeline(text)",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def whitespace_around_operator(logical_line): \n    for match in OPERATOR_REGEX.finditer(logical_line): \n      (before, after) = match.groups() \n      if (' DCTB ' in before): \n         (yield (match.start(1), 'E223   tab   before   operator')) \n      elif (len(before) > 1): \n         (yield (match.start(1), 'E221   multiple   spaces   before   operator')) \n      if (' DCTB ' in after): \n         (yield (match.start(2), 'E224   tab   after   operator')) \n      elif (len(after) > 1): \n         (yield (match.start(2), 'E222   multiple   spaces   after   operator'))",
        "line_count": 10,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def gettext_noop(message): \n    return message",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _xblock_type_and_display_name(xblock): \n    return _('{section_or_subsection}   \"{display_name}\"').format(section_or_subsection=xblock_type_display_name(xblock), display_name=xblock.display_name_with_default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_expression_group(p): \n    p[0] = p[2]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def crc32(data): \n    return (_crc32(data) & 4294967295)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def real_ip(request): \n    return request.META.get('HTTP_X_REAL_IP')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flip(image): \n    return image.transpose(Image.FLIP_TOP_BOTTOM)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backends(user): \n    return user_backends_data(user, get_helper('AUTHENTICATION_BACKENDS'), module_member(get_helper('STORAGE')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upgrade_available(pkg, refresh=True): \n    return (pkg in list_upgrades(refresh=refresh))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def credential(): \n    return s3db.hrm_credential_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disk_usage(path): \n    return dict(psutil.disk_usage(path)._asdict())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_parameter_type_list_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expand_multinomial(expr, deep=True): \n    return sympify(expr).expand(deep=deep, mul=False, power_exp=False, power_base=False, basic=False, multinomial=True, log=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bottomhat(image, selem, out=None, mask=None, shift_x=False, shift_y=False): \n    return _apply_scalar_per_pixel(generic_cy._bottomhat, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable_sig_handler(signal_name, handler): \n    if hasattr(signal, signal_name): \n      signal.signal(getattr(signal, signal_name), handler)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def re(s): \n    return REParser(s).parse_re()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeSVGTextWithNounMessage(fileName, BottomRepository(), shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_thing2(x): \n    return x._thing2",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_formatter(type_, *args, **kwargs): \n    return ext.formatter(type_, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _breakdown_point(n_samples, n_subsamples): \n    return (1 - (((((0.5 ** (1 / n_subsamples)) * ((n_samples - n_subsamples) + 1)) + n_subsamples) - 1) / n_samples))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ws_message(message): \n    message.reply_channel.send({'text': message['text']})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_prefix(key, identity=u'image'): \n    return u'||'.join([settings.THUMBNAIL_KEY_PREFIX, identity, key])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find(objs, selector, context=None): \n    return (obj for obj in objs if match(obj, selector, context))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def modify_user(id, **data): \n    models.User.smart_get(id).update_object(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _element_in_child_binder(root, e): \n    return any((x.typeid.startswith('bind:') for x in root.path_to(e)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _wanmen_get_json_api_content_by_courseID(courseID): \n    return loads(get_content('http://api.wanmen.org/course/getCourseNested/{courseID}'.format(courseID=courseID)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPluginsDirectoryPath(): \n    return archive.getAbsoluteFrozenFolderPath(__file__, 'skeinforge_plugins')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iterate_file(file): \n    while 1: \n      chunk = file.read(CHUNK_SIZE) \n      if (not chunk): \n         break \n      (yield chunk)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def parse(handle): \n    for line in handle: \n      (yield SeqMap(line))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_location(vm_=None): \n    return __opts__.get('location', config.get_cloud_config_value('location', (vm_ or get_configured_provider()), __opts__, default=DEFAULT_LOCATION, search_global=False))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def python_revision(): \n    return _sys_version()[3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_xfail_no_run(item): \n    if (not item.config.option.runxfail): \n      evalxfail = item._evalxfail \n      if evalxfail.istrue(): \n         if (not evalxfail.get('run', True)): \n            pytest.xfail(('[NOTRUN]   ' + evalxfail.getexplanation()))",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def MFI(barDs, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_hlcv(barDs, count, talib.MFI, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_parameter_type_list_opt_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def AND(*params): \n    return and_(*params)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def basics_match(original_result, modified_result): \n    return all(((getattr(original_result, member) == getattr(modified_result, member)) for member in ['origin', 'message', 'severity', 'debug_msg']))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def split_dataset_collection_instance(dataset_collection_instance, collection_type): \n    return _split_dataset_collection(dataset_collection_instance.collection, collection_type)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mean_squared_error(x0, x1): \n    return MeanSquaredError()(x0, x1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_relations(cursor, table_name): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten(list_of_lists): \n    return itertools.chain(*list_of_lists)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_iterable(obj): \n    return ((hasattr(obj, '__iter__') and (not isinstance(obj, str))) or isinstance(obj, GeneratorType))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def processXMLElement(xmlElement): \n    processXMLElementByGeometry(getGeometryOutput(None, xmlElement), xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _queue_manangement_worker(executor_reference, processes, pending_work_items, work_ids_queue, call_queue, result_queue, shutdown_process_event): \n    while True: \n      _add_call_item_to_queue(pending_work_items, work_ids_queue, call_queue) \n      try: \n         result_item = result_queue.get(block=True, timeout=0.1) \n      except queue.Empty: \n         executor = executor_reference() \n         if (_shutdown or (executor is None) or executor._shutdown_thread): \n            if (not pending_work_items): \n               shutdown_process_event.set() \n               for p in processes: \n                  p.join() \n               return \n         del executor \n      else: \n         work_item = pending_work_items[result_item.work_id] \n         del pending_work_items[result_item.work_id] \n         if result_item.exception: \n            work_item.future.set_exception(result_item.exception) \n         else: \n            work_item.future.set_result(result_item.result)",
        "line_count": 20,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def normalize_path(path): \n    return os.path.normcase(os.path.realpath(path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def repeat(stmt='pass', setup='pass', timer=default_timer, repeat=default_repeat, number=default_number): \n    return Timer(stmt, setup, timer).repeat(repeat, number)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def css(*args): \n    return '\\n'.join([stylesheet_link(url_for(('/static/style/%s.css?v=%s' % (name, server_starttime)))) for name in args])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def html_unescape(t): \n    return encode_decode.htmldecode(t)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reset(path, use_sudo=False, user=None): \n    with cd(path): \n      _run('bzr   revert   --quiet', use_sudo=use_sudo, user=user)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uses_shib(course): \n    return (course.enrollment_domain and course.enrollment_domain.startswith(settings.SHIBBOLETH_DOMAIN_PREFIX))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def squeeze_2x2(input_): \n    return squeeze_nxn(input_, n_factor=2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_scalar_zero(builder, value): \n    return _scalar_pred_against_zero(builder, value, functools.partial(builder.fcmp_ordered, '=='), '==')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_not_none(actual, msg=None): \n    assert (actual is not None), msg",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getPluginsDirectoryPath(): \n    return archive.getAbsoluteFolderPath(os.path.dirname(__file__), os.path.join('skeinforge_plugins', 'craft_plugins'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_qiime_temp_dir(): \n    return load_qiime_config()['temp_dir']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_disassociate(context, address): \n    return IMPL.floating_ip_disassociate(context, address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_account_id_from_arn(trail_arn): \n    return trail_arn.split(':')[4]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def matchmark(colitem, markexpr): \n    return eval(markexpr, {}, MarkMapping(colitem.keywords))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_connection_func(service, module=None): \n    return partial(get_connection, service, module=module)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def handler(signum, frame): \n    print",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookupNameservers(name, timeout=None): \n    return getResolver().lookupNameservers(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def query(url, **kwargs): \n    return salt.utils.http.query(url=url, opts=__opts__, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setpassword(name, password): \n    return update(name=name, password=password)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _wanmen_get_boke_id_by_json_topic_part(json_content, tIndex, pIndex): \n    return json_content[0]['Topics'][tIndex]['Parts'][pIndex]['ccVideoLink']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getKeyM(row, column, prefix=''): \n    return ('%sm%s%s' % (prefix, (row + 1), (column + 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_module_or_submodule(name, mod_or_submod): \n    return (name.startswith((mod_or_submod + '.')) or (name == mod_or_submod))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def substr_in_list(string_to_search_for, list_to_search): \n    return any(((string_to_search_for in s) for s in list_to_search))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def body(request): \n    return HttpResponse(request.body)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def findall(pattern, string, flags=0): \n    return _compile(pattern, flags).findall(string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wait(name, sfun=None): \n    return {'name': name, 'changes': {}, 'result': True, 'comment': ''}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def continuation_tokens(cli, width): \n    return [(Token, ((u'.' * (width - 1)) + u'   '))]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def model(proxy): \n    if proxy: \n      return {'model': _get_grain(proxy, 'model')}",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sampled_sequence_loss(inputs, targets, weights, loss_function, average_across_timesteps=True, average_across_batch=True, name=None): \n    with tf.op_scope(((inputs + targets) + weights), name, 'sampled_sequence_loss'): \n      cost = tf.reduce_sum(sequence_loss_by_example(inputs, targets, weights, loss_function, average_across_timesteps=average_across_timesteps)) \n      if average_across_batch: \n         batch_size = tf.shape(targets[0])[0] \n         return (cost / tf.cast(batch_size, tf.float32)) \n      else: \n         return cost",
        "line_count": 7,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def assert_all_instances(list_, class_, label='object'): \n    for obj in (list_ or []): \n      assert_instance(obj, class_, label='object')",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _writeFlattenedData(state, write, result): \n    while True: \n      try: \n         element = state.next() \n      except StopIteration: \n         result.callback(None) \n      except: \n         result.errback() \n      else: \n         if (type(element) is str): \n            write(element) \n            continue \n         else: \n            def cby(original): \n               _writeFlattenedData(state, write, result) \n               return original \n            element.addCallbacks(cby, result.errback) \n      break",
        "line_count": 17,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def process_sms_outbox(): \n    msg.process_outbox(contact_method='SMS')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_membership_push_to_timeline(sender, instance, created, **kwargs): \n    if (created and instance.user and (instance.user != instance.project.owner)): \n      created_datetime = instance.created_at \n      _push_to_timelines(instance.project, instance.user, instance, 'create', created_datetime)",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def GetMachineKey(): \n    return platform.node()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_gcd_project(): \n    return os.getenv(GCD_DATASET)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _getPropertyValue(schema, propertyName, options): \n    if (propertyName not in options): \n      paramsSchema = schema['properties'][propertyName] \n      if ('default' in paramsSchema): \n         options[propertyName] = paramsSchema['default'] \n      else: \n         options[propertyName] = None",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def factors(n): \n    for p in genprimes(): \n      while ((n != 1) and ((n % p) == 0)): \n         (yield p) \n         n /= p \n      if (n == 1): \n         break \n      if ((p * p) > n): \n         (yield n) \n         break",
        "line_count": 9,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def id_or_nid(song_dict): \n    return (song_dict.get(u'id') or song_dict[u'nid'])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def signal_new(signal_name, type, flags, return_type, param_types): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ldap2py(val): \n    return utf8_decode(val)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attrs(xml): \n    return lxml.html.fromstring(xml).attrib",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ISNOTNULL(x): \n    return (x != None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new_get_event_ts(ts_field): \n    return (lambda event: lookup_es_key(event[0], ts_field))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _database_to_isoformat(datetimeobj): \n    return (datetimeobj.strftime('%Y-%m-%dT%H:%M:%S.%f')[:(-3)] + 'Z')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_glance_metadata_copy_to_snapshot(context, snapshot_id, volume_id): \n    return IMPL.volume_glance_metadata_copy_to_snapshot(context, snapshot_id, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_finder(importer_type, distribution_finder): \n    _distribution_finders[importer_type] = distribution_finder",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _message_pb_to_mapping(message_pb): \n    return {'messageId': message_pb.message_id, 'data': message_pb.data, 'attributes': message_pb.attributes, 'publishTime': _pb_timestamp_to_rfc3339(message_pb.publish_time)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('mysql.user_create' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_client_id(length=30, chars=CLIENT_ID_CHARACTER_SET): \n    return generate_token(length, chars)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plot_evoked(evoked, picks=None, exclude='bads', unit=True, show=True, ylim=None, xlim='tight', proj=False, hline=None, units=None, scalings=None, titles=None, axes=None, gfp=False, window_title=None, spatial_colors=False, zorder='unsorted', selectable=True): \n    return _plot_evoked(evoked=evoked, picks=picks, exclude=exclude, unit=unit, show=show, ylim=ylim, proj=proj, xlim=xlim, hline=hline, units=units, scalings=scalings, titles=titles, axes=axes, plot_type='butterfly', gfp=gfp, window_title=window_title, spatial_colors=spatial_colors, zorder=zorder, selectable=selectable)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wc_mapper(document): \n    for word in tokenize(document): \n      (yield (word, 1))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _get_nonstar_args(func): \n    return func.func_code.co_varnames[:func.func_code.co_argcount]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gf_add_mul(f, g, h, p, K): \n    return gf_add(f, gf_mul(g, h, p, K), p, K)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _clear_search_indexes_storage(search_index_path): \n    if os.path.lexists(search_index_path): \n      try: \n         os.remove(search_index_path) \n      except OSError as e: \n         logging.warning('Failed   to   remove   search   indexes   file   %r:   %s', search_index_path, e)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def banner(): \n    if (not any(((_ in sys.argv) for _ in ('--version', '--pickled-options')))): \n      _ = BANNER \n      if ((not getattr(LOGGER_HANDLER, 'is_tty', False)) or ('--disable-coloring' in sys.argv)): \n         _ = re.sub('\\x1b.+?m', '', _) \n      elif IS_WIN: \n         coloramainit() \n      dataToStdout(_, forceOutput=True)",
        "line_count": 7,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def batch_normalization(x, mean, var, beta, gamma, epsilon=0.001): \n    return tf.nn.batch_normalization(x, mean, var, beta, gamma, epsilon)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def case_appointment_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rax_required_together(): \n    return [['api_key', 'username']]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def moon(): \n    return load('moon.png')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def train(): \n    with tf.Graph().as_default(): \n      global_step = tf.contrib.framework.get_or_create_global_step() \n      (images, labels) = cifar10.distorted_inputs() \n      logits = cifar10.inference(images) \n      loss = cifar10.loss(logits, labels) \n      train_op = cifar10.train(loss, global_step) \n      class _LoggerHook(tf.train.SessionRunHook, ): \n         'Logs   loss   and   runtime.' \n         def begin(self): \n            self._step = (-1) \n         def before_run(self, run_context): \n            self._step += 1 \n            self._start_time = time.time() \n            return tf.train.SessionRunArgs(loss) \n         def after_run(self, run_context, run_values): \n            duration = (time.time() - self._start_time) \n            loss_value = run_values.results \n            if ((self._step % 10) == 0): \n               num_examples_per_step = FLAGS.batch_size \n               examples_per_sec = (num_examples_per_step / duration) \n               sec_per_batch = float(duration) \n               format_str = '%s:   step   %d,   loss   =   %.2f   (%.1f   examples/sec;   %.3f   sec/batch)' \n               print((format_str % (datetime.now(), self._step, loss_value, examples_per_sec, sec_per_batch))) \n      with tf.train.MonitoredTrainingSession(checkpoint_dir=FLAGS.train_dir, hooks=[tf.train.StopAtStepHook(last_step=FLAGS.max_steps), tf.train.NanTensorHook(loss), _LoggerHook()], config=tf.ConfigProto(log_device_placement=FLAGS.log_device_placement)) as mon_sess: \n         while (not mon_sess.should_stop()): \n            mon_sess.run(train_op)",
        "line_count": 26,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def TagByteSize(field_number): \n    return _VarUInt64ByteSizeNoTag(PackTag(field_number, 0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def short_float_fmt(x): \n    return u'{0:f}'.format(x).rstrip(u'0').rstrip(u'.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def teardown_test_show_dir(): \n    if os.path.exists(SHOW_DIR): \n      shutil.rmtree(SHOW_DIR)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_trace(frame=None): \n    TerminalPdb().set_trace((frame or sys._getframe().f_back))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def clean_up_joinables(names): \n    for name in names: \n      if os.path.exists(name): \n         logging.debug('Deleting   %s', name) \n         try: \n            os.remove(name) \n         except: \n            pass \n      name1 = (name + '.1') \n      if os.path.exists(name1): \n         logging.debug('Deleting   %s', name1) \n         try: \n            os.remove(name1) \n         except: \n            pass",
        "line_count": 14,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def asrun(pl, ascript): \n    return run_cmd(pl, [u'osascript', u'-'], ascript)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def target_internal_dependencies(target): \n    for dep in target.dependencies: \n      if isinstance(dep, Jarable): \n         (yield dep) \n      else: \n         for childdep in target_internal_dependencies(dep): \n            (yield childdep)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def disable_signing(**kwargs): \n    return botocore.UNSIGNED",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rebuild_all_translation_files(): \n    for lang in get_all_languages(): \n      for app in frappe.get_all_apps(): \n         write_translations_file(app, lang)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def format_value(val): \n    return formatting._format_value(val, config.MAX_REPR, config.MAX_DEPTH)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def urlunquote_plus(quoted_url): \n    return force_text(urllib_parse.unquote_plus(force_str(quoted_url)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chunkreadable(iter, chunk_size=65536): \n    return (chunkiter(iter, chunk_size) if hasattr(iter, 'read') else iter)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_date_format(format='medium', locale=LC_TIME): \n    return Locale.parse(locale).date_formats[format]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetLocalUser(): \n    return (pwd.getpwuid(os.getuid())[0] or os.getlogin())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def LocalPathToCanonicalPath(path): \n    return path",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def local_bitwidth(): \n    return (struct.calcsize('P') * 8)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _device_for_path(expected_backing_file): \n    for (device_file, backing_file) in _losetup_list(): \n      if (expected_backing_file == backing_file): \n         return device_file",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def network_create_safe(context, values): \n    return IMPL.network_create_safe(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Reset(*args): \n    for mock in args: \n      mock._Reset()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_release(): \n    return VERSION[6]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cgsnapshot_destroy(context, cgsnapshot_id): \n    return IMPL.cgsnapshot_destroy(context, cgsnapshot_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def task_enable_updates_testing(distribution): \n    raise DistributionNotSupported(distribution=distribution)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def verify_int(signed, ekey, n): \n    return encrypt_int(signed, ekey, n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def saturate(color): \n    return set_hls_values(color, s=1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_declaration_specifiers_5(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def corpus(path, encoding='utf-8'): \n    for s in open(path, encoding=encoding): \n      s = map((lambda w: w.split('/')), s.strip().split('   ')) \n      s = map((lambda w: (w[0].replace('&slash;', '/'), w[1])), s) \n      (yield s)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewDerivation(elementNode, prefix, sideLength): \n    return BevelDerivation(elementNode, prefix, sideLength)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _hashed_key(key): \n    return md5(key.encode(u'utf-8')).hexdigest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def call(*args, **kwargs): \n    return Popen(*args, **kwargs).wait()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delval(key, destructive=False): \n    setval(key, None, destructive=destructive)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=RHTMLLexer(), buf_class=RHTMLBuffer, cile_driver_class=RHTMLCILEDriver, is_cpln_lang=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_policies(profile=None, api_key=None): \n    return salt.utils.pagerduty.list_items('escalation_policies', 'id', __salt__['config.option'](profile), api_key, opts=__opts__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_cors_middleware_defaults(): \n    cors.set_defaults(allow_headers=['X-Auth-Token', 'X-Identity-Status', 'X-Roles', 'X-Service-Catalog', 'X-User-Id', 'X-Tenant-Id', 'X-OpenStack-Request-ID'], expose_headers=['X-Auth-Token', 'X-Subject-Token', 'X-Service-Token', 'X-OpenStack-Request-ID', 'OpenStack-Volume-microversion'], allow_methods=['GET', 'PUT', 'POST', 'DELETE', 'PATCH'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def network_count_reserved_ips(context, network_id): \n    return IMPL.network_count_reserved_ips(context, network_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _reg_dir(): \n    return os.path.join(__opts__['cachedir'], 'thorium')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def status_show(context, data_dict): \n    return {'site_title': config.get('ckan.site_title'), 'site_description': config.get('ckan.site_description'), 'site_url': config.get('ckan.site_url'), 'ckan_version': ckan.__version__, 'error_emails_to': config.get('email_to'), 'locale_default': config.get('ckan.locale_default'), 'extensions': config.get('ckan.plugins').split()}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_master(saltenv='base', prefix=''): \n    return _client().file_list(saltenv, prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def standard_normal(size=None, dtype=float): \n    return normal(size=size, dtype=dtype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def notify(conf, context, topic, msg, envelope): \n    return rpc_amqp.notify(conf, context, topic, msg, rpc_amqp.get_connection_pool(conf, Connection), envelope)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setLevel(level=0): \n    ILogger.level = level",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def directory_exists(path): \n    return os.path.isdir(os.path.expanduser(path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_data_id(annotation): \n    if isinstance(annotation, HtmlTag): \n      return annotation.attributes[TAGID]",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def create_local_srs(): \n    for host_ref in _db_content['host'].keys(): \n      create_sr(name_label='Local   storage', type='lvm', other_config={'i18n-original-value-name_label': 'Local   storage', 'i18n-key': 'local-storage'}, physical_size=40000, physical_utilisation=20000, virtual_allocation=10000, host_ref=host_ref) \n      create_sr(name_label='Local   storage   ISO', type='iso', other_config={'i18n-original-value-name_label': 'Local   storage   ISO', 'i18n-key': 'local-storage-iso'}, physical_size=80000, physical_utilisation=40000, virtual_allocation=80000, host_ref=host_ref)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def inverse_sine_transform(F, k, x, **hints): \n    return InverseSineTransform(F, k, x).doit(**hints)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_uptime_hours(sys_uptime): \n    return ((int(sys_uptime) / 100.0) / 3600.0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def runmodule(name='__main__', **kw): \n    main(defaultTest=name, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_centos_or_rhel(distribution): \n    return distribution.startswith(('centos-', 'rhel-'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def name_to_pathname(name): \n    return name.replace(':', '/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def id_(): \n    return {'id': __opts__.get('id', '')}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gcs_get_request(url): \n    return requests.request('GET', url, verify=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_cae_basic(): \n    with open(os.path.join(yaml_dir_path, 'cae.yaml')) as f: \n      yaml_string = f.read() \n      train = yaml_parse.load(yaml_string) \n      train.main_loop()",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ada_sk_estimator(): \n    check_estimator(ADASYN)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ramp(x=None, v_min=0, v_max=1, name=None): \n    return tf.clip_by_value(x, clip_value_min=v_min, clip_value_max=v_max, name=name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fill_diagonal_offset(a, val, offset): \n    return fill_diagonal_offset_(a, val, offset)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _module(language): \n    return _modules.setdefault(language, __import__(language, globals(), {}, [], (-1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def request(method, url, **kwargs): \n    with sessions.Session() as session: \n      return session.request(method=method, url=url, **kwargs)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_field_id(p): \n    p[0] = p[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safe_dump_all(documents, stream=None, **kwds): \n    return dump_all(documents, stream, Dumper=SafeDumper, **kwds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _pb_timestamp_to_datetime(timestamp_pb): \n    return (_EPOCH + datetime.timedelta(seconds=timestamp_pb.seconds, microseconds=(timestamp_pb.nanos / 1000.0)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def total_result_to_dict(total): \n    return {'meta': extract_meta(total), 'duration': _get_duration(world), 'features': [extract_feature_data(feature_result) for feature_result in total.feature_results]}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def device_exists(device): \n    return os.path.exists(('/sys/class/net/%s' % device))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _deserialize_blobs(artifact_type, blobs_from_db, artifact_properties): \n    for (blob_name, blob_value) in six.iteritems(blobs_from_db): \n      if (not blob_value): \n         continue \n      if isinstance(artifact_type.metadata.attributes.blobs.get(blob_name), declarative.ListAttributeDefinition): \n         val = [] \n         for v in blob_value: \n            b = definitions.Blob(size=v['size'], locations=v['locations'], checksum=v['checksum'], item_key=v['item_key']) \n            val.append(b) \n      elif (len(blob_value) == 1): \n         val = definitions.Blob(size=blob_value[0]['size'], locations=blob_value[0]['locations'], checksum=blob_value[0]['checksum'], item_key=blob_value[0]['item_key']) \n      else: \n         raise exception.InvalidArtifactPropertyValue(message=_('Blob   %(name)s   may   not   have   multiple   values'), name=blob_name) \n      artifact_properties[blob_name] = val",
        "line_count": 13,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def get_instance_value(label): \n    return _check_range_and_return('instance', label, (-1), 9, (-1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configuration_tag(api): \n    return api.persistence_service.configuration_hash()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_expire(name, expire): \n    return __salt__['user.update'](name, expiration_date=expire)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _yield_instance_profiles(conn): \n    for resp in _repeat(conn.list_instance_profiles): \n      for profile_data in resp['instance_profiles']: \n         profile_name = profile_data['instance_profile_name'] \n         if profile_data['roles']: \n            role_data = profile_data['roles']['member'] \n            (role_name, role_document) = _get_role_name_and_document(role_data) \n         else: \n            role_name = None \n            role_document = None \n         (yield (profile_name, role_name, role_document))",
        "line_count": 10,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def getDeprecated(self, decorators): \n    for a in decorators: \n      if isinstance(a, ast.CallFunc): \n         decorator = a.asList() \n         if isinstance(decorator[0], ast.Getattr): \n            getAttr = decorator[0].asList() \n            name = getAttr[0].name \n            fn = ((self.expandName(name) + '.') + getAttr[1]) \n         else: \n            fn = self.expandName(decorator[0].name) \n         if (fn == 'twisted.python.deprecate.deprecated'): \n            try: \n               self._deprecated_info = deprecatedToUsefulText(self.name, decorator) \n            except AttributeError: \n               pass",
        "line_count": 14,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def context_get(stack, name): \n    return stack.get(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _valid_code(seed, drift=0): \n    return totp(key=seed, t=(int(time.time()) + (drift * 30)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(env, args, db): \n    with sentry(env): \n      upsert(env, args, db)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_type_get_all(context, inactive=False, filters=None, marker=None, limit=None, sort_keys=None, sort_dirs=None, offset=None, list_result=False): \n    return IMPL.group_type_get_all(context, inactive, filters, marker=marker, limit=limit, sort_keys=sort_keys, sort_dirs=sort_dirs, offset=offset, list_result=list_result)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _json_decode_datetime(d): \n    return datetime.datetime.strptime(d['isostr'], _DATETIME_FORMAT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def no_setting_conf_directly_in_tests(logical_line, filename): \n    if ('nova/tests/' in filename): \n      res = conf_attribute_set_re.match(logical_line) \n      if res: \n         (yield (0, 'N320:   Setting   CONF.*   attributes   directly   in   tests   is   forbidden.   Use   self.flags(option=value)   instead'))",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def stats_aggregate(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def float_format(number): \n    return ('%.3f' % number).rstrip('0').rstrip('.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_in_same_dir(ref_file, desired_file): \n    return os.path.join(*(split_path(ref_file)[:(-1)] + [desired_file]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reset_orig(): \n    mpl.rcParams.update(_orig_rc_params)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addressable(type_constraint): \n    return _addressable_wrapper(AddressableDescriptor, type_constraint)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def failureAsJSON(failure): \n    return dict(failure.__getstate__(), type=dict(__module__=failure.type.__module__, __name__=failure.type.__name__))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def showHttpErrorCodes(): \n    if kb.httpErrorCodes: \n      warnMsg = 'HTTP   error   codes   detected   during   run:\\n' \n      warnMsg += ',   '.join((('%d   (%s)   -   %d   times' % (code, (httplib.responses[code] if (code in httplib.responses) else '?'), count)) for (code, count) in kb.httpErrorCodes.items())) \n      logger.warn(warnMsg) \n      if any((((str(_).startswith('4') or str(_).startswith('5')) and (_ != httplib.INTERNAL_SERVER_ERROR) and (_ != kb.originalCode)) for _ in kb.httpErrorCodes.keys())): \n         msg = 'too   many   4xx   and/or   5xx   HTTP   error   codes   ' \n         msg += 'could   mean   that   some   kind   of   protection   is   involved   (e.g.   WAF)' \n         logger.debug(msg)",
        "line_count": 8,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def _yield_all_instances(emr_conn, cluster_id, *args, **kwargs): \n    for resp in _repeat(emr_conn.list_instances, cluster_id, *args, **kwargs): \n      for instance in getattr(resp, 'instances', []): \n         (yield instance)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def p_assignment_operator(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run(verbosity=1): \n    TextTestRunner(verbosity=verbosity).run(suite())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_user_vars(registry, xml_parent, data): \n    XML.SubElement(xml_parent, 'org.jenkinsci.plugins.builduser.BuildUser')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def applyValueGettersToContainer(container): \n    _applyValueGettersImpl(container=container, currentObj=container, recursionStack=[])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_collectors_from_module(mod): \n    for attrname in dir(mod): \n      attr = getattr(mod, attrname) \n      if (inspect.isclass(attr) and issubclass(attr, Collector) and (attr != Collector)): \n         if attrname.startswith('parent_'): \n            continue \n         fqcn = '.'.join([mod.__name__, attrname]) \n         try: \n            cls = load_dynamic_class(fqcn, Collector) \n            (yield (cls.__name__, cls)) \n         except Exception: \n            logger.error('Failed   to   load   Collector:   %s.   %s', fqcn, traceback.format_exc()) \n            continue",
        "line_count": 12,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def cluster_distance(cluster1, cluster2, distance_agg=min): \n    return distance_agg([distance(input1, input2) for input1 in get_values(cluster1) for input2 in get_values(cluster2)])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _extract_nested_case(case_node, stmts_list): \n    if isinstance(case_node.stmts[0], (c_ast.Case, c_ast.Default)): \n      stmts_list.append(case_node.stmts.pop()) \n      _extract_nested_case(stmts_list[(-1)], stmts_list)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def remove_like(doctype, name): \n    frappe.delete_doc(u'Communication', [c.name for c in frappe.get_all(u'Communication', filters={u'communication_type': u'Comment', u'reference_doctype': doctype, u'reference_name': name, u'owner': frappe.session.user, u'comment_type': u'Like'})], ignore_permissions=True)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getCraftSequence(): \n    return 'chop,preface,outset,mill,multiply,drill,lift,flow,feed,home,lash,fillet,limit,dimension,unpause,export'.split(',')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compare_versions(ver1=u'', oper=u'==', ver2=u''): \n    return salt.utils.compare_versions(ver1, oper, ver2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resource_id_from_record_tuple(record): \n    return record[0]['resource_id']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_project_name(project_id, projects): \n    for project in projects: \n      if (project_id == project.id): \n         return project.name",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def removePixelTableFromPixelTable(pixelDictionaryToBeRemoved, pixelDictionaryToBeRemovedFrom): \n    removeElementsFromDictionary(pixelDictionaryToBeRemovedFrom, pixelDictionaryToBeRemoved.keys())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ones_and_zeros(digits): \n    return bin(random.getrandbits(digits)).lstrip('0b').zfill(digits)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reload_doctype(doctype, force=False, reset_permissions=False): \n    reload_doc(scrub(db.get_value(u'DocType', doctype, u'module')), u'doctype', scrub(doctype), force=force, reset_permissions=reset_permissions)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_portable_base(): \n    if isportable: \n      return os.path.dirname(os.path.dirname(os.environ['CALIBRE_PORTABLE_BUILD']))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _validateChecksum(sentence): \n    if (sentence[(-3):(-2)] == '*'): \n      (reference, source) = (int(sentence[(-2):], 16), sentence[1:(-3)]) \n      computed = reduce(operator.xor, [ord(x) for x in iterbytes(source)]) \n      if (computed != reference): \n         raise base.InvalidChecksum(('%02x   !=   %02x' % (computed, reference)))",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def read_raw_fif(fname, allow_maxshield=False, preload=False, add_eeg_ref=False, verbose=None): \n    return Raw(fname=fname, allow_maxshield=allow_maxshield, preload=preload, add_eeg_ref=add_eeg_ref, verbose=verbose)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_fields(node): \n    for field in node._fields: \n      try: \n         (yield (field, getattr(node, field))) \n      except AttributeError: \n         pass",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def htmldecode(text): \n    return entity_sub(decode_entity, text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_default_currency(): \n    return settings.OSCAR_DEFAULT_CURRENCY",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def crelu(x, axis=1): \n    return CReLU(axis=axis)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_file_contents(filepath, raw_bytes=False, mode='r'): \n    with open(filepath, mode) as f: \n      return (f.read() if raw_bytes else f.read().decode('utf-8'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def drop_x_cc_block_id(store): \n    store.sql('DROP   INDEX   x_cc_block_id')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unpowered(name): \n    return _virt_call(name, 'stop', 'unpowered', 'Machine   has   been   powered   off')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setvcpus(vm_, vcpus): \n    with _get_xapi_session() as xapi: \n      vm_uuid = _get_label_uuid(xapi, 'VM', vm_) \n      if (vm_uuid is False): \n         return False \n      try: \n         xapi.VM.set_VCPUs_number_live(vm_uuid, vcpus) \n         return True \n      except Exception: \n         return False",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_info_extractor(ie_name): \n    return globals()[(ie_name + u'IE')]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rotate_token(request): \n    request.META.update({u'CSRF_COOKIE_USED': True, u'CSRF_COOKIE': _get_new_csrf_key()})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_imdbs(): \n    return __sets.keys()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def usage(filename): \n    print ('%s   [-c   <config   file>]   <output.js>   <directory>   [...]' % filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plan(): \n    return s3_rest_controller(rheader=s3db.proc_rheader, hide_filter=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isFinite(value): \n    return (_exponent(value) != 2047)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log_buffer_contents(): \n    return logs_buffer().contents()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cgconfig_start(): \n    return service_cgconfig_control('start')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connections_support_transactions(): \n    return all((conn.features.supports_transactions for conn in connections.all()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def active_code(): \n    return get_link_suffix('viewfinder')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new_module(name): \n    return types.ModuleType(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mean(name, num, minimum=0, maximum=0, ref=None): \n    return calc(name, num, 'mean', ref)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_dummy_image(_unused): \n    return ContentFile(ImageField()._make_data({'color': 'blue', 'width': 50, 'height': 50, 'format': 'PNG'}), 'test.png')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_interface_version(): \n    return INTERFACE_VERSION",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def b64w(b): \n    return string.translate(b, B64W_TRANSLATE, B64C_STRIP)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def package(pkg_name, update=False, options=None, version=None): \n    if (not is_installed(pkg_name)): \n      install(pkg_name, update=update, options=options, version=version)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def PackInteger(name, value, pbvalue): \n    pbvalue.set_int64value(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sig_mult(s, m): \n    return sig(monomial_mul(s[0], m), s[1])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_test_environment(): \n    django_mako.render_to_string = django_mako.render_to_string_test",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_hexsha(hex, error_msg): \n    if (not valid_hexsha(hex)): \n      raise ObjectFormatException(('%s   %s' % (error_msg, hex)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def arp_cache(attrs=None, where=None): \n    return _osquery_cmd(table='arp_cache', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _access_rule(method, ip=None, port=None, proto='tcp', direction='in', port_origin='d', ip_origin='d', comment=''): \n    if _status_csf(): \n      if (ip is None): \n         return {'error': 'You   must   supply   an   ip   address   or   CIDR.'} \n      if (port is None): \n         args = _build_args(method, ip, comment) \n         return __csf_cmd(args) \n      else: \n         if (method not in ['allow', 'deny']): \n            return {'error': 'Only   allow   and   deny   rules   are   allowed   when   specifying   a   port.'} \n         return _access_rule_with_port(method=method, ip=ip, port=port, proto=proto, direction=direction, port_origin=port_origin, ip_origin=ip_origin, comment=comment)",
        "line_count": 10,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def mkdirs(path): \n    if (not os.path.isdir(path)): \n      try: \n         os.makedirs(path) \n      except OSError as err: \n         if ((err.errno != errno.EEXIST) or (not os.path.isdir(path))): \n            raise",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def literal_column(text, type_=None): \n    return ColumnClause(text, type_=type_, is_literal=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_immunohistochemistry(): \n    data.immunohistochemistry()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_disassociate(context, address): \n    return IMPL.floating_ip_disassociate(context, address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_nodes_select(call=None): \n    return salt.utils.cloud.list_nodes_select(list_nodes_full('function'), __opts__['query.selection'], call)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def capture_signals(): \n    return CaptureSignals(ALL_SIGNALS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def permission_required(perm, login_url=None): \n    return user_passes_test((lambda u: u.has_perm(perm)), login_url=login_url)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def scale_by_constant(builder, val, factor): \n    return builder.mul(val, Constant.int(TIMEDELTA64, factor))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_get_all_bmc_by_host(context, host): \n    return IMPL.service_get_all_bmc_by_host(context, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def category_list(request, template_name='blog/category_list.html', **kwargs): \n    return list_detail.object_list(request, queryset=Category.objects.all(), template_name=template_name, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_qpoint_pos(pos): \n    return (pos.x(), pos.y())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_abstract_declarator_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_get_all(context): \n    return IMPL.snapshot_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dictsortreversed(value, arg): \n    return sorted(value, key=Variable(arg).resolve, reverse=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def OnMismatch(function, matcher): \n    return _OnMismatch(_function=function, _matcher=matcher)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _match_impl(expr, op, other, **kw): \n    return _boolean_compare(expr, operators.match_op, _check_literal(expr, operators.match_op, other), result_type=type_api.MATCHTYPE, negate=(operators.notmatch_op if (op is operators.match_op) else operators.match_op), **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_session(stored_access_token): \n    return get_oauth_service().get_session(json.loads(stored_access_token))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_sqrt(expr): \n    return (expr.is_Pow and expr.exp.is_Rational and (abs(expr.exp) is S.Half))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def softmax(x): \n    return theano.tensor.nnet.softmax(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_client(options): \n    return glance.image_cache.client.get_client(host=options.host, port=options.port, username=options.os_username, password=options.os_password, tenant=options.os_tenant_name, auth_url=options.os_auth_url, auth_strategy=options.os_auth_strategy, auth_token=options.os_auth_token, region=options.os_region_name, insecure=options.insecure)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_update_dict(update): \n    return {'id': update['id'], 'date': update['date'], 'content': update['content']}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def textinfo_from_path(path, encoding=None, follow_symlinks=False, quick_determine_lang=False): \n    return TextInfo.init_from_path(path, encoding=encoding, follow_symlinks=follow_symlinks, quick_determine_lang=quick_determine_lang)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_serializable(records): \n    for r in records: \n      r.msg = r.getMessage() \n      r.args = ()",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_repository_by_name(app, sa_session, repo_name): \n    return sa_session.query(app.model.Repository).filter_by(name=repo_name).one()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_trending(obj, region=None): \n    return _property_value_by_region(obj, region=region, property='trending')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getElementsPath(subName=''): \n    return getJoinedPath(getGeometryUtilitiesPath('evaluate_elements'), subName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rewrite_links(input_html, callback, **kwargs): \n    return lxml_rewrite_links((u'<div>%s</div>' % input_html), callback, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def version_requirement(version): \n    return (version >= REQUIRED_VERSION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_tensor(x, message=''): \n    return tf.Print(x, [x], message)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_error_patch(result): \n    return make_instancemethod(TextTestResult.addError, result)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _log_backport(ovo, target_version): \n    if (target_version and (target_version != ovo.VERSION)): \n      LOG.debug('Backporting   %(obj_name)s   from   version   %(src_vers)s   to   version   %(dst_vers)s', {'obj_name': ovo.obj_name(), 'src_vers': ovo.VERSION, 'dst_vers': target_version})",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def lookupZone(name, timeout=None): \n    return getResolver().lookupZone(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gettempdirb(): \n    return _os.fsencode(gettempdir())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def firebase_delete(path): \n    (response, content) = _get_http().request(path, method='DELETE')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DEFINE_float(name, default, help): \n    CONFIG.AddOption(type_info.Float(name=name, default=default, description=help))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def renew_hook(config, domains, lineage_path): \n    if config.renew_hook: \n      if (not config.dry_run): \n         os.environ['RENEWED_DOMAINS'] = '   '.join(domains) \n         os.environ['RENEWED_LINEAGE'] = lineage_path \n         logger.info('Running   renew-hook   command:   %s', config.renew_hook) \n         _run_hook(config.renew_hook) \n      else: \n         logger.warning('Dry   run:   skipping   renewal   hook   command:   %s', config.renew_hook)",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_disconnect_all_invalid(timer): \n    with pytest.raises(TypeError): \n      timer.timeout.disconnect()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def detect_gzip(contents): \n    return (contents[:2] == '\\x1f\\x8b')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def general_context(request): \n    return {'game_name': GAME_NAME, 'game_slogan': GAME_SLOGAN, 'evennia_userapps': PLAYER_RELATED, 'evennia_entityapps': GAME_ENTITIES, 'evennia_setupapps': GAME_SETUP, 'evennia_connectapps': CONNECTIONS, 'evennia_websiteapps': WEBSITE, 'webclient_enabled': WEBCLIENT_ENABLED, 'websocket_enabled': WEBSOCKET_CLIENT_ENABLED, 'websocket_port': WEBSOCKET_PORT, 'websocket_url': WEBSOCKET_URL}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_method(obj, name): \n    return callable(getattr(obj, name, None))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def configure_codelab_igor_jenkins(): \n    YamlBindings.update_yml_source('/opt/spinnaker/config/spinnaker-local.yml', {'jenkins': {'defaultMaster': {'name': 'CodelabJenkins', 'baseUrl': 'http://localhost:9090', 'username': 'admin', 'password': 'admin'}}, 'igor': {'enabled': 'true'}})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sessions(app, url='http://localhost:8080/manager', timeout=180): \n    return _simple_cmd('sessions', app, url, timeout=timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_dataset(): \n    return (np.vstack((np.vstack((_generate_vector(), (_generate_vector() + 100))).T, np.vstack((_generate_vector(), _generate_vector())).T)), np.hstack((np.zeros(1000), np.ones(1000))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_node_get(context, compute_id): \n    return IMPL.compute_node_get(context, compute_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _many_to_one(input_dict): \n    return dict(((key, val) for (keys, val) in input_dict.items() for key in keys))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def slstm(c_prev1, c_prev2, x1, x2): \n    return SLSTM()(c_prev1, c_prev2, x1, x2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_method_simple_ops(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getmtime(filename): \n    return os.stat(filename).st_mtime",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cookie_is_encoded(data): \n    return bool((data.startswith(tob('!')) and (tob('?') in data)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_ostypes(): \n    return list_items('ostypes', True, 'ID')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _create_temporary(path): \n    return _create_carefully(('%s.%s.%s.%s' % (path, int(time.time()), socket.gethostname(), os.getpid())))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def data_to_token_ids(data_path, target_path, vocabulary_path, tokenizer=None, normalize_digits=True): \n    if (not gfile.Exists(target_path)): \n      print(('Tokenizing   data   in   %s' % data_path)) \n      (vocab, _) = initialize_vocabulary(vocabulary_path) \n      with gfile.GFile(data_path, mode='rb') as data_file: \n         with gfile.GFile(target_path, mode='w') as tokens_file: \n            counter = 0 \n            for line in data_file: \n               counter += 1 \n               if ((counter % 100000) == 0): \n                  print(('      tokenizing   line   %d' % counter)) \n               token_ids = sentence_to_token_ids(tf.compat.as_bytes(line), vocab, tokenizer, normalize_digits) \n               tokens_file.write(('   '.join([str(tok) for tok in token_ids]) + '\\n'))",
        "line_count": 12,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def getCraftedText(fileName, text='', liftRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), liftRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_ipv4(ipv4): \n    return netaddr.valid_ipv4(ipv4)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def server_power(status, host=None, admin_username=None, admin_password=None, module=None): \n    return __execute_cmd('serveraction   {0}'.format(status), host=host, admin_username=admin_username, admin_password=admin_password, module=module)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def WCLPRICE(barDs, count): \n    return call_talib_with_hlc(barDs, count, talib.WCLPRICE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def outputter(data): \n    return data",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def scatter_add(a, slices, value): \n    a.scatter_add(slices, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_candidate(version): \n    return version[_get_candidate_pos(version)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def detect(code): \n    return (re.search('^var   _0x[a-f0-9]+   ?\\\\=   ?\\\\[', code) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_all_thread_participants(exploration_id, thread_id): \n    return set([m.author_id for m in get_messages(exploration_id, thread_id) if user_services.is_user_registered(m.author_id)])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def request_server_info(server): \n    if (not server.request): \n      server.request = True \n      Thread(target=_retrieve_info, args=(server,)).start()",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def predict_false(args): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lineno(loc, strg): \n    return (strg.count('\\n', 0, loc) + 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def present(subset=None, show_ipv4=False): \n    return list_state(subset=subset, show_ipv4=show_ipv4)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_node_delete(context, compute_id): \n    return IMPL.compute_node_delete(context, compute_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_mobile(ntype): \n    return ((ntype == PhoneNumberType.MOBILE) or (ntype == PhoneNumberType.FIXED_LINE_OR_MOBILE) or (ntype == PhoneNumberType.PAGER))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def makeFakeClient(clientProtocol): \n    return FakeTransport(clientProtocol, isServer=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def users(): \n    return _psplatform.users()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isvalid_identifier(s): \n    return ((s is not None) and (not iskeyword(s)) and (re.match('^[_a-zA-Z][_a-zA-Z0-9]*$', s) is not None))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_palindrom(sequence): \n    return (str(sequence) == str(sequence.reverse_complement()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addXIntersectionIndexesFromXIntersections(index, xIntersectionIndexList, xIntersections): \n    for xIntersection in xIntersections: \n      xIntersectionIndexList.append(XIntersectionIndex(index, xIntersection))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def simplify(units): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def word_probabilities(counts, total_spams, total_non_spams, k=0.5): \n    return [(w, ((spam + k) / (total_spams + (2 * k))), ((non_spam + k) / (total_non_spams + (2 * k)))) for (w, (spam, non_spam)) in counts.items()]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def run_pre_commit_script(component, translation, filename): \n    run_hook(component, translation, component.pre_commit_script, None, filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def category_structure(category, site): \n    return {'description': category.title, 'htmlUrl': ('%s://%s%s' % (PROTOCOL, site.domain, category.get_absolute_url())), 'rssUrl': ('%s://%s%s' % (PROTOCOL, site.domain, reverse('zinnia:category_feed', args=[category.tree_path]))), 'categoryId': category.pk, 'parentId': ((category.parent and category.parent.pk) or 0), 'categoryDescription': category.description, 'categoryName': category.title}",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def trim_makeopts(value): \n    return trim_var('MAKEOPTS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def binary_cross_entropy(output, target, epsilon=1e-08, name='bce_loss'): \n    with tf.name_scope(name): \n      return tf.reduce_mean((- ((target * tf.log((output + epsilon))) + ((1.0 - target) * tf.log(((1.0 - output) + epsilon))))))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPluginsDirectoryPath(): \n    return archive.getAbsoluteFrozenFolderPath(__file__, 'xml_plugins')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_iteration_statement_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rgb2yiq(rgb): \n    return _convert(yiq_from_rgb, rgb)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __gen_rtag(): \n    return os.path.join(__opts__['cachedir'], 'pkg_refresh')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exception_str(self, ex): \n    return ('in   %s\\n::   %s' % (ex.file, ',   '.join(ex.args)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def simulate_options(app, path, **kwargs): \n    return simulate_request(app, 'OPTIONS', path, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_windows(): \n    return sys.platform.startswith(u'win')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return LashRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SplitGeneratedFileName(fname): \n    return tuple(fname.split('x', 4))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def discard_config(): \n    return __proxy__['napalm.call']('discard_config', **{})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_plain_byte_array(file_obj, count): \n    return [file_obj.read(struct.unpack('<i', file_obj.read(4))[0]) for i in range(count)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def validate_value(tokens): \n    for token in tokens: \n      type_ = token.type \n      if (type_ == u'{'): \n         validate_block(token.content, u'property   value') \n      else: \n         validate_any(token, u'property   value')",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def assoc_in(d, keys, value, factory=dict): \n    return update_in(d, keys, (lambda x: value), value, factory)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user_can_edit_setting_type(user, model): \n    return user.has_perm(u'{}.change_{}'.format(model._meta.app_label, model._meta.model_name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def teardown_databases(old_config, verbosity, parallel=0, keepdb=False): \n    for (connection, old_name, destroy) in old_config: \n      if destroy: \n         if (parallel > 1): \n            for index in range(parallel): \n               connection.creation.destroy_test_db(number=(index + 1), verbosity=verbosity, keepdb=keepdb) \n         connection.creation.destroy_test_db(old_name, verbosity, keepdb)",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def candlestick2_ochl(ax, opens, closes, highs, lows, width=4, colorup=u'k', colordown=u'r', alpha=0.75): \n    candlestick2_ohlc(ax, opens, highs, lows, closes, width=width, colorup=colorup, colordown=colordown, alpha=alpha)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def crc_finalize(crc): \n    return (crc & _MASK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def string_concat(*strings): \n    return ''.join([str(el) for el in strings])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def vstack(tup): \n    return concatenate([cupy.atleast_2d(m) for m in tup], 0)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def protocol_from_http(protocol_str): \n    return (int(protocol_str[5]), int(protocol_str[7]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def episode_by_id(episode_id, session=None): \n    return session.query(Episode).filter((Episode.id == episode_id)).one()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def a_product(x, y, z=1): \n    return ((x * y) * z)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def i16le(c, o=0): \n    return unpack('<H', c[o:(o + 2)])[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(linter): \n    linter.register_checker(ConfigChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ipv4_to_bin(ip): \n    return addrconv.ipv4.text_to_bin(ip)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subtract_mean_percentile(image, selem, out=None, mask=None, shift_x=False, shift_y=False, p0=0, p1=1): \n    return _apply(percentile_cy._subtract_mean, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y, p0=p0, p1=p1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_count(source): \n    return source.get_while(DIGITS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices((VeraBinarySensor(device, VERA_CONTROLLER) for device in VERA_DEVICES['binary_sensor']))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def bptrs(a): \n    return pycuda.gpuarray.arange(a.ptr, (a.ptr + (a.shape[0] * a.strides[0])), a.strides[0], dtype=cublas.ctypes.c_void_p)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_jframe_request(request): \n    return (request.META.get('HTTP_X_HUE_JFRAME') or (request.GET.get('format') == 'embed'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def pytest_ignore_collect(path, config): \n    return (('contrib/appengine' in str(path)) and (config.getoption('gae_sdk') is None))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_states(saltenv='base'): \n    return _client().list_states(saltenv)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def int2long(val): \n    return ((val + 4294967296) - 4294967296)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_metadata(**kwargs): \n    return refresh_db(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_class_path(cls): \n    return ':'.join([cls.__module__, cls.__name__])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inv(a): \n    return Inv()(a)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_power2(num): \n    return (isinstance(num, numbers.Integral) and (num > 0) and (not (num & (num - 1))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getNavigationLine(contentsLinkText, previousLinkText, nextLinkText): \n    return ('<p>\\n%s   /   %s   /   %s\\n</p>\\n' % (previousLinkText, nextLinkText, contentsLinkText))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode, prefix, sideLength): \n    return OutsetDerivation(elementNode, prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_nodes(): \n    return {}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_uid(item): \n    return (hasattr(item, 'uid') and item.uid.value)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def multiply_timedelta(interval, number): \n    return timedelta(seconds=(timedelta_total_seconds(interval) * number))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _organize_states_for_post_update(base_mapper, states, uowtransaction): \n    return _connections_for_states(base_mapper, uowtransaction, states)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exit(): \n    raise SystemExit",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def global2_view(request): \n    return Response('global2')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _tag_added(sender, question_id, tag_name, **kwargs): \n    if (tag_name == config.ESCALATE_TAG_NAME): \n      escalate_question.delay(question_id)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def send_event(event, users): \n    queue_json_publish('notify_tornado', dict(event=event, users=users), send_notification_http)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assoc_laguerre(x, n, k=0.0): \n    return orthogonal.eval_genlaguerre(n, k, x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unserializeObject(value): \n    return (base64unpickle(value) if value else None)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def bucketize(point, bucket_size): \n    return (bucket_size * math.floor((point / bucket_size)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _default_ret(name): \n    return {'name': name, 'result': False, 'comment': '', 'changes': {}}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def educateBackticks(s): \n    return s.replace('``', '&#8220;').replace(\"''\", '&#8221;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ordereddict2dict(input_ordered_dict): \n    return json.loads(json.dumps(input_ordered_dict))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show(destination, protocol=None): \n    return __proxy__['napalm.call']('get_route_to', **{'destination': destination, 'protocol': protocol})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def split(text): \n    return text.strip().split(u'\\n')[1:(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parseApplication(app): \n    return Direction(app[0], app[1:])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def outerjoin(left, right, onclause=None, full=False, join_to_left=None): \n    return _ORMJoin(left, right, onclause, True, full)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pos(x): \n    return max_elemwise(x, 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def script(vm_): \n    return ScriptDeployment(salt.utils.cloud.os_script(config.get_cloud_config_value('os', vm_, __opts__), vm_, __opts__, salt.utils.cloud.salt_config_to_yaml(salt.utils.cloud.minion_config(__opts__, vm_))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isnan(a): \n    return reshape(array([_isnan(i) for i in ravel(a)], 'b'), shape(a))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dn2str(dn): \n    return ','.join(['+'.join(['='.join((atype, escape_dn_chars((avalue or '')))) for (atype, avalue, dummy) in rdn]) for rdn in dn])",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def p_statement_assign(t, s): \n    names[t[1]] = t[3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_worksheet_cols(doc, worksheet): \n    if worksheet.column_dimensions: \n      start_tag(doc, 'cols') \n      for (column_string, columndimension) in worksheet.column_dimensions.items(): \n         col_index = column_index_from_string(column_string) \n         col_def = {} \n         col_def['collapsed'] = str(columndimension.style_index) \n         col_def['min'] = str(col_index) \n         col_def['max'] = str(col_index) \n         if (columndimension.width != worksheet.default_column_dimension.width): \n            col_def['customWidth'] = 'true' \n         if (not columndimension.visible): \n            col_def['hidden'] = 'true' \n         if (columndimension.outline_level > 0): \n            col_def['outlineLevel'] = str(columndimension.outline_level) \n         if columndimension.collapsed: \n            col_def['collapsed'] = 'true' \n         if columndimension.auto_size: \n            col_def['bestFit'] = 'true' \n         if (columndimension.width > 0): \n            col_def['width'] = str(columndimension.width) \n         else: \n            col_def['width'] = '9.10' \n         tag(doc, 'col', col_def) \n      end_tag(doc, 'cols')",
        "line_count": 24,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def p_statement_expr(t): \n    t[0] = t[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _tx_resource_for_name(name): \n    return 'taiga-back.{}'.format(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def srun(cmd, **kwargs): \n    return run(('sudo   ' + cmd), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def average_pooling_2d(x, ksize, stride=None, pad=0, use_cudnn=True): \n    return AveragePooling2D(ksize, stride, pad, False, use_cudnn)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def takes_all_arguments(function, *named_arguments): \n    return bool((takes_arguments(function, *named_arguments) == set(named_arguments)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_variables_by_name(given_name, scope=None): \n    return get_variables(scope=scope, suffix=given_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compile(pattern, flags=0, **kwargs): \n    return _compile(pattern, flags, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _search_type_in_pep0484(code): \n    for p in PEP0484_PATTERNS: \n      match = p.search(code) \n      if match: \n         return [match.group(1)]",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_human_readable_time_string(time_msec): \n    return time.strftime('%B   %d   %H:%M:%S', time.gmtime((time_msec / 1000.0)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def liveobj_valid(obj): \n    return (obj != None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shall_skip(module): \n    return (os.path.getsize(module) < 3)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLHIKKAKEMOD(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLHIKKAKEMOD)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_attribute_is(output, path, attribute, text): \n    assert_attribute_matches(output, path, attribute, re.escape(text))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_offset(): \n    return salt.utils.mac_utils.execute_return_result('date   +%z')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(s, *args, **kwargs): \n    return parser.parse(s, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cgsnapshot_get(context, cgsnapshot_id): \n    return IMPL.cgsnapshot_get(context, cgsnapshot_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def organisation_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def id_shown_with_wait(context, id_str, **kwargs): \n    return _shown_elem_with_wait(context, (By.ID, id_str), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enhance_contrast_percentile(image, selem, out=None, mask=None, shift_x=False, shift_y=False, p0=0, p1=1): \n    return _apply(percentile_cy._enhance_contrast, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y, p0=p0, p1=p1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_nodes_select(call=None): \n    return salt.utils.cloud.list_nodes_select(list_nodes_full('function'), __opts__['query.selection'], call)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_user_from_cas_resp(cas_resp): \n    if cas_resp.user: \n      user = User.objects.filter(guids___id=cas_resp.user).first() \n      if user: \n         return (user, None, 'authenticate') \n      else: \n         external_credential = validate_external_credential(cas_resp.user) \n         if (not external_credential): \n            return (None, None, None) \n         user = get_user(external_id_provider=external_credential['provider'], external_id=external_credential['id']) \n         if user: \n            return (user, external_credential, 'authenticate') \n         else: \n            return (None, external_credential, 'external_first_login')",
        "line_count": 13,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def volume_admin_metadata_update(context, volume_id, metadata, delete, add=True, update=True): \n    return IMPL.volume_admin_metadata_update(context, volume_id, metadata, delete, add, update)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def redirect_param(location, params, *args, **kwargs): \n    return HttpResponseRedirect((resolve_url(location, *args, **kwargs) + params))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_inventory(service_instance): \n    return service_instance.RetrieveContent()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inverse_permutation(perm): \n    return permute_row_elements(arange(perm.shape[(-1)], dtype=perm.dtype), perm, inverse=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def confusion_matrix(res, index): \n    return skl_metrics.confusion_matrix(res.actual, res.predicted[index])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def yields(value): \n    return (isinstance(value, Future) or iscoroutine(value))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dump_threads_on_sigquit(signum, frame): \n    dump_traceback()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_file(path): \n    with open(path, 'w'): \n      pass",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _CheckAtom(atom): \n    return _ValidateString(atom, 'atom', MAXIMUM_FIELD_ATOM_LENGTH, empty_ok=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_email_for_expired_orders(email, event_name, invoice_id, order_url): \n    send_email(to=email, action=MAIL_TO_EXPIRED_ORDERS, subject=MAILS[MAIL_TO_EXPIRED_ORDERS]['subject'].format(event_name=event_name), html=MAILS[MAIL_TO_EXPIRED_ORDERS]['message'].format(invoice_id=invoice_id, order_url=order_url))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return VectorwriteRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_nothing(): \n    return",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cast(variable, dtype): \n    return Cast(dtype)(variable)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_opts(config): \n    config.register_opts(METER_PUBLISH_OPTS, group='publisher_rpc')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_read_config(): \n    for config in config_fnames: \n      cfg = _read_config(config) \n      assert_true(all(((('unknown' not in block.lower()) and (block != '')) for block in cfg['user_blocks'])))",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_dependencies(): \n    return config.check_driver_dependencies(__virtualname__, {'softlayer': HAS_SLLIBS})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_connection(conf, new=True): \n    return Connection()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_url(filename): \n    return (isinstance(filename, six.string_types) and (URL_REGEX.match(filename) is not None))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _isString(obj): \n    return (type(obj) in types.StringTypes)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def summary(worker): \n    return _summary_wrap(_summary_format(_summary_dict(worker), worker))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_sql_flush(style, tables, sequences): \n    sql = [('%s   %s;' % (style.SQL_KEYWORD('TRUNCATE'), style.SQL_FIELD(quote_name(table)))) for table in tables]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def Probability2(yes, no): \n    return (yes / (yes + no))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sub(pattern, repl, string, count=0): \n    return _compile(pattern, 0).sub(repl, string, count)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rgb2hed(rgb): \n    return separate_stains(rgb, hed_from_rgb)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_threshold_graph(G): \n    return is_threshold_sequence(list((d for (n, d) in G.degree())))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_preferred_file_contents_encoding(): \n    return (locale.getpreferredencoding() or u'utf-8')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def tp_write(fd, buf): \n    return get_hub().threadpool.apply(_write, (fd, buf))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reload(service): \n    action('reload', service)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save(filepath, ndarray): \n    pil_from_ndarray(ndarray).save(filepath)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_labeled_statement_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def extract(path, to_path=''): \n    Archive(path).extract(to_path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def collect_addon_assets(node): \n    return {'tree_js': list(collect_addon_js(node)), 'tree_css': list(collect_addon_css(node))}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generateOnlyInterface(list, int): \n    for n in list: \n      if int.providedBy(n): \n         (yield n)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getRankIndex(rulingSeparationWidthMillimeters, screenOrdinate): \n    return int(round((screenOrdinate / rulingSeparationWidthMillimeters)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_vpc_info(vpc): \n    return {'id': vpc.id, 'cidr_block': vpc.cidr_block, 'dhcp_options_id': vpc.dhcp_options_id, 'region': vpc.region.name, 'state': vpc.state}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tearDownModule(): \n    hass.stop()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def touch(path): \n    open(path, 'w').close()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def graphviz_layout(G, prog='neato', root=None, **kwds): \n    return pydot_layout(G=G, prog=prog, root=root, **kwds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ini_format(stream, options, encoding): \n    for (optname, optdict, value) in options: \n      value = format_option_value(optdict, value) \n      help = optdict.get('help') \n      if help: \n         help = normalize_text(help, line_len=79, indent='#   ') \n         print(file=stream) \n         print(_encode(help, encoding), file=stream) \n      else: \n         print(file=stream) \n      if (value is None): \n         print(('#%s=' % optname), file=stream) \n      else: \n         value = _encode(value, encoding).strip() \n         print(('%s=%s' % (optname, value)), file=stream)",
        "line_count": 14,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def group_type_specs_get(context, group_type_id): \n    return IMPL.group_type_specs_get(context, group_type_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_json(data, indent=None): \n    return json.dumps(data, indent=indent, cls=Encoder)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_score_from_submissions(submissions_scores, block): \n    if submissions_scores: \n      submission_value = submissions_scores.get(unicode(block.location)) \n      if submission_value: \n         attempted = True \n         (weighted_earned, weighted_possible) = submission_value \n         assert ((weighted_earned >= 0.0) and (weighted_possible > 0.0)) \n         return (((None, None) + (weighted_earned, weighted_possible)) + (attempted,))",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def addLoopToPointTable(loop, pointTable): \n    for point in loop: \n      pointTable[point] = loop",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def all(): \n    return MIGRATIONS.values()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_save(id, driver): \n    SAVE[id.upper()] = driver",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def from_text(rdclass, rdtype, ttl, *text_rdatas): \n    return from_text_list(rdclass, rdtype, ttl, text_rdatas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chhomephone(name, homephone): \n    return _update_gecos(name, 'homephone', homephone)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def partition(it, part): \n    return type(it)([index(it, ind) for ind in part])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def write_AlignIO_dna(): \n    assert (1 == AlignIO.convert('Clustalw/opuntia.aln', 'clustal', 'Phylip/opuntia.phy', 'phylip'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sum(x, axis=None): \n    return Sum(axis)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def head(url, **kwargs): \n    return request('head', url, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getTruncatedRotatedBoundaryLayers(loopLayers, repository): \n    return loopLayers[repository.layersFrom.value:repository.layersTo.value]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onchange(*args): \n    return attrsetter('_onchange', args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _pFormatArray(array_, fmt='%.2f'): \n    return (('[   ' + '   '.join(((fmt % x) for x in array_))) + '   ]')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_scheme_names(): \n    return tuple(sorted(_INSTALL_SCHEMES))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in6_ismsladdr(str): \n    return in6_isincluded(str, 'ff05::', 16)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dictOf(key, value): \n    return Dict(ZeroOrMore(Group((key + value))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Hists(hists, **options): \n    for hist in hists: \n      Hist(hist, **options)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def wrap_valid_longitude(lon): \n    return (((lon + 180.0) % 360.0) - 180.0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_get_pools(context): \n    return IMPL.floating_ip_get_pools(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def STDERR(v): \n    context.log_console = sys.stderr",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=CSSLexer(), buf_class=CSSBuffer, langintel_class=CSSLangIntel, is_cpln_lang=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return FirmwareModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def auto_auth(browser, username, email, staff, course_id): \n    AutoAuthPage(browser, username=username, email=email, course_id=course_id, staff=staff).visit()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def asdict(sobject): \n    return dict(items(sobject))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __special_doc__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_unread_messages(): \n    return frappe.db.sql(u\" DCTB  DCTB SELECT   count(*)\\n DCTB  DCTB FROM   `tabCommunication`\\n DCTB  DCTB WHERE   communication_type   in   ('Chat',   'Notification')\\n DCTB  DCTB AND   reference_doctype   =   'User'\\n DCTB  DCTB AND   reference_name   =   %s\\n DCTB  DCTB and   modified   >=   DATE_SUB(NOW(),INTERVAL   1   YEAR)\\n DCTB  DCTB AND   seen=0\\n DCTB  DCTB \", (frappe.session.user,))[0][0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_temperature_from_humidity(): \n    return _sensehat.get_temperature_from_humidity()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _handle_read_field(api_content, form_value, user, cc_content): \n    if (form_value and (not cc_content['read'])): \n      user.read(cc_content) \n      api_content['unread_comment_count'] = 0",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_repo(repo, **kwargs): \n    return _get_repo_info(repo)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unquote(str): \n    return re_escaped_char.sub(_sub_replacement, str[1:(-1)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_rows_with(reader, parsers): \n    for row in reader: \n      (yield parse_row(row, parsers))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getModuleWithPath(path): \n    return getModuleWithDirectoryPath(os.path.dirname(path), os.path.basename(path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def map_fn(fn, elems, name=None): \n    return theano.map(fn, elems, name=name)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getKeyA(row, column, prefix=''): \n    return ('%sa%s%s' % (prefix, row, column))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_for_missing(env): \n    for param in SECTIONS: \n      if ((param not in env) and (param != PARAMETER_MERGE_STRATEGIES)): \n         if (param in (ENCRYPTED_PARAM_NAMES, EVENT_SINKS)): \n            env[param] = [] \n         else: \n            env[param] = {}",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def _file_url(path): \n    return urlutils.file_url(str(path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_minus(l, minus): \n    return [o for o in l if (o not in minus)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _api_undefined(name, output, kwargs): \n    return report(output, _MSG_NOT_IMPLEMENTED)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compileToTemp(language, payloadSource): \n    if (language == 'cs'): \n      tempExeName = (settings.TEMP_DIR + '/temp.exe') \n      tempSourceName = (settings.TEMP_DIR + '/temp.cs') \n      f = open((settings.TEMP_DIR + '/temp.cs'), 'w') \n      f.write(payloadSource) \n      f.close() \n      os.system(((('mcs   -platform:x86   -target:winexe   ' + tempSourceName) + '   -out:') + tempExeName)) \n      return tempExeName",
        "line_count": 8,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_cosine(vec1, vec2): \n    return (numpy.dot(vec1, vec2) / (numpy.linalg.norm(vec1) * numpy.linalg.norm(vec2)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show(): \n    return call_plugin('_app_show')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def restart(old, new, node_state): \n    return sequentially(changes=[in_parallel(changes=[sequentially(changes=[StopApplication(application=old), StartApplication(application=new, node_state=node_state)])])])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PutAllEntities(entities): \n    for entity in entities: \n      datastore.Put(entity)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def configuration_context(request): \n    return {'platform_name': configuration_helpers.get_value('platform_name', settings.PLATFORM_NAME)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def htmlsafe_dump(obj, fp, **kwargs): \n    fp.write(text_type(htmlsafe_dumps(obj, **kwargs)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_positive_scalars(**kwargs): \n    for (key, val) in kwargs.items(): \n      try: \n         if (val <= 0): \n            raise ValueError('{}   must   be   >   0,   got   {}'.format(key, val)) \n      except TypeError: \n         raise exceptions.PlotlyError('{}   must   be   a   number,   got   {}'.format(key, val))",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def extract(manpage): \n    for (i, p) in enumerate(manpage.paragraphs): \n      if p.is_option: \n         (s, l) = extract_option(p.cleantext()) \n         if (s or l): \n            expectsarg = any((x.expectsarg for x in (s + l))) \n            s = [x.flag for x in s] \n            l = [x.flag for x in l] \n            manpage.paragraphs[i] = store.option(p, s, l, expectsarg) \n         else: \n            logger.error('no   options   could   be   extracted   from   paragraph   %r', p)",
        "line_count": 10,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def get_maker(engine, autocommit=True, expire_on_commit=False): \n    return sqlalchemy.orm.sessionmaker(bind=engine, autocommit=autocommit, expire_on_commit=expire_on_commit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_trivial(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def LoadSingleConf(stream): \n    return yaml_object.BuildSingleObject(YAMLConfiguration, stream)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MakeBadSignatureResponse(): \n    return '{\"status\":   21003}'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def full_query(query_type='list_nodes_full'): \n    return query(query_type=query_type)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def facility_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dispose_resources(device): \n    device._ctx.dispose(device)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_catalog_discover_hack(service_type, url): \n    return _VERSION_HACKS.get_discover_hack(service_type, url)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qnwgamma(n, a=None): \n    return _make_multidim_func(_qnwgamma1, n, a)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(data=None): \n    return MD4Hash().new(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sign(message, key): \n    return chopstring(message, key['d'], (key['p'] * key['q']), decrypt_int)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def postDeploy(site): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chfullname(name, fullname): \n    return _update_gecos(name, 'fullname', fullname)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_statement_assign(t): \n    names[t[1]] = t[3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def VonMises(name, mu, k): \n    return rv(name, VonMisesDistribution, (mu, k))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _fileno_can_read(fileno): \n    return (len(select.select([fileno], [], [], 0)[0]) > 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_command(command, callback, **kwargs): \n    return get_parser().add_subparser(command, parent_defaults={u'cli_command_callback': callback}, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_coroutine_function(func): \n    return getattr(func, '__tornado_coroutine__', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_goto(p): \n    p[0] = ('GOTO', int(p[2]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalDict(request_data): \n    return dict(((k, v[0]) for (k, v) in request_data.iteritems()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'raft', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def metadef_tag_delete_namespace_content(context, namespace_name, session=None): \n    return _metadef_delete_namespace_content(metadef_tag_get_all, 'metadef_tags', context, namespace_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ts_function(context): \n    return (context['execution_date'] + context['dag'].schedule_interval)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isResultNode(node): \n    return (node and (node.getType() == 'result'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getCraftedText(fileName, text, repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def should_be_retracted(retraction): \n    return ((timezone.now() - retraction.initiation_date) >= settings.RETRACTION_PENDING_TIME)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _build_instance_metadata_url(url, version, path): \n    return ('%s/%s/%s' % (url, version, path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_results(test_results_dir, output_dir, filter): \n    for d in os.listdir(test_results_dir): \n      if (filter and (d in filter)): \n         continue \n      print('looking   at', d) \n      test_dir = os.path.join(test_results_dir, d) \n      if (not os.path.isdir(test_dir)): \n         continue \n      base_test_name = os.path.basename(test_dir) \n      for file in os.listdir(test_dir): \n         if file.endswith('.xml'): \n            test_name = ((base_test_name + '.') + file[:(-4)]) \n         file = os.path.join(test_dir, file) \n         try: \n            result = junitxml.read(file, test_name) \n            output_path = os.path.join(output_dir, ('%s.xml' % test_name)) \n            with open(output_path, 'w') as f: \n               print('re-writing', output_path) \n               f.write(result.xml().encode('utf-8')) \n         except Exception as e: \n            sys.stderr.write(('ignoring   [%s]:   %s\\n' % (file, e)))",
        "line_count": 20,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def volume_type_get_all(context, inactive=False): \n    return IMPL.volume_type_get_all(context, inactive)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exception2_view(request): \n    return Response('supressed2')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_vif_instance(vif, cls, **kwargs): \n    return cls(id=vif['id'], address=vif['address'], network=_nova_to_osvif_network(vif['network']), has_traffic_filtering=vif.is_neutron_filtering_enabled(), preserve_on_delete=vif['preserve_on_delete'], active=vif['active'], **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def OSXSplitPathspec(pathspec): \n    return client_utils_linux.LinSplitPathspec(pathspec, GetMountpoints)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def entropy(image, selem, out=None, mask=None, shift_x=False, shift_y=False): \n    return _apply_scalar_per_pixel(generic_cy._entropy, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y, out_dtype=np.double)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _write_bem_surfaces_block(fid, surfs): \n    for surf in surfs: \n      start_block(fid, FIFF.FIFFB_BEM_SURF) \n      write_float(fid, FIFF.FIFF_BEM_SIGMA, surf['sigma']) \n      write_int(fid, FIFF.FIFF_BEM_SURF_ID, surf['id']) \n      write_int(fid, FIFF.FIFF_MNE_COORD_FRAME, surf['coord_frame']) \n      write_int(fid, FIFF.FIFF_BEM_SURF_NNODE, surf['np']) \n      write_int(fid, FIFF.FIFF_BEM_SURF_NTRI, surf['ntri']) \n      write_float_matrix(fid, FIFF.FIFF_BEM_SURF_NODES, surf['rr']) \n      write_int_matrix(fid, FIFF.FIFF_BEM_SURF_TRIANGLES, (surf['tris'] + 1)) \n      if (('nn' in surf) and (surf['nn'] is not None) and (len(surf['nn']) > 0)): \n         write_float_matrix(fid, FIFF.FIFF_BEM_SURF_NORMALS, surf['nn']) \n      end_block(fid, FIFF.FIFFB_BEM_SURF)",
        "line_count": 12,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def getGeometryOutputByArguments(arguments, elementNode): \n    return getGeometryOutput(None, elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_rpc(deadline=None, callback=None): \n    return apiproxy_stub_map.UserRPC('blobstore', deadline, callback)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_entities(value): \n    return re.sub('&(?:\\\\w+|#\\\\d+);', '', force_unicode(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def auth(request): \n    return {'user': request.user, 'messages': request.user.get_and_delete_messages(), 'perms': PermWrapper(request.user)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def split_by_position(linked_promotions, context): \n    for linked_promotion in linked_promotions: \n      promotion = linked_promotion.content_object \n      if (not promotion): \n         continue \n      key = ('promotions_%s' % linked_promotion.position.lower()) \n      if (key not in context): \n         context[key] = [] \n      context[key].append(promotion)",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _RegisterBoundsValidatorIfNeeded(parser, name, flag_values): \n    if ((parser.lower_bound is not None) or (parser.upper_bound is not None)): \n      def Checker(value): \n         if ((value is not None) and parser.IsOutsideBounds(value)): \n            message = ('%s   is   not   %s' % (value, parser.syntactic_help)) \n            raise gflags_validators.Error(message) \n         return True \n      RegisterValidator(name, Checker, flag_values=flag_values)",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def folder_exists(folderName): \n    return os.path.isdir(folderName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floatx(): \n    return _FLOATX",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return PegDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_desktop_root(*append): \n    return __get_root('desktop', *append)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fft_freqs(n_fft, fs): \n    return ((np.arange(0, ((n_fft // 2) + 1)) / float(n_fft)) * float(fs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def blend_channels_linear_light(bottom_chan, top_chan): \n    return numpy.clip(((bottom_chan[:, :] + (2 * top_chan[:, :])) - 1), 0, 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def NS(t): \n    return (struct.pack('!L', len(t)) + t)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_str(text, testfunc): \n    if ((text is not None) and (not testfunc(text))): \n      warnings.warn((\"String   %s   doesn't   match   the   given   regexp\" % text), PhyloXMLWarning, stacklevel=2)",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'wipe', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def matrix_product(*matrices): \n    return reduce(matmul, matrices)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_datetime_field(name, measure): \n    if (not isinstance(measure[name], (Date, DateTime))): \n      raise TypeError(\"'{name}'   field   must   be   a   '{dt}',   not:   '{dshape}'\".format(name=name, dt=DateTime(), dshape=measure[name]))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def close(): \n    devices.reset()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _psd_func(epoch, noverlap, nfft, fs, freq_mask, func): \n    return func(epoch, fs=fs, nperseg=nfft, noverlap=noverlap, nfft=nfft, window='hann')[2][..., freq_mask, :]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_random_string(length=12, allowed_chars=u'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'): \n    return u''.join((random.choice(allowed_chars) for __ in range(length)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _long_to_bin(x, hex_format_string): \n    return binascii.unhexlify((hex_format_string % x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attach_translations(addons): \n    attach_trans_dict(Addon, addons)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decoder(conv_func): \n    return (lambda s: conv_func(s.decode(u'utf-8')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def row_factory(cursor, row): \n    return Logline(sqlite_cursor=cursor.description, sqlite_row=row)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cleanup_staging_area(staging_path): \n    if os.path.exists(staging_path): \n      shutil.rmtree(staging_path)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def group_snapshot_get_all_by_group(context, group_id, filters=None): \n    return IMPL.group_snapshot_get_all_by_group(context, group_id, filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_number(string): \n    return get_i18n().parse_number(string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_datetime(dt): \n    return dateformat.format(make_naive(dt), u'r')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quotes_historical_yahoo_ochl(ticker, date1, date2, asobject=False, adjusted=True, cachename=None): \n    return _quotes_historical_yahoo(ticker, date1, date2, asobject=asobject, adjusted=adjusted, cachename=cachename, ochl=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_vector(*names): \n    return pkg_resources.resource_string(__name__, os.path.join('testdata', *names))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_macosx_sdk_path(path): \n    return ((path.startswith('/usr/') and (not path.startswith('/usr/local'))) or path.startswith('/System/') or path.startswith('/Library/'))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_systemd_os_like(filepath='/etc/os-release'): \n    return _get_systemd_os_release_var('ID_LIKE', filepath).split('   ')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decode64(encoded_content, encoding='utf-8'): \n    return b64decode(encoded_content.encode(encoding)).decode(encoding)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _AddSlots(message_descriptor, dictionary): \n    dictionary['__slots__'] = ['_cached_byte_size', '_cached_byte_size_dirty', '_fields', '_unknown_fields', '_is_present_in_parent', '_listener', '_listener_for_children', '__weakref__']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def extract_messages(obj_list): \n    for obj in obj_list: \n      if isinstance(obj, ValidationError): \n         for msg in obj.messages: \n            (yield force_text(msg)) \n         continue \n      if isinstance(obj, Exception): \n         if len(obj.args): \n            (yield force_text(obj.args[0])) \n            continue \n      (yield force_text(obj))",
        "line_count": 10,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def TRIMA(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.TRIMA, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def js_helper(prefix, *args): \n    return '\\n'.join([javascript_link(url_for(('/%s%s.js?v=%s' % (prefix, name, server_starttime)))) for name in args])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def t_newline(t): \n    t.lexer.lineno += t.value.count('\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def doAuth(realm): \n    return ((digestAuth(realm) + '   ') + basicAuth(realm))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_glance_metadata_list_get(context, volume_id_list): \n    return IMPL.volume_glance_metadata_list_get(context, volume_id_list)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resolve_duplicates(session, task): \n    if (task.choice_flag in (action.ASIS, action.APPLY)): \n      ident = task.chosen_ident() \n      found_duplicates = task.find_duplicates(session.lib) \n      if ((ident in session.seen_idents) or found_duplicates): \n         session.resolve_duplicate(task, found_duplicates) \n         session.log_choice(task, True) \n      session.seen_idents.add(ident)",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_hex_from_color(color): \n    return ('#' + ''.join(['{0:02x}'.format(int((x * 255))) for x in color]))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def trace(context=1): \n    return getinnerframes(sys.exc_info()[2], context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def people(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_table(table_name, metadata): \n    return sqlalchemy.Table(table_name, metadata, autoload=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getVertexesByKey(key, xmlElement): \n    return euclidean.getConcatenatedList(evaluate.getTransformedPathsByKey(key, xmlElement))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ifftn(x, shape=None, axes=None, overwrite_x=False): \n    return _raw_fftn_dispatch(x, shape, axes, overwrite_x, (-1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def str_or_none(val): \n    return (str(val) if (val is not None) else None)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _register_functions(): \n    for module_ in modules.__all__: \n      mod_name = _to_snake_case(module_) \n      mod_func = _copy_function(mod_name, str(mod_name)) \n      mod_func.__doc__ = _build_doc(module_) \n      __all__.append(mod_name) \n      globals()[mod_name] = mod_func",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __virtual__(): \n    return ('cyg.list' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_local_zero_div(): \n    for t in (T.scalar, T.ivector, T.ftensor4): \n      x = t('x') \n      for op in (T.int_div, T.true_div): \n         y = op(0, x) \n         g = optimize(FunctionGraph([x], [y])) \n         divs = [node for node in g.toposort() if (isinstance(node.op, T.elemwise.Elemwise) and isinstance(node.op.scalar_op, type(op.scalar_op)))] \n         assert (len(divs) == 0) \n         output = g.outputs[0] \n         assert (output.ndim == y.ndim) \n         assert (output.type == y.type) \n         assert (theano.tensor.get_scalar_constant_value(output) == 0)",
        "line_count": 11,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def abort(status, *args, **kwargs): \n    return _aborter(status, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def square(x): \n    return Square()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_method(java_object, method_name): \n    return JavaMember(method_name, java_object, java_object._target_id, java_object._gateway_client)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ParseResponse(response, *args, **kwds): \n    return _ParseFileEx(response, response.geturl(), *args, **kwds)[1:]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jaccard(firsts, seconds): \n    return (sum([(1 / frequency.get(brand, 100)) for brand in (firsts & seconds)]) / sum([(1 / frequency.get(brand, 100)) for brand in (firsts | seconds)]))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test__FileIO___getattribute__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_test(cls, test_name, func, *args, **kwargs): \n    setattr(cls, test_name, feed_data(func, test_name, *args, **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_plugins(): \n    return _cache",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addHeightsByBitmap(heights, textLines): \n    for line in textLines[3:]: \n      for integerWord in line.split(): \n         heights.append(float(integerWord))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def fetch_token_mock(*args, **kwargs): \n    return",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flavor_get_by_flavor_id(context, id, read_deleted=None): \n    return IMPL.flavor_get_by_flavor_id(context, id, read_deleted)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_type_get(context, id): \n    return IMPL.volume_type_get(context, id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flush_time(): \n    return logs_buffer().flush_time()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def digamma(x): \n    return polygamma(0, x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_int64(fid): \n    return _unpack_simple(fid, '>u8', np.int64)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_nested_instance(e, etypes): \n    return (isinstance(e, etypes) or (isinstance(e, exceptions.MultipleExceptions) and any((_is_nested_instance(i, etypes) for i in e.inner_exceptions))))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def handle_empty_queue(): \n    if (sabnzbd.nzbqueue.NzbQueue.do.actives() == 0): \n      sabnzbd.save_state() \n      logging.info('Queue   has   finished,   launching:   %s   (%s)', sabnzbd.QUEUECOMPLETEACTION, sabnzbd.QUEUECOMPLETEARG) \n      if sabnzbd.QUEUECOMPLETEARG: \n         sabnzbd.QUEUECOMPLETEACTION(sabnzbd.QUEUECOMPLETEARG) \n      else: \n         Thread(target=sabnzbd.QUEUECOMPLETEACTION).start() \n      sabnzbd.change_queue_complete_action(cfg.queue_complete(), new=False)",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_categorical(array): \n    return (isinstance(array, ABCCategorical) or is_categorical_dtype(array))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def patch_signal(): \n    patch_module('signal')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def map_bits(fn, n): \n    while n: \n      b = (n & ((~ n) + 1)) \n      (yield fn(b)) \n      n ^= b",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dmp_sub_ground(f, c, u, K): \n    return dmp_sub_term(f, dmp_ground(c, (u - 1)), 0, u, K)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hqic(llf, nobs, df_modelwc): \n    return (((-2.0) * llf) + ((2 * np.log(np.log(nobs))) * df_modelwc))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def transform(cls): \n    if (cls.name in NEED_FIX): \n      for f in FIX_MEMBERS: \n         cls.locals[f] = [scoped_nodes.Class(f, None)]",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getNewRepository(): \n    return MillingRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cookie_date(expires=None): \n    return _dump_date(expires, '-')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return WindingRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def srepr(expr, **settings): \n    return ReprPrinter(settings).doprint(expr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def npath(path): \n    return path",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _GetTemplatePath(template_file): \n    return os.path.join(os.path.dirname(__file__), 'templates', template_file)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_payload(function_name): \n    return (function_name in get_payload_list())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DynkinDiagram(t): \n    return CartanType(t).dynkin_diagram()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_module_enabled(module): \n    return is_link(('/etc/apache2/mods-enabled/%s.load' % module))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def have_python_version(name): \n    return (os.system((name + \"   -c   'import   test.test_support'\")) == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_not_has_text(output, text): \n    assert (output.find(text) < 0), (\"Output   file   contains   unexpected   text   '%s'\" % text)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_dirname(): \n    return os.path.dirname(__file__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reset(name, runas=None): \n    return prlctl('reset', _sdecode(name), runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nl2br(string): \n    return unicodifier(string).replace(u'\\n', u'<br>\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_false(expr, msg=None): \n    if expr: \n      _report_failure(msg)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def validate_files(pelican): \n    for (dirpath, _, filenames) in os.walk(pelican.settings['OUTPUT_PATH']): \n      for name in filenames: \n         if should_validate(name): \n            filepath = os.path.join(dirpath, name) \n            validate(filepath)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def write_name_list(fid, kind, data): \n    write_string(fid, kind, ':'.join(data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return skeinforge_analyze.AnalyzeRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def predicative(adjective): \n    return adjective",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _mergetreejinja(src, dst, context): \n    for item in os.listdir(src): \n      s = os.path.join(src, item) \n      d = os.path.join(dst, item) \n      if os.path.isdir(s): \n         log.info('Copying   folder   {0}   to   {1}'.format(s, d)) \n         if os.path.exists(d): \n            _mergetreejinja(s, d, context) \n         else: \n            os.mkdir(d) \n            _mergetreejinja(s, d, context) \n      elif (item != TEMPLATE_FILE_NAME): \n         d = Template(d).render(context) \n         log.info('Copying   file   {0}   to   {1}'.format(s, d)) \n         with salt.utils.fopen(s, 'r') as source_file: \n            src_contents = source_file.read() \n            dest_contents = Template(src_contents).render(context) \n         with salt.utils.fopen(d, 'w') as dest_file: \n            dest_file.write(dest_contents)",
        "line_count": 18,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def interfaces(proxy): \n    if proxy: \n      return {'interfaces': _get_grain(proxy, 'interface_list')}",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def neighbors(neighbor=None): \n    return __proxy__['napalm.call']('get_bgp_neighbors_detail', **{'neighbor_address': neighbor})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hookspath(): \n    return [curdir]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _greenthread_yield(dbapi_con, con_record): \n    greenthread.sleep(0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def playlist_to_mpd_format(playlist, *args, **kwargs): \n    return tracks_to_mpd_format(playlist.tracks, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def x10_command(command): \n    return check_output((['heyu'] + command.split('   ')), stderr=STDOUT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_plugin_media_path(instance, filename): \n    return instance.get_media_path(filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def teardown_module(): \n    os.remove(FAKEFILE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ensure_loaded(start_path): \n    for (root, folder, files) in os.walk(start_path): \n      for phile in fnmatch.filter(files, '*.py'): \n         path = os.path.join(root, phile) \n         try: \n            __import__(path.replace('/', '.')[:(-3)], globals(), locals()) \n         except Exception: \n            pass",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def fromstring(data, beautifulsoup=None, makeelement=None, **bsargs): \n    return _parse(data, beautifulsoup, makeelement, **bsargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unpooling_2d(x, ksize, stride=None, pad=0, outsize=None, cover_all=True): \n    return Unpooling2D(ksize, stride, pad, outsize, cover_all)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_context_manager(context): \n    return (_context_manager_from_context(context) or main_context_manager)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def reshape(x, shape): \n    return tf.reshape(x, shape)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_to_bytes(self, in_string, encoding, expected): \n    self.assertEqual(to_bytes(in_string, encoding), expected)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_const_list_seq(p): \n    _parse_seq(p)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_specifier_qualifier_list_4(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def supports_librabbitmq(): \n    if (_detect_environment() == u'default'): \n      try: \n         import librabbitmq \n      except ImportError: \n         pass \n      else: \n         return True",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def p_unary_expression_5(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def success_renewal(domains): \n    z_util(interfaces.IDisplay).notification('Your   existing   certificate   has   been   successfully   renewed,   and   the   new   certificate   has   been   installed.{1}{1}The   new   certificate   covers   the   following   domains:   {0}{1}{1}You   should   test   your   configuration   at:{1}{2}'.format(_gen_https_names(domains), os.linesep, os.linesep.join(_gen_ssl_lab_urls(domains))), pause=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def zipf_sequence(n, alpha=2.0, xmin=1): \n    return [zipf_rv(alpha, xmin) for _ in range(n)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def inv(a): \n    return solve(a, eye(a.shape[0], chunks=a.chunks[0][0]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_tag(volume, tag_name): \n    return volume.extra.get('tags', volume.extra.get('metadata'))[tag_name]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_stderr(name, cmd, no_start=False, preserve_state=True, stdin=None, python_shell=True, output_loglevel='debug', use_vt=False, path=None, ignore_retcode=False, chroot_fallback=False, keep_env='http_proxy,https_proxy,no_proxy'): \n    return _run(name, cmd, path=path, output='stderr', no_start=no_start, preserve_state=preserve_state, stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, use_vt=use_vt, ignore_retcode=ignore_retcode, chroot_fallback=chroot_fallback, keep_env=keep_env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_custom_perms(parent): \n    if (not frappe.db.exists(u'Custom   DocPerm', dict(parent=parent))): \n      copy_perms(parent) \n      return True",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dstack(xs): \n    return Dstack()(*xs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def capwords(s, sep=None): \n    return (sep or '   ').join([x.capitalize() for x in s.split(sep)])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def safe_destroy_vdis(session, vdi_refs): \n    for vdi_ref in vdi_refs: \n      try: \n         destroy_vdi(session, vdi_ref) \n      except volume_utils.StorageError as exc: \n         LOG.error(exc)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def status(repo='.'): \n    with open_repo_closing(repo) as r: \n      tracked_changes = get_tree_changes(r) \n      unstaged_changes = list(get_unstaged_changes(r.open_index(), r.path)) \n      untracked_changes = [] \n      return GitStatus(tracked_changes, unstaged_changes, untracked_changes)",
        "line_count": 5,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create(): \n    redirect(URL(f='new_assessment.iframe', vars={'viewing': ('survey_series.%s' % request.args[0])}))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_live_symlinks(config): \n    for renewal_file in storage.renewal_conf_files(config): \n      storage.RenewableCert(renewal_file, config, update_symlinks=True)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def user_num_documents(user): \n    return Document.objects.filter(revisions__creator=user).exclude(html__startswith='<p>REDIRECT   <a').distinct().count()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO___delattr__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_relational_expression_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def demo_learning_curve(): \n    postag(incremental_stats=True, separate_baseline_data=True, learning_curve_output='learningcurve.png')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_crate(): \n    return np.load(load_data_file('orig/crate.npz'))['crate']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def config(group=None, neighbor=None): \n    return __proxy__['napalm.call']('get_bgp_config', **{'group': group, 'neighbor': neighbor})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dedent_nodetext_formatter(nodetext, has_options, caller=None): \n    return dedent(nodetext)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_unique(l): \n    return sorted(set(l))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def batch_fetch_art(lib, albums, force, maxwidth=None): \n    for album in albums: \n      if (album.artpath and (not force)): \n         message = 'has   album   art' \n      else: \n         local_paths = (None if force else [album.path]) \n         path = art_for_album(album, local_paths, maxwidth) \n         if path: \n            album.set_art(path, False) \n            album.store() \n            message = ui.colorize('green', 'found   album   art') \n         else: \n            message = ui.colorize('red', 'no   art   found') \n      log.info(u'{0}   -   {1}:   {2}'.format(album.albumartist, album.album, message))",
        "line_count": 13,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def init(mpstate): \n    return GimbalModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def port2string(port): \n    return struct.pack('>H', port)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def numel(x, **kwargs): \n    return chunk.sum(np.ones_like(x), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def match(value, pattern='', ignorecase=False, multiline=False): \n    return regex(value, pattern, ignorecase, multiline, 'match')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def catalog(): \n    return dict()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attr_as_boolean(val_attr): \n    return strutils.bool_from_string(val_attr, default=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_node_create(context, values): \n    return IMPL.compute_node_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_func_kwargs(func): \n    return compat.inspect_getargspec(func)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _longest(d): \n    return collections.OrderedDict(((k, d[k]) for k in sorted(d, key=len, reverse=True)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_session_config(): \n    return copy.deepcopy(_session['config'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def roster(opts, runner, whitelist=None): \n    return LazyLoader(_module_dirs(opts, 'roster'), opts, tag='roster', whitelist=whitelist, pack={'__runner__': runner})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getOneAddress(results): \n    return getOnePayload(results).dottedQuad()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expand_path(path): \n    return os.path.expandvars(os.path.expanduser(path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_pricing(driver_type, driver_name, pricing): \n    PRICING_DATA[driver_type][driver_name] = pricing",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def earned_exp(base_exp, level): \n    return ((base_exp * level) // 7)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_to_deleted_document(doc): \n    if ((doc.doctype != u'Deleted   Document') and (frappe.flags.in_install != u'frappe')): \n      frappe.get_doc(dict(doctype=u'Deleted   Document', deleted_doctype=doc.doctype, deleted_name=doc.name, data=doc.as_json())).db_insert()",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def DEFINE_boolean(name, default, help, flag_values=FLAGS, **args): \n    DEFINE_flag(BooleanFlag(name, default, help, **args), flag_values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _format_info(data): \n    return {'name': data.gr_name, 'gid': data.gr_gid, 'passwd': data.gr_passwd, 'members': data.gr_mem}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def num_active_contributors(from_date, to_date=None, locale=None, product=None): \n    return len(_active_contributors_id(from_date, to_date, locale, product))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def date_to_key(date): \n    return int(date.strftime('%Y%m%d'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def S_IMODE(mode): \n    return (mode & 4095)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _sign(key, msg): \n    return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).digest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_version(): \n    return versioneer.get_version()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _should_skip_elem(elem, type=None, dest=None): \n    if (('draft' in elem.attrib) or ('alt' in elem.attrib)): \n      if ((dest is None) or (type in dest)): \n         return True",
        "line_count": 3,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def deferred(*columns, **kw): \n    return ColumnProperty(deferred=True, *columns, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_long_description(): \n    return 'Grep   plugins   analyze   every   request   and   response   in   order   to\\n               find   errors,   cookies,   emails,   comments   and   much   more   information   about\\n            the   target   web   application.\\n            '",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processor(): \n    return uname().processor",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _round(a): \n    return int(np.floor((a + 0.5)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _FilterLine(uwline): \n    return [ft for ft in uwline.tokens if (ft.name not in pytree_utils.NONSEMANTIC_TOKENS)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def compute_nodes_get_by_service_id(context, service_id): \n    return IMPL.compute_nodes_get_by_service_id(context, service_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def image_schema(profile=None): \n    return schema_get('image', profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __routes_doctest(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _unquote_domain(domain): \n    return urllib.unquote(domain).replace('%2E', '.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bootstrap_url(postfix): \n    return (get_bootstrap_setting(u'base_url') + postfix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pull_tar(url, name, verify=False): \n    return _pull_image('tar', url, name, verify=verify)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def posixToNtSlashes(filepath): \n    return (filepath.replace('/', '\\\\') if filepath else filepath)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def python_int_bitwidth(): \n    return (struct.calcsize('l') * 8)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isqref(object): \n    return (isinstance(object, tuple) and (len(object) == 2) and isinstance(object[0], basestring) and isinstance(object[1], basestring))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_exception(): \n    return sys.exc_info()[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def moments(image, order=3): \n    return _moments_cy.moments_central(image, 0, 0, order)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index(): \n    s3_redirect_default(URL(f='job', args=['datalist']))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ast_valid_while(): \n    can_compile(u'(while   foo   bar)')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hacks_for_phantomjs(browser): \n    if isinstance(browser, webdriver.PhantomJS): \n      js = \"\\n                                    window.confirm   =   function(message)   {\\n                                                return   true;\\n                                    }\\n                                    window.alert   =   window.prompt   =   window.confirm;\\n\\n                                    //   REF:   http://stackoverflow.com/questions/13536752/phantomjs-click-a-link-on-a-page?rq=1\\n                                    //   REF:   http://stackoverflow.com/questions/2705583/how-to-simulate-a-click-with-javascript/2706236#2706236\\n                                    window.eventFire   =   function(el,   etype)   {\\n                                                if   (el.fireEvent)   {\\n                                                            el.fireEvent('on'   +   etype);\\n                                                }   else   {\\n                                                            var   evObj   =   document.createEvent('Events');\\n                                                            evObj.initEvent(etype,   true,   false);\\n                                                            el.dispatchEvent(evObj);\\n                                                }\\n                                    };\\n\\n                                    //   shorter   alternative   of   above   method\\n                                    window.simulateClick   =   function(el)   {\\n                                                var   e   =   document.createEvent('MouseEvents');\\n                                                e.initEvent(   'click',   true,   true   );\\n                                                el.dispatchEvent(e);\\n                                    };\\n                        \" \n      browser.execute_script(('%s' % js))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def import_custom_scripts(app): \n    if os.path.exists(frappe.get_app_path(app, u'fixtures', u'custom_scripts')): \n      for fname in os.listdir(frappe.get_app_path(app, u'fixtures', u'custom_scripts')): \n         if fname.endswith(u'.js'): \n            with open(((frappe.get_app_path(app, u'fixtures', u'custom_scripts') + os.path.sep) + fname)) as f: \n               doctype = fname.rsplit(u'.', 1)[0] \n               script = f.read() \n               if frappe.db.exists(u'Custom   Script', {u'dt': doctype}): \n                  custom_script = frappe.get_doc(u'Custom   Script', {u'dt': doctype}) \n                  custom_script.script = script \n                  custom_script.save() \n               else: \n                  frappe.get_doc({u'doctype': u'Custom   Script', u'dt': doctype, u'script_type': u'Client', u'script': script}).insert()",
        "line_count": 12,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def filesizeHandler(field): \n    return displayHandler(field, humanFilesize)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def block_device_mapping_destroy_by_instance_and_volume(context, instance_uuid, volume_id): \n    return IMPL.block_device_mapping_destroy_by_instance_and_volume(context, instance_uuid, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getsemod(module): \n    return list_semod().get(module, {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_lower(value): \n    return text_type(value).islower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_recarray(data): \n    return isinstance(data, np.core.recarray)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def str2stdout(sourcestring, colors=None, title='', markup='html', header=None, footer=None, linenumbers=0, form=None): \n    Parser(sourcestring, colors=colors, title=title, markup=markup, header=header, footer=footer, linenumbers=linenumbers).format(form)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upload_stable_pdf(user='pandas'): \n    if os.system('cd   build/latex;   scp   pandas.pdf   {0}@pandas.pydata.org:/usr/share/nginx/pandas/pandas-docs/stable/'.format(user)): \n      raise SystemExit('PDF   upload   to   stable   failed')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _parse_local_version(local): \n    if (local is not None): \n      return tuple(((part.lower() if (not part.isdigit()) else int(part)) for part in _local_version_seperators.split(local)))",
        "line_count": 2,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def affiliation(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def printConnections(switches): \n    for sw in switches: \n      output(('%s:   ' % sw)) \n      for intf in sw.intfList(): \n         link = intf.link \n         if link: \n            (intf1, intf2) = (link.intf1, link.intf2) \n            remote = (intf1 if (intf1.node != sw) else intf2) \n            output(('%s(%s)   ' % (remote.node, sw.ports[intf]))) \n      output('\\n')",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def bookmark_absent(name, force=False, recursive=False): \n    return _absent(name, 'bookmark', force, recursive)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def denoise_tv_bregman(image, weight, max_iter=100, eps=0.001, isotropic=True): \n    return _denoise_tv_bregman(image, weight, max_iter, eps, isotropic)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reset_output(state=None): \n    _state.reset()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return CarveRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ValidatePropertyLink(name, value): \n    ValidateStringLength(name, value, max_len=_MAX_LINK_PROPERTY_LENGTH)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_history_import_relpath_in_metadata(): \n    with HistoryArchive() as history_archive: \n      history_archive.write_metafiles(dataset_file_name='../outside.txt') \n      history_archive.write_file('datasets/Pasted_Entry_1.txt', 'foo') \n      history_archive.write_outside() \n      _run_jihaw_cleanup(history_archive, 'Relative   parent   path   in   datasets_attrs.txt   allowed')",
        "line_count": 5,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ensure_valid(obj): \n    if (not obj.isValid()): \n      raise QtValueError(obj)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _invalid(m, id_=NOTSET, comment=INVALID_RESPONSE, out=None): \n    return _set_status(m, status=False, id_=id_, comment=comment, out=out)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sqlwhere(dictionary): \n    return ('   AND   '.join([('%s   =   %s' % (k, aparam())) for k in dictionary.keys()]), dictionary.values())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_emerge_default_opts(value): \n    return set_var('EMERGE_DEFAULT_OPTS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fetch_streams(plugin): \n    return plugin.get_streams(stream_types=args.stream_types, sorting_excludes=args.stream_sorting_excludes)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reverse_ip(ip_addr): \n    return ipaddress.ip_address(ip_addr).reverse_pointer",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CanonicalPathToLocalPath(path): \n    return path",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def doc(*args): \n    return os.path.join(_prefix, u'share', u'doc', u'git-cola', *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_precisions_full(precisions, covariance_type): \n    for (k, prec) in enumerate(precisions): \n      prec = _check_precision_matrix(prec, covariance_type)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getIntegerString(number): \n    return str(int(number))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_cookies(): \n    browser.clear_cookies()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_coord_init_array(): \n    for a in ([u'1   2', u'3   4'], [[u'1', u'2'], [u'3', u'4']], [[1, 2], [3, 4]]): \n      sc = SkyCoord(a, unit=u'deg') \n      assert allclose((sc.ra - ([1, 3] * u.deg)), (0 * u.deg)) \n      assert allclose((sc.dec - ([2, 4] * u.deg)), (0 * u.deg)) \n      sc = SkyCoord(np.array(a), unit=u'deg') \n      assert allclose((sc.ra - ([1, 3] * u.deg)), (0 * u.deg)) \n      assert allclose((sc.dec - ([2, 4] * u.deg)), (0 * u.deg))",
        "line_count": 7,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def type_(): \n    return Rebulk().rules(TypeProcessor)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getMsPerFrame(myWin, nFrames=60, showVisual=False, msg='', msDelay=0.0): \n    return myWin.getMsPerFrame(nFrames=60, showVisual=showVisual, msg=msg, msDelay=0.0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, *args, **kwargs): \n    return ARC4Cipher(key, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cast(context, topic, msg): \n    return _get_impl().cast(CONF, context, topic, msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def commit(): \n    return __proxy__['napalm.call']('commit_config', **{})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___str__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_navigator_auth_password(): \n    return NAVIGATOR.AUTH_PASSWORD_SCRIPT.get()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FakeReadlink(path): \n    raise OSError(errno.EINVAL, 'Invalid   argument', path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def any(name, alternates): \n    return ((('(?P<%s>' % name) + '|'.join(alternates)) + ')')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def capacity_indicator(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_get_all_active_by_window(context, begin, end=None, project_id=None): \n    return IMPL.volume_get_all_active_by_window(context, begin, end, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def active_contributors(from_date, to_date=None, locale=None, product=None): \n    return User.objects.filter(id__in=_active_contributors_id(from_date, to_date, locale, product)).order_by('username')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('openvswitch.bridge_create' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def abort(code, message): \n    raise JSONHTTPException(message, code)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rjust(value, arg): \n    return value.rjust(int(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gen3(): \n    for i in (0, 1, 2): \n      (yield i)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_mock_hdfs_root(environ=None): \n    return get_mock_dir('hdfs', environ=environ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_local_size(*args, **kargs): \n    raise _stub_error",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cgsnapshot_create(context, values): \n    return IMPL.cgsnapshot_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_seed(seed=None): \n    if (seed != None): \n      random.seed(seed)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def new(key, *args, **kwargs): \n    return DESCipher(key, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_namespace_handler(importer_type, namespace_handler): \n    _namespace_handlers[importer_type] = namespace_handler",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_entity_from_table(key, datastore): \n    datastore.batch_delete(APP_ENTITY_TABLE, [key])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lsmod(): \n    return quietRun('lsmod')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _binary_compiler(tmpl): \n    return (lambda self, l, r: (tmpl % (self.compile(l), self.compile(r))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def email_is_not_mit_mailing_list(email): \n    if ('@mit.edu' in email): \n      username = email.rsplit('@', 1)[0] \n      try: \n         DNS.dnslookup(('%s.pobox.ns.athena.mit.edu' % username), DNS.Type.TXT) \n      except DNS.Base.ServerError as e: \n         if (e.rcode == DNS.Status.NXDOMAIN): \n            raise ValidationError(mark_safe(MIT_VALIDATION_ERROR)) \n         else: \n            raise",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def expanding_apply(arg, func, min_periods=1, freq=None, args=(), kwargs={}): \n    return ensure_compat('expanding', 'apply', arg, freq=freq, min_periods=min_periods, func_kw=['func', 'args', 'kwargs'], func=func, args=args, kwargs=kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TestHuntHelper(client_mock, client_ids, check_flow_errors=False, token=None, iteration_limit=None): \n    TestHuntHelperWithMultipleMocks(dict([(client_id, client_mock) for client_id in client_ids]), check_flow_errors=check_flow_errors, iteration_limit=iteration_limit, token=token)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_declaration_specifiers_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def translate_jobconf_for_all_versions(variable): \n    return sorted(set(([variable] + list(_JOBCONF_MAP.get(variable, {}).values()))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_groups(region=None, key=None, keyid=None, profile=None): \n    return [a.name for a in get_all_groups(region=region, key=key, keyid=keyid, profile=profile)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _fake_exists(path): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_string(obj): \n    return cPickle.dumps(obj, get_pickle_protocol())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _jittered_backoff(attempt, max_retry_delay): \n    return min((random.random() * (2 ** attempt)), max_retry_delay)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inport(port_name='', props=[], mac_name=None): \n    return __create_port_dict('in', port_name, mac_name, props)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_result(result, name_width): \n    if result: \n      format = ('%%-%ds            %%-10s   %%-8s   %%s' % name_width) \n      print (format % result)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def TimerReset(*args, **kwargs): \n    return _TimerReset(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _format_info(data): \n    return {'gid': data.pw_gid, 'groups': list_groups(data.pw_name), 'home': data.pw_dir, 'name': data.pw_name, 'shell': data.pw_shell, 'uid': data.pw_uid, 'fullname': data.pw_gecos}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_struct_or_union_specifier_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _norm(x): \n    return np.sqrt(np.dot(x, x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_log_file(): \n    return _log.name",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_iso2231_langtag(header_checker): \n    header_checker.check_filename(\"attachment;   filename*=iso-8859-1'de'foo-%E4.html\", 'foo-\\xc3\\xa4.html')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_nodes_select(conn=None, call=None): \n    return __utils__['cloud.list_nodes_select'](list_nodes_full(), __opts__['query.selection'], call)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gitignore_templates(): \n    return gh.gitignore_templates()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_stdout(name, cmd, no_start=False, preserve_state=True, stdin=None, python_shell=True, output_loglevel='debug', use_vt=False, ignore_retcode=False, keep_env=None): \n    return _run(name, cmd, output='stdout', no_start=no_start, preserve_state=preserve_state, stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, use_vt=use_vt, ignore_retcode=ignore_retcode, keep_env=keep_env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sub(matlist1, matlist2, K): \n    return add(matlist1, negate(matlist2, K), K)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ckron(*arrays): \n    return reduce(np.kron, arrays)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log(runlevel, message): \n    if runlevel: \n      LOGGER.log(LOG_VALUES[runlevel], message)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_nonce_key(server_url, timestamp, salt): \n    return '{prefix}{url}.{ts}.{salt}'.format(prefix=NONCE_KEY_PREFIX, url=server_url, ts=timestamp, salt=salt)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def modify_atomic_group(id, **data): \n    models.AtomicGroup.smart_get(id).update_object(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def partial_token_sort_ratio(s1, s2, force_ascii=True, full_process=True): \n    return _token_sort(s1, s2, partial=True, force_ascii=force_ascii, full_process=full_process)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PackDatetime(name, value, pbvalue): \n    pbvalue.set_int64value(DatetimeToTimestamp(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sorted_by_field(issues, field='closed_at', reverse=False): \n    return sorted(issues, key=(lambda i: i[field]), reverse=reverse)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _clearSuite(suite): \n    suite._tests = []",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cgconfig_condrestart(): \n    return service_cgconfig_control('condrestart')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dumb_property_dict(style): \n    return dict([(x.strip(), y.strip()) for (x, y) in [z.split(':', 1) for z in style.split(';') if (':' in z)]])",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def rmfile(path): \n    if osp.isfile(path): \n      if is_win: \n         os.chmod(path, 511) \n      os.remove(path)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def walk_skip_hidden(top, onerror=None, followlinks=False): \n    for (root, dirs, files) in os.walk(top, topdown=True, onerror=onerror, followlinks=followlinks): \n      dirs[:] = [d for d in dirs if (not is_path_hidden(d))] \n      files[:] = [f for f in files if (not is_path_hidden(f))] \n      (yield (root, dirs, files))",
        "line_count": 4,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def flavor_access_remove(context, flavor_id, project_id): \n    return IMPL.flavor_access_remove(context, flavor_id, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def touch(ui, repo, basedir): \n    do_touch(ui, repo, basedir)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def merge_recursive(obj_a, obj_b, level=False): \n    return aggregate(obj_a, obj_b, level, map_class=AggregatedMap, sequence_class=AggregatedSequence)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def argmax_list(seq, func): \n    return argmin_list(seq, (lambda x: (- func(x))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLGRAVESTONEDOJI(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLGRAVESTONEDOJI)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def have_qstring(): \n    return (not ((sys.version_info.major >= 3) or QT_VERSION_STR.startswith('5.')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def create(): \n    redirect(URL(f='asset', args='create'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_config(key, default): \n    return getattr(settings, key, default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def transfer_create(context, values): \n    return IMPL.transfer_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _mark_cookie_for_deletion(request): \n    request.need_to_delete_cookie = True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def acquire_lock(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def msign(x): \n    return ma.filled(np.sign(x), 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quoteArguments(arguments): \n    return '   '.join([cmdLineQuote(a) for a in arguments])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fixed_ip_disassociate_all_by_timeout(context, host, time): \n    return IMPL.fixed_ip_disassociate_all_by_timeout(context, host, time)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flavor_access_add(context, flavor_id, project_id): \n    return IMPL.flavor_access_add(context, flavor_id, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lastmodified(date_obj): \n    header('Last-Modified', date_obj.strftime('%a,   %d   %b   %Y   %T   GMT'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trigrams(sequence, **kwargs): \n    for item in ngrams(sequence, 3, **kwargs): \n      (yield item)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def volunteer_award(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gf_irreducible(n, p, K): \n    while True: \n      f = gf_random(n, p, K) \n      if gf_irreducible_p(f, p, K): \n         return f",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_conemu_ansi(): \n    return (is_windows() and (os.environ.get(u'ConEmuANSI', u'OFF') == u'ON'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def colorTuple(c): \n    return (c.red(), c.green(), c.blue(), c.alpha())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_path_names(): \n    return _SCHEME_KEYS",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_tensor(dim): \n    return T.TensorType(broadcastable=tuple(([False] * dim)), dtype='float32')()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_signed_purchase_params(cart, **kwargs): \n    return PROCESSOR_MODULE.get_signed_purchase_params(cart, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def after_nearest_workday(dt): \n    return next_workday(nearest_workday(dt))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_binary_string(text): \n    raise Exception('Should   be   overriden')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def human_resource(): \n    return s3db.hrm_human_resource_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dup_rshift(f, n, K): \n    return f[:(- n)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_subnet(subnet_id=None, subnet_name=None, region=None, key=None, keyid=None, profile=None): \n    return _delete_resource(resource='subnet', name=subnet_name, resource_id=subnet_id, region=region, key=key, keyid=keyid, profile=profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(context, url, data=''): \n    return request(context, url, method='GET', data=data, api_call=api_call)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Cauchy(name, x0, gamma): \n    return rv(name, CauchyDistribution, (x0, gamma))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_color_mode_to_rgb(image): \n    return image.convert('RGB')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def benchmark_score_from_merged(benchmark, env_id, episode_lengths, episode_rewards, episode_types): \n    return benchmark.score(benchmark, env_id, episode_lengths, episode_rewards, episode_types)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def axis(*v, **kwargs): \n    return gca().axis(*v, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def aliasmbcs(): \n    if (sys.platform == 'win32'): \n      import locale, codecs \n      enc = locale.getdefaultlocale()[1] \n      if enc.startswith('cp'): \n         try: \n            codecs.lookup(enc) \n         except LookupError: \n            import encodings \n            encodings._cache[enc] = encodings._unknown \n            encodings.aliases.aliases[enc] = 'mbcs'",
        "line_count": 10,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_dependencies(): \n    return config.check_driver_dependencies(__virtualname__, {'azurearm': HAS_LIBS})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_get_by_instance(context, instance_uuid): \n    return IMPL.fixed_ip_get_by_instance(context, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _options_browser(cfg, ret_config, defaults, virtualname, options): \n    for option in options: \n      value = _fetch_option(cfg, ret_config, virtualname, options[option]) \n      if value: \n         (yield (option, value)) \n         continue \n      if defaults: \n         if (option in defaults): \n            log.info('Using   default   for   %s   %s', virtualname, option) \n            (yield (option, defaults[option])) \n            continue \n      continue",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def floating_ip_get_by_fixed_address(context, fixed_address): \n    return IMPL.floating_ip_get_by_fixed_address(context, fixed_address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _handle_broken_tcl_tk(): \n    if (is_win and is_venv): \n      basedir = os.path.join(base_prefix, 'tcl') \n      files = os.listdir(basedir) \n      for f in files: \n         abs_path = os.path.join(basedir, f) \n         if (f.startswith('tcl') and os.path.isdir(abs_path)): \n            os.environ['TCL_LIBRARY'] = abs_path \n         elif (f.startswith('tk') and os.path.isdir(abs_path)): \n            os.environ['TK_LIBRARY'] = abs_path \n         elif (f.startswith('tix') and os.path.isdir(abs_path)): \n            os.environ['TIX_LIBRARY'] = abs_path",
        "line_count": 11,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def kl_div(input, target, size_average=True): \n    return _functions.thnn.KLDivLoss(size_average)(input, target)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('mysql.db_exists' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _CheckFacetName(name): \n    return _CheckFieldName(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _format_report(report): \n    return '   '.join(report.split())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def schemata(schema): \n    return dict(((n, Schema.from_attribute(s)) for (n, s) in schema.items()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'feed', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _unary_compiler(tmpl): \n    return (lambda self, x: (tmpl % self.compile(x)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _p(*args): \n    return unpickler(*args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def notify(notificationName, message): \n    if sabnzbd.FOUNDATION: \n      pool = Foundation.NSAutoreleasePool.alloc().init() \n      nc = Foundation.NSDistributedNotificationCenter.defaultCenter() \n      nc.postNotificationName_object_(notificationName, message) \n      del pool",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sids(test_songs): \n    return [s.sid for s in test_songs]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_group_symbol(locale=LC_NUMERIC): \n    return Locale.parse(locale).number_symbols.get('group', u',')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def divergence(vect, coord_sys): \n    return coord_sys.delop.dot(vect).doit()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_installed(xbps_output): \n    return bool(len(xbps_output))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _item_to_project(iterator, resource): \n    return Project.from_api_repr(resource, client=iterator.client)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mathml(expr, **settings): \n    return MathMLPrinter(settings).doprint(expr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isString(s): \n    return (isinstance(s, unicode) or isinstance(s, str))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def flatten(seq, scalarp=is_scalar_or_string): \n    for item in seq: \n      if scalarp(item): \n         (yield item) \n      else: \n         for subitem in flatten(item, scalarp): \n            (yield subitem)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def function(foo, *args, **kwds): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def notifier_icon_path(): \n    return wf().datafile(u'Notify.app/Contents/Resources/applet.icns')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def length(value): \n    return len(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _bytes_iterator_py3(bytes_): \n    for b in bytes_: \n      (yield bytes([b]))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def add_products(basket, args): \n    for (price, quantity) in args: \n      add_product(basket, price, quantity)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewRepository(): \n    return SkinRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def server_reboot(): \n    return __execute_cmd('serveraction   powercycle')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def req_match(): \n    return s3db.req_match()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fully_decorated(request): \n    return HttpResponse('<html><body>dummy</body></html>')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_pid_list(): \n    return psutil.pids()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_index(sender, instance, created, **kwargs): \n    if (isinstance(instance, Object) and instance.is_searchable()): \n      search_item = instance.get_search_item() \n      ix = index.open_dir(settings.WHOOSH_INDEX) \n      try: \n         writer = ix.writer() \n         try: \n            if created: \n               writer.add_document(id=search_item['id'], name=search_item['name'], type=search_item['type'], content=search_item['content'], url=unicode(search_item['url'])) \n               writer.commit() \n            else: \n               writer.update_document(id=search_item['id'], name=search_item['name'], type=search_item['type'], content=search_item['content'], url=search_item['url']) \n               writer.commit() \n         except: \n            writer.cancel() \n      except: \n         pass",
        "line_count": 16,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def test_im_func_func_code(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skip_if_configuration_set(configuration, value, message=None): \n    if (getattr(config, configuration) == value): \n      if (message is not None): \n         raise SkipTest(message) \n      else: \n         raise SkipTest",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def instance_get_all_by_host(context, host, columns_to_join=None): \n    return IMPL.instance_get_all_by_host(context, host, columns_to_join)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def latest_requirements_revision(): \n    return local('hg   log   -r   :.   --template   \"{node|short}\\n\"   scripts/prod-requirements.txt   |   tail   -n   1', capture=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _pack(coefs_, intercepts_): \n    return np.hstack([l.ravel() for l in (coefs_ + intercepts_)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_array___format__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __init__(foo): \n    foo",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def forecast_data(year, quarter): \n    if (ct._check_input(year, quarter) is True): \n      ct._write_head() \n      data = _get_forecast_data(year, quarter, 1, pd.DataFrame()) \n      df = pd.DataFrame(data, columns=ct.FORECAST_COLS) \n      df['code'] = df['code'].map((lambda x: str(x).zfill(6))) \n      return df",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def pc(key): \n    return ''.join([token.capitalize() for token in key.split('_')])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_nonstring_iterable(obj): \n    return (isinstance(obj, Iterable) and (not isinstance(obj, string_types)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _get_current_task(): \n    return current_task",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def replace_static_urls(data_dir, block, view, frag, context, course_id=None, static_asset_path=''): \n    return wrap_fragment(frag, static_replace.replace_static_urls(frag.content, data_dir, course_id, static_asset_path=static_asset_path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_emission_hook(type, name, callback, *user_data): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def munge_catalog_program(catalog_program): \n    return {'id': catalog_program['uuid'], 'name': catalog_program['title'], 'subtitle': catalog_program['subtitle'], 'category': catalog_program['type'], 'marketing_slug': catalog_program['marketing_slug'], 'organizations': [{'display_name': organization['name'], 'key': organization['key']} for organization in catalog_program['authoring_organizations']], 'course_codes': [{'display_name': course['title'], 'key': course['key'], 'organization': ({'display_name': course['owners'][0]['name'], 'key': course['owners'][0]['key']} if course['owners'] else {}), 'run_modes': [{'course_key': run['key'], 'run_key': CourseKey.from_string(run['key']).run, 'mode_slug': 'verified'} for run in course['course_runs']]} for course in catalog_program['courses']], 'banner_image_urls': {'w1440h480': catalog_program['banner_image']['large']['url'], 'w726h242': catalog_program['banner_image']['medium']['url'], 'w435h145': catalog_program['banner_image']['small']['url'], 'w348h116': catalog_program['banner_image']['x-small']['url']}}",
        "line_count": 1,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def log_output(stream): \n    for chunk in stream: \n      logger.debug(chunk) \n      if (u'\"error\"' in chunk.lower()): \n         raise docker.errors.DockerException(chunk)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def started(service): \n    if (not is_running(service)): \n      if using_systemd(): \n         systemd.start(service) \n      else: \n         start(service)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def randstr(l): \n    return ''.join([choice(ascii_letters) for i in range(0, l)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_request_state(request_id): \n    with _request_states_lock: \n      return _request_states[request_id]",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def closeSerial(): \n    serialPort.close()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_dot_atom(value): \n    return (isinstance(value, six.string_types) and (not (value[0] == '.')) and (not (value[(-1)] == '.')) and set(value).issubset(valid_dot_atom_characters))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _b64encode(s): \n    return b2a_base64(s).strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _num_cpus_windows(): \n    return os.environ.get('NUMBER_OF_PROCESSORS')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_tensor(dim): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filesystem_absent(name, force=False, recursive=False): \n    return _absent(name, 'filesystem', force, recursive)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_preferred_arguments_encoding(): \n    return (locale.getdefaultlocale()[1] or u'latin1')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cut(value, arg): \n    return value.replace(arg, '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_latex_to_png_dvipng_fails_when_no_cmd(): \n    for command in ['latex', 'dvipng']: \n      (yield (check_latex_to_png_dvipng_fails_when_no_cmd, command))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_class_alias(klass): \n    for (k, v) in pyamf.ALIAS_TYPES.iteritems(): \n      for kl in v: \n         try: \n            if issubclass(klass, kl): \n               return k \n         except TypeError: \n            if hasattr(kl, '__call__'): \n               if (kl(klass) is True): \n                  return k",
        "line_count": 9,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def subn(pattern, repl, string, count=0, flags=0): \n    return _compile(pattern, flags).subn(repl, string, count)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=RubyLexer(), buf_class=RubyBuffer, langintel_class=RubyLangIntel, import_handler_class=RubyImportHandler, cile_driver_class=RubyCILEDriver, is_cpln_lang=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def min_cost_flow_cost(G, demand='demand', capacity='capacity', weight='weight'): \n    return nx.network_simplex(G, demand=demand, capacity=capacity, weight=weight)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sync_renderers(saltenv='base'): \n    return salt.utils.extmods.sync(__opts__, 'renderers', saltenv=saltenv)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def device_writer(queue): \n    while True: \n      (device, value) = queue.get() \n      scaled = rescale_value(value[0]) \n      log.debug(('Write(%s)   =   %s' % (device, value))) \n      if (not device): \n         continue",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def inject_search_after_save(output): \n    if ('form' in output): \n      id = 'search_after_save' \n      label = LABEL(('%s:' % T('Search   After   Save?')), _for='msg_twitter_search') \n      widget = INPUT(_name='search_after_save', _type='checkbox', value='on', _id=id, _class='boolean') \n      comment = '' \n      if (s3_formstyle == 'bootstrap'): \n         _controls = DIV(widget, comment, _class='controls') \n         row = DIV(label, _controls, _class='control-group', _id=('%s__row' % id)) \n      elif callable(s3_formstyle): \n         row = s3_formstyle(id, label, widget, comment) \n      else: \n         raise \n      output['form'][0][(-2)].append(row)",
        "line_count": 13,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def p_word_given_topic(word, topic, beta=0.1): \n    return ((topic_word_counts[topic][word] + beta) / (topic_counts[topic] + (W * beta)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_scanner(hass, config): \n    return TomatoDeviceScanner(config[DOMAIN])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___class__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('bigip' if ('bigip.list_transaction' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def hotpatch_oswrite(conn): \n    conn.execute(textwrap.dedent('\\n            import   sys\\n            import   os\\n            def   patched_write(fd,   s):\\n                        if   fd==1:\\n                                    return   sys.stdout.write(s)\\n                        elif   fd==2:\\n                                    return   sys.stdout.write(s)\\n                        else:\\n                                    return   os.write(fd,   s)\\n            os.write=patched_write\\n            '))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subSGMLRefs(s): \n    return re_sgmlrefsub(_replSGMLRefs, s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inject(**k): \n    return InjectionFactory(k)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subnets6(): \n    return salt.utils.network.subnets6()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def energy(H, q, p): \n    return (H.pot.energy(p) - H.logp(q))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape(s): \n    return urllib.quote(s, safe='~')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_returner(returner_types): \n    for returner in returner_types: \n      if (returner and (returner is not None)): \n         return returner",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def certificates(config, unused_plugins): \n    cert_manager.certificates(config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def transfer_accept(context, transfer_id, user_id, project_id): \n    return IMPL.transfer_accept(context, transfer_id, user_id, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def neg(x): \n    return (- min_elemwise(x, 0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def null_formatter(view, value): \n    return Markup('<i>NULL</i>')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stem(word): \n    return fix_ending(remove_ending(word))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(linter): \n    linter.register_checker(TypeChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cerr(*args): \n    cprint('stderr', *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disable_module(module): \n    if is_module_enabled(module): \n      run_as_root(('a2dismod   %s' % module))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): \n    return all(isclose(a, b, rtol, atol, equal_nan))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _escape(s): \n    return str(s).replace('&', '&amp;').replace('>', '&gt;').replace('<', '&lt;').replace(\"'\", '&#39;').replace('\"', '&#34;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_patch_log(patchmodule): \n    frappe.get_doc({u'doctype': u'Patch   Log', u'patch': patchmodule}).insert()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CreateCryptKeyset(name): \n    return _CreateKeyset(name, keyinfo.DECRYPT_AND_ENCRYPT, keyinfo.AES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cleanup(): \n    _lib.RAND_cleanup()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_name_status(changes): \n    for change in changes: \n      if (not change): \n         continue \n      if (type(change) is list): \n         change = change[0] \n      if (change.type == CHANGE_ADD): \n         path1 = change.new.path \n         path2 = '' \n         kind = 'A' \n      elif (change.type == CHANGE_DELETE): \n         path1 = change.old.path \n         path2 = '' \n         kind = 'D' \n      elif (change.type == CHANGE_MODIFY): \n         path1 = change.new.path \n         path2 = '' \n         kind = 'M' \n      elif (change.type in RENAME_CHANGE_TYPES): \n         path1 = change.old.path \n         path2 = change.new.path \n         if (change.type == CHANGE_RENAME): \n            kind = 'R' \n         elif (change.type == CHANGE_COPY): \n            kind = 'C' \n      (yield ('%-8s%-20s%-20s' % (kind, path1, path2)))",
        "line_count": 25,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def fixReturns(line): \n    return re.sub('returns:', '@returns', line)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sm_flavor_delete(context, sm_flavor_id): \n    return IMPL.sm_flavor_delete(context, sm_flavor_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def coiterate(iterator): \n    return _theCooperator.coiterate(iterator)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def facts(): \n    return __proxy__['napalm.call']('get_facts', **{})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_cipher(initialization_vector, secret): \n    return AES.new(secret[:KEY_SIZE], AES.MODE_CBC, initialization_vector[:AES.block_size])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_per_lib_sff_fps(sff_dir): \n    for (dirpath, dirnames, fnames) in walk(sff_dir): \n      for fname in fnames: \n         if fname.endswith('.sff'): \n            (libname, _) = splitext(fname) \n            (yield (libname, join(dirpath, fname)))",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_era_names(width='wide', locale=LC_TIME): \n    return Locale.parse(locale).eras[width]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disable_source(name): \n    return _change_source_state(name, 'disable')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unpack(packedData): \n    return json.loads(bz2.decompress(packedData))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _map_rect_to_scene(self, rect): \n    return self.sceneTransform().mapRect(rect)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _retrieve_dummy(job_path): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ode_almost_linear(eq, func, order, match): \n    return ode_1st_linear(eq, func, order, match)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def colormaps(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setRawInputMode(raw): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_p_tags(raw_body): \n    return '<p>{raw_body}</p>'.format(raw_body=raw_body)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def import_issues(foo): \n    foo",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_frameworks(): \n    sys.stdout.write(('Testable   frameworks:   %s\\n\\nNote   that   membership   in   this   list   means   the   framework   can   be   tested   with\\nPyMongo,   not   necessarily   that   it   is   officially   supported.\\n' % ',   '.join(sorted(FRAMEWORKS))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write(trees, handle, plain=False, **kwargs): \n    return Writer(trees).write(handle, plain=plain, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_parsed_result_successful(parsed_result): \n    return (parsed_result['ResponseMetadata']['HTTPStatusCode'] < 300)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getStrokeRadius(elementNode): \n    return (0.5 * getRightStripAlphabetPercent(getStyleValue('1.0', elementNode, 'stroke-width')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def features_contains(value): \n    return var_contains('FEATURES', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_scale(scale_class): \n    _scale_mapping[scale_class.name] = scale_class",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resolve_media_files(document, resource): \n    for field in resource_media_fields(document, resource): \n      if isinstance(document[field], list): \n         resolved_list = [] \n         for file_id in document[field]: \n            resolved_list.append(resolve_one_media(file_id, resource)) \n         document[field] = resolved_list \n      else: \n         document[field] = resolve_one_media(document[field], resource)",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def template(pattern, flags=0): \n    return _compile(pattern, (flags | TEMPLATE))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO_read(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def objtag(accessing_obj, accessed_obj, *args, **kwargs): \n    return accessed_obj.tags.get(*args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeExtension(*args, **kwargs): \n    return SuperFencesCodeExtension(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def task_coverage(): \n    return {'task_dep': ['locale', 'doctest'], 'actions': ['py.test   --cov   nikola   --cov-report   term-missing   tests/'], 'verbosity': 2}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def platform_supported(rospack, pkg, os, version): \n    return _platform_supported(rospack.get_manifest(pkg), os, version)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iso8601_from_timestamp(timestamp): \n    return isotime(datetime.datetime.utcfromtimestamp(timestamp))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_read_region(read_name): \n    return int(read_name[8])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def zpad(x, l): \n    return (('\\x00' * max(0, (l - len(x)))) + x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_instantiation_FileLink(): \n    fl = display.FileLink('example.txt')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def customize_compiler(compiler): \n    if (compiler.compiler_type == 'unix'): \n      (cc, cxx, opt, cflags, ccshared, ldshared, so_ext, ar) = get_config_vars('CC', 'CXX', 'OPT', 'CFLAGS', 'CCSHARED', 'LDSHARED', 'SO', 'AR') \n      if ('CC' in os.environ): \n         cc = os.environ['CC'] \n      if ('CXX' in os.environ): \n         cxx = os.environ['CXX'] \n      if ('LDSHARED' in os.environ): \n         ldshared = os.environ['LDSHARED'] \n      if ('CPP' in os.environ): \n         cpp = os.environ['CPP'] \n      else: \n         cpp = (cc + '   -E') \n      if ('LDFLAGS' in os.environ): \n         ldshared = ((ldshared + '   ') + os.environ['LDFLAGS']) \n      if ('CFLAGS' in os.environ): \n         cflags = ((opt + '   ') + os.environ['CFLAGS']) \n         ldshared = ((ldshared + '   ') + os.environ['CFLAGS']) \n      if ('CPPFLAGS' in os.environ): \n         cpp = ((cpp + '   ') + os.environ['CPPFLAGS']) \n         cflags = ((cflags + '   ') + os.environ['CPPFLAGS']) \n         ldshared = ((ldshared + '   ') + os.environ['CPPFLAGS']) \n      if ('AR' in os.environ): \n         ar = os.environ['AR'] \n      cc_cmd = ((cc + '   ') + cflags) \n      compiler.set_executables(preprocessor=cpp, compiler=cc_cmd, compiler_so=((cc_cmd + '   ') + ccshared), compiler_cxx=cxx, linker_so=ldshared, linker_exe=cc, archiver=ar) \n      compiler.shared_lib_extension = so_ext",
        "line_count": 26,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def dbg(x): \n    return ''",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user_update(username, user=None, host=None, port=None, maintenance_db=None, password=None, createdb=None, createuser=None, createroles=None, encrypted=None, superuser=None, inherit=None, login=None, connlimit=None, replication=None, rolepassword=None, groups=None, runas=None): \n    return _role_update(username, user=user, host=host, port=port, maintenance_db=maintenance_db, password=password, typ_='user', inherit=inherit, login=login, connlimit=connlimit, createdb=createdb, createuser=createuser, createroles=createroles, encrypted=encrypted, superuser=superuser, replication=replication, rolepassword=rolepassword, groups=groups, runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getipbyhost(hostname): \n    return socket.gethostbyname(hostname)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def window_none(x): \n    return x",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPreferencePath(): \n    return os.path.join(getBasePath(), 'preferences.ini')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add(a, b): \n    return (a + b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_context(data, payload): \n    return [c for c in get_context_iter(data, payload)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def upgrade_to_float64(*types): \n    return (get_scalar_type('float64'),)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_rfill_full(): \n    assert_equals(strings.rfill('abcdefghij', 10, '|'), 'abcdefghij')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def report(tracking_id, client_id, requestable, extra_info=None, extra_headers=None): \n    return [_request(data, extra_headers) for (data, extra_headers) in payloads(tracking_id, client_id, requestable, extra_info, extra_headers)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def check_serialize(msg): \n    json.dumps(msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def security_group_get_by_instance(context, instance_uuid): \n    return IMPL.security_group_get_by_instance(context, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def removeElementFromDictionary(dictionary, key): \n    if (key in dictionary): \n      del dictionary[key]",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def E_n(n, a, mass): \n    return ((((n * pi) / a) ** 2) / mass)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def randstr(length, alphabet='abcdefghijklmnopqrstuvwxyz0123456789'): \n    return ''.join((random.choice(alphabet) for _ in xrange(length)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def places(client, query, location=None, radius=None, language=None, min_price=None, max_price=None, open_now=False, type=None, page_token=None): \n    return _places(client, 'text', query=query, location=location, radius=radius, language=language, min_price=min_price, max_price=max_price, open_now=open_now, type=type, page_token=page_token)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _traverse_results(value, fields, row, path): \n    for (f, v) in value.iteritems(): \n      field_name = ('{path}.{name}'.format(path=path, name=f) if path else f) \n      if (not isinstance(v, (dict, list, tuple))): \n         if (field_name in fields): \n            row[fields.index(field_name)] = ensure_utf(v) \n      elif (isinstance(v, dict) and (f != 'attributes')): \n         _traverse_results(v, fields, row, field_name)",
        "line_count": 7,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def _sysv_is_enabled(name): \n    return (not _sysv_is_disabled(name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def minimum_spanning_tree(G, weight='weight', algorithm='kruskal'): \n    return _optimum_spanning_tree(G, algorithm=algorithm, minimum=True, weight=weight)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_selected(nodes): \n    for node in nodes: \n      if hasattr(node, 'selected'): \n         return node \n      elif hasattr(node, 'ancestor'): \n         result = find_selected(node.children) \n         if result: \n            return result",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def remove_if(predicate, lst): \n    return [elem for elem in lst if (not predicate(elem))]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_template(template_name): \n    return TemplateLookup(directories=[(path(__file__).dirname().dirname() / 'templates')], default_filters=['decode.utf8']).get_template(template_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def netapi(opts): \n    return LazyLoader(_module_dirs(opts, 'netapi'), opts, tag='netapi')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def window_hanning(x): \n    return (np.hanning(len(x)) * x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_coffee(): \n    data.coffee()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def handle404(request): \n    return render(request, 'handlers/404.html', status=404)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CPP_INTEGER(t): \n    return t",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remote_docker(client_ip, docker_host, *args): \n    return remote_command(client_ip, (('DOCKER_TLS_VERIFY=1', 'DOCKER_HOST={}'.format(docker_host), 'docker') + args))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disk_partitions(all=False): \n    return _psplatform.disk_partitions(all)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _MPpow(x, y, z): \n    return MP(pow(x, y, z))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setGridLogger(): \n    setLoggerClass(GridLogger)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def simplify_jobs(joblist): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def purge(fn, pattern): \n    for f in os.listdir(fn): \n      if re.search(pattern, f): \n         os.remove(os.path.join(fn, f))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def random_ascii(length=20, ascii_only=False): \n    return _join_chars(string.ascii_letters, length)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quote_etag(etag): \n    return (u'\"%s\"' % etag.replace(u'\\\\', u'\\\\\\\\').replace(u'\"', u'\\\\\"'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getcycle(d, keys): \n    return _toposort(d, keys=keys, returncycle=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _yield_all_instance_groups(emr_conn, cluster_id, *args, **kwargs): \n    for resp in _repeat(emr_conn.list_instance_groups, cluster_id, *args, **kwargs): \n      for group in getattr(resp, 'instancegroups', []): \n         (yield group)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def name(item): \n    return item.__name__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_channel_modes(mode_string): \n    return _parse_modes(mode_string, 'bklvohq')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def layout_title(layout): \n    for child in layout.children: \n      if isinstance(child, Title): \n         return u'   '.join([node.data for node in get_nodes(child, Text)])",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def fahrenheit2celsius(temp): \n    return ((5.0 / 9.0) * (temp - 32))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_backtrack_keys(products): \n    for (p_k, p_v) in products.iteritems(): \n      p_v['key'] = p_k \n      for (c_k, c_v) in p_v['categories'].iteritems(): \n         c_v['key'] = c_k",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_bc_sk_estimator(): \n    check_estimator(BalanceCascade)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wassuccessful_patch(result): \n    return make_instancemethod(TextTestResult.wasSuccessful, result)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def draw_random(G, **kwargs): \n    draw(G, random_layout(G), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_section(context, section): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RSI(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.RSI, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_floating_address_get_all(context, instance_uuid): \n    return IMPL.instance_floating_address_get_all(context, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def force_encoding(text, encoding): \n    return text.encode(encoding, errors='replace').decode(encoding)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_binary(x): \n    return np.all(((x == 0) + (x == 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getTwistPrecision(elementNode): \n    return getCascadeFloatWithoutSelf(5.0, elementNode, 'twistPrecision')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _EndGroup(buffer, pos, end): \n    return (-1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _instance_name(instance): \n    return getattr(instance, 'OS-EXT-SRV-ATTR:instance_name', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _clip_warp_output(input_image, output_image, order, mode, cval, clip): \n    if (clip and (order != 0)): \n      min_val = input_image.min() \n      max_val = input_image.max() \n      preserve_cval = ((mode == 'constant') and (not (min_val <= cval <= max_val))) \n      if preserve_cval: \n         cval_mask = (output_image == cval) \n      np.clip(output_image, min_val, max_val, out=output_image) \n      if preserve_cval: \n         output_image[cval_mask] = cval",
        "line_count": 9,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def liveReceivers(receivers): \n    for receiver in receivers: \n      if isinstance(receiver, WEAKREF_TYPES): \n         receiver = receiver() \n         if (receiver is not None): \n            (yield receiver) \n      else: \n         (yield receiver)",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def lenet_arg_scope(weight_decay=0.0): \n    with slim.arg_scope([slim.conv2d, slim.fully_connected], weights_regularizer=slim.l2_regularizer(weight_decay), weights_initializer=tf.truncated_normal_initializer(stddev=0.1), activation_fn=tf.nn.relu) as sc: \n      return sc",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MIN(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.MIN, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_orphaned_vdis(xenapi, vdi_uuids): \n    for vdi_uuid in vdi_uuids: \n      if CONF.verbose: \n         print ('CLEANING   VDI   (%s)' % vdi_uuid) \n      vdi_ref = call_xenapi(xenapi, 'VDI.get_by_uuid', vdi_uuid) \n      try: \n         call_xenapi(xenapi, 'VDI.destroy', vdi_ref) \n      except XenAPI.Failure as exc: \n         print >>sys.stderr, ('Skipping   %s:   %s' % (vdi_uuid, exc))",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def isbuiltin(object): \n    return isinstance(object, types.BuiltinFunctionType)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def createoutputdirs(outputs): \n    for output in list(outputs.values()): \n      dirname = os.path.dirname(output) \n      if (not os.path.isdir(dirname)): \n         os.makedirs(dirname)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def flatten(results): \n    for row in results: \n      (yield (c.value for c in row))",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def has_course_started(start_date): \n    return (datetime.now(utc) > start_date)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_permissions(user, permissions): \n    for permission in permissions: \n      (app_label, __, codename) = permission.partition('.') \n      perm = Permission.objects.get(content_type__app_label=app_label, codename=codename) \n      user.user_permissions.add(perm)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_user(): \n    return os.getenv('REMOTE_USER')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def HT_TRENDMODE(ds, count): \n    return call_talib_with_ds(ds, count, talib.HT_TRENDMODE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def post(url, data=None, **kwargs): \n    return request('post', url, data=data, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def try_deserialize_handler(serialized_handler): \n    if serialized_handler: \n      return pickle.loads(serialized_handler)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def wait_set(name, value, profile=None): \n    return {'name': name, 'changes': {}, 'result': True, 'comment': ''}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_author(cc_content, context): \n    return (context['cc_requester']['id'] == cc_content['user_id'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def location_contact(): \n    return s3_rest_controller(hide_filter=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_css_class_with_wait(context, css_class, **kwargs): \n    return _find_elem_with_wait(context, (By.CLASS_NAME, css_class), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def doctest(): \n    os.system('sphinx-build   -b   doctest   -d   build/doctrees   .   build/doctest')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_session(request, *names): \n    for name in names: \n      try: \n         del request.session[name] \n      except KeyError: \n         pass",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getCraftSequence(): \n    return 'carve   scale   bottom   preface   widen   inset   fill   multiply   temperature   raft   skirt   speed   chamber   tower   jitter   clip   smooth   stretch   skin   comb   cool   hop   wipe   oozebane   dwindle   splodge   home   lash   fillet   limit   unpause   dimension   alteration   export'.split()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _enable_privilege(privilege_name): \n    return _change_privilege_state(privilege_name, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def urlsafe_b64decode(s): \n    return b64decode(s, '-_')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _launch(appfile): \n    _finder.open(_application_file(('ID      ', appfile)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _window_too_small(): \n    return Window(TokenListControl.static([(Token.WindowTooSmall, u'   Window   too   small...   ')]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RetryNoBackoff(callable_func, retry_notify_func, delay=5, max_tries=200): \n    return RetryWithBackoff(callable_func, retry_notify_func, delay, 1, delay, max_tries)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_deprecated_login_lock_out_by_combination_browser_user_agent(): \n    return AUTH.LOGIN_LOCK_OUT_BY_COMBINATION_BROWSER_USER_AGENT_AND_IP.get()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def numpy_to_sympy(m, **options): \n    return Matrix(m)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _CheckOffset(offset): \n    return _CheckInteger(offset, 'offset', zero_ok=True, upper_bound=MAXIMUM_SEARCH_OFFSET)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_upload_response_headers(headers, body): \n    if ('status' not in headers): \n      try: \n         d = jsonutils.loads(body) \n         if (('image' in d) and ('status' in d['image'])): \n            return \n      except Exception: \n         raise exception.UploadException(body)",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_plugin(plugin): \n    if (plugin in _PLUGINS_SERVICE): \n      return _PLUGINS_SERVICE[plugin]",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def iterModules(): \n    return theSystemPath.iterModules()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def irange(start, end): \n    return range(start, (end + 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'tower', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def np_where(cond, x, y): \n    return np.where(cond, x, y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def versions_information(): \n    return salt.version.versions_information()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_useragent(): \n    with open(settings.USERAGENTS, 'r') as f: \n      agents = f.readlines() \n      selection = random.randint(0, (len(agents) - 1)) \n      agent = agents[selection] \n      return agent.strip()",
        "line_count": 5,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def results_extractor(train_obj): \n    return DD()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _cert_file(name, cert_type): \n    return os.path.join(LE_LIVE, name, '{0}.pem'.format(cert_type))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addToThreadsRemove(extrusionHalfWidth, nestedRings, oldOrderedLocation, skein, threadSequence): \n    while (len(nestedRings) > 0): \n      getTransferClosestNestedRing(extrusionHalfWidth, nestedRings, oldOrderedLocation, skein, threadSequence)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _CopyProperties(target_dict, source_dict): \n    for (key, value) in source_dict['properties'].items(): \n      assert ((key not in target_dict['properties']) or (target_dict['properties'][key] == value)), (source_dict, target_dict) \n      target_dict['properties'][key] = deepcopy(value)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getNewRepository(): \n    return CarveRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def current_request(): \n    return getattr(_thread_local, u'request', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def center(s, width, *args): \n    return s.center(width, *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_rz(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'preface', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pickleStringO(stringo): \n    return (unpickleStringO, (stringo.getvalue(), stringo.tell()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def osquery_info(attrs=None, where=None): \n    return _osquery_cmd(table='osquery_info', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def publish_exploration(committer_id, exploration_id): \n    _publish_activity(committer_id, exploration_id, feconf.ACTIVITY_TYPE_EXPLORATION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable(): \n    if (not _status_apf()): \n      return __apf_cmd('-s')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def flatten(theList): \n    return [item for sublist in theList for item in sublist]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getMin(first, second): \n    return min(first, second)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dmp_pquo(f, g, u, K): \n    return dmp_pdiv(f, g, u, K)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def base64image(src): \n    return base64.b64encode(_get_file(src))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _service_is_upstart(name): \n    return os.access('/etc/init/{0}.conf'.format(name), os.R_OK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_route_table(route_table_id=None, route_table_name=None, region=None, key=None, keyid=None, profile=None): \n    return _delete_resource(resource='route_table', name=route_table_name, resource_id=route_table_id, region=region, key=key, keyid=keyid, profile=profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addresses_from_address_family(address_family): \n    return Addresses(tuple(address_family.addressables.keys()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pperm_above(accessing_obj, accessed_obj, *args, **kwargs): \n    return perm_above(_to_player(accessing_obj), accessed_obj, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return SpongeSliceDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def debug(parser, token): \n    return DebugNode()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _af_rmul(a, b): \n    return [a[i] for i in b]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getIntermediateLocation(alongWay, begin, end): \n    return ((begin * (1.0 - alongWay)) + (end * alongWay))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_attrib_modified(kev): \n    return (kev.fflags & select.KQ_NOTE_ATTRIB)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def blend(*cols, **kwargs): \n    return Blend(*cols, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_password(vm_): \n    return config.get_cloud_config_value('password', vm_, __opts__, default=config.get_cloud_config_value('passwd', vm_, __opts__, search_global=False), search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def arccos(x): \n    return Arccos()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decode_uuid(obj): \n    return uuid.UUID(bytes=str(obj))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iflatten(x): \n    for el in x: \n      if is_listlike(el): \n         for el_ in iflatten(el): \n            (yield el_) \n      else: \n         (yield el)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _patch_stopall(): \n    for patch in list(_patch._active_patches): \n      patch.stop()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def number_of_friends(user): \n    return len(user['friends'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def HeaderPrintGenericDetails(message, which=MUA_HP_HEADERS): \n    return [k for (k, v) in message.items() if (k.lower() in which)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def reconcile_against_document(args): \n    for d in args: \n      check_if_advance_entry_modified(d) \n      validate_allocated_amount(d) \n      doc = frappe.get_doc(d.voucher_type, d.voucher_no) \n      doc.make_gl_entries(cancel=1, adv_adj=1) \n      if (d.voucher_type == u'Journal   Entry'): \n         update_reference_in_journal_entry(d, doc) \n      else: \n         update_reference_in_payment_entry(d, doc) \n      doc = frappe.get_doc(d.voucher_type, d.voucher_no) \n      doc.make_gl_entries(cancel=0, adv_adj=1)",
        "line_count": 11,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_get_init_1(): \n    with make_tempfile(join(TMP_TEST_DIR, '__init__.py')): \n      assert mp.get_init(TMP_TEST_DIR)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def attachment_specs_get(context, attachment_id): \n    return IMPL.attachment_specs_get(context, attachment_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getGNUTranslatorFilesUnmodified(): \n    return archive.getFilesWithFileTypesWithoutWords(getImportPluginFileNames())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_auth_params_from_request(request): \n    return (request.user.username, request.user.token.id, request.user.tenant_id, base.url_for(request, 'compute'), base.url_for(request, 'identity'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compare(name, first, second, bfr): \n    return (bfr[first.begin:first.end] == bfr[second.begin:second.end])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def query(qname, rdtype=dns.rdatatype.A, rdclass=dns.rdataclass.IN, tcp=False, source=None, raise_on_no_answer=True, source_port=0): \n    return get_default_resolver().query(qname, rdtype, rdclass, tcp, source, raise_on_no_answer, source_port)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fix(value): \n    return ((value + (2 ** 32)) if (value < 0) else value)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def find(s, *args): \n    return s.find(*args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def alias_diff(refcounts_before, refcounts_after): \n    return set((t for t in refcounts_after if (refcounts_after[t] > refcounts_before.get(t, (-1)))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def t_REM(t): \n    return t",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(linter): \n    linter.register_checker(FormatChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_user_password(sockfile): \n    return ('root', '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_file(path): \n    with open(path, u'w') as f: \n      f.write(u'Just   a   sentinel.')",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def foreign_keys(model): \n    return [column.name for column in foreign_key_columns(model)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _deduplicate_loggers(loggers): \n    return ('{}:{}'.format(logger, level) for (logger, level) in dict((it.split(':') for it in loggers)).iteritems())",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def delete_exploration_summary(exploration_id): \n    exp_models.ExpSummaryModel.get(exploration_id).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_binops_check_strict(self, obj): \n    return isinstance(obj, (_set_binop_bases + (self.__class__,)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def call(conf, context, topic, msg, timeout=None): \n    return rpc_amqp.call(conf, context, topic, msg, timeout, rpc_amqp.get_connection_pool(conf, Connection))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def anon_url(*url): \n    return (u'' if (None in url) else u'{0}{1}'.format(sickbeard.ANON_REDIRECT, u''.join((str(s) for s in url))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def assembleFormattedText(formatted): \n    return _textattributes.flatten(formatted, helper._FormattingState(), 'toVT102')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def guessit(string, options=None): \n    return default_api.guessit(string, options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_data_bad(p): \n    p[0] = 'MALFORMED   NUMBER   LIST   IN   DATA'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_index(data): \n    return data.index",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def verify(cypher, key): \n    return gluechops(cypher, key['e'], key['n'], encrypt_int)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clearCache(): \n    _entityCache.clear()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def all_living_collectors(): \n    for col in all_collectors(): \n      if (col.proc is not None): \n         (yield col)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_course_enrollments(user, org_to_include, orgs_to_exclude): \n    for enrollment in CourseEnrollment.enrollments_for_user(user): \n      course_overview = enrollment.course_overview \n      if (not course_overview): \n         log.error('User   %s   enrolled   in   broken   or   non-existent   course   %s', user.username, enrollment.course_id) \n         continue \n      if (org_to_include and (course_overview.location.org != org_to_include)): \n         continue \n      elif (course_overview.location.org in orgs_to_exclude): \n         continue \n      else: \n         (yield enrollment)",
        "line_count": 11,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def get_validator(segmentation_type): \n    return _supported[segmentation_type]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rewrite_single_shorthand_state_decl(data): \n    for (sid, states) in six.iteritems(data): \n      if isinstance(states, six.string_types): \n         data[sid] = {states: []}",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_sparse(array): \n    return isinstance(array, (ABCSparseArray, ABCSparseSeries))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_hcae_basic(): \n    with open(os.path.join(yaml_dir_path, 'hcae.yaml')) as f: \n      yaml_string = f.read() \n      train = yaml_parse.load(yaml_string) \n      train.main_loop()",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_file_size(upload_file): \n    return upload_file.size",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def toURINormal(xri): \n    return iriToURI(toIRINormal(xri))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xhtml_escape(value): \n    return _XHTML_ESCAPE_RE.sub((lambda match: _XHTML_ESCAPE_DICT[match.group(0)]), to_basestring(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _escape_value(value): \n    return value.replace('\\\\', '\\\\\\\\').replace('\\n', '\\\\n').replace(' DCTB ', '\\\\t').replace('\"', '\\\\\"')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Die(name, sides=6): \n    return rv(name, DieDistribution, sides)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tokenize(content): \n    return [token.encode('utf8') for token in utils.tokenize(content, lower=True, errors='ignore') if ((2 <= len(token) <= 15) and (not token.startswith('_')))]",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def date_to_month_number(date): \n    return year_month_to_month_number(date.year, date.month)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_networks(service_instance): \n    return list_objects(service_instance, vim.Network)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _normalize_dir(string): \n    return re.sub('\\\\\\\\$', '', string.lower())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _oneD_norm_2(a): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gettempprefix(): \n    return template",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tanh(X): \n    return np.tanh(X, out=X)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def completeness_score(labels_true, labels_pred): \n    return homogeneity_completeness_v_measure(labels_true, labels_pred)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _write_conf(conf, path=MAIN_CF): \n    with salt.utils.fopen(path, 'w') as fh_: \n      for line in conf: \n         if isinstance(line, dict): \n            fh_.write('   '.join(line)) \n         else: \n            fh_.write(line) \n         fh_.write('\\n')",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def run_recover_tasks(host, guest, instance, on_migration_failure): \n    while on_migration_failure: \n      task = on_migration_failure.popleft() \n      if (task == 'unpause'): \n         try: \n            state = guest.get_power_state(host) \n            if (state == power_state.PAUSED): \n               guest.resume() \n         except Exception as e: \n            LOG.warning(_LW('Failed   to   resume   paused   instance   before   live-migration   rollback   %s'), e, instance=instance) \n      else: \n         LOG.warning(_LW(\"Unknown   migration   task   '%(task)s'\"), {'task': task}, instance=instance)",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def fxa_authorize(request): \n    return render(request, 'commonplace/fxa_authorize.html')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _setHTTPReferer(): \n    if conf.referer: \n      debugMsg = 'setting   the   HTTP   Referer   header' \n      logger.debug(debugMsg) \n      conf.httpHeaders.append((HTTP_HEADER.REFERER, conf.referer))",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def issue(owner, repository, number): \n    return gh.issue(owner, repository, number)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def idz_sfrmi(l, m): \n    return _id.idz_sfrmi(l, m)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_system_symbol(img, instruction_addr, sdk_info=None): \n    return DSymSymbol.objects.lookup_symbol(instruction_addr=instruction_addr, image_addr=img['image_addr'], image_vmaddr=img['image_vmaddr'], uuid=img['uuid'], cpu_name=get_cpu_name(img['cpu_type'], img['cpu_subtype']), object_path=img['name'], sdk_info=sdk_info)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def post_form_view(request): \n    return post_form_response()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sdm_zero(): \n    return []",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def runWithWarningsSuppressed(suppressedWarnings, f, *args, **kwargs): \n    with warnings.catch_warnings(): \n      for (a, kw) in suppressedWarnings: \n         warnings.filterwarnings(*a, **kw) \n      return f(*args, **kwargs)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_image_dir_path(instance): \n    return os.path.join(CONF.instances_path, instance['name'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wait_for_download_folder(): \n    while (not cfg.download_dir.test_path()): \n      logging.debug('Waiting   for   \"incomplete\"   folder') \n      time.sleep(2.0)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _delete_ntp_servers(servers): \n    return __salt__['ntp.delete_servers'](commit=False, *servers)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _fast_cross_nd_sum(a, b, c): \n    return (((((a[..., 1] * b[..., 2]) - (a[..., 2] * b[..., 1])) * c[..., 0]) + (((a[..., 2] * b[..., 0]) - (a[..., 0] * b[..., 2])) * c[..., 1])) + (((a[..., 0] * b[..., 1]) - (a[..., 1] * b[..., 0])) * c[..., 2]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_version(): \n    return _get_version('visual_92_categories')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _parse_belongs_to(key, belongs_to, inventory): \n    for item in belongs_to: \n      if (key not in inventory[item]['children']): \n         appended = du.append_if(array=inventory[item]['children'], item=key) \n         if appended: \n            logger.debug('Added   %s   to   %s', key, item)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def verify_challenge(uri): \n    while True: \n      try: \n         resp = urlopen(uri) \n         challenge_status = json.loads(resp.read().decode('utf8')) \n      except IOError as e: \n         raise ValueError('Error   checking   challenge:   {0}   {1}'.format(e.code, json.loads(e.read().decode('utf8')))) \n      if (challenge_status['status'] == 'pending'): \n         time.sleep(2) \n      elif (challenge_status['status'] == 'valid'): \n         LOGGER.info('Domain   verified!') \n         break \n      else: \n         raise ValueError('Domain   challenge   did   not   pass:   {0}'.format(challenge_status))",
        "line_count": 13,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def random_string_from_module(module): \n    return random.choice(string_from_module(module))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_PostalAddressProperty(model, prop, kwargs): \n    return get_TextField(kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_block_gradient(op): \n    return isinstance(op, _ElemwiseNoGradient)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def for_unsigned_dtypes_combination(names=('dtype',), full=None): \n    return for_dtypes_combination(_unsigned_dtypes, names=names, full=full)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_enum(key, value, enumeration): \n    return parse_enum_csv(key, value, enumeration, 1)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_options(): \n    return {'host': __opts__.get('couchbase.host', 'salt'), 'port': __opts__.get('couchbase.port', 8091), 'bucket': __opts__.get('couchbase.bucket', 'salt'), 'password': __opts__.get('couchbase.password', '')}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _path_to_string(path): \n    return '.'.join(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _int_from_json(value, field): \n    if _not_null(value, field): \n      return int(value)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def argrelmax(data, axis=0, order=1, mode='clip'): \n    return argrelextrema(data, np.greater, axis, order, mode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_context(): \n    return RequestContext(user_id=None, project_id=None, is_admin=False, overwrite=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def norm_dlldy(y): \n    return (- y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(file): \n    return Parser(file).parse()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def consistencygroup_destroy(context, consistencygroup_id): \n    return IMPL.consistencygroup_destroy(context, consistencygroup_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def startswith_(a, fragment, msg=None): \n    assert a.startswith(fragment), (msg or ('%r   does   not   start   with   %r' % (a, fragment)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ads_email(body, from_name=g.domain): \n    return _ads_email(body, from_name, Email.Kind.ADS_ALERT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _user_can_edit(user, group_profile): \n    return (user.has_perm('groups.change_groupprofile') or (user in group_profile.leaders.all()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test__FileIO_seek(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_from_float(method, prec, exprange, restricted_range, itr, stat): \n    for rounding in RoundModes: \n      context.rounding = rounding \n      for i in range(1000): \n         f = randfloat() \n         op = ((f,) if method.startswith('context.') else ('sNaN', f)) \n         t = TestSet(method, op) \n         try: \n            if (not convert(t)): \n               continue \n            callfuncs(t) \n            verify(t, stat) \n         except VerifyError as err: \n            log(err)",
        "line_count": 13,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def _dummy_closure(x): \n    return (lambda : x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable_module(module): \n    if (not is_module_enabled(module)): \n      run_as_root(('a2enmod   %s' % module))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def generate_key(): \n    return str(hashlib.sha224(str(random.getrandbits(128)).encode(u'utf-8')).hexdigest())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_to_seconds(varnames): \n    return preprocess_args(cvsecs, varnames)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addPathIndexSecondSegment(gridPixel, pathIndexTable, pixelTable, segmentSecondPixel): \n    for yStep in xrange(gridPixel[1], (segmentSecondPixel[1] + 1)): \n      if getKeyIsInPixelTableAddValue((gridPixel[0], yStep), pathIndexTable, pixelTable): \n         return",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _get_inst(ip, port): \n    return _servers.get((ip, port), None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ProtosToIndexDefinitions(protos): \n    return [ProtoToIndexDefinition(definition) for definition in protos]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def processElementNode(elementNode): \n    elementNode.parentNode.xmlObject.vertexes += getArcPath(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text='', repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_resource(): \n    return {'url': 'http://www.example.com', 'description': 'example   resource   description', 'format': 'txt', 'name': 'example   resource'}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _use_str_for_masked_values(format_func): \n    return (lambda format_, val: (str(val) if (val is np.ma.masked) else format_func(format_, val)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def repack(repo): \n    with open_repo_closing(repo) as r: \n      r.object_store.pack_loose_objects()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SMTP(port=25, **kwargs): \n    return rule(port, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_output_filename(dataset_dir, split_name): \n    return ('%s/mnist_%s.tfrecord' % (dataset_dir, split_name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _module_name(*components): \n    return '.'.join(components)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TickJob(session): \n    session.ui.notify('Tick!')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def logout(client): \n    client.click(jquery='(\"#hue-logout   a\")[0]')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def readKeys(keydir): \n    for filename in os.listdir(keydir): \n      if filename.startswith('.'): \n         continue \n      (basename, ext) = os.path.splitext(filename) \n      if (ext != '.pub'): \n         continue \n      if (not isSafeUsername(basename)): \n         log.warn('Unsafe   SSH   username   in   keyfile:   %r', filename) \n         continue \n      path = os.path.join(keydir, filename) \n      f = file(path) \n      for line in f: \n         line = line.rstrip('\\n') \n         (yield (basename, line)) \n      f.close()",
        "line_count": 15,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def info(): \n    return _nodetool('info')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_transparent_torification(): \n    return transparent_torification",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chunks(it, n): \n    for item in it: \n      (yield ([item] + list(islice(it, (n - 1)))))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _is_task(name, value): \n    return (is_classic_task((name, value)) or is_task_object(value))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_sudo_prefix_without_user(): \n    eq_(_sudo_prefix(user=None, group=None), (env.sudo_prefix % env))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_oozie_enabled(): \n    return (len([app for app in appmanager.DESKTOP_MODULES if (app.name == 'oozie')]) > 0)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def success_installation(domains): \n    z_util(interfaces.IDisplay).notification('Congratulations!   You   have   successfully   enabled   {0}{1}{1}You   should   test   your   configuration   at:{1}{2}'.format(_gen_https_names(domains), os.linesep, os.linesep.join(_gen_ssl_lab_urls(domains))), pause=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def translate_longopt(opt): \n    return opt.translate(longopt_xlate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text, homeRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), homeRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nopackage(pkg_name, orphan=True): \n    if is_installed(pkg_name): \n      uninstall(pkg_name, orphan)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_property(zone, key, value): \n    return _property('set', zone, key, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def task_log_begin_task(context, task_name, period_beginning, period_ending, host, task_items=None, message=None): \n    return IMPL.task_log_begin_task(context, task_name, period_beginning, period_ending, host, task_items, message)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def definite_article(word, gender=MALE, role=SUBJECT): \n    return article_definite.get((gender[:1].lower(), role[:3].lower()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def equal_any(*values): \n    return IMPL.equal_any(*values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def u(s): \n    return (s if (PY3 or (type(s) is unicode)) else unicode(s.encode('string-escape'), 'unicode_escape'))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def humanize_path(path): \n    return path.replace('.', '/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _transform_messages_base64(messages, transform, key=None): \n    for message in messages: \n      if (key is not None): \n         message = message[key] \n      if ('data' in message): \n         message['data'] = transform(message['data'])",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def is_isolate(G, n): \n    return (G.degree(n) == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_currency_name(currency, locale=LC_NUMERIC): \n    return Locale.parse(locale).currencies.get(currency, currency)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def svnadmin_available(): \n    return os.path.exists(django.conf.settings.SVNADMIN_PATH)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_trailer(p): \n    p[0] = ('CALL', p[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('firewall' if ('network.connect' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read(fname): \n    return codecs.open(os.path.join(os.path.dirname(__file__), fname), encoding='utf-8').read()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Thing2Literal(o, d): \n    return string_literal(o, d)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_path_names(): \n    return _SCHEMES.options('posix_prefix')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_stdout(name, cmd, no_start=False, preserve_state=True, stdin=None, python_shell=True, output_loglevel='debug', use_vt=False, path=None, ignore_retcode=False, chroot_fallback=False, keep_env='http_proxy,https_proxy,no_proxy'): \n    return _run(name, cmd, path=path, output='stdout', no_start=no_start, preserve_state=preserve_state, stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, use_vt=use_vt, ignore_retcode=ignore_retcode, chroot_fallback=chroot_fallback, keep_env=keep_env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _process_image_annotations(image): \n    return {'faces': _make_faces_from_pb(image.face_annotations), 'labels': _make_entity_from_pb(image.label_annotations), 'landmarks': _make_entity_from_pb(image.landmark_annotations), 'logos': _make_entity_from_pb(image.logo_annotations), 'properties': _make_image_properties_from_pb(image.image_properties_annotation), 'safe_searches': _make_safe_search_from_pb(image.safe_search_annotation), 'texts': _make_entity_from_pb(image.text_annotations)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def alexnet_v2(inputs, num_classes=1000, is_training=True, dropout_keep_prob=0.5, spatial_squeeze=True, scope='alexnet_v2'): \n    with tf.variable_scope(scope, 'alexnet_v2', [inputs]) as sc: \n      end_points_collection = (sc.name + '_end_points') \n      with slim.arg_scope([slim.conv2d, slim.fully_connected, slim.max_pool2d], outputs_collections=[end_points_collection]): \n         net = slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1') \n         net = slim.max_pool2d(net, [3, 3], 2, scope='pool1') \n         net = slim.conv2d(net, 192, [5, 5], scope='conv2') \n         net = slim.max_pool2d(net, [3, 3], 2, scope='pool2') \n         net = slim.conv2d(net, 384, [3, 3], scope='conv3') \n         net = slim.conv2d(net, 384, [3, 3], scope='conv4') \n         net = slim.conv2d(net, 256, [3, 3], scope='conv5') \n         net = slim.max_pool2d(net, [3, 3], 2, scope='pool5') \n         with slim.arg_scope([slim.conv2d], weights_initializer=trunc_normal(0.005), biases_initializer=tf.constant_initializer(0.1)): \n            net = slim.conv2d(net, 4096, [5, 5], padding='VALID', scope='fc6') \n            net = slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6') \n            net = slim.conv2d(net, 4096, [1, 1], scope='fc7') \n            net = slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7') \n            net = slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer, scope='fc8') \n         end_points = slim.utils.convert_collection_to_dict(end_points_collection) \n         if spatial_squeeze: \n            net = tf.squeeze(net, [1, 2], name='fc8/squeezed') \n            end_points[(sc.name + '/fc8')] = net \n         return (net, end_points)",
        "line_count": 22,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_platform(): \n    return distutils.util.get_platform().replace('.', '_').replace('-', '_')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def retrieve_flags(flag_dict, flag_filter): \n    return [(f[0], f[1]) for f in list(flag_dict.items()) if (isinstance(f[0], (str, bytes)) and f[0].startswith(flag_filter))]",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def combine_play_stats(games): \n    return reduce((lambda p1, p2: (p1 + p2)), [g.drives.players() for g in games if (g is not None)])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def __virtual__(): \n    return ('boto_sqs' if ('boto_sqs.exists' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def staff(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def session(): \n    return Session()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_gosub(p): \n    p[0] = ('GOSUB', int(p[2]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _write_exports(exports, edict): \n    with salt.utils.fopen(exports, 'w') as efh: \n      for export in edict: \n         line = export \n         for perms in edict[export]: \n            hosts = ','.join(perms['hosts']) \n            options = ','.join(perms['options']) \n            line += '   {0}({1})'.format(hosts, options) \n         efh.write('{0}\\n'.format(line))",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_about_url(): \n    return get_url('ABOUT')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_extra_update_by_uuid(context, instance_uuid, updates): \n    return IMPL.instance_extra_update_by_uuid(context, instance_uuid, updates)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inputvars(a): \n    return [v for v in inputs(makeiter(a)) if isinstance(v, tt.TensorVariable)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def write_features_to_file(filename, locs, desc): \n    savetxt(filename, hstack((locs, desc)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def alerting_authority(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _apikey(): \n    return __opts__.get('bamboohr', {}).get('apikey', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def change_vulns(table): \n    return [dict(tab, id=vulnid) for (vulnid, tab) in table.iteritems()]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def CreateApplication(): \n    return webapp2.WSGIApplication(((([(('%s/%s' % (utils.config.BASE_PATH, delete_handler.ConfirmDeleteHandler.SUFFIX)), delete_handler.ConfirmDeleteHandler), (('%s/%s' % (utils.config.BASE_PATH, delete_handler.DoDeleteHandler.SUFFIX)), delete_handler.DoDeleteHandler), (('%s/%s' % (utils.config.BASE_PATH, utils.MapreduceDoneHandler.SUFFIX)), utils.MapreduceDoneHandler), (utils.config.DEFERRED_PATH, deferred.TaskHandler)] + copy_handler.handlers_list(utils.config.BASE_PATH)) + backup_handler.handlers_list(utils.config.BASE_PATH)) + [(('%s/static.*' % utils.config.BASE_PATH), StaticResourceHandler), ('/_ah/login_required', LoginRequiredHandler), ('.*', RouteByActionHandler)]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_get_all_by_project(context, project_id): \n    return IMPL.quota_get_all_by_project(context, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def access(authorization_code): \n    return get_oauth_service().get_raw_access_token(data={'code': authorization_code, 'grant_type': 'authorization_code', 'redirect_uri': constants.CALLBACK}).json()['refresh_token']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processXMLElement(xmlElement): \n    evaluate.processCondition(xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_med(med): \n    return (isinstance(med, numbers.Integral) and (0 <= med <= 4294967295))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def limit_domains(url, limit_dict): \n    for (domain, limiter) in limit_dict.items(): \n      if (domain in url): \n         limiter() \n         break",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def new(data=None): \n    return MD5Hash().new(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_form_submitted(): \n    return (request and (request.method in ('PUT', 'POST')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def DropPrivileges(): \n    if config_lib.CONFIG['Server.username']: \n      try: \n         os.setuid(pwd.getpwnam(config_lib.CONFIG['Server.username']).pw_uid) \n      except (KeyError, OSError): \n         logging.exception('Unable   to   switch   to   user   %s', config_lib.CONFIG['Server.username']) \n         raise",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def jquery_url(): \n    return get_bootstrap_setting(u'jquery_url')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_open(*args, **kwargs): \n    return file(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wildcard_in_db(namespace): \n    return (namespace.find('*') < namespace.find('.'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getSense(form, pos='noun', senseno=0): \n    return getWord(form, pos)[senseno]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_data_get_for_project(context, project_id, session=None): \n    return IMPL.snapshot_data_get_for_project(context, project_id, session)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _list_files(folder, pattern): \n    for (root, folders, files) in os.walk(folder): \n      for filename in files: \n         if fnmatch.fnmatch(filename, pattern): \n            (yield os.path.join(root, filename))",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def find_sockdir(): \n    for dir in SEARCH_DIRS: \n      for (dirpath, dirnames, dirfiles) in os.walk(dir, followlinks=True): \n         for name in dirfiles: \n            if (utils.is_sockfile(os.path.join(dirpath, name)) and ('PGSQL' in name)): \n               return dirpath",
        "line_count": 5,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def changed_files(config='root', num_pre=None, num_post=None): \n    return status(config, num_pre, num_post).keys()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_pack_group(): \n    return cfg.CONF.content.pack_group",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_type_extra_specs_get(context, flavor_id): \n    return IMPL.instance_type_extra_specs_get(context, flavor_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processXMLElement(xmlElement): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _if_modified_since_passes(last_modified, if_modified_since): \n    return ((not last_modified) or (last_modified > if_modified_since))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def apply_item_changes(lib, item, move, pretend, write): \n    if (not pretend): \n      if (move and (lib.directory in util.ancestry(item.path))): \n         item.move(with_album=False) \n      if write: \n         item.try_write() \n      item.store()",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def expand_complex(expr, deep=True): \n    return sympify(expr).expand(deep=deep, complex=True, basic=False, log=False, mul=False, power_exp=False, power_base=False, multinomial=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, **kw): \n    return loads(fp.read(), encoding=encoding, cls=cls, object_hook=object_hook, parse_float=parse_float, parse_int=parse_int, parse_constant=parse_constant, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def md5_key_mangler(key): \n    return md5(key.encode('ascii')).hexdigest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ValidHeadersRewriter(response): \n    for (key, value) in response.headers.items(): \n      try: \n         key.decode('ascii') \n         value.decode('ascii') \n      except UnicodeDecodeError: \n         del response.headers[key]",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def reversed_upper_bounded_changelog(repo, included_upper_bounds_changeset_revision): \n    return reversed_lower_upper_bounded_changelog(repo, INITIAL_CHANGELOG_HASH, included_upper_bounds_changeset_revision)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def revision_links(obj): \n    return combine_funcs(obj, (current_revision_link, related_revisions_link))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _message_pb_from_mapping(message): \n    return PubsubMessage(data=_to_bytes(message['data']), attributes=message['attributes'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _module_to_dict(module, omittable=(lambda k: k.startswith('_'))): \n    return dict([(k, repr(v)) for (k, v) in module.__dict__.items() if (not omittable(k))])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def can_delete(cc_content, context): \n    return _is_author_or_privileged(cc_content, context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_diagonal(i, j): \n    return (1 if (i == j) else 0)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _queue_manangement_worker(executor_reference, processes, pending_work_items, work_ids_queue, call_queue, result_queue, shutdown_process_event): \n    while True: \n      _add_call_item_to_queue(pending_work_items, work_ids_queue, call_queue) \n      try: \n         result_item = result_queue.get(block=True, timeout=0.1) \n      except queue.Empty: \n         executor = executor_reference() \n         if (_shutdown or (executor is None) or executor._shutdown_thread): \n            if (not pending_work_items): \n               shutdown_process_event.set() \n               for p in processes: \n                  p.join() \n               return \n         del executor \n      else: \n         work_item = pending_work_items[result_item.work_id] \n         del pending_work_items[result_item.work_id] \n         if result_item.exception: \n            work_item.future.set_exception(result_item.exception) \n         else: \n            work_item.future.set_result(result_item.result)",
        "line_count": 20,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def ifequal(parser, token): \n    return do_ifequal(parser, token, False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_motd(): \n    return rpc_utils.get_motd()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def thvideo_download_playlist(url, output_dir='.', merge=False, info_only=False, **kwargs): \n    if re.match('http://thvideo.tv/v/\\\\w+', url): \n      html = get_content(url) \n      video_list = match1(html, '<li>cid=(.+)</li>').split('**') \n      title_base = th_video_get_title(url, 0) \n      for (p, v) in video_list: \n         part_title = [i.split('=')[(-1):][0].split('|')[1] for i in video_list][p] \n         title = (title_base + part_title) \n         thvideo_download(url, output_dir, merge, info_only, p=p, title=title)",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _parse_file_key_certs(certificate_file, validate=False): \n    while True: \n      keycert_content = _read_until_keywords('dir-key-certification', certificate_file) \n      block_end_prefix = PGP_BLOCK_END.split('   ', 1)[0] \n      keycert_content += _read_until_keywords(block_end_prefix, certificate_file, True) \n      if keycert_content: \n         (yield stem.descriptor.networkstatus.KeyCertificate(bytes.join('', keycert_content), validate=validate)) \n      else: \n         break",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def S_ISGITLINK(m): \n    return (stat.S_IFMT(m) == S_IFGITLINK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def info(msg): \n    log(msg, logging.INFO)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def contrast_diff_mean(nm): \n    return (np.eye(nm) - (np.ones((nm, nm)) / nm))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iterkeys(d): \n    return getattr(d, _iterkeys)()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_abstract(node): \n    return ABSTRACT.match(node.name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reapAllProcesses(): \n    for process in list(reapProcessHandlers.values()): \n      process.reapProcess()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def InsertNodesAfter(new_nodes, target): \n    for node in reversed(new_nodes): \n      _InsertNodeAt(node, target, after=True)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def processXMLElement(xmlElement): \n    xmlElement.parent.object.vertexes += getCubicPath(xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backend(entry): \n    return ''",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _full_live_path(cli_config, lineagename): \n    return os.path.join(cli_config.live_dir, lineagename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_iteration_statement_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def activity_funding(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upper(value): \n    return value.upper()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _tupleize(dct): \n    return [(key, val) for (key, val) in dct.items()]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def mmap_readwrite(f, sz=0, close=True): \n    return _mmap_do(f, sz, mmap.MAP_SHARED, (mmap.PROT_READ | mmap.PROT_WRITE), close)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_email(email): \n    return (('@' in email) and ('.' in email))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def addPathToGroup(derivation, groupDictionaryCopy, path, targetMatrix, totalIndex): \n    for (pointIndex, point) in enumerate(path): \n      arrayElement = derivation.target.getCopy(derivation.elementNode.getIDSuffix(totalIndex), derivation.elementNode) \n      arrayDictionary = arrayElement.attributes \n      arrayDictionary['visible'] = str(derivation.visible).lower() \n      arrayDictionary.update(groupDictionaryCopy) \n      euclidean.removeTrueFromDictionary(arrayDictionary, 'visible') \n      vertexMatrix = matrix.Matrix(matrix.getTranslateTetragridByTranslation(point)) \n      zAngle = (totalIndex * 50.0) \n      rotationMatrix = getRotationMatrix(arrayDictionary, derivation, path, point, pointIndex) \n      arrayElementMatrix = vertexMatrix.getSelfTimesOther(rotationMatrix.getSelfTimesOther(targetMatrix.tetragrid).tetragrid) \n      arrayDictionary.update(arrayElementMatrix.getAttributes('matrix.')) \n      arrayDictionary['_arrayIndex'] = totalIndex \n      arrayDictionary['_arrayPoint'] = point \n      totalIndex += 1",
        "line_count": 14,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def epoch(): \n    return datetime(1970, 1, 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def query(key): \n    return _current_config.get(key.upper(), None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def accuracy(classify=(lambda document: False), documents=[], average=None): \n    return test(classify, documents, average)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean(jail=None, chroot=None, root=None): \n    return __salt__['cmd.run']((_pkg(jail, chroot, root) + ['clean']), output_loglevel='trace', python_shell=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index_chunk(cls, id_list, reraise=False): \n    for ids in chunked(id_list, 80): \n      documents = [] \n      for id_ in ids: \n         try: \n            documents.append(cls.extract_document(id_)) \n         except UnindexMeBro: \n            cls.unindex(id_) \n         except Exception: \n            log.exception('Unable   to   extract/index   document   (id:   %d)', id_) \n            if reraise: \n               raise \n      if documents: \n         cls.bulk_index(documents, id_field='id') \n      if settings.DEBUG: \n         reset_queries()",
        "line_count": 15,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def minorticks_off(): \n    gca().minorticks_off()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_config(key): \n    return c[key]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def userdel(pwfile, user): \n    return __salt__['webutil.userdel'](pwfile, user)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def scalene(x, alpha, beta): \n    return ((alpha * pos(x)) + (beta * neg(x)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetAllRuntimes(): \n    return _all_runtimes",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RunInTransaction(function, *args, **kwargs): \n    return RunInTransactionOptions(None, function, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def agent_build_get_by_triple(context, hypervisor, os, architecture): \n    return IMPL.agent_build_get_by_triple(context, hypervisor, os, architecture)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def label_param(registry, xml_parent, data): \n    base_param(registry, xml_parent, data, True, 'org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run(): \n    for chunk in chunked(Webapp.objects.all(), 50): \n      for app in chunk: \n         for slug in SIZE_SLUGS: \n            assets = ImageAsset.objects.filter(addon=app, slug=slug) \n            for asset in assets[1:]: \n               asset.delete()",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def all_collectors(): \n    return COLLECTORS.itervalues()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resize_url(url, maxwidth): \n    return '{0}?{1}'.format(PROXY_URL, urllib.urlencode({'url': url.replace('http://', ''), 'w': str(maxwidth)}))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_iter(fname, sep=None): \n    for line in open(fname): \n      if (line and (line[0] != '#')): \n         (yield line.split(sep))",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _not_converged(y_truth, y_prediction, tol=0.001): \n    return (np.abs((y_truth - y_prediction)).sum() > tol)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_queryset(klass): \n    return klass.query",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uml_format(source, language, css_class): \n    return (u'<pre   class=\"%s\"><code>%s</code></pre>' % (css_class, _escape(source)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reset_docker_settings(): \n    DockerUtil().set_docker_settings({}, {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safe_repr(o): \n    return _safeFormat(repr, o)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dead_code_elimination(graph, du, ud): \n    for node in graph.rpo: \n      for (i, ins) in node.get_loc_with_ins()[:]: \n         reg = ins.get_lhs() \n         if (reg is not None): \n            if ((reg, i) not in du): \n               if ins.is_call(): \n                  ins.remove_defined_var() \n               elif ins.has_side_effect(): \n                  continue \n               else: \n                  update_chain(graph, i, du, ud) \n                  graph.remove_ins(i)",
        "line_count": 12,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def ungettext(singular, plural, number): \n    return do_ntranslate(singular, plural, number, 'ungettext')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _pr_compile(regex, cleanup=None): \n    return (_re_compile(regex), cleanup)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fft2(x, shape=None, axes=((-2), (-1)), overwrite_x=False): \n    return fftn(x, shape, axes, overwrite_x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_warning(msg): \n    print(('\\x1b[31m%s\\x1b[0m' % msg), file=sys.stderr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_declaration_list_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def transfer_get(context, transfer_id): \n    return IMPL.transfer_get(context, transfer_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def broken_view(request): \n    raise KeyError('Oops!   Looks   like   you   wrote   some   bad   code.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def partial(func, *args, **kw): \n    return functools.update_wrapper(functools.partial(func, *args, **kw), func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isValid(text): \n    return bool(re.search('\\\\bemail\\\\b', text, re.IGNORECASE))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bucket_copy(self, CopySource, Key, ExtraArgs=None, Callback=None, SourceClient=None, Config=None): \n    return self.meta.client.copy(CopySource=CopySource, Bucket=self.name, Key=Key, ExtraArgs=ExtraArgs, Callback=Callback, SourceClient=SourceClient, Config=Config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def migrate_add_message_prefix(context, max_count, force=False): \n    return IMPL.migrate_add_message_prefix(context, max_count, force)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_time_override(): \n    utcnow.override_time = None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sanitize_redirect(host, redirect_to): \n    if redirect_to: \n      try: \n         netloc = (urlparse(redirect_to)[1] or host) \n      except (TypeError, AttributeError): \n         pass \n      else: \n         if (netloc == host): \n            return redirect_to",
        "line_count": 8,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def p_const_map(p): \n    p[0] = dict(p[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_loaded_rules(rules_paths): \n    for path in rules_paths: \n      if (path.name != '__init__.py'): \n         rule = Rule.from_path(path) \n         if rule.is_enabled: \n            (yield rule)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def stub_verify(conn, cert, errno, errdepth, code): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('acme.cert' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_queries(): \n    for query in connection.queries: \n      print (query['sql'] + ';\\n')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def addHTMLListings(document, dir): \n    for node in domhelpers.findElementsWithAttribute(document, 'class', 'html-listing'): \n      filename = node.getAttribute('href') \n      val = ('<pre   class=\"htmlsource\">\\n%s</pre>' % cgi.escape(open(os.path.join(dir, filename)).read())) \n      _replaceWithListing(node, val, filename, 'html-listing')",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def renumerate(it): \n    return zip(xrange((len(it) - 1), (-1), (-1)), reversed(it))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wanmen_download_by_course_topic(json_api_content, tIndex, output_dir='.', merge=True, info_only=False, **kwargs): \n    for pIndex in range(len(json_api_content[0]['Topics'][tIndex]['Parts'])): \n      wanmen_download_by_course_topic_part(json_api_content, tIndex, pIndex, output_dir=output_dir, merge=merge, info_only=info_only, **kwargs)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _add_doc(func, doc): \n    func.__doc__ = doc",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_collections(): \n    return _do_mb_query('collection', '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLDARKCLOUDCOVER(barDs, count, penetration=(-4e+37)): \n    return call_talib_with_ohlc(barDs, count, talib.CDLDARKCLOUDCOVER, penetration)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _record_from_json(value, field): \n    if _not_null(value, field): \n      record = {} \n      record_iter = zip(field.fields, value['f']) \n      for (subfield, cell) in record_iter: \n         converter = _CELLDATA_FROM_JSON[subfield.field_type] \n         if (subfield.mode == 'REPEATED'): \n            value = [converter(item['v'], subfield) for item in cell['v']] \n         else: \n            value = converter(cell['v'], subfield) \n         record[subfield.name] = value \n      return record",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def ipv4_to_int(ip): \n    return struct.unpack('!I', addrconv.ipv4.text_to_bin(ip))[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return ChopRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vstack(blocks, format=None, dtype=None): \n    return bmat([[b] for b in blocks], format=format, dtype=dtype)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def validate_pre_plugin_load(): \n    if (cfg.CONF.core_plugin is None): \n      msg = _('Neutron   core_plugin   not   configured!') \n      return msg",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _get_models_to_patch(): \n    return list(itertools.chain(*[app_config.get_models(include_auto_created=False) for app_config in apps.get_app_configs() if ((app_config.label == 'osf') or app_config.label.startswith('addons_'))]))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def auto_through(field): \n    return ((not field.rel.through) or getattr(getattr(field.rel.through, '_meta', None), 'auto_created', False))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_video_from_youtube_id(youtube_id): \n    for (channel, language) in available_content_databases(): \n      video = _get_video_from_youtube_id(channel=channel, language=language, youtube_id=youtube_id) \n      if video: \n         return video",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def mount(device, mountpoint): \n    run_process(['mount', device.path, mountpoint.path])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def throw(exception): \n    raise exception",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_phases_by_plugin(name): \n    return list(get_plugin_by_name(name).phase_handlers)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def auto_configure_disk(session, vdi_ref, new_gb): \n    with vdi_attached_here(session, vdi_ref, read_only=False) as dev: \n      partitions = _get_partitions(dev) \n      if (len(partitions) != 1): \n         return \n      (_num, start, old_sectors, ptype) = partitions[0] \n      if (ptype in ('ext3', 'ext4')): \n         new_sectors = ((((new_gb * 1024) * 1024) * 1024) / SECTOR_SIZE) \n         _resize_part_and_fs(dev, start, old_sectors, new_sectors)",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def has_app_context(): \n    return (_app_ctx_stack.top is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _compare_combo(raw, new, times, n_times): \n    for ti in times: \n      orig = raw[:, (ti % n_times)][0] \n      assert_allclose(orig, new[:, ti][0])",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def GetOutputFile(): \n    return rl.console",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _restore_service(service): \n    _apply_service(service, SonosDevice.restore)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_compare_fiff(): \n    check_usage(mne_compare_fiff)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def security_group_get(context, security_group_id, columns_to_join=None): \n    return IMPL.security_group_get(context, security_group_id, columns_to_join)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def linear(x): \n    return x",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def str(val): \n    return format('%.12g', val)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_team(name, profile='github'): \n    return list_teams(profile).get(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def training(): \n    return s3db.hrm_training_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cuckoo_root(): \n    return path.join(path.dirname(ANALYZER_ROOT), 'cuckoo')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init_mappings(mappings): \n    for (sectname, section) in mappings.items(): \n      for (optname, mapping) in section.items(): \n         default = mapping.save_default() \n         log.config.vdebug('Saved   default   for   {}   ->   {}:   {!r}'.format(sectname, optname, default)) \n         value = config.get(sectname, optname) \n         log.config.vdebug('Setting   {}   ->   {}   to   {!r}'.format(sectname, optname, value)) \n         mapping.set(value)",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def see_other(location): \n    to(location, falcon.HTTP_303)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def padlist(container, size, default=None): \n    return (list(container)[:size] + ([default] * (size - len(container))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def regions(): \n    return get_regions('sts', connection_cls=STSConnection)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    elementNode.parentNode.xmlObject.vertexes += getCubicPath(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_expected_validation_developer_message(preference_key, preference_value): \n    return u\"Value   '{preference_value}'   not   valid   for   preference   '{preference_key}':   {error}\".format(preference_key=preference_key, preference_value=preference_value, error={'key': [u'Ensure   this   value   has   at   most   255   characters   (it   has   256).']})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def raisingResolverFactory(*args, **kwargs): \n    raise ResolverFactoryArguments(args, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_admin_users(admins): \n    return [get_user(email=e) for e in admins]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _unquote_domain(domain): \n    return urllib.parse.unquote(domain).replace('%2E', '.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_date(date): \n    return date.strftime(DATE_FORMAT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable_nat(interface): \n    run(settings.iptables, '-t', 'nat', '-A', 'POSTROUTING', '-o', interface, '-j', 'MASQUERADE')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def impl_ret_untracked(ctx, builder, retty, ret): \n    return ret",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def property_clean(prop, value): \n    if (value is not None): \n      try: \n         prop.validate(prop.make_value_from_form(value)) \n      except (db.BadValueError, ValueError) as e: \n         raise forms.ValidationError(unicode(e))",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def timestamps(registry, xml_parent, data): \n    XML.SubElement(xml_parent, 'hudson.plugins.timestamper.TimestamperBuildWrapper')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def import_no_db_in_virt(logical_line, filename): \n    if (('nova/virt' in filename) and (not filename.endswith('fake.py'))): \n      if logical_line.startswith('from   nova   import   db'): \n         (yield (0, 'N307:   nova.db   import   not   allowed   in   nova/virt/*'))",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def new(key, mode, *args, **kwargs): \n    return _create_cipher(sys.modules[__name__], key, mode, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def itervalues(d, **kw): \n    return iter(getattr(d, _itervalues)(**kw))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def post_process(fasta_fp, mapping_fp, denoised_seqs_fp, otu_picker_otu_map_fp, out_dir): \n    combine_mappings(open(fasta_fp), open(mapping_fp), open(denoised_seqs_fp), open(otu_picker_otu_map_fp), out_dir)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rospack_depends_on(pkg): \n    return rospackexec(['depends-on', pkg]).split()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def server(request): \n    return direct_to_template(request, 'server/index.html', {'user_url': getViewURL(request, idPage), 'server_xrds_url': getViewURL(request, idpXrds)})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_txt_response(name, txt_records): \n    return dns.rrset.from_text_list(name, 60, 'IN', 'TXT', txt_records)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_extension(id, extension): \n    EXTENSION[extension.lower()] = id.upper()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def guard_fsys_type(): \n    sabnzbd.encoding.change_fsys(cfg.fsys_type())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qualname_func(_blah): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO_truncate(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_error(node): \n    for child_node in node.get_children(): \n      if isinstance(child_node, astroid.Raise): \n         return True \n      return False",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def crc(string): \n    return ('%08x' % (binascii.crc32(string.encode('utf-8')) & 4294967295))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _update_object(table, table_obj): \n    _db_content[table][table_obj.obj] = table_obj",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unique_id(token_id): \n    return cms.cms_hash_token(token_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _time_from_json(value, field): \n    if _not_null(value, field): \n      return _time_from_iso8601_time_naive(value)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_settings(): \n    return {'mysql': {'host': '127.0.0.1', 'port': 3306, 'user': '', 'passwd': '', 'db': 'zabbix'}, 'slaveid': 3, 'disallow': '[^a-zA-Z0-9\\\\-_\\\\.]', 'internal_metric_interval': 30, 'dbrefresh': 10, 'sqlitedb': '/tmp/zabbix_bridge.db'}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _if_unmodified_since_passes(last_modified, if_unmodified_since): \n    return (last_modified and (last_modified <= if_unmodified_since))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def endsInNewline(s): \n    return (s[(- len('\\n')):] == '\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_children(options): \n    for col in all_living_collectors(): \n      now = int(time.time()) \n      if ((col.interval == 0) and (col.last_datapoint < (now - options.allowed_inactivity_time))): \n         LOG.warning('Terminating   collector   %s   after   %d   seconds   of   inactivity', col.name, (now - col.last_datapoint)) \n         col.shutdown() \n         if (not options.remove_inactive_collectors): \n            register_collector(Collector(col.name, col.interval, col.filename, col.mtime, col.lastspawn))",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def safe_walk(path, **kwargs): \n    return os.walk(ensure_text(path), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sum(image, selem, out=None, mask=None, shift_x=False, shift_y=False): \n    return _apply_scalar_per_pixel(generic_cy._sum, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def url_quote_plus(string, charset='utf-8', errors='strict', safe=''): \n    return url_quote(string, charset, errors, (safe + '   '), '+').replace('   ', '+')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __call__(self, func): \n    return FunctionMaker.create(func, 'with   _self_:   return   _func_(%(shortsignature)s)', dict(_self_=self, _func_=func), __wrapped__=func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('mysql.query' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sql_all(app, style, connection): \n    return ((sql_create(app, style, connection) + sql_custom(app, style, connection)) + sql_indexes(app, style, connection))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CheckForNewlineAtEOF(filename, lines, error): \n    if ((len(lines) < 3) or lines[(-2)]): \n      error(filename, (len(lines) - 2), 'whitespace/ending_newline', 5, 'Could   not   find   a   newline   character   at   the   end   of   the   file.')",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def incorporate_methods(source, destination, methods, default=None, wrapper=None, override=False): \n    for method in methods: \n      if (hasattr(destination, method) and (not override)): \n         raise AttributeError(('Cannot   add   method   {!r}'.format(method) + \"to   destination   object   as   it   already   exists.   To   prevent   this   error   set   'override=True'.\")) \n      if hasattr(source, method): \n         if (wrapper is None): \n            setattr(destination, method, getattr(source, method)) \n         else: \n            setattr(destination, method, wrapper(source, method)) \n      else: \n         setattr(destination, method, None)",
        "line_count": 10,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def returner(load): \n    for returner_ in __opts__[CONFIG_KEY]: \n      _mminion().returners['{0}.returner'.format(returner_)](load)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def from_time(year=0, month=0, day=0, hours=0, minutes=0, seconds=0, microseconds=0, timezone=0): \n    return '20151224113047.000000-480'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_known_type(item): \n    return (isinstance(item, MaskedArray) or (get_type_string(item) is not None))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def teardown(): \n    db_teardown()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def two_dots(a): \n    a.raw_decode",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TagBytes(field_number, wire_type): \n    return _VarintBytes(wire_format.PackTag(field_number, wire_type))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isiterable(obj): \n    return hasattr(obj, '__iter__')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ellipse_perimeter(r, c, r_radius, c_radius, orientation=0, shape=None): \n    return _ellipse_perimeter(r, c, r_radius, c_radius, orientation, shape)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quotes_historical_yahoo_ohlc(ticker, date1, date2, asobject=False, adjusted=True, cachename=None): \n    return _quotes_historical_yahoo(ticker, date1, date2, asobject=asobject, adjusted=adjusted, cachename=cachename, ochl=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_hosting_services(): \n    return list(_hosting_service_registry)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def person(): \n    return s3db.vol_person_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pythonize_path(path): \n    return path.replace('/', '.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _decode_string_escape_py3(str_): \n    return codecs.decode(str_, 'unicode_escape')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(): \n    for filename in sys.argv[1:]: \n      rewrite_file(filename)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def inverse_mellin_transform(F, s, x, strip, **hints): \n    return InverseMellinTransform(F, s, x, strip[0], strip[1]).doit(**hints)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def map_keys(dikt, func): \n    return dict(((func(key), value) for (key, value) in six.iteritems(dikt)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _randint(): \n    return random.randint(MIN_INT32, MAX_INT32)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_comments(text): \n    return re.sub('(?<=\\\\n)\\\\s*#[^#]', '##', text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log_debug(message, **kwargs): \n    if (not __QUIET__): \n      if kwargs: \n         message = message.format(**kwargs) \n      print(message, file=sys.stderr)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def not_alived(subset=None, show_ipv4=False): \n    return list_not_state(subset=subset, show_ipv4=show_ipv4, state='alived')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_dict(*packages): \n    return __salt__['lowpkg.file_dict'](*packages)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_all_tmux_configs(): \n    for (root, dirs, files) in os.walk(TMUX_CONFIG_DIRECTORY): \n      dirs[:] = () \n      for fname in files: \n         match = CONFIG_FILE_NAME.match(fname) \n         if match: \n            assert (match.group(u'suffix') is None) \n            (yield (os.path.join(root, fname), CONFIG_MATCHERS[match.group(u'mod')], CONFIG_PRIORITY[match.group(u'mod')], TmuxVersionInfo(int(match.group(u'major')), int(match.group(u'minor')), match.group(u'suffix'))))",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def legacy_path(path): \n    return urljoin(LEGACY_PYTHON_DOMAIN, path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_sessions(user=None, keep_current=False, device=None): \n    for sid in get_sessions_to_clear(user, keep_current, device): \n      delete_session(sid, reason=u'Logged   In   From   Another   Session')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def processElse(elementNode): \n    evaluate.processCondition(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def maybe_s_to_ms(v): \n    return (int((float(v) * 1000.0)) if (v is not None) else v)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def update_counts(s, counts): \n    for char in s: \n      if (char in counts): \n         counts[char] += 1",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def new_module(name): \n    return type(sys)(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _no_op(name, **kwargs): \n    return dict(name=name, result=True, changes={}, comment='')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_zfs(): \n    return salt.utils.which('zfs')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def output(s): \n    context.output += str(s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def result_to_region(result, country): \n    if ('province' in result): \n      mapbox_region = result['province'] \n      lookup_args = {'name': mapbox_region['name'], 'country': country} \n      args = {'mapbox_id': mapbox_region['id']} \n      args.update(lookup_args) \n      query = (Q(**lookup_args) | Q(mapbox_id=mapbox_region['id'])) \n      region_qs = Region.objects.filter(query).distinct() \n      if region_qs.exists(): \n         if (region_qs.count() == 2): \n            deduplicate_regions(region_qs[0], region_qs[1]) \n         region_qs.update(**args) \n         region = region_qs[0] \n      else: \n         region = Region.objects.create(**args) \n      return region",
        "line_count": 15,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def BatchMailEventFeedFromString(xml_string): \n    return atom.CreateClassFromXMLString(BatchMailEventFeed, xml_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftSequence(): \n    return 'cleave,preface,coil,flow,feed,home,lash,fillet,limit,dimension,unpause,export'.split(',')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_instance(obj, klass): \n    return issubclass(type(obj), klass)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_ubuntu(distribution): \n    return distribution.startswith('ubuntu-')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sigterm_handler(num, frame): \n    sys.exit()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def swap16(value): \n    return (((value & 255) << 8) | (value >> 8))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def logged_in_users(attrs=None, where=None): \n    return _osquery_cmd(table='logged_in_users', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_shadowed(identifier, ip): \n    return ((identifier in ip.user_ns) or (identifier in ip.user_global_ns) or (identifier in ip.ns_table['builtin']) or iskeyword(identifier))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def copymode(src, dst): \n    if hasattr(os, 'chmod'): \n      st = os.stat(src) \n      mode = stat.S_IMODE(st.st_mode) \n      os.chmod(dst, mode)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def unregister_serializer(format): \n    del _serializers[format]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sort_key_by_numeric_other(key_value): \n    return tuple((((int(numeric) if numeric else None), (INSTANCE_SIZES.index(alpha) if (alpha in INSTANCE_SIZES) else alpha), other) for (numeric, alpha, other) in RE_NUMERIC_OTHER.findall(key_value[0])))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _parseUNIX(factory, address, mode='666', backlog=50, lockfile=True): \n    return ((address, factory), {'mode': int(mode, 8), 'backlog': int(backlog), 'wantPID': bool(int(lockfile))})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render_to_text(*args, **kwargs): \n    return HttpResponse(loader.render_to_string(*args, **kwargs), mimetype='text/plain')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tuple2keyevent(past_event): \n    return QKeyEvent(*past_event)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disconnect_all(signal=Any, sender=Any): \n    for receiver in liveReceivers(getAllReceivers(sender, signal)): \n      disconnect(receiver, signal=signal, sender=sender)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_ruleitem(p): \n    p[0] = p[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def entry_choices(user, page): \n    for entry in wizard_pool.get_entries(): \n      if entry.user_has_add_permission(user, page=page): \n         (yield (entry.id, entry.title))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def override_pylons_about(): \n    return render_template(u'about.html')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vulnerability_callback(id, type, server_addr, server_port, applications): \n    logger.critical(('Vulnerability   %s   in   connection   %s   to   %s:%s   by   %s' % (type, id, server_addr, server_port, ',   '.join((('%s   version   %s' % (app.application, app.version)) for app in applications)))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_year_and_month_format(locale): \n    return locale_year_and_month_formats.get(locale.language.lower(), u'MMM   y')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_of_nodes(inputs, outputs): \n    return stack_search(deque([o.owner for o in outputs]), (lambda o: [inp.owner for inp in o.inputs if (inp.owner and (not any(((i in inp.owner.outputs) for i in inputs))))]))",
        "line_count": 1,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def p_logical_and_expression_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def survey_template_rheader(r, tabs=[]): \n    if (r.representation == 'html'): \n      (tablename, record) = s3_rheader_resource(r) \n      if ((tablename == 'survey_template') and record): \n         T = current.T \n         s3db = current.s3db \n         tabs = [(T('Basic   Details'), 'read'), (T('Question   Details'), 'template_read/'), (T('Question   Summary'), 'template_summary/')] \n         if current.auth.s3_has_permission('create', 'survey_translate'): \n            tabs.append((T('Translate'), 'translate')) \n         rheader_tabs = s3_rheader_tabs(r, tabs) \n         stable = s3db.survey_section \n         qltable = s3db.survey_question_list \n         viewing = current.request.get_vars.get('viewing', None) \n         if viewing: \n            (dummy, template_id) = viewing.split('.') \n         else: \n            template_id = r.id \n         query = ((qltable.template_id == template_id) & (qltable.section_id == stable.id)) \n         rows = current.db(query).select(stable.id, stable.name, orderby=qltable.posn) \n         tsection = TABLE(_class='survey-section-list') \n         label_section = SPAN(T('Sections   that   are   part   of   this   template'), _style='font-weight:bold;') \n         if (rows.__len__() == 0): \n            rsection = SPAN(T('As   of   yet,   no   sections   have   been   added   to   this   template.')) \n         else: \n            rsection = TR() \n            count = 0 \n            last_section = '' \n            for section in rows: \n               if (section.name == last_section): \n                  continue \n               rsection.append(TD(section.name)) \n               last_section = section.name \n               count += 1 \n               if ((count % 4) == 0): \n                  tsection.append(rsection) \n                  rsection = TR() \n         tsection.append(rsection) \n         rheader = DIV(TABLE(TR(TH(('%s:   ' % T('Name'))), record.name, TH(('%s:   ' % T('Status'))), s3db.survey_template_status[record.status])), label_section, tsection, rheader_tabs) \n         return rheader",
        "line_count": 38,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def gte(value, arg): \n    return (value >= int(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def string_camelcase(string): \n    return CAMELCASE_INVALID_CHARS.sub('', string.title())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_module_from_name(dotted_name, path=None, use_sys=True): \n    return load_module_from_modpath(dotted_name.split('.'), path, use_sys)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def serializeTransform(transformObj): \n    return '   '.join([(((command + '(') + '   '.join([scourUnitlessLength(number) for number in numbers])) + ')') for (command, numbers) in transformObj])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def empty_assets_db(): \n    return tmp_assets_db(equities=None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_symbolic_batch(batch): \n    return _is_batch_all(batch, (lambda x: isinstance(x, theano.gof.Variable)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_class_weight_vs_sample_weight(): \n    for reg in (RidgeClassifier, RidgeClassifierCV): \n      reg1 = reg() \n      reg1.fit(iris.data, iris.target) \n      reg2 = reg(class_weight='balanced') \n      reg2.fit(iris.data, iris.target) \n      assert_almost_equal(reg1.coef_, reg2.coef_) \n      sample_weight = np.ones(iris.target.shape) \n      sample_weight[(iris.target == 1)] *= 100 \n      class_weight = {0: 1.0, 1: 100.0, 2: 1.0} \n      reg1 = reg() \n      reg1.fit(iris.data, iris.target, sample_weight) \n      reg2 = reg(class_weight=class_weight) \n      reg2.fit(iris.data, iris.target) \n      assert_almost_equal(reg1.coef_, reg2.coef_) \n      reg1 = reg() \n      reg1.fit(iris.data, iris.target, (sample_weight ** 2)) \n      reg2 = reg(class_weight=class_weight) \n      reg2.fit(iris.data, iris.target, sample_weight) \n      assert_almost_equal(reg1.coef_, reg2.coef_)",
        "line_count": 19,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def hosting_service_url_test_view(request, repo_id): \n    return HttpResponse(str(repo_id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_strict_castform(session, media_root): \n    with pytest.raises(ValueError): \n      castform = session.query(tables.PokemonSpecies).filter_by(identifier=u'castform').first() \n      rainy_castform = [f for f in castform.forms if (f.form_identifier == 'rainy')][0] \n      rainy_castform = media.PokemonFormMedia(media_root, rainy_castform) \n      rainy_castform.overworld('up', strict=True)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def IsBlankLine(line): \n    return ((not line) or line.isspace())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_installed_categories(shop): \n    return (configuration.get(shop, SAMPLE_CATEGORIES_KEY) or [])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def send_process(): \n    return s3db.inv_send_process()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_visible(idx_row, idx_col, lengths): \n    return ((idx_col, idx_row) in lengths)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_glance_metadata_bulk_create(context, volume_id, metadata): \n    return IMPL.volume_glance_metadata_bulk_create(context, volume_id, metadata)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def error(code_or_name): \n    return _error(code_or_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def target_option(s): \n    return s",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def queue_instances(instances): \n    for instance_id in instances: \n      node = _get_node(instance_id=instance_id) \n      for name in node: \n         if (instance_id == node[name]['instanceId']): \n            __utils__['cloud.cache_node'](node[name], __active_provider_name__, __opts__)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def sum_squares(expr): \n    return quad_over_lin(expr, 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cleanup(): \n    _lib.RAND_cleanup()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_profit_data(year, quarter): \n    if (ct._check_input(year, quarter) is True): \n      ct._write_head() \n      data = _get_profit_data(year, quarter, 1, pd.DataFrame()) \n      if (data is not None): \n         data['code'] = data['code'].map((lambda x: str(x).zfill(6))) \n      return data",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def minor_version(best=False): \n    return _distro.minor_version(best)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_warning_statistics(): \n    return get_statistics('W')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_empty(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_all_finite(X): \n    _assert_all_finite((X.data if sp.issparse(X) else X))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def state_name(sname): \n    return sname.split('.', 1)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_plus_sign_symbol(locale=LC_NUMERIC): \n    return Locale.parse(locale).number_symbols.get('plusSign', u'+')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pop_percentile(image, selem, out=None, mask=None, shift_x=False, shift_y=False, p0=0, p1=1): \n    return _apply(percentile_cy._pop, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y, p0=p0, p1=p1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_offset(): \n    return __salt__['cmd.run'](['date', '+%z'], python_shell=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sum(a, axis=None, dtype=None, out=None, keepdims=False): \n    return a.sum(axis, dtype, out, keepdims)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_optional(action): \n    return (action.option_strings and (not action.required))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _flag_default_rules(rules): \n    if (len(rules) >= len(DEFAULT_POLICY_RULES)): \n      rules_suffix = tuple(rules[(- len(DEFAULT_POLICY_RULES)):]) \n      if (rules_suffix == DEFAULT_POLICY_RULES): \n         for rule in rules_suffix: \n            rule._is_default_suffix = True",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def processXMLElement(xmlElement): \n    lineation.processXMLElementByGeometry(getGeometryOutput(None, xmlElement), xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return SmoothRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _cmp_by_reachable_nh(path1, path2): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_count_by_project(context, project_id, session=None): \n    return IMPL.fixed_ip_count_by_project(context, project_id, session=session)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_str_resource_ref_from_model(model): \n    return get_resource_ref_from_model(model).ref",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def local_url(port): \n    return 'http://localhost:{}'.format(str(port))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def colormaps(): \n    return sorted(cm.cmap_d)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_type(**kw): \n    ParseMatcher.custom_types.update(kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dict_to_one(dp_dict={}): \n    return {x: 1 for x in dp_dict}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def parse_mtestfile(fname): \n    with open(fname) as fp: \n      for line in fp: \n         if ('--' in line): \n            line = line[:line.index('--')] \n         if (not line.strip()): \n            continue \n         (lhs, rhs) = line.split('->') \n         (id, fn, arg) = lhs.split() \n         rhs_pieces = rhs.split() \n         exp = rhs_pieces[0] \n         flags = rhs_pieces[1:] \n         (yield (id, fn, float(arg), float(exp), flags))",
        "line_count": 12,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def getDebugging(): \n    return Deferred.debug",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def restart_process(name): \n    run_as_root(('supervisorctl   restart   %(name)s' % locals()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _item_to_project(iterator, resource): \n    return Project.from_api_repr(resource)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def axis_reverse(a, axis=(-1)): \n    return axis_slice(a, step=(-1), axis=axis)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_power(**kwargs): \n    with _IpmiCommand(**kwargs) as s: \n      return s.get_power()['powerstate']",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def db_sync(version=None): \n    return IMPL.db_sync(version=version)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def retrieve_seq_length_op2(data): \n    return tf.reduce_sum(tf.cast(tf.greater(data, tf.zeros_like(data)), tf.int32), 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _windll_getnode(): \n    if (_UuidCreate(_buffer) == 0): \n      return UUID(bytes=_buffer.raw).node",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _create_ansi_color_dict(color_cls): \n    return {u'ansidefault': color_cls.BLACK, u'ansiblack': color_cls.BLACK, u'ansidarkgray': (color_cls.BLACK | color_cls.INTENSITY), u'ansilightgray': color_cls.GRAY, u'ansiwhite': (color_cls.GRAY | color_cls.INTENSITY), u'ansidarkred': color_cls.RED, u'ansidarkgreen': color_cls.GREEN, u'ansibrown': color_cls.YELLOW, u'ansidarkblue': color_cls.BLUE, u'ansipurple': color_cls.MAGENTA, u'ansiteal': color_cls.CYAN, u'ansired': (color_cls.RED | color_cls.INTENSITY), u'ansigreen': (color_cls.GREEN | color_cls.INTENSITY), u'ansiyellow': (color_cls.YELLOW | color_cls.INTENSITY), u'ansiblue': (color_cls.BLUE | color_cls.INTENSITY), u'ansifuchsia': (color_cls.MAGENTA | color_cls.INTENSITY), u'ansiturquoise': (color_cls.CYAN | color_cls.INTENSITY)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeExtension(*args, **kwargs): \n    return MagiclinkExtension(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_class_property(): \n    AreEqual(System.Environment.Version.__class__, System.Version)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fake_plug_vifs(*args, **kwargs): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _brick_get_connector_properties(multipath=False, enforce_multipath=False): \n    return DEFAULT_CONNECTOR",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ipv4_to_bits(ipaddr): \n    return ''.join([bin(int(x))[2:].rjust(8, '0') for x in ipaddr.split('.')])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def remove_file(filename): \n    if os.path.exists(filename): \n      os.remove(filename)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def taggedsent_to_conll(sentence): \n    for (i, (word, tag)) in enumerate(sentence, start=1): \n      input_str = [str(i), word, '_', tag, tag, '_', '0', 'a', '_', '_'] \n      input_str = (' DCTB '.join(input_str) + '\\n') \n      (yield input_str)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _next_device(): \n    return _select_free_device(_find_allocated_devices())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def image_volume_cache_get_by_volume_id(context, volume_id): \n    return IMPL.image_volume_cache_get_by_volume_id(context, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def yield_fixedblocks(infile, blocksize): \n    while True: \n      block = infile.read(blocksize) \n      read_bytes = len(block) \n      if (read_bytes == 0): \n         break \n      (yield block) \n      if (read_bytes < blocksize): \n         break",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def Parse(text, message): \n    _ParseOrMerge(text, message, False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_supported(req, min_version=_MIN_API_VERSION, max_version=_MAX_API_VERSION): \n    return (APIVersionRequest(max_version) >= req.api_version_request >= APIVersionRequest(min_version))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def textile(text, head_offset=0, html_type='xhtml', encoding=None, output=None): \n    return Textile().textile(text, head_offset=head_offset, html_type=html_type)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_testfile_path(name): \n    return os.path.join(os.path.dirname(os.path.realpath(__file__)), name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_ok(response, msg_prefix=u''): \n    return assert_code(response, 200, msg_prefix=msg_prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tril(m, k=0): \n    return (m * tri(m.shape[0], m.shape[1], k=k, dtype=m.dtype))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addGeometryList(elementNode, vertexes): \n    for vertex in vertexes: \n      vertexElement = getUnboundVertexElement(vertex) \n      vertexElement.parentNode = elementNode \n      elementNode.childNodes.append(vertexElement)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_theme_dirs(themes_dir=None): \n    return [_dir for _dir in os.listdir(themes_dir) if is_theme_dir((themes_dir / _dir))]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def haystack_get_app_modules(): \n    return [i.module for i in apps.get_app_configs()]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def norm_open(path): \n    return open(path, 'U')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def distributed_server_test(f): \n    return x_server_test(f, (not settings.CENTRAL_SERVER), 'Distributed   server   test')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def commit(repo='.', message=None, author=None, committer=None): \n    with open_repo_closing(repo) as r: \n      return r.do_commit(message=message, author=author, committer=committer)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def transferPathsToNestedRings(nestedRings, paths): \n    for nestedRing in nestedRings: \n      nestedRing.transferPaths(paths)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_parsed(text): \n    return str(TemplateParser(text))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def call(*popenargs, **kwargs): \n    return Popen(*popenargs, **kwargs).wait()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subfn(pattern, format, string, count=0, flags=0, pos=None, endpos=None, concurrent=None, **kwargs): \n    return _compile(pattern, flags, kwargs).subfn(format, string, count, pos, endpos, concurrent)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def params_to_incoming(incoming, inputs, input_values, app, name_prefix=''): \n    for input in inputs.values(): \n      if (isinstance(input, Repeat) or isinstance(input, UploadDataset)): \n         for d in input_values[input.name]: \n            index = d['__index__'] \n            new_name_prefix = (name_prefix + ('%s_%d|' % (input.name, index))) \n            params_to_incoming(incoming, input.inputs, d, app, new_name_prefix) \n      elif isinstance(input, Conditional): \n         values = input_values[input.name] \n         current = values['__current_case__'] \n         new_name_prefix = ((name_prefix + input.name) + '|') \n         incoming[(new_name_prefix + input.test_param.name)] = values[input.test_param.name] \n         params_to_incoming(incoming, input.cases[current].inputs, values, app, new_name_prefix) \n      elif isinstance(input, Section): \n         values = input_values[input.name] \n         new_name_prefix = ((name_prefix + input.name) + '|') \n         params_to_incoming(incoming, input.inputs, values, app, new_name_prefix) \n      else: \n         value = input_values.get(input.name) \n         incoming[(name_prefix + input.name)] = value",
        "line_count": 19,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def _has_distortion(wcs): \n    return any(((getattr(wcs, dist_attr) is not None) for dist_attr in [u'cpdis1', u'cpdis2', u'det2im1', u'det2im2', u'sip']))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def foldr(fn, elems, initializer=None, name=None): \n    return tf.foldr(fn, elems, initializer=initializer, name=name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_delete(path): \n    return os.unlink(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def network_get_by_uuid(context, uuid): \n    return IMPL.network_get_by_uuid(context, uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def docker_put(args, container_id, src, dst): \n    with open(src, 'rb') as src_fd: \n      docker_exec(args, container_id, ['dd', ('of=%s' % dst), ('bs=%s' % BUFFER_SIZE)], options=['-i'], stdin=src_fd, capture=True)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rm(*files): \n    for wfile in files: \n      for filename in glob.glob(wfile): \n         if islink(filename): \n            os.remove(filename) \n         elif isdir(filename): \n            shutil.rmtree(filename) \n         else: \n            os.remove(filename)",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def breaks_AP(endog, exog, skip): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_read_bad(p): \n    p[0] = 'MALFORMED   VARIABLE   LIST   IN   READ'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_followup_email_for_monthly_fee_payment(email, event_name, date, amount, payment_url): \n    send_email(to=email, action=MONTHLY_PAYMENT_FOLLOWUP_EMAIL, subject=MAILS[MONTHLY_PAYMENT_FOLLOWUP_EMAIL]['subject'].format(event_name=event_name, date=date), html=MAILS[MONTHLY_PAYMENT_FOLLOWUP_EMAIL]['message'].format(event_name=event_name, date=date, payment_url=payment_url, amount=amount, app_name=get_settings()['app_name']))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _CheckHtml(html): \n    return _ValidateString(html, 'html', MAXIMUM_FIELD_VALUE_LENGTH, empty_ok=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fake_bdm_object(context, bdm_dict): \n    return objects.BlockDeviceMapping._from_db_object(context, objects.BlockDeviceMapping(), FakeDbBlockDeviceDict(bdm_dict.copy()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ec2_add_priv_launch_key(argument_table, operation_model, session, **kwargs): \n    argument_table['priv-launch-key'] = LaunchKeyArgument(session, operation_model, 'priv-launch-key')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attr_gt(accessing_obj, accessed_obj, *args, **kwargs): \n    return attr(accessing_obj, accessed_obj, *args, **{'compare': 'gt'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _download_args(options): \n    return dict(version=options.version, download_base=options.download_base, downloader_factory=options.downloader_factory, to_dir=options.to_dir)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_from_args(command, log_command_filter=identity): \n    return Effect(Run.from_args(command, log_command_filter=log_command_filter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sign_int(message, dkey, n): \n    return decrypt_int(message, dkey, n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ts_add(ts, td): \n    return dt_to_ts((ts_to_dt(ts) + td))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def submittable_timestamp(timestamp): \n    return str(timezone.localtime(timestamp)).split(u'.')[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ColonToEquals(node): \n    return ConvertNodes(node, QueryParser.HAS, QueryParser.EQ, '=')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_cache(name): \n    return middleware.RequestCache.get_request_cache(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _nupicHyperSearchHasErrors(hyperSearchJob): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_portaudio_version(): \n    return pa.get_version()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _strip_exc(exc): \n    return re.sub('^Command   [\\\\\\'\"].+[\\\\\\'\"]   failed:   ', '', exc.strerror)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def abspardir(path): \n    return osp.abspath(osp.join(path, os.pardir))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def le(a, b): \n    return (a <= b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return CombRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log(msg): \n    print ('BracketHighlighter:   %s' % msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def identity(n, dtype=float): \n    return eye(n, dtype=dtype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sample_func(v): \n    return (v + v)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apt_get_install(args, sudo=False): \n    return _from_args(sudo)((['apt-get', '-y', 'install'] + args))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resync(hive, hive_names, timeout=2, max_attempts=5): \n    for hostname in hive_names: \n      if (hive[hostname] is not None): \n         for attempts in range(0, max_attempts): \n            if (not hive[hostname].prompt(timeout=timeout)): \n               break",
        "line_count": 5,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def readAuthorizedKeyFile(fileobj, parseKey=keys.Key.fromString): \n    for line in fileobj: \n      line = line.strip() \n      if (line and (not line.startswith('#'))): \n         try: \n            (yield parseKey(line)) \n         except keys.BadKeyError as e: \n            log.msg('Unable   to   parse   line   \"{0}\"   as   a   key:   {1!s}'.format(line, e))",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def indexes(db=None): \n    return indices(db)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addLoopsXSegmentIntersections(lineLoopsIntersections, loops, segmentFirstX, segmentSecondX, segmentYMirror, y): \n    for loop in loops: \n      addLoopXSegmentIntersections(lineLoopsIntersections, loop, segmentFirstX, segmentSecondX, segmentYMirror, y)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_theano_rng(rng_or_seed=None, default_seed=None, which_method=None): \n    return make_rng(rng_or_seed, default_seed, which_method, RandomStreams)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_states(state_prefix): \n    return [constant for constant in dir(ScintillaConstants) if constant.startswith(state_prefix)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def cocktail_shaker_sort(unsorted): \n    for i in range((len(unsorted) - 1), 0, (-1)): \n      swapped = False \n      for j in range(i, 0, (-1)): \n         if (unsorted[j] < unsorted[(j - 1)]): \n            (unsorted[j], unsorted[(j - 1)]) = (unsorted[(j - 1)], unsorted[j]) \n            swapped = True \n      for j in range(i): \n         if (unsorted[j] > unsorted[(j + 1)]): \n            (unsorted[j], unsorted[(j + 1)]) = (unsorted[(j + 1)], unsorted[j]) \n            swapped = True \n      if (not swapped): \n         return unsorted",
        "line_count": 12,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def transpose(expr): \n    return Transpose(expr).doit()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_children_pids(ppid): \n    return system_output(('ps   -L   --ppid=%d   -o   lwp' % ppid)).split('\\n')[1:]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def query_package(module, name, state='present'): \n    if (state == 'present'): \n      lcmd = ('pear   info   %s' % name) \n      (lrc, lstdout, lstderr) = module.run_command(lcmd, check_rc=False) \n      if (lrc != 0): \n         return (False, False) \n      rcmd = ('pear   remote-info   %s' % name) \n      (rrc, rstdout, rstderr) = module.run_command(rcmd, check_rc=False) \n      lversion = get_local_version(rstdout) \n      rversion = get_repository_version(rstdout) \n      if (rrc == 0): \n         return (True, (lversion == rversion)) \n      return (False, False)",
        "line_count": 12,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def is_sparse(constant): \n    return sp.issparse(constant)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_statement_list_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getDiagonalSwitchedTetragridByRadians(angleRadians, diagonals): \n    return getDiagonalSwitchedTetragridByPolar(diagonals, euclidean.getWiddershinsUnitPolar(angleRadians))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onInit(isReload): \n    INFO_MSG(('onInit::isReload:%s' % isReload))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_pickle(data): \n    return to_str(dumps(data, protocol=PICKLE_PROTOCOL))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_features_to_http_headers(features, headers): \n    if features: \n      for (k, v) in features.items(): \n         if (k.lower() in FEATURE_BLACKLIST): \n            raise exception.UnsupportedHeaderFeature(feature=k) \n         if (v is not None): \n            headers[k.lower()] = unicode(v)",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def keywords(s, top=10, **kwargs): \n    return parser.find_keywords(s, **dict({'frequency': parser.frequency, 'top': top, 'pos': ('NN',), 'ignore': ('rt',)}, **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def warning(msg): \n    sys.stderr.write((('\\nWARNING:   ' + msg) + '\\n'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_peer_verification_for_url_hostname(ssl_context, url, if_verify_enabled=False): \n    if ((not if_verify_enabled) or (ssl_context.get_verify_mode() & SSL.VERIFY_PEER)): \n      urlObj = urlparse_.urlparse(url) \n      hostname = urlObj.hostname \n      server_ssl_cert_verif = ServerSSLCertVerification(hostname=hostname) \n      verify_callback_ = server_ssl_cert_verif.get_verify_server_cert_func() \n      ssl_context.set_verify(SSL.VERIFY_PEER, verify_callback_)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def assert_bool(dist, attr, value): \n    if (bool(value) != value): \n      raise DistutilsSetupError(('%r   must   be   a   boolean   value   (got   %r)' % (attr, value)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def AddRoundKey(algInstance, keyBlock): \n    for column in range(algInstance.Nb): \n      for row in range(4): \n         algInstance.state[column][row] ^= keyBlock[column][row]",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def genVersion(*args, **kwargs): \n    return generateVersionFileData(Version(*args, **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getTagBracketedLine(tagName, value): \n    return ('(<%s>   %s   </%s>)' % (tagName, value, tagName))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reload(service): \n    _service(service, 'reload')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_lang_conf(value): \n    with open(LANG_FILE, 'w') as f: \n      f.write(value)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reverse_tuple(n): \n    return tuple(reversed(n))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dump(obj, file, protocol=None): \n    ForkingPickler(file, protocol).dump(obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def seeother(url): \n    return redirect(url, '303   See   Other')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skip_template(condition=True, *args): \n    if condition: \n      raise SkipTemplate(*args)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def unite(iterable): \n    return set(chain.from_iterable(iterable))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gitignore_template(language): \n    return gh.gitignore_template(language)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def registerDOMImplementation(name, factory): \n    registered[name] = factory",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _defaultSysPathFactory(): \n    return sys.path",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _retry_all(_): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cc_binary_config(append=None, **kwargs): \n    blade_config.update_config('cc_binary_config', append, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_datetime(string, locale=LC_TIME): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear(): \n    _cache.clear()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vector_path(*names): \n    return pkg_resources.resource_filename(__name__, os.path.join('testdata', *names))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _row_to_dict(row, d): \n    for fld in row.keys(): \n      val = row[fld] \n      if (val is None): \n         val = '' \n      if _verify_var_type(val): \n         d[('$' + fld)] = _as_str(val)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def DeleteIndex(index): \n    _Call('DeleteIndex', index, api_base_pb.VoidProto())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def urfft2(inarray): \n    return urfftn(inarray, 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fileglob(pathname): \n    return [g for g in glob.glob(pathname) if os.path.isfile(g)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def p_function_seq(p): \n    _parse_seq(p)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_end(p): \n    p[0] = ('END',)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _api_reset_quota(name, output, kwargs): \n    BPSMeter.do.reset_quota(force=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape_new_line(original): \n    return smart_decode(original).replace(u'\\\\', u'\\\\\\\\').replace(u'\\r', u'\\\\r').replace(u'\\n', u'\\\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _service_bus_error_handler(http_error): \n    return _general_error_handler(http_error)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(argv): \n    api_regression_test_lib.main(argv)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isWindowsDriveLetterPath(filepath): \n    return (re.search('\\\\A[\\\\w]\\\\:', filepath) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cos_func(arg): \n    return libm.cos(arg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _reduce_code(code): \n    return (marshal.version, imp.get_magic(), marshal.dumps(code))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tobs(data): \n    return BytesIO(tob(data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_course_key(course_key_or_id): \n    return (CourseKey.from_string(course_key_or_id) if isinstance(course_key_or_id, basestring) else course_key_or_id)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def gevent_wait_callback(conn, timeout=None): \n    while 1: \n      state = conn.poll() \n      if (state == extensions.POLL_OK): \n         break \n      elif (state == extensions.POLL_READ): \n         wait_read(conn.fileno(), timeout=timeout) \n      elif (state == extensions.POLL_WRITE): \n         wait_write(conn.fileno(), timeout=timeout) \n      else: \n         raise OperationalError(('Bad   result   from   poll:   %r' % state))",
        "line_count": 10,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def create_rpc(deadline=None, callback=None, read_policy=STRONG_CONSISTENCY): \n    return datastore.CreateRPC(deadline=deadline, callback=callback, read_policy=read_policy)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prep_jid(nocache=False, passed_jid=None): \n    return (passed_jid if (passed_jid is not None) else salt.utils.jid.gen_jid())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_and_expression_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pci_device_get_all_by_instance_uuid(context, instance_uuid): \n    return IMPL.pci_device_get_all_by_instance_uuid(context, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, *args, **kwargs): \n    return DES3Cipher(key, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def task_test(): \n    return {'task_dep': ['locale', 'doctest'], 'actions': ['py.test   tests/']}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isint(x): \n    return (isinstance(x, int) or isinstance(x, long))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _link(token, result): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def available_calculators(): \n    return CALCULATED_AGGREGATIONS.keys()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wait_rm(name, recurse=False, profile=None): \n    return {'name': name, 'changes': {}, 'result': True, 'comment': ''}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_option(option): \n    return _ldap_function_call(None, _ldap.get_option, option)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_loader_cls(loader): \n    return get_cls_by_name(loader, LOADER_ALIASES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def url_encode(obj, charset='utf-8', encode_keys=False, sort=False, key=None, separator='&'): \n    return separator.join(_url_encode_impl(obj, charset, encode_keys, sort, key))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def regions(): \n    return get_regions('sns', connection_cls=SNSConnection)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ldapUrlEscape(s): \n    return quote(s).replace(',', '%2C').replace('/', '%2F')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_BlobProperty(model, prop, kwargs): \n    return f.FileField(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def urlunquote(quoted_url): \n    return force_unicode(urllib.unquote(smart_str(quoted_url)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pipeline_factory_v21(loader, global_conf, **local_conf): \n    return _load_pipeline(loader, local_conf[CONF.api.auth_strategy].split())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def un_camel_case(s): \n    return re.sub('(?<=\\\\w)([A-Z])', '   \\\\1', s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def finditer(pattern, string, flags=0, pos=None, endpos=None, overlapped=False, partial=False, concurrent=None, **kwargs): \n    return _compile(pattern, flags, kwargs).finditer(string, pos, endpos, overlapped, concurrent, partial)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def copy2(src, dst): \n    shutil.copy2(fsencoding(src), fsencoding(dst))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cql_typename(casstypename): \n    return lookup_casstype(casstypename).cql_parameterized_type()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_abstract_declarator_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def square_this(x): \n    return (x ** 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connect_action(action, fn): \n    action.triggered[bool].connect((lambda x: fn()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten_applications(series): \n    for row in series: \n      if ('data' in row): \n         new = {} \n         for (app, versions) in row['data'].items(): \n            app = amo.APP_GUIDS.get(app) \n            if (not app): \n               continue \n            appname = unicode(app.pretty) \n            for (ver, count) in versions.items(): \n               key = '   '.join([appname, ver]) \n               new[key] = count \n         row['data'] = new \n      (yield row)",
        "line_count": 13,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def constrains(*args): \n    return attrsetter('_constrains', args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def output(string_): \n    context.output += str(string_)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _AbsUrl(relative_url, context, unused_args): \n    return urlparse.urljoin(context.Lookup('base-url'), relative_url)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_dataset_ids(deployment): \n    for node in deployment.nodes.values(): \n      for manifestation in node.manifestations.values(): \n         (yield manifestation.dataset.dataset_id)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def export_book(databook): \n    return json.dumps(databook._package())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resource_show(resource_id, extra_args=None, cibfile=None): \n    return item_show(item='resource', item_id=resource_id, extra_args=extra_args, cibfile=cibfile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DocumentListEntryFromString(xml_string): \n    return atom.CreateClassFromXMLString(DocumentListEntry, xml_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def avail_images(conn=None): \n    return _query('os/list')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def BuildDefaultPythonKey(): \n    return ('Software\\\\Python\\\\PythonCore\\\\' + sys.winver)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def moveIntf(intf, dstNode, printError=True, retries=3, delaySecs=0.001): \n    retry(retries, delaySecs, moveIntfNoRetry, intf, dstNode, printError=printError)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def close_file(file_): \n    file_.close()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def saveAll(): \n    for globalRepositoryDialogValue in getGlobalRepositoryDialogValues(): \n      globalRepositoryDialogValue.save()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_jump_statement_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def t_KEGG_Map(testfiles): \n    for file in testfiles: \n      fh = open(os.path.join('KEGG', file)) \n      print((('Testing   Bio.KEGG.Map   on   ' + file) + '\\n\\n')) \n      reactions = Map.parse(fh) \n      system = System() \n      for reaction in reactions: \n         system.add_reaction(reaction) \n      rxs = system.reactions() \n      rxs.sort(key=(lambda x: str(x))) \n      for x in rxs: \n         print(str(x)) \n      fh.close()",
        "line_count": 12,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def read_int16_matrix(fid, rows, cols): \n    return _unpack_matrix(fid, rows, cols, dtype='>i2', out_dtype=np.int16)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chi2p(x2, df=1, tail=UPPER): \n    return gammai((df * 0.5), (x2 * 0.5), tail)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def temperature_energy(): \n    return [(si.K, si.eV, (lambda x: (x / (_si.e.value / _si.k_B))), (lambda x: (x * (_si.e.value / _si.k_B))))]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enabled(name): \n    return (name in _get_svc_list(name, 'ENABLED'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pre_run_code_hook(self): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def permute_2d(m, p): \n    return m[p][:, p]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def first(predicate, it): \n    return next((v for v in evaluate_promises(it) if (predicate(v) if (predicate is not None) else (v is not None))), None)",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def update_week(sched, year, stype, week): \n    for game in week_schedule(year, stype, week): \n      sched[game['eid']] = game",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def execvpe(file, args, env): \n    _execvpe(file, args, env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writable_connection_pool(account_id, pool_size=1, pool_map=dict()): \n    return _get_connection_pool(account_id, pool_size, pool_map, False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nvlist(thelist, names=None): \n    for nvitem in thelist: \n      if isinstance(nvitem, dict): \n         (name, value) = next(six.iteritems(nvitem)) \n         if ((names is None) or (name in names)): \n            (yield (nvitem, name, value))",
        "line_count": 5,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def mkdir(dir_path): \n    return os.system(('mkdir   -p   ' + dir_path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_tools_to_manager(toolmanager, tools=default_tools): \n    for (name, tool) in six.iteritems(tools): \n      toolmanager.add_tool(name, tool)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getLogRecordFactory(): \n    return _LOG_RECORD_FACTORY",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def painting(clip, saturation=1.4, black=0.006): \n    return clip.fl_image((lambda im: to_painting(im, saturation, black)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_snapshot_creating_from_src(): \n    return sql.exists().where(and_((models.GroupSnapshot.group_id == models.Group.id), (~ models.GroupSnapshot.deleted), (models.GroupSnapshot.status == 'creating')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plain(text): \n    return re.sub('.\\x08', '', text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dmp_sub_mul(f, g, h, u, K): \n    return dmp_sub(f, dmp_mul(g, h, u, K), u, K)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def methods_equivalent(meth1, meth2): \n    return (getattr(meth1, '__func__', meth1) is getattr(meth2, '__func__', meth2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_items(widget, items): \n    for item in items: \n      if (item is None): \n         continue \n      widget.addItem(item)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def upcaseTokens(s, l, t): \n    return map(str.upper, t)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index_alt(): \n    s3_redirect_default(URL(f='mission', args='summary'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default(value): \n    return type(value)()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def evaluate(): \n    with tf.Graph().as_default() as g: \n      eval_data = (FLAGS.eval_data == 'test') \n      (images, labels) = cifar10.inputs(eval_data=eval_data) \n      logits = cifar10.inference(images) \n      top_k_op = tf.nn.in_top_k(logits, labels, 1) \n      variable_averages = tf.train.ExponentialMovingAverage(cifar10.MOVING_AVERAGE_DECAY) \n      variables_to_restore = variable_averages.variables_to_restore() \n      saver = tf.train.Saver(variables_to_restore) \n      summary_op = tf.summary.merge_all() \n      summary_writer = tf.summary.FileWriter(FLAGS.eval_dir, g) \n      while True: \n         eval_once(saver, summary_writer, top_k_op, summary_op) \n         if FLAGS.run_once: \n            break \n         time.sleep(FLAGS.eval_interval_secs)",
        "line_count": 15,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _regexp_path(name, *names): \n    return os.path.join(name, *names).replace('\\\\', '\\\\\\\\')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_exp_summary_editable(exp_summary, user_id=None): \n    return ((user_id is not None) and ((user_id in exp_summary.editor_ids) or (user_id in exp_summary.owner_ids) or exp_summary.community_owned))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def ngettext(singular, plural, number): \n    return do_ntranslate(singular, plural, number, u'ngettext')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render_to_response(template_name, data_dictionary, **kwargs): \n    return HttpResponse(render_to_string(template_name, data_dictionary), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'fillet', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_snapshot_create(context, values): \n    return IMPL.group_snapshot_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_get_by_args(context, host, binary): \n    return IMPL.service_get_by_args(context, host, binary)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_cnn_sk_estimator(): \n    check_estimator(CondensedNearestNeighbour)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(handle): \n    while True: \n      record = __read(handle) \n      if (not record): \n         break \n      (yield record)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def processElementNode(elementNode): \n    evaluate.processArchivable(Cylinder, elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fmatch_iter(needle, haystack, min_ratio=0.6): \n    for key in haystack: \n      ratio = SequenceMatcher(None, needle, key).ratio() \n      if (ratio >= min_ratio): \n         (yield (ratio, key))",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def camelcase(string): \n    return u''.join((word.capitalize() for word in re.split(u'[-_]', string)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def require_target_existed(targets): \n    if (not targets['list']): \n      msg = output_log(MSG.NO_CONNECTED_TARGET) \n      raise exception.VSPError(msg)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cinder_except_format_assert(logical_line): \n    if logical_line.startswith('self.assertRaises(Exception'): \n      (yield (1, 'CINDER   N202:   assertRaises   Exception   too   broad'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ylabel(s, *args, **kwargs): \n    return gca().set_ylabel(s, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_signals(signums): \n    return dict(((s, signal.getsignal(s)) for s in signums))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def traverse_depthfirst(obj, opts, visitors): \n    return traverse_using(iterate_depthfirst(obj, opts), obj, visitors)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def copula_bv_min(u, v): \n    return np.minimum(u, v)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def date_format(format=u'%Y-%m-%d', tz=None): \n    return DateFormatter(format, tz)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_key_func(key, key_prefix, version): \n    return (u'%s:%s:%s' % (key_prefix, version, key))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _finish_auth_url(params): \n    return u'{}?{}'.format(reverse('finish_auth'), urllib.urlencode(params))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def HttpServer(): \n    return GlobalProcess().HttpServer()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_lapack_return(context, builder, res): \n    with builder.if_then(cgutils.is_not_null(builder, res), likely=False): \n      pyapi = context.get_python_api(builder) \n      pyapi.gil_ensure() \n      pyapi.fatal_error('LAPACK   wrapper   returned   with   an   error')",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def min_cost_flow(G, demand='demand', capacity='capacity', weight='weight'): \n    return nx.network_simplex(G, demand=demand, capacity=capacity, weight=weight)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def np_frombuffer(b): \n    return np.frombuffer(b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_option_list(options): \n    return ',   '.join(['{0}={1}'.format(x, y) for (x, y) in six.iteritems(options)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def locale_identifiers(): \n    return [stem for (stem, extension) in [os.path.splitext(filename) for filename in os.listdir(_dirname)] if ((extension == '.dat') and (stem != 'root'))]",
        "line_count": 1,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def info(msg, t=None, obj=None): \n    root.log(msg, level=INFO, t=t, obj=obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show_image(image): \n    return _sensehat.load_image(image)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __routes_doctest(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_folder_structure(depth=2, sibling=2, parent=None): \n    if ((depth > 0) and (sibling > 0)): \n      depth_range = list(range(1, (depth + 1))) \n      depth_range.reverse() \n      for d in depth_range: \n         for s in range(1, (sibling + 1)): \n            name = ('folder:   %s   --   %s' % (str(d), str(s))) \n            folder = Folder(name=name, parent=parent) \n            folder.save() \n            create_folder_structure(depth=(d - 1), sibling=sibling, parent=folder)",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def histograms(img, nbins): \n    return _histograms.histograms(img, nbins)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def genrepo(): \n    return _genrepo(opts=__opts__, fire_event=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_release_group_image_list(releasegroupid): \n    return _caa_request(releasegroupid, entitytype='release-group')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_python_source(filename): \n    return (splitext(filename)[1][1:] in PY_SOURCE_EXTS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_rgb_to_hsl_part_3(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(keys, **kwargs): \n    return get_async(keys, **kwargs).get_result()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def search_list(list_provided): \n    for i in range((len(list_provided) - 1)): \n      if ((not (list_provided[i] in list_provided[(i + 1):])) and (not (list_provided[i] in list_provided[:i]))): \n         'If   the   same   number   is   not   present   before   or   after   in   the   list   then\\n                                    return   the   number' \n         return str(list_provided[i]) \n         break",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def cert_get_serial(cert): \n    return cert.serial",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_network_interacting_from_args(*a, **kw): \n    return retry_effect_with_timeout(run_from_args(*a, **kw), timeout=_TIMEOUT.total_seconds())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_shared(shape): \n    return shared(np.zeros(shape))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_studio_write_access(user, course_key): \n    return bool((STUDIO_EDIT_CONTENT & get_user_permissions(user, course_key)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def select_db_reader_mode(f): \n    return IMPL.select_db_reader_mode(f)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def svd(a, full_matrices=1, compute_uv=1): \n    return SVD(full_matrices, compute_uv)(a)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def t_NUMBER(t, s): \n    return t",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def retcode(name, cmd, no_start=False, preserve_state=True, stdin=None, python_shell=True, output_loglevel='debug', use_vt=False, ignore_retcode=False, keep_env=None): \n    return _run(name, cmd, output='retcode', no_start=no_start, preserve_state=preserve_state, stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, use_vt=use_vt, ignore_retcode=ignore_retcode, keep_env=keep_env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sortLoopsInOrderOfArea(isDescending, loops): \n    loops.sort(key=euclidean.getAreaLoopAbsolute, reverse=isDescending)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_fsbackend(opts): \n    for backend in ('git', 'hg', 'svn'): \n      if (backend in opts['fileserver_backend']): \n         env_cache = os.path.join(opts['cachedir'], '{0}fs'.format(backend), 'envs.p') \n         if os.path.isfile(env_cache): \n            log.debug('Clearing   {0}fs   env   cache'.format(backend)) \n            try: \n               os.remove(env_cache) \n            except OSError as exc: \n               log.critical('Unable   to   clear   env   cache   file   {0}:   {1}'.format(env_cache, exc)) \n         file_lists_dir = os.path.join(opts['cachedir'], 'file_lists', '{0}fs'.format(backend)) \n         try: \n            file_lists_caches = os.listdir(file_lists_dir) \n         except OSError: \n            continue \n         for file_lists_cache in fnmatch.filter(file_lists_caches, '*.p'): \n            cache_file = os.path.join(file_lists_dir, file_lists_cache) \n            try: \n               os.remove(cache_file) \n            except OSError as exc: \n               log.critical('Unable   to   file_lists   cache   file   {0}:   {1}'.format(cache_file, exc))",
        "line_count": 20,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeSVGTextWithNounMessage(fileName, ScaleRepository(), shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addIntrospection(xmlrpc): \n    xmlrpc.putSubHandler('system', XMLRPCIntrospection(xmlrpc))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_node_get_all_by_host(context, host): \n    return IMPL.compute_node_get_all_by_host(context, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cmdline(pid): \n    return psutil.Process(pid).cmdline()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isframe(object): \n    return isinstance(object, types.FrameType)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mimetype(serial): \n    return {'Content-Type': ('application/vnd.blaze+%s' % serial.name)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode, prefix, sideLength): \n    return RotateDerivation(elementNode, prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def import_set(dset, in_stream, headers=True): \n    return import_set_wrapper(dset, in_stream, headers=headers, delimiter=DELIMITER)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reverse_complement(sequence): \n    return complement(sequence)[::(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_func(item): \n    return bool(re.match('[a-z]+[A-Z][a-zA-Z]+', str(item)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_models(app_label, *models): \n    for model in models: \n      model_name = model._meta.object_name.lower() \n      model_dict = _app_models.setdefault(app_label, {}) \n      if model_dict.has_key(model_name): \n         fname1 = os.path.abspath(sys.modules[model.__module__].__file__) \n         fname2 = os.path.abspath(sys.modules[model_dict[model_name].__module__].__file__) \n         if (os.path.splitext(fname1)[0] == os.path.splitext(fname2)[0]): \n            continue \n      model_dict[model_name] = model",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def addrow(row1, row2, K): \n    return [(element1 + element2) for (element1, element2) in zip(row1, row2)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def running(name, sig=None): \n    return status(name).get(name, False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def whitespace_normalize_name(name): \n    return '   '.join(name.split())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CreateFilter(pc, task): \n    return CreateTasksFilter(pc, [task])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('boto_elb' if ('boto_elb.exists' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_load_data(): \n    return load_data[(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_user_variable(var_name, default_value): \n    return click.prompt(var_name, default=default_value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def seasonal_mean(x, freq): \n    return np.array([pd_nanmean(x[i::freq]) for i in range(freq)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def main(): \n    settings.startMainLoopFromConstructor(getNewRepository())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MailEntryFromString(xml_string): \n    return atom.CreateClassFromXMLString(MailEntry, xml_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_coursetalk_course_key(course_key): \n    return u'{0.org}_{0.course}'.format(course_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def statistic(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def monomial_deg(M): \n    return sum(M)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def truncate(expr, precision): \n    return ((expr // precision) * precision)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_type(): \n    for c in Script('import   os;   os.path.').completions(): \n      assert c.type",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_array_input_assignment(line_builder_array): \n    assert (line_builder_array.y.selection == 'value')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def version(): \n    return VERSION",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_moon(): \n    data.moon()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bind(name, **kwargs): \n    return get_logger(name=name).bind(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_image_properties_from_pb(image_properties): \n    return ImagePropertiesAnnotation.from_pb(image_properties)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fail(msg=None): \n    raise unittest2.TestCase.failureException(msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safemarkdown(text): \n    if text: \n      text = text.replace('<', '&lt;') \n      text = r_url.sub('<\\\\1>', text) \n      text = markdown(text) \n      return text",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_hexadecimal(string): \n    return all(((ch in HEX_DIGITS) for ch in string))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def addFacesByConvexReversed(faces, indexedLoop): \n    addFacesByConvex(faces, indexedLoop[::(-1)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def split_in_lines(text): \n    return (line for line in map(str.strip, text.split('\\n')) if line)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def tb_iter(tb): \n    while (tb is not None): \n      (yield tb) \n      tb = tb.tb_next",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def create_certificate_id(vault, name, version=None): \n    return create_object_id('certificates', vault, name, version)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _b64(b): \n    return base64.urlsafe_b64encode(b).decode('utf8').replace('=', '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_local_pifs(): \n    for host_ref in _db_content['host'].keys(): \n      _create_local_pif(host_ref)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def isabstract(object): \n    return bool((isinstance(object, type) and (object.__flags__ & TPFLAGS_IS_ABSTRACT)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_aware(value): \n    return (value.utcoffset() is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assertRequestTransmissionFailed(self, deferred, reasonTypes): \n    return assertWrapperExceptionTypes(self, deferred, RequestTransmissionFailed, reasonTypes)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_simple_test(command_name): \n    return build_schema_test(name=str((command_name + u'Tests')), schema={u'$ref': (u'/endpoints.json#/definitions/' + command_name)}, schema_store=SCHEMAS, failing_instances={'additionalProperties': [{u'Err': u'', u'Extra': u''}, {u'Result': u'hello'}], 'required': [{}], 'type': [[], u'', None, {u'Err': 1}, {u'Err': {}}, {u'Err': None}]}, passing_instances=[{u'Err': u''}, {u'Err': u'Something   went   wrong!'}])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_cors_middleware_defaults(): \n    cors.set_defaults(allow_headers=['Content-MD5', 'X-Image-Meta-Checksum', 'X-Storage-Token', 'Accept-Encoding', 'X-Auth-Token', 'X-Identity-Status', 'X-Roles', 'X-Service-Catalog', 'X-User-Id', 'X-Tenant-Id', 'X-OpenStack-Request-ID'], expose_headers=['X-Image-Meta-Checksum', 'X-Auth-Token', 'X-Subject-Token', 'X-Service-Token', 'X-OpenStack-Request-ID'], allow_methods=['GET', 'PUT', 'POST', 'DELETE', 'PATCH'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def client(name, **kwargs): \n    return _run(name, 'chef.client', kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookupAllRecords(name, timeout=None): \n    return getResolver().lookupAllRecords(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_hv_pool(metadata): \n    return (POOL_FLAG in metadata.keys())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nu2lambda(nu): \n    return (c / _np.asanyarray(nu))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_new_exploration_id(): \n    return exp_models.ExplorationModel.get_new_id('')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def repr_flag(flag): \n    return u'{0}{1}{2}'.format((u'R' if (flag & READ) else u''), (u'W' if (flag & WRITE) else u''), (u'!' if (flag & ERR) else u''))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _ls_history_logs(fs, log_dir_stream, job_id=None): \n    return _ls_logs(fs, log_dir_stream, _match_history_log_path, job_id=job_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random_normal(): \n    return inverse_normal_cdf(random.random())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_timestamp(): \n    return int(time.time())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def which(cmd): \n    return salt.utils.which(cmd)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_roots(roots): \n    for (saltenv, dirs) in six.iteritems(roots): \n      for dir_ in dirs: \n         if (not os.path.isdir(dir_)): \n            continue \n         for ret in _iter_dir(dir_, saltenv): \n            (yield ret)",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def filesystem_label_for_test(test_case): \n    return random_name(test_case)[(-16):]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPluginsDirectoryPath(): \n    return archive.getInterpretPluginsPath()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start_tag(el): \n    return ('<%s%s>' % (el.tag, ''.join([('   %s=\"%s\"' % (name, html_escape(value, True))) for (name, value) in el.attrib.items()])))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewRepository(): \n    return UnpauseRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _list_items(queue): \n    with _conn() as cur: \n      cmd = 'SELECT   data   FROM   {0}'.format(queue) \n      log.debug('SQL   Query:   {0}'.format(cmd)) \n      cur.execute(cmd) \n      contents = cur.fetchall() \n      return contents",
        "line_count": 6,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def simple_read_words(filename='nietzsche.txt'): \n    with open('nietzsche.txt', 'r') as f: \n      words = f.read() \n      return words",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_static_web_help_page(): \n    return '\\n<!DOCTYPE   HTML   PUBLIC   \"-//W3C//DTD   HTML   4.01//EN\"   \"http://www.w3.org/TR/html4/strict.dtd\">\\n<html>\\n               <!--   Natural   Language   Toolkit:   Wordnet   Interface:   Graphical   Wordnet   Browser\\n                                    Copyright   (C)   2001-2017   NLTK   Project\\n                                    Author:   Jussi   Salmela   <jtsalmela@users.sourceforge.net>\\n                                    URL:   <http://nltk.org/>\\n                                    For   license   information,   see   LICENSE.TXT   -->\\n               <head>\\n                              <meta   http-equiv=\\'Content-Type\\'   content=\\'text/html;   charset=us-ascii\\'>\\n                              <title>NLTK   Wordnet   Browser   display   of:   *   Help   *</title>\\n               </head>\\n<body   bgcolor=\\'#F5F5F5\\'   text=\\'#000000\\'>\\n<h2>NLTK   Wordnet   Browser   Help</h2>\\n<p>The   NLTK   Wordnet   Browser   is   a   tool   to   use   in   browsing   the   Wordnet   database.   It   tries   to   behave   like   the   Wordnet   project\\'s   web   browser   but   the   difference   is   that   the   NLTK   Wordnet   Browser   uses   a   local   Wordnet   database.\\n<p><b>You   are   using   the   Javascript   client   part   of   the   NLTK   Wordnet   BrowseServer.</b>   We   assume   your   browser   is   in   tab   sheets   enabled   mode.</p>\\n<p>For   background   information   on   Wordnet,   see   the   Wordnet   project   home   page:   <a   href=\"http://wordnet.princeton.edu/\"><b>   http://wordnet.princeton.edu/</b></a>.   For   more   information   on   the   NLTK   project,   see   the   project   home:\\n<a   href=\"http://nltk.sourceforge.net/\"><b>http://nltk.sourceforge.net/</b></a>.   To   get   an   idea   of   what   the   Wordnet   version   used   by   this   browser   includes   choose   <b>Show   Database   Info</b>   from   the   <b>View</b>   submenu.</p>\\n<h3>Word   search</h3>\\n<p>The   word   to   be   searched   is   typed   into   the   <b>New   Word</b>   field   and   the   search   started   with   Enter   or   by   clicking   the   <b>Search</b>   button.   There   is   no   uppercase/lowercase   distinction:   the   search   word   is   transformed   to   lowercase   before   the   search.</p>\\n<p>In   addition,   the   word   does   not   have   to   be   in   base   form.   The   browser   tries   to   find   the   possible   base   form(s)   by   making   certain   morphological   substitutions.   Typing   <b>fLIeS</b>   as   an   obscure   example   gives   one   <a   href=\"MfLIeS\">this</a>.   Click   the   previous   link   to   see   what   this   kind   of   search   looks   like   and   then   come   back   to   this   page   by   using   the   <b>Alt+LeftArrow</b>   key   combination.</p>\\n<p>The   result   of   a   search   is   a   display   of   one   or   more\\n<b>synsets</b>   for   every   part   of   speech   in   which   a   form   of   the\\nsearch   word   was   found   to   occur.   A   synset   is   a   set   of   words\\nhaving   the   same   sense   or   meaning.   Each   word   in   a   synset   that   is\\nunderlined   is   a   hyperlink   which   can   be   clicked   to   trigger   an\\nautomatic   search   for   that   word.</p>\\n<p>Every   synset   has   a   hyperlink   <b>S:</b>   at   the   start   of   its\\ndisplay   line.   Clicking   that   symbol   shows   you   the   name   of   every\\n<b>relation</b>   that   this   synset   is   part   of.   Every   relation   name   is   a   hyperlink   that   opens   up   a   display   for   that   relation.   Clicking   it   another   time   closes   the   display   again.   Clicking   another   relation   name   on   a   line   that   has   an   opened   relation   closes   the   open   relation   and   opens   the   clicked   relation.</p>\\n<p>It   is   also   possible   to   give   two   or   more   words   or   collocations   to   be   searched   at   the   same   time   separating   them   with   a   comma   like   this   <a   href=\"Mcheer   up,clear   up\">cheer   up,clear   up</a>,   for   example.   Click   the   previous   link   to   see   what   this   kind   of   search   looks   like   and   then   come   back   to   this   page   by   using   the   <b>Alt+LeftArrow</b>   key   combination.   As   you   could   see   the   search   result   includes   the   synsets   found   in   the   same   order   than   the   forms   were   given   in   the   search   field.</p>\\n<p>\\nThere   are   also   word   level   (lexical)   relations   recorded   in   the   Wordnet   database.   Opening   this   kind   of   relation   displays   lines   with   a   hyperlink   <b>W:</b>   at   their   beginning.   Clicking   this   link   shows   more   info   on   the   word   in   question.</p>\\n<h3>The   Buttons</h3>\\n<p>The   <b>Search</b>   and   <b>Help</b>   buttons   need   no   more   explanation.   </p>\\n<p>The   <b>Show   Database   Info</b>   button   shows   a   collection   of   Wordnet   database   statistics.</p>\\n<p>The   <b>Shutdown   the   Server</b>   button   is   shown   for   the   first   client   of   the   BrowServer   program   i.e.   for   the   client   that   is   automatically   launched   when   the   BrowServer   is   started   but   not   for   the   succeeding   clients   in   order   to   protect   the   server   from   accidental   shutdowns.\\n</p></body>\\n</html>\\n'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _validate_api_params(params): \n    return (isinstance(params['api_page_id'], (six.string_types, six.text_type)) and isinstance(params['api_key'], (six.string_types, six.text_type)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def SetLocationList(diagnostics): \n    vim.eval(u'setloclist(   0,   {0}   )'.format(json.dumps(diagnostics)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _to_volume_name(dataset_id): \n    return VolumeName(namespace=u'default', dataset_id=dataset_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_uri(request, resource_name, **params): \n    return strip_uri_prefix(request.route_path(('%s-record' % resource_name), **params))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_users(): \n    return User.find(Q('is_registered', 'eq', True))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    solid.processElementNodeByGeometry(elementNode, getGeometryOutput(elementNode))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return DimensionRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def from_text(name, ttl, rdclass, rdtype, *text_rdatas): \n    return from_text_list(name, ttl, rdclass, rdtype, text_rdatas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_app(id): \n    return (_app_id(id) in apps()['apps'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_time_zone_dictionary(time_zone_name): \n    return {'time_zone': time_zone_name, 'description': get_display_time_zone(time_zone_name)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_items(obj): \n    return list(obj.items())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def counter(counter=itertools.count()): \n    return next(counter)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___contains__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def agent_build_get_all(context, hypervisor=None): \n    return IMPL.agent_build_get_all(context, hypervisor)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_form_descriptions(request): \n    return {'login': _local_server_get('/user_api/v1/account/login_session/', request.session), 'registration': _local_server_get('/user_api/v1/account/registration/', request.session), 'password_reset': _local_server_get('/user_api/v1/account/password_reset/', request.session)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _UTC(): \n    return utc",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pull(): \n    return run(Pull)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_versions_for_exploration_stats(exploration_id): \n    return stats_models.ExplorationAnnotationsModel.get_versions(exploration_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hubble_deep_field(): \n    return load('hubble_deep_field.jpg')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_db_missing_catalog_key(): \n    with pytest.raises(VOSError): \n      db = vos_catalog.VOSDatabase({})",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def not_reaped(subset=None, show_ipv4=False): \n    return list_not_state(subset=subset, show_ipv4=show_ipv4, state='reaped')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expose_api_raw(func): \n    return expose_api(func, to_json=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def keyring_create(**kwargs): \n    return ceph_cfg.keyring_create(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_url_prefix(): \n    return getattr(_local, 'prefix', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log1p(x): \n    return Log1p()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(): \n    signals.finalized.connect(validate_files)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cpu_usage(): \n    return _GetSystemStats().cpu()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def say_text(text, priority='important'): \n    mpstate.console.writeln(text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _datetime_from_microseconds(value): \n    return (_EPOCH + datetime.timedelta(microseconds=value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_update(context, address, values): \n    return IMPL.fixed_ip_update(context, address, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_product_summary_serializer_class(): \n    return _product_summary_serializer_class",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fix_outage(): \n    return __proxy__['rest_sample.fix_outage']()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookupAddress6(name, timeout=None): \n    return getResolver().lookupAddress6(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def greenthread_yield(dbapi_con, con_record): \n    greenthread.sleep(0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rand_char(bad='', chars=allchars): \n    return rand_base(1, bad, chars)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _html(url): \n    return BeautifulSoup(get(url), convertEntities=BeautifulSoup.HTML_ENTITIES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rational_polynomial2(data): \n    return (((((data[0] - 3) ** 4) + ((data[1] - 3) ** 3)) - (data[1] - 3)) / (((data[1] - 2) ** 4) + 10))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _remove_whitespace(s, regex=_RE_WHITESPACE): \n    return regex.sub('   ', s.strip())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __remove_pyc_pyo(fname): \n    if (osp.splitext(fname)[1] == '.py'): \n      for ending in ('c', 'o'): \n         if osp.exists((fname + ending)): \n            os.remove((fname + ending))",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def asanyarray(a, dtype=None): \n    return cupy.asarray(a, dtype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def job_clear(context, data_dict): \n    return {'success': False}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def styleId_from_name(name): \n    return {'caption': 'Caption', 'heading   1': 'Heading1', 'heading   2': 'Heading2', 'heading   3': 'Heading3', 'heading   4': 'Heading4', 'heading   5': 'Heading5', 'heading   6': 'Heading6', 'heading   7': 'Heading7', 'heading   8': 'Heading8', 'heading   9': 'Heading9'}.get(name, name.replace('   ', ''))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mock_unfrackpath_noop(path): \n    return path",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('boto_route53' if ('boto_route53.get_record' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_defaults(sql_connection, sqlite_db): \n    cfg.set_defaults(sql_opts, sql_connection=sql_connection, sqlite_db=sqlite_db)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def serve_in_child(sock): \n    if (os.fork() == 0): \n      try: \n         serve_socket(sock) \n      finally: \n         sys.exit()",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=XULLexer(), buf_class=XULBuffer, import_handler_class=None, cile_driver_class=XULCILEDriver, is_cpln_lang=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def number_for_course_location(location): \n    return location.course",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attr_le(accessing_obj, accessed_obj, *args, **kwargs): \n    return attr(accessing_obj, accessed_obj, *args, **{'compare': 'le'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def grad_undefined(op, x_pos, x, comment=''): \n    return NullType(('This   variable   is   Null   because   the   grad   method   for   input   %s   (%s)   of   the   %s   op   is   mathematically   undefined.   %s' % (x_pos, x, op, comment)))()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pokemons(): \n    return _inventory.pokemons",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_io_error_if_no_replay_file(mocker, replay_test_dir): \n    with pytest.raises(IOError): \n      replay.load(replay_test_dir, 'no_replay')",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    solid.processElementNodeByGeometry(elementNode, getGeometryOutput(None, elementNode))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _launchd_paths(): \n    return ['/Library/LaunchAgents', '/Library/LaunchDaemons', '/System/Library/LaunchAgents', '/System/Library/LaunchDaemons']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jed(exe=u'jed'): \n    install_editor((exe + u'   +{line}   {filename}'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _overload_dummy(*args, **kwds): \n    raise NotImplementedError(u'You   should   not   call   an   overloaded   function.   A   series   of   @overload-decorated   functions   outside   a   stub   module   should   always   be   followed   by   an   implementation   that   is   not   @overload-ed.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_bad_values(): \n    for (ctype, values) in sorted(BAD_VALUES.items()): \n      for (value, repl) in values: \n         (yield (ctype, value, repl))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_diff_chunk_generator(*args, **kwargs): \n    return _generator(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _item_to_resource_record_set(iterator, resource): \n    return ResourceRecordSet.from_api_repr(resource, iterator.zone)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def task_pull_docker_images(images=ACCEPTANCE_IMAGES): \n    return sequence([run_from_args(['docker', 'pull', image]) for image in images])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def setup(app): \n    for module in [_simple, _tabs]: \n      module.setup(app)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def version(): \n    return _PIP_VERSION",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def str_to_date(string): \n    return (datetime.strptime(string, config.DATE_FORMAT) if string else None)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def file_list(*packages): \n    return __salt__['lowpkg.file_list'](*packages)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upgrade(migrate_engine): \n    if (migrate_engine.name != 'mysql'): \n      if (not utils.index_exists(migrate_engine, SYS_META_TABLE_NAME, INDEX_NAME)): \n         utils.add_index(migrate_engine, SYS_META_TABLE_NAME, INDEX_NAME, INDEX_COLUMNS)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def repeat_last_axis(array, count): \n    return as_strided(array, (array.shape + (count,)), (array.strides + (0,)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addMenuEntitiesToMenu(menu, menuEntities): \n    for menuEntity in menuEntities: \n      menuEntity.addToMenu(menu)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_disabled(): \n    return _get_enabled_disabled('false')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return WPModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def suspend_to_ram(): \n    set_power_state('mem')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def canon(*rules): \n    return exhaust(multiplex(*map(top_down, rules)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_statement_assign(t): \n    names[t[1]] = t[3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_upload_to(instance, filename): \n    return instance.get_upload_to(filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sequence(effects): \n    return Effect(Sequence(list(effects)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_integer(t): \n    t[0] = t[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    processElementNodeByDerivation(None, elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rgb2rgbcie(rgb): \n    return _convert(rgbcie_from_rgb, rgb)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _valid_method_call_check_resources(resource, method): \n    for name in resource.keys(): \n      _valid_method_call_check_resource(name, method)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def load_handler(path, *args, **kwargs): \n    return import_by_path(path)(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(linter): \n    linter.register_checker(ModelineChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_boundary(): \n    return 'b08c02-53d780-e2bc43-1d5278-a3c0d9-a5c0d9'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_remove_it_accepts_regex_to_remove_all_from_string(): \n    assert_equals(strings.remove_it(u'Gabriel   Falc\\xe3o', u'[a\\xe3]'), 'Gbriel   Flco')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_dictval_to_list(adict, key, alist): \n    if (key in adict): \n      if isinstance(adict[key], six.string_types): \n         alist.append(adict[key]) \n      else: \n         alist.extend(adict[key])",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def split_addresses(email_string_list): \n    return [f for f in [s.strip() for s in email_string_list.split(u',')] if f]",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def security_group_get_by_project(context, project_id): \n    return IMPL.security_group_get_by_project(context, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def equal_fields(matchdict, field): \n    return equal((m[field] for m in matchdict.values()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def advance_time_seconds(seconds): \n    advance_time_delta(datetime.timedelta(0, seconds))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test(): \n    dummy_function()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_version(): \n    return get_versions()['version']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write(contents, dir, filename): \n    with open(join(dir, filename), 'w') as file: \n      file.write(contents)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cwd(pid): \n    return psutil.Process(pid).cwd()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def put(content, path, log_content_filter=identity): \n    return Effect(Put(content=content, path=path, log_content_filter=log_content_filter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_external_plugins(): \n    return bool(config['plugins'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def worker_update(context, id, filters=None, orm_worker=None, **values): \n    return IMPL.worker_update(context, id, filters=filters, orm_worker=orm_worker, **values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_new_element(items, prefix, numeric=False): \n    while True: \n      if numeric: \n         candidate = (prefix + generate_random_numeric(8)) \n      else: \n         candidate = (prefix + generate_random_alphanumeric(8)) \n      if (candidate not in items): \n         return candidate",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def gethostname(): \n    return os.environ.get('HTTP_HOST', 'www.appspot.com')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_day_names(width='wide', context='format', locale=LC_TIME): \n    return Locale.parse(locale).days[context][width]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def all_suffixes(): \n    return ((SOURCE_SUFFIXES + BYTECODE_SUFFIXES) + EXTENSION_SUFFIXES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unicode_to_ascii(text): \n    return unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_comment_list(parser, token): \n    return CommentListNode.handle_token(parser, token)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear(): \n    _get_manager().clear()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetOTP(user): \n    return _ComputeOTP(_GetUserSecret(user), long((time.time() / _GRANULARITY)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_doc_string_contains_models(): \n    for kind in ('mean', 'apparent'): \n      for model in SIDEREAL_TIME_MODELS[kind]: \n         assert (model in Time.sidereal_time.__doc__)",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def leave_transaction_management(using=None): \n    get_connection(using).leave_transaction_management()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def catalog_item(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cpus(): \n    with settings(hide('running', 'stdout')): \n      res = run('python   -c   \"import   multiprocessing;   print(multiprocessing.cpu_count())\"') \n      return int(res)",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _tkerror(err): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return SmartCameraModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_primary_expression(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ccall(): \n    return ccall_sqr(5)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def definite_article(word): \n    return 'the'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def locate_unbalanced_end(unbalanced_end, pre_delete, post_delete): \n    while 1: \n      if (not unbalanced_end): \n         break \n      finding = unbalanced_end[(-1)] \n      finding_name = finding.split()[0].strip('<>/') \n      if (not pre_delete): \n         break \n      next = pre_delete[(-1)] \n      if ((next is DEL_END) or (not next.startswith('</'))): \n         break \n      name = next.split()[0].strip('<>/') \n      if ((name == 'ins') or (name == 'del')): \n         break \n      if (name == finding_name): \n         unbalanced_end.pop() \n         post_delete.insert(0, pre_delete.pop()) \n      else: \n         break",
        "line_count": 18,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def post(context, url, data=''): \n    return request(context, url, method='POST', data=data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def now(request): \n    return {'now': datetime.now()}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lateral(selectable, name=None): \n    return _interpret_as_from(selectable).lateral(name=name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def data_root(environ=None): \n    return zipline_path(['data'], environ=environ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(url, params=None, headers=None, cookies=None, auth=None, timeout=60, allow_redirects=True, stream=False): \n    return request('GET', url, params, headers=headers, cookies=cookies, auth=auth, timeout=timeout, allow_redirects=allow_redirects, stream=stream)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dump_files(): \n    for file_path in FILES_LIST: \n      log.info('PLS   IMPLEMENT   DUMP,   want   to   dump   %s', file_path)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def perform_push(request, obj): \n    return execute_locked(request, obj, _('All   repositories   were   pushed.'), obj.do_push, request)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def l1(x): \n    return T.sum(abs(x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remote_repr(arg): \n    return arg",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def int2byte(i): \n    return (chr(i) if PY2 else bytes((i,)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_lumination_change_value(label): \n    return _check_range_and_return('lumination_change', label, (-19), 19)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_dunder(name): \n    return ((name[:2] == name[(-2):] == '__') and (name[2:3] != '_') and (name[(-3):(-2)] != '_') and (len(name) > 4))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def redo(): \n    with RopeContext() as ctx: \n      changes = ctx.project.history.tobe_redone \n      if (changes is None): \n         env.error('Nothing   to   redo!') \n         return False \n      if env.user_confirm(('Redo   [%s]?' % str(changes))): \n         progress = ProgressHandler(('Redo   %s' % str(changes))) \n         for c in ctx.project.history.redo(task_handle=progress.handle): \n            reload_changes(c)",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def Probability(o): \n    return (o / (o + 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatatt(attrs): \n    return format_html_join(u'', u'   {0}=\"{1}\"', sorted(attrs.items()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pkcs_os2ip(x): \n    return RSA.number.bytes_to_long(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_email_after_account_create(form): \n    send_email(to=form['email'], action=USER_REGISTER, subject=MAILS[USER_REGISTER]['subject'].format(app_name=get_settings()['app_name']), html=MAILS[USER_REGISTER]['message'].format(email=form['email']))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _service_is_upstart(name): \n    return (HAS_UPSTART and os.path.exists('/etc/init/{0}.conf'.format(name)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def index_to_three(i): \n    return dindex_to_3[i]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_inventory_to_provider(conn, rp, inv_list, to_add): \n    for rc_id in to_add: \n      rc_str = _RC_CACHE.string_from_id(rc_id) \n      inv_record = inv_list.find(rc_str) \n      if (inv_record.capacity <= 0): \n         raise exception.InvalidInventoryCapacity(resource_class=rc_str, resource_provider=rp.uuid) \n      ins_stmt = _INV_TBL.insert().values(resource_provider_id=rp.id, resource_class_id=rc_id, total=inv_record.total, reserved=inv_record.reserved, min_unit=inv_record.min_unit, max_unit=inv_record.max_unit, step_size=inv_record.step_size, allocation_ratio=inv_record.allocation_ratio) \n      conn.execute(ins_stmt)",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def traceroute(destination, source=None, ttl=None, timeout=None): \n    return __proxy__['napalm.call']('traceroute', **{'destination': destination, 'source': source, 'ttl': ttl, 'timeout': timeout})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def own_metadata(module): \n    return module.get_explicitly_set_fields_by_scope(Scope.settings)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def directional_variance_i(x_i, w): \n    return (dot(x_i, direction(w)) ** 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_grammar_validation(grammar_errors, test_obj): \n    for (attr, value, error, message) in grammar_errors: \n      with nt.assert_raises(error) as err: \n         setattr(test_obj, attr, value) \n      nt.assert_equal(err.exception.args[0], message)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _create_event(): \n    return windll.kernel32.CreateEventA(pointer(SECURITY_ATTRIBUTES()), BOOL(True), BOOL(False), None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def neg(self): \n    return Neg()(self)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_mm_stamp(fh, byteorder, dtype, count): \n    return fh.read_array((byteorder + 'f8'), 8)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_and_expression_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def copula_bv_ev(u, v, transform, args=()): \n    return np.exp((np.log((u * v)) * transform((np.log(v) / np.log((u * v))), *args)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getTwistPrecisionRadians(elementNode): \n    return math.radians(getTwistPrecision(elementNode))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_guts_toc(attr, old, toc, last_build, pyc=0): \n    return (_check_guts_eq(attr, old, toc, last_build) or _check_guts_toc_mtime(attr, old, toc, last_build, pyc=pyc))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def pycodestylemod_add_ignore(ignore_code): \n    if (ignore_code not in pycodestylemod.DEFAULT_IGNORE): \n      default_ignore = pycodestylemod.DEFAULT_IGNORE.split(',') \n      default_ignore.append(ignore_code) \n      pycodestylemod.DEFAULT_IGNORE = ','.join(default_ignore)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def PrintUpdate(msg, error_fh=sys.stderr): \n    if (verbosity > 0): \n      timestamp = datetime.datetime.now() \n      print >>error_fh, ('%s   %s' % (timestamp.strftime('%I:%M   %p'), msg))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_dirty(): \n    return dirty.get(thread.get_ident(), False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_add_rel_nofollow(): \n    eq_('<a   href=\"http://yy.com\"   rel=\"nofollow\">http://yy.com</a>', linkify('<a   href=\"http://yy.com\">http://yy.com</a>'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_parsedate(val): \n    return datetime.fromtimestamp(mktime(parsedate(val)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_keyspace_network_topology(name, dc_replication_map, durable_writes=True, connections=None): \n    _create_keyspace(name, durable_writes, 'NetworkTopologyStrategy', dc_replication_map, connections=connections)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_node_get_by_host_and_nodename(context, host, nodename): \n    return IMPL.compute_node_get_by_host_and_nodename(context, host, nodename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sign_url_v2(url_to_sign, expiry): \n    return sign_url_base_v2(bucket=url_to_sign.bucket(), object=url_to_sign.object(), expiry=expiry)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _build_gecos(gecos_dict): \n    return u'{0},{1},{2},{3}'.format(gecos_dict.get('fullname', ''), gecos_dict.get('roomnumber', ''), gecos_dict.get('workphone', ''), gecos_dict.get('homephone', ''))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_limited_to_project(headers): \n    return get_limited_to(headers)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dest_namespace(name): \n    return (name.replace('-', '_') + '_')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def NO_MERGE(writer, segments): \n    return segments",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_children(node): \n    for child in node.get_children(): \n      ok = False \n      if (child is None): \n         print(('Hm,   child   of   %s   is   None' % node)) \n         continue \n      if (not hasattr(child, 'parent')): \n         print(('   ERROR:   %s   has   child   %s   %x   with   no   parent' % (node, child, id(child)))) \n      elif (not child.parent): \n         print(('   ERROR:   %s   has   child   %s   %x   with   parent   %r' % (node, child, id(child), child.parent))) \n      elif (child.parent is not node): \n         print(('   ERROR:   %s   %x   has   child   %s   %x   with   wrong   parent   %s' % (node, id(node), child, id(child), child.parent))) \n      else: \n         ok = True \n      if (not ok): \n         print('lines;', node.lineno, child.lineno) \n         print('of   module', node.root(), node.root().name) \n         raise AstroidBuildingException \n      _check_children(child)",
        "line_count": 18,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def ParseMultipleIndexDefinitions(document): \n    return yaml_object.BuildObjects(IndexDefinitions, document)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _kb_detail(request, readout_slug, readouts, main_view_name, main_dash_title, locale=None, product=None): \n    return render(request, 'dashboards/kb_detail.html', {'readout': _kb_readout(request, readout_slug, readouts, locale, product=product), 'locale': locale, 'main_dash_view': main_view_name, 'main_dash_title': main_dash_title, 'product': product, 'products': Product.objects.filter(visible=True)})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MAX(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.MAX, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apply_gaussian(X, sigma): \n    return np.array([ndimage.gaussian_filter(x, sigma) for x in X])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def S_ISFIFO(mode): \n    return (S_IFMT(mode) == S_IFIFO)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_period_alias(offset_str): \n    return _offset_to_period_map.get(offset_str, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def row_scale(x, s): \n    return col_scale(x.T, s).T",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def squeeze(a, axis=None): \n    return a.squeeze(axis)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mean_square(y_pred, y_true): \n    with tf.name_scope('MeanSquare'): \n      return tf.reduce_mean(tf.square((y_pred - y_true)))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apply_optimizer(optimizer, func, a, b): \n    return (optimizer(func, a, b, full_output=True)[1].function_calls,)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_update_status_based_on_attachment(context, volume_id): \n    return IMPL.volume_update_status_based_on_attachment(context, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filterAuthorizedKeys(fp): \n    for line in fp: \n      line = line.rstrip('\\n') \n      if (line == COMMENT): \n         continue \n      if _COMMAND_RE.match(line): \n         continue \n      (yield line)",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def object_upload_file(self, Filename, ExtraArgs=None, Callback=None, Config=None): \n    return self.meta.client.upload_file(Filename=Filename, Bucket=self.bucket_name, Key=self.key, ExtraArgs=ExtraArgs, Callback=Callback, Config=Config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_drivers(): \n    return [str(d) for d in drivers.values()]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ThrottleUsage(): \n    for table in vf_schema.SCHEMA.GetTables(): \n      table.read_units = max(1, (table.read_units // 4)) \n      table.write_units = max(1, (table.write_units // 4))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def check_timeout(start_time, timeout): \n    return timeutils.is_older_than(start_time, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_sensor_value_from_code(): \n    with assert_setup_component(1): \n      setup_component(HASS, sensor.DOMAIN, {sensor.DOMAIN: {'platform': 'pilight', 'name': 'test', 'variable': 'test', 'payload': {'protocol': 'test-protocol'}, 'unit_of_measurement': 'fav   unit'}}) \n      state = HASS.states.get('sensor.test') \n      assert (state.state == 'unknown') \n      unit_of_measurement = state.attributes.get('unit_of_measurement') \n      assert (unit_of_measurement == 'fav   unit') \n      fire_pilight_message(protocol='test-protocol', data={'test': 42}) \n      HASS.block_till_done() \n      state = HASS.states.get('sensor.test') \n      assert (state.state == '42')",
        "line_count": 10,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def getProfileBaseName(repository): \n    return getProfileName(repository.baseName, repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_mode(path, follow_symlinks=True): \n    return stats(os.path.expanduser(path), follow_symlinks=follow_symlinks).get('mode', '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def json_decode(value): \n    return json.loads(to_basestring(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_phylogenetic_row_metric(name): \n    return getattr(qiime.beta_metrics, ('one_sample_' + name.lower()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sse_md5(params, **kwargs): \n    _sse_md5(params, 'SSECustomer')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_websocket(headers): \n    return (('upgrade' in headers.get('Connection', '').lower()) and (headers.get('Upgrade').lower() == 'websocket'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_config_file(): \n    return __SYSLOG_NG_CONFIG_FILE",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_exception_context(e, s): \n    e._context = s",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookupAddress(name, timeout=None): \n    return getResolver().lookupAddress(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getopenfilename(parent=None, caption='', basedir='', filters='', selectedfilter='', options=None): \n    return _qfiledialog_wrapper('getOpenFileName', parent=parent, caption=caption, basedir=basedir, filters=filters, selectedfilter=selectedfilter, options=options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def categorical_crossentropy(predictions, targets): \n    return theano.tensor.nnet.categorical_crossentropy(predictions, targets)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_datetime(timestamp): \n    return datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d   @   %H:%M')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cast(x, typ): \n    return Cast(typ)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_get_all_by_host(context, host, filters=None): \n    return IMPL.snapshot_get_all_by_host(context, host, filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def extend_safe(target, source): \n    for elt in source: \n      if (elt not in target): \n         target.append(elt)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def pipeline(registry, xml_parent, data): \n    if (('project' in data) and (data['project'] != '')): \n      pippub = XML.SubElement(xml_parent, 'au.com.centrumsystems.hudson.plugin.buildpipeline.trigger.BuildPipelineTrigger') \n      configs = XML.SubElement(pippub, 'configs') \n      if ('predefined-parameters' in data): \n         params = XML.SubElement(configs, 'hudson.plugins.parameterizedtrigger.PredefinedBuildParameters') \n         properties = XML.SubElement(params, 'properties') \n         properties.text = data['predefined-parameters'] \n      if (('current-parameters' in data) and data['current-parameters']): \n         XML.SubElement(configs, 'hudson.plugins.parameterizedtrigger.CurrentBuildParameters') \n      if (('property-file' in data) and data['property-file']): \n         params = XML.SubElement(configs, 'hudson.plugins.parameterizedtrigger.FileBuildParameters') \n         properties = XML.SubElement(params, 'propertiesFile') \n         properties.text = data['property-file'] \n         failOnMissing = XML.SubElement(params, 'failTriggerOnMissing') \n         failOnMissing.text = str(data.get('fail-on-missing', False)).lower() \n         if ('file-encoding' in data): \n            XML.SubElement(params, 'encoding').text = data['file-encoding'] \n      XML.SubElement(pippub, 'downstreamProjectNames').text = data['project']",
        "line_count": 18,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def activate(language): \n    _active[currentThread()] = translation(language)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rastrigin(individual): \n    return (((10 * len(individual)) + sum((((gene * gene) - (10 * cos(((2 * pi) * gene)))) for gene in individual))),)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def chop(seq, size): \n    return [seq[i:(i + size)] for i in range(0, len(seq), size)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _make_memoryview(size): \n    return memoryview(bytearray(size))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_image_file_path(instance): \n    return os.path.join(CONF.instances_path, instance['name'], 'disk')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _VerboseLevel(): \n    return _cpplint_state.verbose_level",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ssh_copy_key(ssh_bin, master_address, ec2_key_pair_file, keyfile): \n    with open(ec2_key_pair_file, 'rb') as f: \n      args = [('bash   -c   \"cat   >   %s\"   &&   chmod   600   %s' % (keyfile, keyfile))] \n      _check_output(*_ssh_run(ssh_bin, master_address, ec2_key_pair_file, args, stdin=f.read()))",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def boto_supports_volume_encryption(): \n    return (hasattr(boto, 'Version') and (LooseVersion(boto.Version) >= LooseVersion('2.29.0')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def retry_on_eintr(function, *args, **kw): \n    while True: \n      try: \n         return function(*args, **kw) \n      except IOError as e: \n         if (e.errno != errno.EINTR): \n            raise",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def kill_group(pid, sig): \n    os.kill((- pid), sig)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_stmt_simple(p): \n    p[0] = p[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trg_trigger(uid, res_type, res_id, cr): \n    return WorkflowService.new(cr, uid, res_type, res_id).trigger()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FTOU(val): \n    return val",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random(value): \n    return random_module.choice(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dup_subresultants(f, g, K): \n    return dup_inner_subresultants(f, g, K)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_fqdn(): \n    return socket.getfqdn()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_arch(): \n    with settings(hide('running', 'stdout')): \n      arch = run('uname   -m') \n      return arch",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_jids(): \n    with _get_serv(ret=None, commit=True) as cur: \n      sql = 'SELECT   jid,   load\\n                                                FROM   jids' \n      cur.execute(sql) \n      data = cur.fetchall() \n      ret = {} \n      for (jid, load) in data: \n         ret[jid] = salt.utils.jid.format_jid_instance(jid, json.loads(load)) \n      return ret",
        "line_count": 8,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_debug_app(global_conf, **local_conf): \n    return DebugApp(**local_conf)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def basePost(base, a, b): \n    base.calledBasePost = (base.calledBasePost + 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decrypt(cypher, key): \n    return gluechops(cypher, key['d'], (key['p'] * key['q']), decrypt_int)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sort_choices(choices): \n    return sort_unicode(choices, (lambda tup: tup[1]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rgb_css(color): \n    return (u'rgb(%d,   %d,   %d)' % (color.red(), color.green(), color.blue()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def support_enumeration(g): \n    return list(support_enumeration_gen(g))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _system_copy_in_b(bcpy, b, nrhs): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_destination_header(req): \n    return _check_path_header(req, 'Destination', 2, 'Destination   header   must   be   of   the   form   <container   name>/<object   name>')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _GetGroupByKey(entity, property_names): \n    return frozenset(((prop.name(), prop.value().SerializeToString()) for prop in entity.property_list() if (prop.name() in property_names)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_predefined_string_roundtrip(): \n    with u.magnitude_zero_points.enable(): \n      assert (u.Unit(u.STmag.to_string()) == u.STmag) \n      assert (u.Unit(u.ABmag.to_string()) == u.ABmag) \n      assert (u.Unit(u.M_bol.to_string()) == u.M_bol) \n      assert (u.Unit(u.m_bol.to_string()) == u.m_bol)",
        "line_count": 5,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def log_bugdown_error(msg): \n    logging.getLogger('').error(msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_internal_request(domain, referer): \n    return ((referer is not None) and re.match(('^https?://%s/' % re.escape(domain)), referer))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def isBytes(b): \n    return isinstance(b, bytes_type)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generatePersistentJobGUID(): \n    return ('JOB_UUID1-' + str(uuid.uuid1()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def java_config(append=None, **kwargs): \n    blade_config.update_config('java_config', append, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def full_info(): \n    return {'freecpu': freecpu(), 'freemem': freemem(), 'node_info': node_info(), 'vm_info': vm_info()}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getBracketEvaluators(bracketBeginIndex, bracketEndIndex, evaluators): \n    return getEvaluatedExpressionValueEvaluators(evaluators[(bracketBeginIndex + 1):bracketEndIndex])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find(match=(lambda item: False), list=[]): \n    for item in list: \n      if (match(item) is True): \n         return item",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def presence(label): \n    return (lambda x, y: (1.0 * ((label in x) == (label in y))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def extra_padding_x(original_size, padding): \n    return _resize(original_size, 0, padding=padding)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def domain(url): \n    return urlsplit(url)[1].split(u':')[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _parse_step_syslog(lines): \n    return _parse_step_syslog_from_log4j_records(_parse_hadoop_log4j_records(lines))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compare_chemical_expression(s1, s2, ignore_state=False): \n    return (divide_chemical_expression(s1, s2, ignore_state) == 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_get(context, service_id): \n    return IMPL.service_get(context, service_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_unique(url): \n    return (Service.objects.filter(base_url=url).count() == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return (__virtualname__ if ('{0}.status'.format(__virtualname__) in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_expr_group(p): \n    p[0] = ('GROUP', p[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_hmm(): \n    return 'hmmm...'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_session_middleware(app, global_conf, session_type=NoDefault, cookie_name=NoDefault, **store_config): \n    return SessionMiddleware(app, global_conf=global_conf, session_type=session_type, cookie_name=cookie_name, **store_config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_reduced(exp): \n    return _contains(exp, Reduced)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sync_queues(saltenv='base'): \n    return salt.utils.extmods.sync(__opts__, 'queues', saltenv=saltenv)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCounter(technique): \n    return kb.counters.get(technique, 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _noop(object): \n    return object",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_shippable(): \n    return (os.environ.get('SHIPPABLE') == 'true')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def duplicate(image): \n    return image.copy()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def analyze_module(project, resource): \n    project.pycore.analyze_module(resource)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in6_ismgladdr(str): \n    return in6_isincluded(str, 'ff0e::', 16)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def autosummary_toc_visit_latex(self, node): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def guard_top_only(): \n    NzbQueue.do.set_top_only(cfg.top_only())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_component(source): \n    return source[source.index(START_ICONSET):]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _re_compile(regex): \n    return re.compile(regex, (re.I | re.UNICODE))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_stats(conf, json): \n    for (name, key) in get_stats_string(conf['version']).iteritems(): \n      result = lookup_stat(name, json, conf) \n      dispatch_stat(result, name, key, conf)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _test(value, *args, **keywargs): \n    return (value, args, keywargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_package(): \n    util.positional_parameters_enforcement = 'EXCEPTION'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_module_from_name(dotted_name, path=None, use_sys=1): \n    return load_module_from_modpath(dotted_name.split('.'), path, use_sys)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def machine(): \n    return uname().machine",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def argmax(a, axis=None, dtype=None, out=None, keepdims=False): \n    return a.argmax(axis=axis, dtype=dtype, out=out, keepdims=keepdims)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_venv_packages(venv_path): \n    with open(get_index_filename(venv_path)) as reader: \n      return set((p.strip() for p in reader.read().split('\\n') if p.strip()))",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_get_init_2(): \n    with make_tempfile(join(TMP_TEST_DIR, '__init__.pyw')): \n      assert mp.get_init(TMP_TEST_DIR)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read(*paths): \n    with open(os.path.join(*paths), 'r') as f: \n      return f.read()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def recursive_glob(path, pattern): \n    for (root, dirnames, filenames) in os.walk(path, followlinks=True): \n      for filename in fnmatch.filter(filenames, pattern): \n         (yield os.path.join(root, filename))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def quota_create(context, project_id, resource, limit, allocated=0): \n    return IMPL.quota_create(context, project_id, resource, limit, allocated=allocated)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cpu_stats(): \n    return _psplatform.cpu_stats()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('boto_vpc' if ('boto_vpc.exists' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def case_i(string): \n    return ''.join([(((('[' + c.upper()) + c.lower()) + ']') if c.isalpha() else c) for c in re.escape(string)])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def make_path_recipe(r): \n    return ('/recipes/' + r)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dictfind(dictionary, element): \n    for (key, value) in dictionary.iteritems(): \n      if (element is value): \n         return key",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def processElementNodeByGeometry(elementNode, geometryOutput): \n    if (geometryOutput != None): \n      elementNode.getXMLProcessor().convertElementNode(elementNode, geometryOutput)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def assert_equal(v1, v2, msg=''): \n    assert (v1 == v2), msg",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def worker_destroy(context, **filters): \n    return IMPL.worker_destroy(context, **filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clusterstatus(request): \n    return render('clusterstatus.html', request, Cluster(request.jt))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def psd(v): \n    return Hint(psd=True, symmetric=True)(v)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RunDecompiler(d, dx, decompiler, session=None): \n    if (decompiler != None): \n      androconf.debug('Decompiler   ...') \n      decompiler = decompiler.lower() \n      if (decompiler == 'dex2jad'): \n         d.set_decompiler(DecompilerDex2Jad(d, androconf.CONF['PATH_DEX2JAR'], androconf.CONF['BIN_DEX2JAR'], androconf.CONF['PATH_JAD'], androconf.CONF['BIN_JAD'], androconf.CONF['TMP_DIRECTORY'])) \n      elif (decompiler == 'dex2fernflower'): \n         d.set_decompiler(DecompilerDex2Fernflower(d, androconf.CONF['PATH_DEX2JAR'], androconf.CONF['BIN_DEX2JAR'], androconf.CONF['PATH_FERNFLOWER'], androconf.CONF['BIN_FERNFLOWER'], androconf.CONF['OPTIONS_FERNFLOWER'], androconf.CONF['TMP_DIRECTORY'])) \n      elif (decompiler == 'ded'): \n         d.set_decompiler(DecompilerDed(d, androconf.CONF['PATH_DED'], androconf.CONF['BIN_DED'], androconf.CONF['TMP_DIRECTORY'])) \n      else: \n         d.set_decompiler(DecompilerDAD(d, dx))",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def modprobe(mod): \n    return quietRun(['modprobe', mod])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_csv(results, headers, filename): \n    with open(filename, 'w') as csvfile: \n      writer = csv.DictWriter(csvfile, fieldnames=headers) \n      writer.writeheader() \n      writer.writerows(results)",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_remove_security_group(context, instance_id, security_group_id): \n    return IMPL.instance_remove_security_group(context, instance_id, security_group_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def freecpu(): \n    return node_info()['free_cpus']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return ClipRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ext_pillar(minion_id, pillar, *args, **kwargs): \n    return MySQLExtPillar().fetch(minion_id, pillar, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, msg=None, ciphermod=None): \n    return CMAC(key, msg, ciphermod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def release_interface(device, interface): \n    device._ctx.managed_release_interface(device, interface)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stonith_present(name, stonith_id, stonith_device_type, stonith_device_options=None, cibname=None): \n    return _item_present(name=name, item='stonith', item_id=stonith_id, item_type=stonith_device_type, extra_args=stonith_device_options, cibname=cibname)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_list_like(obj): \n    return ((not is_string_like(obj)) and iterable(obj))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def isHermitian(matlist, K): \n    return (conjugate_transpose(matlist, K) == matlist)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def human_readable(size, precision=1): \n    return ((('%.' + str(precision)) + 'f') % ((size / (1024.0 * 1024.0)),))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def md5_shard(word): \n    return ('server%d' % (ord(hashlib.md5(word).digest()[(-1)]) % 4))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_metadata_update(context, snapshot_id, metadata, delete): \n    return IMPL.snapshot_metadata_update(context, snapshot_id, metadata, delete)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize_ws(text): \n    return '   '.join(text.split())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_node(node_state): \n    return Node(uuid=node_state.uuid, hostname=node_state.hostname, applications=(node_state.applications or {}), manifestations=(node_state.manifestations or {}))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_sudo_prefix_with_user_and_group(): \n    eq_(_sudo_prefix(user='foo', group='bar'), ('%s   -u   \"foo\"   -g   \"bar\"   ' % (env.sudo_prefix % env)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def t_NUMBER(): \n    return t",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeBadRequest(code=BAD_REQUEST, **result): \n    return BadRequest(code, result)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PyJsStrictNeq(a, b): \n    return PyJsStrictEq(a, b).neg()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_vector(): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _allow_CTRL_C_other(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backwards(apps, schema_editor): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dumps(value): \n    return base64.b64encode(pickle.dumps(value, pickle.HIGHEST_PROTOCOL))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def merge(dict1, dict2): \n    for (key, val2) in dict2.items(): \n      if (val2 is not None): \n         val1 = dict1.get(key) \n         if isinstance(val2, dict): \n            if (val1 is None): \n               val1 = {} \n            if isinstance(val1, Alias): \n               val1 = (val1, val2) \n            elif isinstance(val1, tuple): \n               (alias, others) = val1 \n               others = others.copy() \n               merge(others, val2) \n               val1 = (alias, others) \n            else: \n               val1 = val1.copy() \n               merge(val1, val2) \n         else: \n            val1 = val2 \n         dict1[key] = val1",
        "line_count": 19,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def getNewRepository(): \n    return TowerRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def min_uuid_from_time(timestamp): \n    return uuid_from_time(timestamp, 141289400074368, 128)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_mt_res(item): \n    return item.startswith('Packages/Material   Theme/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sigmoid_prime(z): \n    return (sigmoid(z) * (1 - sigmoid(z)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ProfilesFeedFromString(xml_string): \n    return atom.core.parse(ProfilesFeed, xml_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vbd_unplug_with_retry(session, vbd): \n    while True: \n      try: \n         session.xenapi.VBD.unplug(vbd) \n         logging.debug(_('VBD.unplug   successful   first   time.')) \n         return \n      except XenAPI.Failure as e: \n         if ((len(e.details) > 0) and (e.details[0] == 'DEVICE_DETACH_REJECTED')): \n            logging.debug(_('VBD.unplug   rejected:   retrying...')) \n            time.sleep(1) \n         elif ((len(e.details) > 0) and (e.details[0] == 'DEVICE_ALREADY_DETACHED')): \n            logging.debug(_('VBD.unplug   successful   eventually.')) \n            return \n         else: \n            logging.error(_('Ignoring   XenAPI.Failure   in   VBD.unplug:   %s'), e) \n            return",
        "line_count": 15,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def read_file(*parts): \n    with codecs.open(os.path.join(HERE, *parts), 'rb', 'ascii') as f: \n      return f.read()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_default_config(): \n    return deepcopy(_default_dict)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gentoo_mirrors_contains(value): \n    return var_contains('GENTOO_MIRRORS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_dependencies(): \n    return config.check_driver_dependencies(__virtualname__, {'azure': HAS_LIBS})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xnormpath(path): \n    return os.path.normpath(path).replace(os.sep, '/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_home_dir(): \n    return HOME_DIR",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reduce_with(aggregation_fn, key, values): \n    (yield (key, aggregation_fn(values)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deferred(*columns, **kw): \n    return ColumnProperty(deferred=True, *columns, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inspect_error(): \n    error('Internal   Python   error   in   the   inspect   module.\\nBelow   is   the   traceback   from   this   internal   error.\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _findShebang(filename): \n    with open(filename, 'rU') as f: \n      if (f.read(2) == '#!'): \n         exe = f.readline(1024).strip('\\n') \n         return exe",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def local_path_as_url(filename): \n    return ('file://' + urllib.pathname2url(os.path.abspath(filename)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_hub(): \n    return _threadlocal.hub",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def close_logger(): \n    for handler in _logger.handlers: \n      _logger.removeHandler(handler) \n      if isinstance(handler, logging.FileHandler): \n         handler.close()",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def signal_alarm(n): \n    if hasattr(signal, 'alarm'): \n      signal.alarm(n)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def classmethod2func(class_, method_): \n    return ('%s.%s' % (class2func(class_), method2func(method_)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_directory_handle(path): \n    return CreateFileW(path, FILE_LIST_DIRECTORY, WATCHDOG_FILE_SHARE_FLAGS, None, OPEN_EXISTING, WATCHDOG_FILE_FLAGS, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_xheader(lms_callback_url, lms_key, queue_name): \n    return json.dumps({'lms_callback_url': lms_callback_url, 'lms_key': lms_key, 'queue_name': queue_name})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def using_systemd(): \n    return run('which   systemctl', quiet=True).succeeded",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plot_day_summary_oclh(ax, quotes, ticksize=3, colorup=u'k', colordown=u'r'): \n    return _plot_day_summary(ax, quotes, ticksize=ticksize, colorup=colorup, colordown=colordown, ochl=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sign_seq(poly_seq, x): \n    return [sign(LC(poly_seq[i], x)) for i in range(len(poly_seq))]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _normalize_handler_method(method): \n    return method.lower().replace('-', '_')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _scrub_empty_str_values(dct, keys_to_scrub): \n    for key in keys_to_scrub: \n      if ((key in dct) and (dct[key] == '')): \n         del dct[key]",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def border_crossing(): \n    return s3_rest_controller(rheader=s3db.transport_rheader)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_update(context, group_id, values): \n    return IMPL.group_update(context, group_id, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def detect_conf_var(): \n    with open(configuration.get('kerberos', 'ccache'), 'rb') as f: \n      return ('X-CACHECONF:' in f.read())",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_loadgraph_args(parser): \n    parser.add_argument(u'-l', u'--loadgraph', metavar=u'filename', default=None, help=u'load   a   precomputed   k-mer   graph   from   disk')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_access_key(): \n    return environ.get('HTTP_ACCESSKEY', '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bdate_range(start=None, end=None, periods=None, freq='B', tz=None, normalize=True, name=None, closed=None, **kwargs): \n    return DatetimeIndex(start=start, end=end, periods=periods, freq=freq, tz=tz, normalize=normalize, name=name, closed=closed, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sm_volume_create(context, values): \n    return IMPL.sm_volume_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _footer_copyright(): \n    return _(u'\\xa9   {org_name}.      All   rights   reserved   except   where   noted.      EdX,   Open   edX   and   the   edX   and   Open   EdX   logos   are   registered   trademarks   or   trademarks   of   edX   Inc.').format(org_name=configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_mdz(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize_version_number(version): \n    return _discover.normalize_version_number(version)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pytest_unconfigure(config): \n    if config.getoption('--qute-profile-subprocs'): \n      stats = pstats.Stats() \n      for fn in os.listdir('prof'): \n         stats.add(os.path.join('prof', fn)) \n      stats.dump_stats(os.path.join('prof', 'combined.pstats'))",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def not_present(subset=None, show_ipv4=False): \n    return list_not_state(subset=subset, show_ipv4=show_ipv4)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def single_tab(pl, segment_info, mode): \n    return (len(list_tabpages()) == 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_collection_path_collation(apps, schema_editor): \n    if (schema_editor.connection.vendor == u'postgresql'): \n      schema_editor.execute(u'\\n                                    ALTER   TABLE   wagtailcore_collection   ALTER   COLUMN   path   TYPE   VARCHAR(255)   COLLATE   \"C\"\\n                        ')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def stringvalue(string): \n    return string.replace((u'\\\\' + string[0]), string[0])[1:(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fill_with_sample_data(rc_object): \n    for kind in ALL_FOUR: \n      with open(getattr(rc_object, kind), 'w') as f: \n         f.write(kind)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def urlsafe_b64encode(s): \n    return b64encode(s, '-_')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def truncate_year(dt, measure): \n    return date(((dt.year // measure) * measure), 1, 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def js_alert(ident, level, message): \n    return ('try   {add_message(\"%(ident)s\",   \"%(level)s\",   \"%(message)s\");}\\ncatch(err)   {alert(\"%(levelup)s:   %(message)s\");}\\n' % {'ident': ident, 'level': level, 'levelup': level.upper(), 'message': message.replace('\"', '\\\\\"')})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_descriptor(obj): \n    return (hasattr(obj, '__get__') or hasattr(obj, '__set__') or hasattr(obj, '__delete__'))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_num_groups(*args, **kargs): \n    raise _stub_error",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_last_day(dt): \n    return (get_first_day(dt, 0, 1) + datetime.timedelta((-1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connect_to_cloud_monitoring(region=None): \n    return _create_client(ep_name='monitor', region=region)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_flow_stmt(p): \n    p[0] = p[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def conv1d(x, kernel, stride=1, border_mode='valid', image_shape=None, filter_shape=None): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_absent(name, force=False, recursive=False): \n    return _absent(name, 'volume', force, recursive)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def site_read(context, data_dict): \n    return {'success': True}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_multi_representer(data_type, multi_representer, Dumper=Dumper): \n    Dumper.add_multi_representer(data_type, multi_representer)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lambertw(z, k=0, tol=1e-08): \n    return _lambertw(z, k, tol)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deactivate_all(): \n    _active.value = gettext_module.NullTranslations()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stopped(name=None): \n    return __salt__['syslog_ng.stop'](name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_internal_request(domain, referer): \n    return ((referer is not None) and re.match(('^https?://%s/' % re.escape(domain)), referer))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def remove_packageJSON_file(): \n    for filename in ['package.json']: \n      os.remove(os.path.join(PROJECT_DIRECTORY, filename))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _collect_all_synsets(word, pos, synset_relations=dict()): \n    return ('<ul>%s\\n</ul>\\n' % ''.join((_collect_one_synset(word, synset, synset_relations) for synset in wn.synsets(word, pos))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _MaybeSetupTransaction(request, keys): \n    return _GetConnection()._set_request_transaction(request)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPluginsDirectoryPath(): \n    return archive.getAbsoluteFolderPath(os.path.dirname(__file__), os.path.join('skeinforge_plugins', 'analyze_plugins'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new_db_session(): \n    return create_session(application.database_engine, autoflush=True, autocommit=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    evaluate.processArchivable(Difference, elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def S_ISLNK(mode): \n    return (S_IFMT(mode) == S_IFLNK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stub_out(stubs, funcs): \n    for func in funcs: \n      func_name = '_'.join(func.__name__.split('_')[1:]) \n      stubs.Set(db, func_name, func) \n      stubs.Set(db.sqlalchemy.api, func_name, func)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def lookupMailExchange(name, timeout=None): \n    return getResolver().lookupMailExchange(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quote(value, safe='/'): \n    return _quote(get_valid_utf8_str(value), safe)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return skeinforge_meta.MetaRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_duration(element): \n    return ((element._stopped - element._started).seconds if hasattr(element, '_started') else None)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _ScrubUpdateDevice(op_args): \n    _ScrubForClass(Device, op_args['device_dict'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cflags_contains(value): \n    return var_contains('CFLAGS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def running(name, sig=None): \n    return status(name).get(name, False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def walk(dir): \n    for record in os.walk(dir): \n      for f in record[(-1)]: \n         (yield os.path.join(record[0], f))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _get_new_state_file_name(zone): \n    return ((STATE_FILENAME + '.') + zone)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_palette(): \n    return create_palette(QColor(NAMED_COLORS['light-yellow']), QColor(NAMED_COLORS['yellow']))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_has_version(): \n    assert_equals(lettuce.version, '0.2.23')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_downloadable_sources(target_dir): \n    return [os.path.join(target_dir, fname) for fname in os.listdir(target_dir) if fname.endswith('.py')]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def load(path, dtype, broadcastable, mmap_mode=None): \n    return LoadFromDisk(dtype, broadcastable, mmap_mode)(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_global_id(*args, **kargs): \n    raise _stub_error",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_msg(app, msg, reply_cls=None, reply_multi=False): \n    return app.send_request(event.SendMsgRequest(msg=msg, reply_cls=reply_cls, reply_multi=reply_multi))()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def current_time(): \n    return time.time()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def yaml_dump(dict_to_dump): \n    return yaml.safe_dump(dict_to_dump, default_flow_style=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_bootstrap_setting(setting, default=None): \n    return BOOTSTRAP3.get(setting, default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def block_device_mappings(vm_): \n    return config.get_cloud_config_value('block_device_mappings', vm_, __opts__, search_global=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _paths_from_assignment(evaluator, expr_stmt): \n    for (assignee, operator) in zip(expr_stmt.children[::2], expr_stmt.children[1::2]): \n      try: \n         assert (operator in ['=', '+=']) \n         assert (tree.is_node(assignee, 'power', 'atom_expr') and (len(assignee.children) > 1)) \n         c = assignee.children \n         assert ((c[0].type == 'name') and (c[0].value == 'sys')) \n         trailer = c[1] \n         assert ((trailer.children[0] == '.') and (trailer.children[1].value == 'path')) \n         \"\\n                                    execution   =   c[2]\\n                                    assert   execution.children[0]   ==   '['\\n                                    subscript   =   execution.children[1]\\n                                    assert   subscript.type   ==   'subscript'\\n                                    assert   ':'   in   subscript.children\\n                                    \" \n      except AssertionError: \n         continue \n      from jedi.evaluate.iterable import py__iter__ \n      from jedi.evaluate.precedence import is_string \n      types = evaluator.eval_element(expr_stmt) \n      for types in py__iter__(evaluator, types, expr_stmt): \n         for typ in types: \n            if is_string(typ): \n               (yield typ.obj)",
        "line_count": 18,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def sync_keys(dsk1, dsk2): \n    return _sync_keys(dsk1, dsk2, toposort(dsk2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _dumps(obj): \n    return json.dumps(obj, sort_keys=True, indent=4, separators=(',', ':   '), cls=_ActionEncoder)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def at_server_reload_start(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(search, one=True): \n    return _action('get', search, one)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _lnB(alpha): \n    return (np.sum(gammaln(alpha)) - gammaln(np.sum(alpha)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def destroy_database(): \n    if (DBDRIVER in ['sqlite3']): \n      if os.path.exists(TESTDB): \n         os.remove(TESTDB)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def mangle(ident, argtys): \n    return ((PREFIX + mangle_identifier(ident)) + mangle_args(argtys))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def empty_list(lineno=None, col=None): \n    return ast.List(elts=[], ctx=ast.Load(), lineno=lineno, col_offset=col)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_type_access_add(context, type_id, project_id): \n    return IMPL.group_type_access_add(context, type_id, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_all(): \n    unittest.main(verbosity=2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_plugin_keywords(): \n    return iter(plugins.keys())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_default_cache(): \n    return (os.environ.get('PYTHON_EGG_CACHE') or appdirs.user_cache_dir(appname='Python-Eggs'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def string_b64encode(s): \n    return base64.urlsafe_b64encode(s).strip('=')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLENGULFING(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLENGULFING)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def latest_version(*names, **kwargs): \n    return ('' if (len(names) == 1) else dict(((x, '') for x in names)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def ensure_sys_path_contains(paths): \n    for entry in paths: \n      if isinstance(entry, (list, tuple)): \n         ensure_sys_path_contains(entry) \n      elif ((entry is not None) and (entry not in sys.path)): \n         sys.path.append(entry)",
        "line_count": 5,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def storage_factory(klass, location, base_url): \n    return klass(location=location, base_url=base_url)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _print_report(job_info): \n    for ji in job_info: \n      print(('%-15s   %13s   for   %17s   (%s)' % (ji['cluster_id'], ji['state'], _format_timedelta(ji['time']), ji['name'])))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def process_open_sockets(attrs=None, where=None): \n    return _osquery_cmd(table='process_open_sockets', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete(filename): \n    MP4(filename).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getLogRecordFactory(): \n    return _logRecordFactory",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_commandline_basic(tmpdir): \n    subprocess.check_call([sys.executable, VIRTUALENV_SCRIPT, str(tmpdir.join('venv'))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attach_usage_plan_to_apis(plan_id, apis, region=None, key=None, keyid=None, profile=None): \n    return _update_usage_plan_apis(plan_id, apis, 'add', region=region, key=key, keyid=keyid, profile=profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('keyboard.get_sys' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _sysv_is_disabled(name): \n    return (not bool(glob.glob('/etc/rc{0}.d/S*{1}'.format(_runlevel(), name))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_django_query(query, model_cls=None): \n    return Q.from_modm_query(query, model_cls=model_cls).to_django_query()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def raw_command(netfn, command, bridge_request=None, data=(), retry=True, delay_xmit=None, **kwargs): \n    with _IpmiSession(**kwargs) as s: \n      r = s.raw_command(netfn=int(netfn), command=int(command), bridge_request=bridge_request, data=data, retry=retry, delay_xmit=delay_xmit) \n      return r",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def absolute_path(path): \n    return os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def search(pattern, string, flags=0, pos=None, endpos=None, partial=False, concurrent=None, **kwargs): \n    return _compile(pattern, flags, kwargs).search(string, pos, endpos, concurrent, partial)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exit(code='0'): \n    raise SystemExit(int(code))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def organize_imports(): \n    with RopeContext() as ctx: \n      organizer = ImportOrganizer(ctx.project) \n      changes = organizer.organize_imports(ctx.resource) \n      if (changes is not None): \n         progress = ProgressHandler('Organize   imports') \n         ctx.project.do(changes, task_handle=progress.handle) \n         reload_changes(changes)",
        "line_count": 7,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def floating_ip_update(context, address, values): \n    return IMPL.floating_ip_update(context, address, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def capped_binomial_deviance(actual, predicted): \n    return np.mean(capped_log10_likelihood(actual, predicted))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def LOG_FILE(x): \n    context.log_file = x",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_url(url): \n    _cache.del_cached_url(url)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log_post_trace(trace, model): \n    return np.vstack(([obs.logp_elemwise(pt) for obs in model.observed_RVs] for pt in trace))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def list_intersection(list1, list2): \n    return [item for item in list1 if (item in list2)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_height_ratios(): \n    with pytest.raises(ValueError): \n      gridspec.GridSpec(1, 1, height_ratios=[2, 1, 3])",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, hashAlgo=None, mgfunc=None, label=b('')): \n    return PKCS1OAEP_Cipher(key, hashAlgo, mgfunc, label)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isInferenceAvailable(): \n    return any((isTechniqueAvailable(_) for _ in (PAYLOAD.TECHNIQUE.BOOLEAN, PAYLOAD.TECHNIQUE.STACKED, PAYLOAD.TECHNIQUE.TIME)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_const_list(p): \n    p[0] = p[2]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stopped(name): \n    return _virt_call(name, 'shutdown', 'stopped', 'Machine   has   been   shut   down')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getAlterationFileLineBlindly(fileName): \n    return ('(<alterationFile>)   %s   (</alterationFile>)' % fileName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getargsfromdoc(obj): \n    if (obj.__doc__ is not None): \n      return getargsfromtext(obj.__doc__, obj.__name__)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _get_headers(params): \n    return {'Authorization': 'OAuth   {oauth}'.format(oauth=params['api_key'])}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def t_ignore_MULTICOMM(t): \n    t.lexer.lineno += t.value.count('\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_tos_and_honor_code_url(): \n    return get_url('TOS_AND_HONOR')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def array(obj, dtype=None, copy=True, ndmin=0): \n    return core.array(obj, dtype, copy, ndmin)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def atol(s, base=10): \n    return _long(s, base)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mean_bilateral(image, selem, out=None, mask=None, shift_x=False, shift_y=False, s0=10, s1=10): \n    return _apply(bilateral_cy._mean, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y, s0=s0, s1=s1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def checkFieldName(field_name): \n    if (field_name not in data_fields): \n      raise ValueError(('%r   is   not   a   defined   simple   registration   field' % (field_name,)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def contact_autocreate_handler(sender, instance, created, **kwargs): \n    if created: \n      try: \n         contact_type = ContactType.objects.filter((models.Q(name='Person') | models.Q(slug='person')))[0] \n         contact = Contact(contact_type=contact_type, name=instance.name, related_user=instance) \n         contact.save() \n      except: \n         pass",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def avg_pool3d(input, kernel_size, stride=None): \n    return _functions.thnn.AvgPool3d(kernel_size, stride)(input)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_position_sup(pos1, pos2): \n    return (pos1 > pos2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def maybe_unwrap_results(results): \n    return getattr(results, '_results', results)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_base(text): \n    return min([(ord(char) in BASE_CHARS) for char in text])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def testdoc(*arguments, **options): \n    TestDoc().execute(*arguments, **options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _encode_objectid(name, value, dummy0, dummy1): \n    return (('\\x07' + name) + value.binary)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def raw_post_data(request): \n    return HttpResponse(request.raw_post_data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pure_nash_brute_gen(g): \n    for a in np.ndindex(*g.nums_actions): \n      if g.is_nash(a): \n         (yield a)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def create_rpc(deadline=None, callback=None): \n    return apiproxy_stub_map.UserRPC('images', deadline, callback)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dmp_gf_sqf_part(f, K): \n    raise NotImplementedError('multivariate   polynomials   over   finite   fields')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def matmul(a, b, transa=False, transb=False): \n    return MatMul(transa=transa, transb=transb)(a, b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_flows(): \n    for c in core.openflow.connections: \n      d = of.ofp_flow_mod(command=of.OFPFC_DELETE) \n      c.send(d)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def a_is_not_b(a, b): \n    return (a is not b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SetIfNotNone(dict, attr_name, value): \n    if (value is not None): \n      dict[attr_name] = value",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_groups(name): \n    return salt.utils.get_group_list(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unicodise_safe(string, encoding=None): \n    return unicodise(deunicodise(string, encoding), encoding).replace(u'\\ufffd', '?')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _coordinateSign(hemisphere): \n    return (1 if (hemisphere in 'NE') else (-1))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def button_action(button, action): \n    connect_button(button, action.trigger)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def humanize_key(key): \n    return u':'.join([(u'%02x' % ord(c)) for c in key.get_fingerprint()])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def has_uniform_batch_size(mode): \n    return resolve_iterator_class(mode).uniform_batch_size",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(): \n    settings.startMainLoopFromConstructor(getNewRepository())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def same_node(node1, node2): \n    return (node1.uuid == node2.uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def topic_name_from_path(path, project): \n    return _name_from_project_path(path, project, _TOPIC_TEMPLATE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def total_sum_of_squares(y): \n    return sum(((v ** 2) for v in de_mean(y)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _cert_base_path(cacert_path=None): \n    return cert_base_path(cacert_path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def detail(request, action_id): \n    return render_to_response('actstream/detail.html', {'action': get_object_or_404(models.Action, pk=action_id)}, context_instance=RequestContext(request))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def missing(name): \n    return (not available(name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Date(year, month, day): \n    return datetime.date(year, month, day)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_context(): \n    if hasattr(ctx, 'contexts'): \n      return '   -->   '.join([s for s in ctx.contexts if s])",
        "line_count": 2,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def era_main(): \n    return FlockerScriptRunner(script=EraScript(), options=EraOptions(), logging=False).main()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_example_filenames(example_dir): \n    for (dirpath, dirnames, filenames) in os.walk(example_dir): \n      for fname in sorted(filenames): \n         if (not fname.endswith('.py')): \n            continue \n         filename = op.join(dirpath, fname) \n         name = filename[len(example_dir):].lstrip('/\\\\')[:(-3)] \n         name = name.replace('\\\\', '/') \n         (yield (filename, name))",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def islink(path): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pytest_collection_modifyitems(session, config, items): \n    process_split(session, config, items)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main_test(): \n    with tf.Session() as sess: \n      print('Self-test   for   neural   translation   model.') \n      buckets = [(3, 3), (6, 6)] \n      num_layers = 2 \n      hidden_size = 32 \n      source_vocab_size = target_vocab_size = 10 \n      max_gradient_norm = 5.0 \n      batch_size = 3 \n      learning_rate = 0.3 \n      learning_rate_decay_factor = 0.99 \n      num_samples = 8 \n      model = tl.layers.EmbeddingAttentionSeq2seqWrapper(source_vocab_size, target_vocab_size, buckets, hidden_size, num_layers, max_gradient_norm, batch_size, learning_rate, learning_rate_decay_factor, use_lstm=False, num_samples=num_samples, forward_only=False) \n      sess.run(tf.initialize_all_variables()) \n      data_set = ([([0, 1], [2, 2]), ([2, 3], [4]), ([5], [6])], [([1, 1, 2, 3, 4], [2, 2, 2, 2, 2]), ([3, 3, 4], [5, 6])]) \n      for _ in xrange(5): \n         bucket_id = random.choice([0, 1]) \n         (encoder_inputs, decoder_inputs, target_weights) = model.get_batch(data_set, bucket_id, PAD_ID, GO_ID, EOS_ID, UNK_ID) \n         print('what   is   the   data') \n         print(encoder_inputs, len(encoder_inputs), len(encoder_inputs[0])) \n         print(decoder_inputs, len(decoder_inputs), len(decoder_inputs[0])) \n         print(target_weights, len(target_weights), len(target_weights[0])) \n         model.step(sess, encoder_inputs, decoder_inputs, target_weights, bucket_id, False)",
        "line_count": 22,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _make_int_array(): \n    return array.array(str(u'i'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'hop', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def allresults(tree, leaf=yieldify): \n    return treeapply(tree, {list: branch.multiplex, tuple: branch.chain}, leaf=leaf)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def node_region(patched_ast_node): \n    return patched_ast_node.region",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shutdown(vm_): \n    with _get_xapi_session() as xapi: \n      vm_uuid = _get_label_uuid(xapi, 'VM', vm_) \n      if (vm_uuid is False): \n         return False \n      try: \n         xapi.VM.clean_shutdown(vm_uuid) \n         return True \n      except Exception: \n         return False",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def floating_ip_get_all_by_host(context, host): \n    return IMPL.floating_ip_get_all_by_host(context, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _adjust_start_date_for_beta_testers(user, descriptor, course_key): \n    return adjust_start_date(user, descriptor.days_early_for_beta, descriptor.start, course_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable_insecure_serializers(choices=['pickle', 'yaml', 'msgpack']): \n    for choice in choices: \n      try: \n         registry.enable(choice) \n      except KeyError: \n         pass",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def add_tagids(source): \n    return _modify_tagids(source)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_localzone(): \n    return _get_localzone()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def autosummary_toc_visit_html(self, node): \n    raise nodes.SkipNode",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backend(entry): \n    return ('%s://%s%s' % (PROTOCOL, Site.objects.get_current().domain, reverse('zinnia:entry_shortlink', args=[base36(entry.pk)])))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ssh_encrypt_text(ssh_public_key, text): \n    with utils.tempdir() as tmpdir: \n      sslkey = os.path.abspath(os.path.join(tmpdir, 'ssl.key')) \n      try: \n         out = convert_from_sshrsa_to_pkcs8(ssh_public_key) \n         with open(sslkey, 'w') as f: \n            f.write(out) \n         (enc, _err) = utils.execute('openssl', 'rsautl', '-encrypt', '-pubin', '-inkey', sslkey, '-keyform', 'PEM', process_input=text) \n         return enc \n      except exception.ProcessExecutionError as exc: \n         raise exception.EncryptionFailure(reason=exc.stderr)",
        "line_count": 10,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_pyos_inputhook(): \n    return ctypes.c_void_p.in_dll(ctypes.pythonapi, 'PyOS_InputHook')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def zone_compare(time_zone): \n    return (time_zone == get_zone())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prepare_bearer_uri(token, uri): \n    return utils.add_params_to_uri(uri, [(u'access_token', token)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_args(options): \n    for path in [options.aws_credentials, options.master_yml]: \n      if (path and (not os.path.exists(path))): \n         sys.stderr.write('ERROR:   {path}   not   found.\\n'.format(path=path)) \n         sys.exit((-1))",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def rstrips(text, remove): \n    return _strips('r', text, remove)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def html_quote(string): \n    return ('\"%s\"' % html_escape(string).replace('\\n', '&#10;').replace('\\r', '&#13;').replace(' DCTB ', '&#9;'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_tags_not_in_module_path(physical_line, filename): \n    if ('tempest/scenario' not in filename): \n      matches = SCENARIO_DECORATOR.match(physical_line) \n      if matches: \n         services = matches.group(1).split(',') \n         for service in services: \n            service_name = service.strip().strip(\"'\") \n            modulepath = os.path.split(filename)[0] \n            if (service_name in modulepath): \n               return (physical_line.find(service_name), 'T107:   service   tag   should   not   be   in   path')",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def load_test_config(): \n    conf.load_test_config()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def query_package(module, xbps_path, name, state='present'): \n    if (state == 'present'): \n      lcmd = ('%s   %s' % (xbps_path['query'], name)) \n      (lrc, lstdout, lstderr) = module.run_command(lcmd, check_rc=False) \n      if (not is_installed(lstdout)): \n         return (False, False) \n      rcmd = ('%s   -Sun' % xbps_path['install']) \n      (rrc, rstdout, rstderr) = module.run_command(rcmd, check_rc=False) \n      if ((rrc == 0) or (rrc == 17)): \n         'Return   True   to   indicate   that   the   package   is   installed   locally,\\n                                    and   the   result   of   the   version   number   comparison   to   determine   if   the\\n                                    package   is   up-to-date' \n         return (True, (name not in rstdout)) \n      return (False, False)",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def remove_dir(dir): \n    if dir: \n      if os.path.exists(dir): \n         try: \n            shutil.rmtree(dir) \n         except: \n            pass",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def register(linter): \n    linter.register_checker(OpenEncodingChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getIsInFilledRegion(loops, point): \n    return ((getNumberOfIntersectionsToLeftOfLoops(loops, point) % 2) == 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_default_unit_format(config): \n    return u'cds'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def args_for_opt_dest_subset(option_parser, args, dests=None): \n    for (dest, value) in _args_for_opt_dest_subset(option_parser, args, dests): \n      (yield value)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def v6_int_to_packed(address): \n    return Bytes(struct.pack('!QQ', (address >> 64), (address & ((2 ** 64) - 1))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wipe_disks(job, disk_list): \n    for disk in disk_list: \n      partition.wipe_filesystem(job, disk['mountpt'])",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def error(request, message, extra_tags='', fail_silently=False): \n    add_message(request, constants.ERROR, message, extra_tags=extra_tags, fail_silently=fail_silently)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_round(method, prec, exprange, restricted_range, itr, stat): \n    for op in all_unary(prec, 9999, itr): \n      n = random.randrange(10) \n      roundop = (op[0], n) \n      t = TestSet(method, roundop) \n      try: \n         if (not convert(t)): \n            continue \n         callfuncs(t) \n         verify(t, stat) \n      except VerifyError as err: \n         log(err)",
        "line_count": 11,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _get_config(): \n    return (__salt__['config.get']('consul.url') or __salt__['config.get']('consul:url'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read(*names, **kwargs): \n    with io.open(os.path.join(os.path.dirname(__file__), *names), encoding=kwargs.get('encoding', 'utf8')) as fp: \n      return fp.read()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def art_for_asin(album): \n    if album.asin: \n      for index in AMAZON_INDICES: \n         (yield (AMAZON_URL % (album.asin, index)))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_dae_yaml(): \n    limited_epoch_train(os.path.join(pylearn2.__path__[0], 'scripts/autoencoder_example/dae.yaml'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _cmpBottom(a, b): \n    return _cmpTop(a, b, what='bottom   10   rank')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def url_escape(value): \n    return urllib.quote_plus(utf8(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_repo_link(val): \n    return val.startswith(u'weblate://')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def properties(options=None): \n    return default_api.properties(options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backup_get_all_by_host(context, host): \n    return IMPL.backup_get_all_by_host(context, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_for_bad_initial(p): \n    p[0] = 'BAD   INITIAL   VALUE   IN   FOR   STATEMENT'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def img_as_ubyte(image, force_copy=False): \n    return convert(image, np.uint8, force_copy)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_tuple(x, encoder): \n    return tuple(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sumofsq(x, axis=0): \n    return np.sum((x ** 2), axis=0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SetThreadName(thread, name): \n    thread.setName(('[%s:   %s]' % (GlobalProcess().Type(), name)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tokens(doc): \n    return (tok.lower() for tok in re.findall('\\\\w+', doc))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def parse_redaction_policy_from_file(filename): \n    with open(filename) as f: \n      s = f.read().strip() \n      if (not s): \n         return RedactionPolicy([]) \n      scheme = json.loads(s) \n      try: \n         version = str(scheme.pop('version')) \n      except KeyError: \n         raise ValueError('Redaction   policy   is   missing   `version`   field') \n      if (version != '1'): \n         raise ValueError(('unknown   version   `%s`' % version)) \n      try: \n         rules = scheme.pop('rules') \n      except KeyError: \n         raise ValueError('Redaction   policy   is   missing   `rules`   field') \n      rules = [parse_one_rule_from_dict(rule) for rule in rules] \n      if scheme: \n         raise ValueError(('Redaction   policy   contains   unknown   field(s):   %s' % scheme.keys())) \n      return RedactionPolicy(rules)",
        "line_count": 19,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def auto_model(model): \n    return getattr(model._meta, 'auto_created', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, gcodeText, repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, gcodeText), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unload_ipython_extension(ipython): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_standard(): \n    return ('DESKTOP_LAUNCH' in os.environ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bfs_predecessors(G, source): \n    for (s, t) in bfs_edges(G, source): \n      (yield (t, s))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def security_group_rule_count_by_group(context, security_group_id): \n    return IMPL.security_group_rule_count_by_group(context, security_group_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pick_gradient_value(grad_list, gradient_level): \n    return grad_list[int(round(((gradient_level * (len(grad_list) - 1)) / 100)))]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tunnel_write_and_run(remote_write_fn, remote_cmd_fn): \n    with tempfile.NamedTemporaryFile() as tmp_fh: \n      rando_text = str(uuid.uuid4()) \n      tmp_fh.write(rando_text.encode()) \n      tmp_fh.flush() \n      remote_tmp_file = ('/tmp/' + str(uuid.uuid4())) \n      remote_write_fn(src=tmp_fh.name, dst=remote_tmp_file) \n      returned_text = remote_cmd_fn(cmd=['cat', remote_tmp_file]).decode('utf-8').strip('\\n') \n      assert (returned_text == rando_text)",
        "line_count": 8,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def natural_key(s): \n    return tuple((_nkconv(m) for m in _nkre.findall(s)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _summarize_str(st): \n    return (st[:56][::(-1)].split(',', 1)[(-1)][::(-1)] + ',   ...')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _eval_once(saver, summary_writer, top_1_op, top_5_op, summary_op): \n    with tf.Session() as sess: \n      ckpt = tf.train.get_checkpoint_state(FLAGS.checkpoint_dir) \n      if (ckpt and ckpt.model_checkpoint_path): \n         if os.path.isabs(ckpt.model_checkpoint_path): \n            saver.restore(sess, ckpt.model_checkpoint_path) \n         else: \n            saver.restore(sess, os.path.join(FLAGS.checkpoint_dir, ckpt.model_checkpoint_path)) \n         global_step = ckpt.model_checkpoint_path.split('/')[(-1)].split('-')[(-1)] \n         print(('Succesfully   loaded   model   from   %s   at   step=%s.' % (ckpt.model_checkpoint_path, global_step))) \n      else: \n         print('No   checkpoint   file   found') \n         return \n      coord = tf.train.Coordinator() \n      try: \n         threads = [] \n         for qr in tf.get_collection(tf.GraphKeys.QUEUE_RUNNERS): \n            threads.extend(qr.create_threads(sess, coord=coord, daemon=True, start=True)) \n         num_iter = int(math.ceil((FLAGS.num_examples / FLAGS.batch_size))) \n         count_top_1 = 0.0 \n         count_top_5 = 0.0 \n         total_sample_count = (num_iter * FLAGS.batch_size) \n         step = 0 \n         print(('%s:   starting   evaluation   on   (%s).' % (datetime.now(), FLAGS.subset))) \n         start_time = time.time() \n         while ((step < num_iter) and (not coord.should_stop())): \n            (top_1, top_5) = sess.run([top_1_op, top_5_op]) \n            count_top_1 += np.sum(top_1) \n            count_top_5 += np.sum(top_5) \n            step += 1 \n            if ((step % 20) == 0): \n               duration = (time.time() - start_time) \n               sec_per_batch = (duration / 20.0) \n               examples_per_sec = (FLAGS.batch_size / sec_per_batch) \n               print(('%s:   [%d   batches   out   of   %d]   (%.1f   examples/sec;   %.3fsec/batch)' % (datetime.now(), step, num_iter, examples_per_sec, sec_per_batch))) \n               start_time = time.time() \n         precision_at_1 = (count_top_1 / total_sample_count) \n         recall_at_5 = (count_top_5 / total_sample_count) \n         print(('%s:   precision   @   1   =   %.4f   recall   @   5   =   %.4f   [%d   examples]' % (datetime.now(), precision_at_1, recall_at_5, total_sample_count))) \n         summary = tf.Summary() \n         summary.ParseFromString(sess.run(summary_op)) \n         summary.value.add(tag='Precision   @   1', simple_value=precision_at_1) \n         summary.value.add(tag='Recall   @   5', simple_value=recall_at_5) \n         summary_writer.add_summary(summary, global_step) \n      except Exception as e: \n         coord.request_stop(e) \n      coord.request_stop() \n      coord.join(threads, stop_grace_period_secs=10)",
        "line_count": 47,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def _add_implied_job_id(d): \n    if (not d.get('job_id')): \n      if d.get('task_id'): \n         d['job_id'] = _to_job_id(d['task_id']) \n      elif d.get('application_id'): \n         d['job_id'] = _to_job_id(d['application_id'])",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def missing(name, jail=None): \n    return (name not in get_all(jail))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_proc_dir(opts): \n    for basefilename in os.listdir(salt.minion.get_proc_dir(opts['cachedir'])): \n      fn_ = os.path.join(salt.minion.get_proc_dir(opts['cachedir']), basefilename) \n      with salt.utils.fopen(fn_, 'rb') as fp_: \n         job = None \n         try: \n            job = salt.payload.Serial(opts).load(fp_) \n         except Exception: \n            if salt.utils.is_windows(): \n               fp_.close() \n            try: \n               os.unlink(fn_) \n               continue \n            except OSError: \n               continue \n         log.debug('schedule.clean_proc_dir:   checking   job   {0}   for   process   existence'.format(job)) \n         if ((job is not None) and ('pid' in job)): \n            if salt.utils.process.os_is_running(job['pid']): \n               log.debug('schedule.clean_proc_dir:   Cleaning   proc   dir,   pid   {0}   still   exists.'.format(job['pid'])) \n            else: \n               if salt.utils.is_windows(): \n                  fp_.close() \n               try: \n                  os.unlink(fn_) \n               except OSError: \n                  pass",
        "line_count": 25,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def reopen_log_files(handlers): \n    for handler in handlers: \n      if (not isinstance(handler, logging.FileHandler)): \n         continue \n      LOG.info(('Re-opening   log   file   \"%s\"   with   mode   \"%s\"\\n' % (handler.baseFilename, handler.mode))) \n      try: \n         handler.acquire() \n         handler.stream.close() \n         handler.stream = open(handler.baseFilename, handler.mode) \n      finally: \n         try: \n            handler.release() \n         except RuntimeError as e: \n            if ('cannot   release' in str(e)): \n               LOG.warn('Failed   to   release   lock', exc_info=True) \n            else: \n               raise e",
        "line_count": 16,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def alert_ack(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def media_play_pause(hass): \n    hass.services.call(DOMAIN, SERVICE_MEDIA_PLAY_PAUSE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_function_groups(): \n    return __function_groups__.copy()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_atom_tuple(p): \n    p[0] = p[2]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def createAlignment(sequences, alphabet): \n    return MultipleSeqAlignment((SeqRecord(Seq(s, alphabet), id=('sequence%i' % (i + 1))) for (i, s) in enumerate(sequences)), alphabet)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def new(key, *args, **kwargs): \n    return RC2Cipher(key, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render_to_kmz(*args, **kwargs): \n    return HttpResponse(compress_kml(loader.render_to_string(*args, **kwargs)), content_type='application/vnd.google-earth.kmz')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enqueue_feedback_message_batch_email_task(user_id): \n    taskqueue_services.enqueue_task(feconf.TASK_URL_FEEDBACK_MESSAGE_EMAILS, {'user_id': user_id}, feconf.DEFAULT_FEEDBACK_MESSAGE_EMAIL_COUNTDOWN_SECS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pluralize(word, pos=NOUN, custom={}): \n    return (word + 's')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_incron_file_verbose(user, path): \n    return __salt__['cmd.run_all'](_get_incron_cmdstr(path), runas=user, python_shell=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def join_ipv4_segments(segments): \n    return '.'.join([str(s) for s in segments])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def run_experiment(): \n    return [(random.random() < 0.5) for _ in range(1000)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_rotation_change_value(label): \n    return _check_range_and_return('rotation   change', label, (-4), 4)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rm_local_tmp_dir(path): \n    return shutil.rmtree(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def search_form(cl): \n    return {'cl': cl, 'show_result_count': (cl.result_count != cl.full_result_count), 'search_var': SEARCH_VAR}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decode(receipt): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def naturalSeq(t): \n    return [natural(x) for x in t]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _bytes_chr_py3(i): \n    return bytes([i])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_token(length=20, chars=UNICODE_ASCII_CHARACTER_SET): \n    return u''.join((choice(chars) for x in range(length)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def not_joined(subset=None, show_ipv4=False): \n    return list_not_state(subset=subset, show_ipv4=show_ipv4, state='joined')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def period_range(start=None, end=None, periods=None, freq='D', name=None): \n    return PeriodIndex(start=start, end=end, periods=periods, freq=freq, name=name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_import_error(): \n    from sys import xxx",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def event_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rebot(*outputs, **options): \n    return Rebot().execute(*outputs, **options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _CreateDatastoreConfig(): \n    return datastore_rpc.Configuration(force_writes=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def walk_sanity_targets(): \n    return walk_test_targets(module_path='lib/ansible/modules/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_revoked(events, token_data): \n    return any([matches(e, token_data) for e in events])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def error_rate(predictions, labels): \n    return (100.0 - ((100.0 * numpy.sum((numpy.argmax(predictions, 1) == labels))) / predictions.shape[0]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def query_package(module, pacman_path, name, state='present'): \n    if (state == 'present'): \n      lcmd = ('%s   -Qi   %s' % (pacman_path, name)) \n      (lrc, lstdout, lstderr) = module.run_command(lcmd, check_rc=False) \n      if (lrc != 0): \n         return (False, False, False) \n      lversion = get_version(lstdout) \n      rcmd = ('%s   -Si   %s' % (pacman_path, name)) \n      (rrc, rstdout, rstderr) = module.run_command(rcmd, check_rc=False) \n      rversion = get_version(rstdout) \n      if (rrc == 0): \n         return (True, (lversion == rversion), False) \n      return (True, True, True)",
        "line_count": 12,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def showCritical(text, parent=None, help='', title='Anki'): \n    return showInfo(text, parent, help, 'critical', title=title)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rand(individual): \n    return (random.random(),)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backend(): \n    return _BACKEND",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pycodestylemod_remove_ignore(ignore_code): \n    if (ignore_code in pycodestylemod.DEFAULT_IGNORE): \n      default_ignore = pycodestylemod.DEFAULT_IGNORE.split(',') \n      default_ignore.remove(ignore_code) \n      pycodestylemod.DEFAULT_IGNORE = ','.join(default_ignore)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def convert_alpha_characters_in_number(number): \n    return _normalize_helper(number, _ALPHA_PHONE_MAPPINGS, False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _read_double(fid, n=1): \n    return np.fromfile(fid, '>f8', n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def process_destructor(pid, exitcode): \n    signals.worker_process_shutdown.send(sender=None, pid=pid, exitcode=exitcode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_equal(expected, actual): \n    if (expected != actual): \n      raise AssertionError(('values   not   equal,   expected:   %r,   actual:   %r' % (expected, actual)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def arange(start, stop=None, step=1, dtype='int32'): \n    return T.arange(start, stop=stop, step=step, dtype=dtype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_available(mod): \n    return (mod in available())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_not_equal(first, second, msg=None, values=True): \n    if (first == second): \n      _report_inequality_failure(first, second, msg, values, '==')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def uninstall_app(app): \n    return __salt__['file.remove'](app)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plural(s, number, suffix='s'): \n    return s.format(number=number, s=(suffix if ((number % 100) != 1) else ''))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def range4(): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _coeffs_generator(n): \n    for coeffs in variations([1, (-1)], n, repetition=True): \n      (yield list(coeffs))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read_types(infile): \n    with open(infile, 'r') as stream: \n      return yaml.safe_load(stream)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_exponential_symbol(locale=LC_NUMERIC): \n    return Locale.parse(locale).number_symbols.get('exponential', u'E')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format(dt): \n    return dt.strftime('%Y%m%d')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def call_doctest_bad(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _iszero(x): \n    return x.is_zero",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode, prefix, sideLength): \n    return WedgeDerivation(elementNode, prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DevOnly(field): \n    return (field if settings.DEV_MODE else None)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def deg(radiants): \n    return ((180 * radiants) / pi)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_pairs(profile): \n    return ((len(profile) > 0) and isinstance(profile[0], list))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def S_ISREG(mode): \n    return (S_IFMT(mode) == S_IFREG)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_strip_join(some_list, sep): \n    return cstr(sep).join((cstr(a).strip() for a in filter(None, some_list)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def python_version_tuple(): \n    return tuple(string.split(_sys_version()[1], '.'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_accepts_non_list_hosts(): \n    assert (merge('badhosts', [], [], {}) == ['badhosts'])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def lookup_distribution(distribution_label): \n    for (label, distribution) in DISTRIBUTION_BY_LABEL.items(): \n      if distribution_label.startswith(label): \n         return distribution",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def http_status_message(code): \n    return HTTP_STATUS_CODES.get(code, '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def beneficiary_data(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def put_hook(variable, hook_fn, *args): \n    return printing.Print(global_fn=(lambda _, x: hook_fn(x, *args)))(variable)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_scientific(number, format=None): \n    return get_i18n().format_scientific(number, format)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_glance_metadata_copy_from_volume_to_volume(context, src_volume_id, volume_id): \n    return IMPL.volume_glance_metadata_copy_from_volume_to_volume(context, src_volume_id, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeExtension(configs=None): \n    return LiquidTags(configs=configs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_test_log_folder(): \n    if (not os.path.isdir(sickbeard.LOG_DIR)): \n      os.mkdir(sickbeard.LOG_DIR)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def add_permalink_methods(content_inst): \n    for permalink_method in PERMALINK_METHODS: \n      setattr(content_inst, permalink_method.__name__, permalink_method.__get__(content_inst, content_inst.__class__))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def TIMEOUT(v): \n    context.defaults['timeout'] = int(v)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or __virtualname__), ('user',))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read_plain_float(file_obj, count): \n    return struct.unpack('<{0}f'.format(count).encode(u'utf-8'), file_obj.read((4 * count)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rs_or_single_client_noauth(h=client_context.host, p=client_context.port, **kwargs): \n    return _mongo_client(h, p, authenticate=False, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gep_inbounds(builder, ptr, *inds, **kws): \n    return gep(builder, ptr, inbounds=True, *inds, **kws)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def take(n, iterable): \n    return list(itertools.islice(iterable, n))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quitServer(ignored): \n    reactor.stop()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def populate_customer_group_pricing_api(router): \n    router.register(u'shuup/cgp_price', CgpPriceViewSet)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pick_authenticator(config, default, plugins, question='How   would   you   like   to   authenticate   with   the   ACME   CA?'): \n    return pick_plugin(config, default, plugins, question, (interfaces.IAuthenticator,))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_enrollment_attributes(user_id, course_id, attributes): \n    _data_api().add_or_update_enrollment_attr(user_id, course_id, attributes)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def grayscale(image): \n    return image.convert('L')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _bench_R9(): \n    factor(((x ** 20) - ((pi ** 5) * (y ** 20))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ensure_schemas(): \n    for schema in OSF_META_SCHEMAS: \n      ensure_schema(schema, schema['name'], version=schema.get('version', 1))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _scalar_vectorized(scalar, M): \n    return (scalar[:, np.newaxis, np.newaxis] * M)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def md5_hash(text): \n    return md5(to_bytes(text)).hexdigest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processes(attrs=None, where=None): \n    return _osquery_cmd(table='processes', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def logsumexp(x, axis=None): \n    return LogSumExp(axis)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def scan(pattern, string, *args, **kwargs): \n    return compile(pattern, *args, **kwargs).scan(string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def social_auth_backends(request): \n    return {'social_auth': backends(request)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_default_retry_params(retry_params): \n    _thread_local_settings.default_retry_params = copy.copy(retry_params)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_reverse(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_passing_status(cert_status): \n    return CertificateStatuses.is_passing_status(cert_status)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear(): \n    os.system('clear')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_struct_declaration(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def address_type(address): \n    return (((len(address) == 4) and _TYPE_A) or _TYPE_AAAA)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _compute_diff_ret(): \n    return {'add': [], 'update': [], 'remove': []}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getLevelName(level): \n    return _levelToName.get(level, _nameToLevel.get(level, ('Level   %s' % level)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def can_enable_dynamic(link, value): \n    return isinstance(value, link.sink_type())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def image_volume_cache_get_all(context, **filters): \n    return IMPL.image_volume_cache_get_all(context, **filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_segment_dict(record): \n    return {'id': record.id, NETWORK_TYPE: record.network_type, PHYSICAL_NETWORK: record.physical_network, SEGMENTATION_ID: record.segmentation_id}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skip_if_custom_user(test_func): \n    return skipIf((settings.AUTH_USER_MODEL != 'auth.User'), 'Custom   user   model   in   use')(test_func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def id(): \n    return random.randint(0, 9007199254740992)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MakeError(name, message): \n    return JsToPyException(ERRORS[name](Js(message)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape_abbr(text): \n    return re.sub('\\\\.(?=\\\\s|$)', '.\\\\@', text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def config(): \n    return __proxy__['napalm.call']('get_probes_config', **{})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _factors_product(factors): \n    return Mul(*[(f.as_expr() ** k) for (f, k) in factors])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read_transform(fid): \n    return read_double_matrix(fid, rows=4, cols=4)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def block_indent(text, spaces=4): \n    return '\\n'.join([(('   ' * spaces) + l) for l in pprint.pformat(text).splitlines()])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def noop_cost_fn(host_state, weight_properties): \n    return 1",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hex_str(an_int): \n    return '{0:#x}'.format(an_int)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeExtension(*args, **kwargs): \n    return GithubEmojiExtension(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _prep_pull(): \n    __context__['dockerng._pull_status'] = [x[:12] for x in images(all=True)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def onTick(timerID): \n    INFO_MSG('onTick()')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dolog(fmt, *args): \n    logfp.write(((fmt % args) + '\\n'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _to_job_id(task_id): \n    return ('job_' + '_'.join(task_id.split('_')[1:3]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def organization_delete(context, data_dict): \n    return _group_or_org_delete(context, data_dict, is_org=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_dict(*packages): \n    return __salt__['lowpkg.file_dict'](*packages)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def swappable_dependency(value): \n    return SwappableTuple((value.split('.', 1)[0], '__first__'), value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_session_credentials(): \n    return copy.deepcopy(_session['credentials'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user_exists(name, user=None, host=None, port=None, maintenance_db=None, password=None, runas=None): \n    return bool(role_get(name, user=user, host=host, port=port, maintenance_db=maintenance_db, password=password, runas=runas, return_password=False))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLSHOOTINGSTAR(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLSHOOTINGSTAR)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def seq_concat_item(seq, item): \n    return ((seq + (item,)) if isinstance(seq, tuple) else (seq + [item]))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def delete_cache_security_group(name, region=None, key=None, keyid=None, profile=None, **args): \n    return _delete_resource(name, name_param='CacheSecurityGroupName', desc='cache   security   group', res_type='cache_security_group', region=region, key=key, keyid=keyid, profile=profile, **args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def data_path(paths, environ=None): \n    return zipline_path((['data'] + list(paths)), environ=environ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_versions(versions): \n    return list((list(releases) for (_, releases) in itertools.groupby(versions, operator.attrgetter(u'major_minor'))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def validate_source_string(source): \n    return (unhexlify(source) if ((len(source) == 40) and (not source.startswith('http'))) else source)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def check_conversion(condition, message): \n    if (not condition): \n      raise InvalidConversionError(message)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _get_marker_param(request): \n    return request.GET['marker']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_ip(ip): \n    return (is_valid_ipv4(ip) or is_valid_ipv6(ip))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_statement_newline(p): \n    p[0] = None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reshape_unchecked(a, shape, strides): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sslwrap_simple(sock, keyfile=None, certfile=None): \n    return SSLSocket(sock, keyfile, certfile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mb_parser_null(resp): \n    return resp",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___delitem__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_return(p): \n    p[0] = ('RETURN',)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_root(v): \n    return v",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dump(obj, file_handler, protocol=DEFAULT_PROTOCOL, persistent_id=PersistentSharedVariableID): \n    with closing(zipfile.ZipFile(file_handler, 'w', zipfile.ZIP_DEFLATED, allowZip64=True)) as zip_file: \n      def func(f): \n         p = pickle.Pickler(f, protocol=protocol) \n         p.persistent_id = persistent_id(zip_file) \n         p.dump(obj) \n      zipadd(func, zip_file, 'pkl')",
        "line_count": 6,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_specifier_qualifier_list_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def halt(): \n    return shutdown()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_expression_group(p): \n    p[0] = p[2]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rgb2yuv(rgb): \n    return _convert(yuv_from_rgb, rgb)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def comment(comment): \n    return Effect(Comment(comment=comment))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_match(pattern, string, msg=None): \n    assert_not_none(re.search(pattern, string), msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _mk_fileclient(): \n    if ('cp.fileclient' not in __context__): \n      __context__['cp.fileclient'] = salt.fileclient.get_file_client(__opts__)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def timedelta_to_days(delta): \n    return (delta.days + (delta.seconds / (3600 * 24)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unescape(string): \n    return string[1:(-1)].replace('\\\\\\\\', '\\\\').replace('\\\\t', ' DCTB ').replace('\\\\r', '\\r').replace('\\\\n', '\\n').replace('\\\\\"', '\"')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _int64_feature(value): \n    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _FinalElement(key): \n    return key.path().element_list()[(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def process_is_alive(name_pattern): \n    return (utils.system((\"pgrep   -f   '^([^   /]*/)*(%s)([   ]|$)'\" % name_pattern), ignore_status=True) == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def slice_2d(X, rows, cols): \n    return [X[i][j] for j in cols for i in rows]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_model_found(arguments): \n    for (goal, assumptions) in arguments: \n      g = Expression.fromstring(goal) \n      alist = [lp.parse(a) for a in assumptions] \n      m = MaceCommand(g, assumptions=alist, max_models=50) \n      found = m.build_model() \n      for a in alist: \n         print(('         %s' % a)) \n      print(('|-   %s:   %s\\n' % (g, decode_result(found))))",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def getMin(value): \n    return min(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def allocate_ids_async(model, size, **kwargs): \n    return datastore.AllocateIdsAsync(_coerce_to_key(model), size=size, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def missing(name): \n    return (name not in get_all())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def populate_entry_points(entry_points): \n    for entry_point in entry_points: \n      name = entry_point.name \n      try: \n         entry_point = entry_point.load() \n      except Exception as e: \n         warnings.warn(AstropyUserWarning(u'{type}   error   occurred   in   entry   point   {name}.'.format(type=type(e).__name__, name=name))) \n      else: \n         if (not inspect.isclass(entry_point)): \n            warnings.warn(AstropyUserWarning(u'Modeling   entry   point   {0}   expected   to   be   a   Class.'.format(name))) \n         elif issubclass(entry_point, Fitter): \n            name = entry_point.__name__ \n            globals()[name] = entry_point \n            __all__.append(name) \n         else: \n            warnings.warn(AstropyUserWarning(u'Modeling   entry   point   {0}   expected   to   extend   astropy.modeling.Fitter'.format(name)))",
        "line_count": 15,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def reboot(name, call=None): \n    return _query('grid', 'server/power', args={'name': name, 'power': 'restart'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def choose_boundary(): \n    return uuid4().hex",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def standard_deviation(input, labels=None, index=None): \n    return numpy.sqrt(variance(input, labels, index))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def patch_get_utility(target='zope.component.getUtility'): \n    return mock.patch(target, new_callable=_create_get_utility_mock)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_connection(conf, new, connection_pool): \n    return ConnectionContext(conf, connection_pool, pooled=(not new))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xor(a, b): \n    return (a ^ b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def POST(k, n): \n    return _XXX(k, n, _POST)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mass_energy(): \n    return [(si.kg, si.J, (lambda x: (x * (_si.c.value ** 2))), (lambda x: (x / (_si.c.value ** 2)))), ((si.kg / (si.m ** 2)), (si.J / (si.m ** 2)), (lambda x: (x * (_si.c.value ** 2))), (lambda x: (x / (_si.c.value ** 2)))), ((si.kg / (si.m ** 3)), (si.J / (si.m ** 3)), (lambda x: (x * (_si.c.value ** 2))), (lambda x: (x / (_si.c.value ** 2)))), ((si.kg / si.s), (si.J / si.s), (lambda x: (x * (_si.c.value ** 2))), (lambda x: (x / (_si.c.value ** 2))))]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('win_path' if ('win_path.rehash' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def delay(delay, callback, *args, **kwargs): \n    return reactor.callLater(delay, callback, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_config(cfg): \n    return read_slicer_config(cfg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subjectivity(s, **kwargs): \n    return sentiment(unicode(s), **kwargs)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def split_by_comma_and_whitespace(cstr): \n    return re.split('[\\\\s,]+', cstr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ones_like(x, dtype=None, name=None): \n    return tf.ones_like(x, dtype=dtype, name=name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_true(val): \n    return ((val is True) or (val in ['True', 'true', 'T', 't']))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def default_connection_selector(connection, app_blame): \n    return handlers.BaseConnectionHandler",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show(job, related_jobs=None): \n    return flask.render_template('datasets/images/generic/show.html', job=job, related_jobs=related_jobs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPointMinimum(firstPoint, secondPoint): \n    return Vector3(min(firstPoint.x, secondPoint.x), min(firstPoint.y, secondPoint.y), min(firstPoint.z, secondPoint.z))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_url_to_local_path(): \n    assert_equal(_url_to_local_path('http://google.com/home/why.html', '.'), op.join('.', 'home', 'why.html'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user_pre_save(sender, instance, **kw): \n    if instance.id: \n      user = User.objects.get(id=instance.id) \n      if (user.username != instance.username): \n         threads = Thread.objects.filter((Q(creator=instance) | Q(post__author=instance))).only('id').distinct() \n         for t in threads: \n            t.index_later()",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def b64e(s): \n    return base64.b64encode(s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _GivePropertiesFromGeneralToSpecific(handler_list): \n    for (i, j) in itertools.combinations(xrange(len(handler_list)), 2): \n      if handler_list[j].MatchesAll(handler_list[i]): \n         if isinstance(handler_list[i], SimpleHandler): \n            handler_list[i] = handler_list[i].CreateOverlappedHandler() \n         handler_list[i].AddMatchingHandler(handler_list[j])",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def python_build(): \n    return _sys_version()[4:6]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_password_hash(pw_hash, password): \n    return constant_time_compare(bcrypt.hashpw(unicode(password).encode('utf-8'), unicode(pw_hash).encode('utf-8')), pw_hash)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def percentile(image, selem, out=None, mask=None, shift_x=False, shift_y=False, p0=0): \n    return _apply(percentile_cy._percentile, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y, p0=p0, p1=0.0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ping(): \n    return NETWORK_DEVICE.get('UP', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten_dictionary(input, sep='.', prefix=None): \n    for (name, value) in sorted(input.items()): \n      fullname = sep.join(filter(None, [prefix, name])) \n      if isinstance(value, dict): \n         for result in flatten_dictionary(value, sep, fullname): \n            (yield result) \n      else: \n         (yield (fullname, value))",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def app_has_custom(app, attr): \n    return mro_lookup(app.__class__, attr, stop={Celery, object}, monkey_patched=[__name__])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def checksum(value): \n    return chr((65 + (sum((CHECKSUM_TABLE[(index % 2)][ALPHANUMERICS_DICT[char]] for (index, char) in enumerate(value))) % 26)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewRepository(): \n    return PrefaceRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fourier_transform(f, x, k, **hints): \n    return FourierTransform(f, x, k).doit(**hints)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addToMenu(master, menu, repository, window): \n    CraftMenuSaveListener(menu, window)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_def_bad_arg(p): \n    p[0] = 'BAD   ARGUMENT   IN   DEF   STATEMENT'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def choosePocType(filepath): \n    return ntpath.splitext(filepath)[1][1:]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reject_spurious_dots(*items): \n    for list in items: \n      for tok in list: \n         if ((tok == '.') and (type(tok) == HySymbol)): \n            raise LexException('Malformed   dotted   list', tok.start_line, tok.start_column)",
        "line_count": 4,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def nt_to_cw(cur_enc, cur_nt): \n    return array(map(int, ''.join([INT_TO_BS[cur_enc[x]] for x in cur_nt])))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_shared(shape): \n    raise NotImplementedError('TODO:   implement   the   function')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def butter2d_bp(size, cutin, cutoff, n): \n    return (butter2d_lp(size, cutoff, n) - butter2d_lp(size, cutin, n))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tempdeny(ip=None, ttl=None, port=None, direction=None, comment=''): \n    return _tmp_access_rule('tempdeny', ip, ttl, port, direction, comment)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def object_mapper(instance): \n    return object_state(instance).mapper",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _mangle_attr(name): \n    return ('m_' + name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_whitespace(tokens): \n    return [token for token in tokens if (token.type != u'S')]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def remove_accents(text): \n    return ''.join((c for c in unicodedata.normalize('NFD', text) if (unicodedata.category(c) != 'Mn')))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_client_login_token(http_body): \n    return gdata.gauth.get_client_login_token_string(http_body)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _testing_mode(): \n    return (os.getenv('_MNE_GUI_TESTING_MODE', '') == 'true')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bucket_url(suffix): \n    return 'gs://{}/{}/{}'.format(BUCKET_NAME, TEST_FOLDER, suffix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sync_returners(saltenv='base'): \n    return salt.utils.extmods.sync(__opts__, 'returners', saltenv=saltenv)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ConvertStringToFilename(name): \n    return re.sub('\\\\W', (lambda x: ('%%%02X' % ord(x.group(0)))), name, flags=re.UNICODE).rstrip('/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_argument_expression_list(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clocktime_to_millisecond(value): \n    return (value // Gst.MSECOND)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def multipart_byteranges_to_document_iters(input_file, boundary, read_chunk_size=4096): \n    for (headers, body) in mime_to_document_iters(input_file, boundary, read_chunk_size): \n      (first_byte, last_byte, length) = parse_content_range(headers.get('content-range')) \n      (yield (first_byte, last_byte, length, headers.items(), body))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_cflags(): \n    return get_var('CFLAGS')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skip_unless_cms(func): \n    return skipUnless((settings.ROOT_URLCONF == 'cms.urls'), 'Test   only   valid   in   CMS')(func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onAllSpaceGeometryLoaded(spaceID, isBootstrap, mapping): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_daily_trade_source(sids, sim_params, env, trading_calendar, concurrent=False): \n    return create_trade_source(sids, timedelta(days=1), sim_params, env=env, trading_calendar=trading_calendar, concurrent=concurrent)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_minion(saltenv='base'): \n    return _client().file_local_list(saltenv)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def difference(set1, set2): \n    return [s for s in set1 if (s not in set2)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def all_status(): \n    return {'cpuinfo': cpuinfo(), 'cpustats': cpustats(), 'diskstats': diskstats(), 'diskusage': diskusage(), 'loadavg': loadavg(), 'meminfo': meminfo(), 'netdev': netdev(), 'netstats': netstats(), 'uptime': uptime(), 'vmstats': vmstats(), 'w': w()}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uses_mysql(connection): \n    return ('mysql' in connection.settings_dict['ENGINE'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_login_url(slug): \n    return users.create_login_url(utils.set_url_query_parameter(feconf.SIGNUP_URL, 'return_url', slug))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def member_with_tags_server_selector(tag_sets, selection): \n    return apply_tag_sets(tag_sets, readable_server_selector(selection))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addXIntersectionIndexesFromSegment(index, segment, xIntersectionIndexList): \n    for endpoint in segment: \n      xIntersectionIndexList.append(XIntersectionIndex(index, endpoint.point.real))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def certbot_version(build_script_dir): \n    return re.search('^__version__   =   [\\'\"](.+)[\\'\"].*', file_contents(join(dirname(build_script_dir), 'certbot', '__init__.py')), re.M).group(1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_minimum(value, minimum): \n    if ((minimum is not None) and (value < minimum)): \n      raise ValueError((u'%r   must   be   larger   than   %r.' % (value, minimum)))",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_current_kernel_arch(): \n    return platform.machine()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_ofp_modules(): \n    return ofproto_protocol._versions",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def runningAsOSXApp(): \n    return ((sys.platform == 'darwin') and ('IDLE.app' in sys.argv[0]))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_status_counts(group_by, header_groups=[], fixed_headers={}, **filter_data): \n    return get_group_counts(group_by, header_groups=header_groups, fixed_headers=fixed_headers, extra_select_fields=tko_rpc_utils.STATUS_FIELDS, **filter_data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or __virtualname__), ('user', 'password', 'url'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _ems_diff(data0, data1): \n    return (np.mean(data0, axis=0) - np.mean(data1, axis=0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_path(*parts): \n    return (u'/' + u'/'.join((quote_plus(_escape(p), ',*') for p in parts if (p not in SKIP_IN_PATH))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def static(): \n    return python(u'from   django.conf   import   settings;print(settings.STATIC_ROOT)', show=False).split(u'\\n')[(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fake_urandom(n): \n    return ''.join((chr(random.randint(0, 255)) for _ in xrange(n)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def mirror(op): \n    return _mirror.get(op, op)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disabled(name): \n    return (name not in _get_svc_list(name, 'ENABLED'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _quota_reservations(session, context, reservations): \n    return model_query(context, models.Reservation, read_deleted='no', session=session).filter(models.Reservation.uuid.in_(reservations)).with_lockmode('update').all()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def items(sobject): \n    for item in sobject: \n      (yield item)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def default_handlers(handlers=[]): \n    return (([('/url[s]?/github\\\\.com/([^\\\\/]+)/([^\\\\/]+)/(tree|blob|raw)/([^\\\\/]+)/(.*)', GitHubRedirectHandler), ('/url[s]?/raw\\\\.?github\\\\.com/([^\\\\/]+)/([^\\\\/]+)/(.*)', RawGitHubURLHandler), ('/url[s]?/raw\\\\.?githubusercontent\\\\.com/([^\\\\/]+)/([^\\\\/]+)/(.*)', RawGitHubURLHandler)] + handlers) + [('/github/([^\\\\/]+)', AddSlashHandler), ('/github/([^\\\\/]+)/', GitHubUserHandler), ('/github/([^\\\\/]+)/([^\\\\/]+)', AddSlashHandler), ('/github/([^\\\\/]+)/([^\\\\/]+)/', GitHubRepoHandler), ('/github/([^\\\\/]+)/([^\\\\/]+)/blob/([^\\\\/]+)/(.*)/', RemoveSlashHandler), ('/github/([^\\\\/]+)/([^\\\\/]+)/blob/([^\\\\/]+)/(.*)', GitHubBlobHandler), ('/github/([^\\\\/]+)/([^\\\\/]+)/tree/([^\\\\/]+)', AddSlashHandler), ('/github/([^\\\\/]+)/([^\\\\/]+)/tree/([^\\\\/]+)/(.*)', GitHubTreeHandler)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def handle500(request): \n    return render(request, 'handlers/500.html', status=500)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_first(rs): \n    return (rs[0] if (len(rs) == 1) else None)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def pareto_sequence(n, exponent=1.0): \n    return [random.paretovariate(exponent) for i in range(n)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def TurnIntIntoStrInDict(the_dict): \n    for (k, v) in the_dict.items(): \n      if (type(v) is int): \n         v = str(v) \n         the_dict[k] = v \n      elif (type(v) is dict): \n         TurnIntIntoStrInDict(v) \n      elif (type(v) is list): \n         TurnIntIntoStrInList(v) \n      if (type(k) is int): \n         del the_dict[k] \n         the_dict[str(k)] = v",
        "line_count": 11,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def global_parameters(b, c): \n    return ((y, ((b[0] - x) - y), x) for (x, y) in zip((b + [0]), ([0] + c)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def bytes_feature(values): \n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[values]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def console_pool_get_all_by_host_type(context, host, console_type): \n    return IMPL.console_pool_get_all_by_host_type(context, host, console_type)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_cache_subnet_group(name, region=None, key=None, keyid=None, profile=None, **args): \n    return _delete_resource(name, name_param='CacheSubnetGroupName', desc='cache   subnet   group', res_type='cache_subnet_group', region=region, key=key, keyid=keyid, profile=profile, **args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_token_stream(stream, soft_delimiter, hard_delimiter): \n    return [[sum((len(token) for token in sentence_it)) for sentence_it in split_at(block_it, soft_delimiter)] for block_it in split_at(stream, hard_delimiter)]",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _create_eeg_els(chs): \n    return [_create_eeg_el(ch) for ch in chs]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_instance_uuid_by_ec2_id(context, ec2_id): \n    return IMPL.get_instance_uuid_by_ec2_id(context, ec2_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _read_byte(f): \n    return np.uint8(struct.unpack('>B', f.read(4)[:1])[0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _item_to_changes(iterator, resource): \n    return Changes.from_api_repr(resource, iterator.zone)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_sync(value): \n    return set_var('SYNC', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unbind_floating_ip(floating_ip, device): \n    _execute('ip', 'addr', 'del', (str(floating_ip) + '/32'), 'dev', device, run_as_root=True, check_exit_code=[0, 2, 254])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLLONGLEGGEDDOJI(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLLONGLEGGEDDOJI)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def removeSVGFile(svgFilePath): \n    if archive.getEndsWithList(svgFilePath, ['_bottom.svg', '_carve.svg', '_chop.svg', '_cleave.svg', '_scale.svg', '_vectorwrite.svg']): \n      os.remove(svgFilePath) \n      print ('removeGeneratedFiles   deleted   ' + svgFilePath)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _add_current_user_id(graph, user): \n    if graph: \n      graph.current_user_id = None \n      if user.is_authenticated(): \n         profile = try_get_profile(user) \n         facebook_id = get_user_attribute(user, profile, 'facebook_id') \n         if facebook_id: \n            graph.current_user_id = facebook_id",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def filldedent(s, w=70): \n    return ('\\n' + fill(dedent(str(s)).strip('\\n'), width=w))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user_delete(uid, channel=14, **kwargs): \n    with _IpmiCommand(**kwargs) as c: \n      return c.user_delete(uid, channel)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def combine_game_stats(games): \n    return reduce((lambda ps1, ps2: (ps1 + ps2)), [g.players for g in games if (g is not None)])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def webapi_token_deleted_cb(instance, **kwargs): \n    mail_webapi_token(instance, u'deleted')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def erroneous_view(context, request): \n    raise RuntimeError()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _number_of_set_bits_to_ipv4_netmask(set_bits): \n    return cidr_to_ipv4_netmask(_number_of_set_bits(set_bits))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cache_cluster_exists(name, conn=None, region=None, key=None, keyid=None, profile=None): \n    return bool(describe_cache_clusters(name=name, conn=conn, region=region, key=key, keyid=keyid, profile=profile))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def askdirectory(**options): \n    return apply(DirectoryBrowser, (), options).show()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iscoroutinefunction(func): \n    return (getattr(func, '_is_coroutine', False) or (hasattr(inspect, 'iscoroutinefunction') and inspect.iscoroutinefunction(func)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _CheckLimit(limit): \n    return _CheckInteger(limit, 'limit', zero_ok=False, upper_bound=MAXIMUM_DOCUMENTS_RETURNED_PER_SEARCH)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def butter(N, Wn, btype='low', analog=False, output='ba'): \n    return iirfilter(N, Wn, btype=btype, analog=analog, output=output, ftype='butter')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def join(*args): \n    return os.path.join(*args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return (__virtualname__ if HAS_CONSUL else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def arctan(x): \n    return Arctan()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def id(): \n    return _distro.id()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_template_limit(contain_str): \n    if (len(contain_str) > cfg.CONF.max_template_size): \n      msg = (_('Template   size   (%(actual_len)s   bytes)   exceeds   maximum   allowed   size   (%(limit)s   bytes).') % {'actual_len': len(contain_str), 'limit': cfg.CONF.max_template_size}) \n      raise exception.RequestLimitExceeded(message=msg)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def audit(jail=None, chroot=None, root=None): \n    return __salt__['cmd.run']((_pkg(jail, chroot, root) + ['audit', '-F']), output_loglevel='trace', python_shell=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bottom_up_once(rule, fns=basic_fns): \n    return do_one((lambda expr: sall(bottom_up(rule, fns), fns)(expr)), rule)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_user_history(user, domain='all'): \n    for key in redis_key(user, domain): \n      client.delete(key)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_entity_key(prefix, pb): \n    return dbconstants.KEY_DELIMITER.join([prefix, str(encode_index_pb(pb))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def detachNBD(nbd): \n    srun(('qemu-nbd   -d   ' + nbd))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_missing(data): \n    return np.isnan(np.sum(data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def archive_provider_for(node, user): \n    return node.get_addon(settings.ARCHIVE_PROVIDER)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def max_uuid_from_time(timestamp): \n    return uuid_from_time(timestamp, 140185576636287, 16255)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def article_url(content): \n    return '{content.settings[SITEURL]}/{content.url}'.format(content=content).encode('utf-8')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random_string(length=8, chars=(string.letters + string.digits)): \n    return ''.join([chars[random.randint(0, (len(chars) - 1))] for i in range(length)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def linear(x): \n    return x",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_current_device(): \n    return current_context().device",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_detached(context, volume_id): \n    return IMPL.volume_detached(context, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, *args, **kwargs): \n    return AESCipher(key, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def event_return(events): \n    with _get_serv(events, commit=True) as cur: \n      for event in events: \n         tag = event.get('tag', '') \n         data = event.get('data', '') \n         sql = 'INSERT   INTO   salt_events   (tag,   data,   master_id)\\n                                                               VALUES   (%s,   %s,   %s)' \n         cur.execute(sql, (tag, json.dumps(data), __opts__['id']))",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def scan(): \n    return glob.glob('/dev/tty.*')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FindRendererForObject(rdf_obj): \n    return ValueRenderer(rdf_obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def negaterow(row, K): \n    return [(- element) for element in row]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def unmountvolume(volume): \n    putaway(volume)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def leaky_relu(x, slope=0.2): \n    return LeakyReLU(slope)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_hidden(layer): \n    return hasattr(layer, 'initial_hidden_state')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_current_reporter(): \n    return _reporters[(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_fs_home(): \n    return _get_root_home('FREESURFER_HOME', 'freesurfer', _fs_home_problem)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def map_segment_to_hosts(context, segment_id, hosts): \n    with db_api.autonested_transaction(context.session): \n      for host in hosts: \n         network.SegmentHostMapping(context, segment_id=segment_id, host=host).create()",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _is_master(): \n    return (__salt__['config.option']('solr.type') == 'master')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _report_unknown_attribute(name): \n    logging.error('unknown   Cookie   attribute:   %r', name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def union(s): \n    return list(sorted(set((((s.staged + s.unmerged) + s.modified) + s.untracked))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def split_string_after(str_, n): \n    for start in range(0, len(str_), n): \n      (yield str_[start:(start + n)])",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sm_backend_conf_delete(context, sm_backend_conf_id): \n    return IMPL.sm_backend_conf_delete(context, sm_backend_conf_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _arg_raw(dvi, delta): \n    return delta",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_path_result_tests(name): \n    return build_schema_test(name=str((name + u'Tests')), schema={u'$ref': (u'/endpoints.json#/definitions/' + name)}, schema_store=SCHEMAS, failing_instances={'additionalProperties': [{u'Err': u'', u'Mountpoint': u'/x', u'extra': u'y'}, {u'Result': u'hello'}], 'required': [{}, {u'Mountpoint': u'/x'}], 'type': [[], u'', None]}, passing_instances=[{u'Err': u'Something   went   wrong.'}, {u'Err': u'', u'Mountpoint': u'/x/'}])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_sorted(seq): \n    return all(((seq[(i - 1)] <= seq[i]) for i in range(1, len(seq))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def glob(obj, *args, **kwargs): \n    return obj.__glob__(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def recall(classify=(lambda document: False), documents=[], average=None): \n    return test(classify, documents, average)[2]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_random_alphanumeric(length=10): \n    return str(uuid.uuid4()).replace('-', '')[:length]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pairs(item_list): \n    for (i, item1) in enumerate(item_list): \n      for item2 in item_list[(i + 1):]: \n         (yield (item1, item2))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def list_(): \n    return get_all()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _print_hat(_self, expr): \n    return ('\\\\hat{%s}' % str(expr.args[0]).lower())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def moduleMovedForSplit(origModuleName, newModuleName, moduleDesc, projectName, projectURL, globDict): \n    warnings.warn('moduleMovedForSplit   is   deprecated   since   Twisted   9.0.', DeprecationWarning, stacklevel=2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _save_nodes(workflow, nodes): \n    for node in nodes: \n      if (node.node_type is 'kill'): \n         continue \n      try: \n         Node.objects.get(workflow=workflow, node_type=node.node_type, name=node.name) \n      except Node.DoesNotExist: \n         node.save()",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def set_chassis_datacenter(location, host=None, admin_username=None, admin_password=None): \n    return set_general('cfgLocation', 'cfgLocationDatacenter', location, host=host, admin_username=admin_username, admin_password=admin_password)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return HAS_PSUTIL",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uuid4(): \n    return UUID(bytes=os.urandom(16), version=4)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sudo(command, log_command_filter=identity): \n    return Effect(Sudo(command=command, log_command_filter=log_command_filter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_empty_preference_message(preference_key): \n    return \"Preference   '{preference_key}'   cannot   be   set   to   an   empty   value.\".format(preference_key=preference_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nannumel(x, **kwargs): \n    return chunk.sum((~ np.isnan(x)), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _cryptovariables_equal(x, y): \n    return (_hmac_sha256(CRYPTOVARIABLE_EQUALITY_COMPARISON_NONCE, x) == _hmac_sha256(CRYPTOVARIABLE_EQUALITY_COMPARISON_NONCE, y))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gethostbyname(host): \n    return _Resolve(host, [AF_INET])[2][0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sign(x): \n    return math.copysign(1, x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show_progress(iteration, loglikelihood): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_exiting(): \n    return (_exiting or (_exiting is None))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _block_size(sep): \n    return (BLOCK_SIZE + (len(sep) * ((BLOCK_SIZE // Card.length) - 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_from(type): \n    return type.split(u'-', 1)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pth(path): \n    return ('img/icons/ratings/' + path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safe_enumerate(iterable): \n    for (i, v) in enumerate(iterable): \n      if (v is not None): \n         (yield (i, v))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def GetJavaJars(target_list, target_dicts, toplevel_dir): \n    for target_name in target_list: \n      target = target_dicts[target_name] \n      for action in target.get('actions', []): \n         for input_ in action['inputs']: \n            if ((os.path.splitext(input_)[1] == '.jar') and (not input_.startswith('$'))): \n               if os.path.isabs(input_): \n                  (yield input_) \n               else: \n                  (yield os.path.join(os.path.dirname(target_name), input_))",
        "line_count": 9,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def contains(a, b): \n    return (b in a)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_paginated_api_response(results=None, count=0, num_pages=0, next_link=None, previous_link=None): \n    return {'pagination': {'next': next_link, 'previous': previous_link, 'count': count, 'num_pages': num_pages}, 'results': (results or [])}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def create_application(): \n    return webapp.WSGIApplication([('.*/worker_callback', handlers.MapperWorkerCallbackHandler), ('.*/controller_callback', handlers.ControllerCallbackHandler), ('.*/kickoffjob_callback', handlers.KickOffJobHandler), ('.*/command/start_job', handlers.StartJobHandler), ('.*/command/cleanup_job', handlers.CleanUpJobHandler), ('.*/command/abort_job', handlers.AbortJobHandler), ('.*/command/list_configs', status.ListConfigsHandler), ('.*/command/list_jobs', status.ListJobsHandler), ('.*/command/get_job_detail', status.GetJobDetailHandler), ('/[^/]+(?:/)?', RedirectHandler), ('.+/([a-zA-Z0-9]+(?:\\\\.(?:css|js))?)', status.ResourceHandler)], debug=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def datetime_combine(date, time): \n    return make_aware(datetime.datetime.combine(date, time), get_current_timezone())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_newick(lines, constructor=PhyloNode): \n    return DndParser(lines, constructor=constructor, unescape_name=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _cmp_by_highest_wg(path1, path2): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gradient(scalar, coord_sys): \n    return coord_sys.delop(scalar).doit()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeExtension(configs=[]): \n    return FootnoteExtension(configs=configs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onGlobalBasesDel(key): \n    DEBUG_MSG(('onGlobalBasesDel:   %s' % key))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def document_generator(dir_path_pattern, count=None): \n    for (running_count, item) in enumerate(glob.iglob(dir_path_pattern)): \n      if (count and (running_count >= count)): \n         raise StopIteration() \n      doc_id = os.path.basename(item) \n      with codecs.open(item, encoding='utf-8') as f: \n         try: \n            text = f.read() \n         except UnicodeDecodeError: \n            continue \n         (yield Document(text, doc_id, item))",
        "line_count": 10,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def is_survey_required_for_course(course_descriptor): \n    return (course_descriptor.course_survey_required and SurveyForm.get(course_descriptor.course_survey_name, throw_if_not_found=False))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def format_html_join(sep, format_string, args_generator): \n    return mark_safe(conditional_escape(sep).join((format_html(format_string, *tuple(args)) for args in args_generator)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def volume_glance_metadata_copy_to_snapshot(context, snapshot_id, volume_id): \n    return IMPL.volume_glance_metadata_copy_to_snapshot(context, snapshot_id, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def keep_awake(): \n    if (KERNEL32 or sleepless): \n      if sabnzbd.cfg.keep_awake(): \n         awake = False \n         if (not sabnzbd.downloader.Downloader.do.paused): \n            if ((not PostProcessor.do.empty()) or (not NzbQueue.do.is_empty())): \n               awake = True \n               if KERNEL32: \n                  KERNEL32.SetThreadExecutionState(ctypes.c_int(1)) \n               else: \n                  sleepless.keep_awake(u'SABnzbd   is   busy   downloading   and/or   post-processing') \n         if ((not awake) and sleepless): \n            sleepless.allow_sleep()",
        "line_count": 12,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def _ensure_no_filesystem(device, block_device_manager): \n    if block_device_manager.has_filesystem(device): \n      raise FilesystemExists(device)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def for_unsigned_dtypes(name='dtype'): \n    return for_dtypes(_unsigned_dtypes, name=name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text='', prefaceRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), prefaceRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reformat(array): \n    return np.array(array, dtype=np.float32, order='F')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pdbref(accessing_obj, accessed_obj, *args, **kwargs): \n    return dbref(_to_player(accessing_obj), accessed_obj, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def command(cmd): \n    return as_unicode(vim.command(as_vimencoding(cmd)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_argv(): \n    return ['--quick', '--colors=NoColor', '--no-term-title', '--no-banner', '--autocall=0']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def close_client(client): \n    if (client and (options.get_value('savecache') == 'true')): \n      client.http_client.close_session()",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _validate_ami_region_map(blob): \n    return dict(((AWS_REGIONS.lookupByValue(k), v) for (k, v) in json.loads(blob).items()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_copied_yield(foo): \n    with foo: \n      (yield 1)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rjust(value, arg): \n    return value.rjust(int(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _run_all_quiet(cmd, cwd=None, stdin=None, runas=None, shell=DEFAULT_SHELL, python_shell=False, env=None, template=None, umask=None, timeout=None, reset_system_locale=True, saltenv='base', pillarenv=None, pillar_override=None, output_loglevel=None): \n    return _run(cmd, runas=runas, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, output_loglevel='quiet', log_callback=None, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, pillarenv=pillarenv, pillar_override=pillar_override)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lcm(a, b): \n    return ((a * b) / fr.gcd(a, b))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def refresh_db(): \n    return (__salt__['cmd.retcode']('/opt/csw/bin/pkgutil   -U') == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _sec_to_usec(t_sec): \n    return int((t_sec * 1000000.0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _addrdict_to_ip_addrs(addrs): \n    return ['{0}/{1}'.format(x['IP   Address'], x['Subnet'].rsplit('/', 1)[(-1)]) for x in addrs]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_program_marketing_url(programs_config): \n    return urljoin(settings.MKTG_URLS.get('ROOT'), programs_config.marketing_path).rstrip('/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def distribute_and_over_or(expr): \n    return _distribute((expr, And, Or))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def grbm_type_1(): \n    return GRBM_Type_1",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ranfunc(): \n    return 'ranfunc'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def typed_subpart_iterator(msg, maintype='text', subtype=None): \n    for subpart in msg.walk(): \n      if (subpart.get_content_maintype() == maintype): \n         if ((subtype is None) or (subpart.get_content_subtype() == subtype)): \n            (yield subpart)",
        "line_count": 4,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def hello1(): \n    return 'Hello   World'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _find_monitor_snapshot(cs, snapshot): \n    return utils.find_resource(cs.monitor_snapshots, snapshot)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parsetree(s, *args, **kwargs): \n    return Text(parse(s, *args, **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_package_info(name, saltenv=u'base'): \n    return get_repo_data(saltenv).get(u'repo', {}).get(name, {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_classes(options): \n    if ('class' in options): \n      assert ('classes' not in options) \n      options['classes'] = options['class'] \n      del options['class']",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def loss(y_hat, y): \n    return T.sqr((y_hat - y)).mean()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_enn_sk_estimator(): \n    check_estimator(EditedNearestNeighbours)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def monomial_lcm(A, B): \n    return tuple([max(a, b) for (a, b) in zip(A, B)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def new(key, mode, *args, **kwargs): \n    return _create_cipher(sys.modules[__name__], key, mode, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return GraphModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_node_create(context, values): \n    return IMPL.compute_node_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_nearmiss_sk_estimator(): \n    check_estimator(NearMiss)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _current_window_for_event(event): \n    return find_window_for_buffer_name(event.cli, event.cli.current_buffer_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def alsoProvides(object, *interfaces): \n    directlyProvides(object, directlyProvidedBy(object), *interfaces)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chunk(data, index): \n    return (data[:index], data[index:])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prompt_url(q): \n    return prompt(q, _url_coerce_fn)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_timestamp(timestamp): \n    return u'{0:>010x}'.format(int(timestamp))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ogrinspect(*args, **kwargs): \n    return '\\n'.join((s for s in _ogrinspect(*args, **kwargs)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_rollback(name): \n    return _proxy_cmd('get_rollback', name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addressable_dict(type_constraint): \n    return _addressable_wrapper(AddressableDict, type_constraint)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def supportsSReg(endpoint): \n    return (endpoint.usesExtension(ns_uri_1_1) or endpoint.usesExtension(ns_uri_1_0))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def iscsi_target_create_safe(context, values): \n    return IMPL.iscsi_target_create_safe(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatatt(attrs): \n    return u''.join([(u'   %s=\"%s\"' % (k.replace(u'_', u'-'), conditional_escape(v))) for (k, v) in attrs.items()])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def equatePolar(point, returnValue): \n    equateCylindrical(point, returnValue)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _can_load_course_on_mobile(user, course): \n    return (is_mobile_available_for_user(user, course) and (_has_staff_access_to_descriptor(user, course, course.id) or _has_fulfilled_all_milestones(user, course.id)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def save_auto(data, filename): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def matrix_transpose(matrix): \n    return matrix.swapaxes((-2), (-1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def waitforbuttonpress(*args, **kwargs): \n    return gcf().waitforbuttonpress(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_bulk_create(context, ips): \n    return IMPL.floating_ip_bulk_create(context, ips)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_qt_log_ignore(qtbot, quteproc): \n    with qtbot.waitSignal(quteproc.got_error): \n      quteproc.send_cmd(':message-error   \"SpellCheck:   test\"')",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def null_node_formatter(nodetext, optionstext, caller=None): \n    return ((nodetext + '\\n\\n') + optionstext)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stonith_show(stonith_id, extra_args=None, cibfile=None): \n    return item_show(item='stonith', item_id=stonith_id, extra_args=extra_args, cibfile=cibfile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_recently_published_exp_summaries(limit): \n    return _get_exploration_summaries_from_models(exp_models.ExpSummaryModel.get_recently_published(limit))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def auth(username, password): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def standard_normal_sample(shape): \n    return tf.random_normal(shape)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return GcodeTimeSegmentRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_colors(c, num): \n    return _backports.broadcast_to((mcolors.to_rgba_array(c) if len(c) else [0, 0, 0, 0]), (num, 4))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cell_delete(context, cell_name): \n    return IMPL.cell_delete(context, cell_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_option(option, invalue): \n    return _ldap_function_call(None, _ldap.set_option, option, invalue)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_host(hostname, status=None, locked=None, protection=None): \n    return models.Host.add_object(hostname=hostname, status=status, locked=locked, protection=protection).id",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def EvalNormalCdf(x, mu=0, sigma=1): \n    return stats.norm.cdf(x, loc=mu, scale=sigma)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_namespace_attrs(): \n    return '   '.join(('xmlns:{}=\"{}\"'.format(k, v) for (k, v) in XML_NAMESPACES.items()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def path_isdir(path): \n    return os.path.isdir(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def missing(name): \n    return (not available(name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_locale_name(request): \n    return request.locale_name",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_hop_by_hop(header_name): \n    return _hoppish(header_name.lower())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def valid_window_lengths(underlying_buffer_length): \n    return iter(range(1, (underlying_buffer_length + 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_command(text): \n    return text.startswith('/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getSegmentPathDefault(): \n    return [Vector3(), Vector3(0.0, 1.0)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_br_trunk_port_name(prefix, port_id): \n    return ('%st-%s' % (prefix, port_id))[:constants.DEVICE_NAME_MAX_LEN]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pool_del(pool_name, **kwargs): \n    return ceph_cfg.pool_del(pool_name, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def python_compiler(): \n    return _sys_version()[6]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inf_loop_multiple_back_edge(rec): \n    while True: \n      rec.mark('yield') \n      (yield) \n      p = rec('p') \n      if p: \n         rec.mark('bra') \n         pass",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def unicode_join(seq): \n    return concat(imap(unicode, seq))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TSF(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.TSF, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def perform_all_actions(all_actions): \n    for action_group in all_actions: \n      to_destroy = getattr(action_group, 'destroy', []) \n      for resource in to_destroy: \n         destroy_resource(resource)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def assert_is_not(expr1, expr2, msg=None): \n    assert_true((expr1 is not expr2), msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def version_commit(): \n    return version.COMMIT",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('composer.install' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _adapt(iface, obj): \n    for (wrapper_test, wrapper) in IMOUNTABLE_FILESYSTEM_ADAPTERS.items(): \n      if wrapper_test(obj): \n         return wrapper(obj)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def success(request, message, extra_tags='', fail_silently=False): \n    add_message(request, constants.SUCCESS, message, extra_tags=extra_tags, fail_silently=fail_silently)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sigmoid(z): \n    return (1.0 / (1.0 + np.exp((- z))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def weeks(w): \n    return (w * 7.0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_message(exploration_id, thread_id, message_id): \n    return _get_message_from_model(feedback_models.FeedbackMessageModel.get(exploration_id, thread_id, message_id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writelines(lines, filename, encoding='utf-8', mode='wb'): \n    return write(os.linesep.join(lines), filename, encoding, mode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def usecase5(x, N): \n    for k in range(N): \n      print(x[k].f1, x.s1[k], x[k].f2)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def IndexDefinitionsToProtos(app_id, index_definitions): \n    return [IndexDefinitionToProto(app_id, index) for index in index_definitions]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def t_ignore_SILLYCOMM(t): \n    t.lexer.lineno += t.value.count('\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_get_by_instance(context, instance_uuid): \n    return IMPL.fixed_ip_get_by_instance(context, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reap_fileserver_cache_dir(cache_base, find_func): \n    for saltenv in os.listdir(cache_base): \n      env_base = os.path.join(cache_base, saltenv) \n      for (root, dirs, files) in os.walk(env_base): \n         if ((len(dirs) == 0) and (len(files) == 0)): \n            if ((time.time() - os.path.getctime(root)) > 60): \n               os.rmdir(root) \n            continue \n         for file_ in files: \n            file_path = os.path.join(root, file_) \n            file_rel_path = os.path.relpath(file_path, env_base) \n            try: \n               (filename, _, hash_type) = file_rel_path.rsplit('.', 2) \n            except ValueError: \n               log.warning('Found   invalid   hash   file   [{0}]   when   attempting   to   reap   cache   directory.'.format(file_)) \n               continue \n            ret = find_func(filename, saltenv=saltenv) \n            if (ret['path'] == ''): \n               os.unlink(file_path)",
        "line_count": 18,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def safe_shlex_split(text_or_binary): \n    return shlex.split(ensure_binary(text_or_binary))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def contentstore_config(): \n    return {'ENGINE': 'xmodule.contentstore.mongo.MongoContentStore', 'DOC_STORE_CONFIG': {'host': MONGO_HOST, 'db': 'test_xcontent_{}'.format(os.getpid()), 'port': MONGO_PORT_NUM}, 'ADDITIONAL_OPTIONS': {'trashcan': {'bucket': 'trash_fs'}}}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cmd_set(args): \n    mestate.settings.command(args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stripid(text): \n    return _re_stripid.sub('\\\\1', text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def EvalExponentialCdf(x, lam): \n    return (1 - math.exp(((- lam) * x)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _SetFilters(filters): \n    _cpplint_state.SetFilters(filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def negate_all(f): \n    return (lambda *args, **kwargs: [(- y) for y in f(*args, **kwargs)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_ast_bad_lambda(): \n    cant_compile(u'(lambda)')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def single_source_dijkstra(G, source, target=None, cutoff=None, weight='weight'): \n    return multi_source_dijkstra(G, {source}, cutoff=cutoff, target=target, weight=weight)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_reply_headers(new_message, previous_message): \n    if previous_message.message_id_header: \n      new_message.in_reply_to = previous_message.message_id_header \n      if previous_message.references: \n         new_message.references = (previous_message.references + [previous_message.message_id_header]) \n      else: \n         new_message.references = [previous_message.message_id_header]",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def chr(code): \n    return Utf8(unichr(code))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fix_indentation(text): \n    return text.replace(' DCTB ', ('   ' * 4))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(expr, filename='<unknown>', mode='exec'): \n    return compile(expr, filename, mode, PyCF_ONLY_AST)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_hook(config): \n    for scheme in install.INSTALL_SCHEMES.values(): \n      scheme['data'] = scheme['purelib']",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sync_modules(saltenv='base'): \n    return salt.utils.extmods.sync(__opts__, 'modules', saltenv=saltenv)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def calc_net(ip_addr, netmask=None): \n    return salt.utils.network.calc_net(ip_addr, netmask)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def intersection(set1, set2): \n    return [s for s in set1 if (s in set2)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def delete(name, runas=None): \n    return prlctl('delete', _sdecode(name), runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLDRAGONFLYDOJI(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLDRAGONFLYDOJI)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deploy_password(username, password, host=None, admin_username=None, admin_password=None, module=None): \n    return __execute_cmd('deploy   -u   {0}   -p   {1}'.format(username, password), host=host, admin_username=admin_username, admin_password=admin_password, module=module)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _objects_eq(manager, list_): \n    eq_(set(manager.all()), set(list_))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tag_create(repo, tag, author=None, message=None, annotated=False, objectish='HEAD', tag_time=None, tag_timezone=None): \n    with open_repo_closing(repo) as r: \n      object = parse_object(r, objectish) \n      if annotated: \n         tag_obj = Tag() \n         if (author is None): \n            author = r._get_user_identity() \n         tag_obj.tagger = author \n         tag_obj.message = message \n         tag_obj.name = tag \n         tag_obj.object = (type(object), object.id) \n         if (tag_time is None): \n            tag_time = int(time.time()) \n         tag_obj.tag_time = tag_time \n         if (tag_timezone is None): \n            tag_timezone = 0 \n         elif isinstance(tag_timezone, str): \n            tag_timezone = parse_timezone(tag_timezone) \n         tag_obj.tag_timezone = tag_timezone \n         r.object_store.add_object(tag_obj) \n         tag_id = tag_obj.id \n      else: \n         tag_id = object.id \n      r.refs[('refs/tags/' + tag)] = tag_id",
        "line_count": 23,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def _af_commutes_with(a, b): \n    return (not any(((a[b[i]] != b[a[i]]) for i in range((len(a) - 1)))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def transfer_get_all(context): \n    return IMPL.transfer_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def date_format(value, format=None): \n    return dateformat.format(value, get_format((format or 'DATE_FORMAT')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_parent_pid(): \n    return psutil.Process().ppid()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random_bitstring(n): \n    return ''.join([random.choice('01') for i in range(n)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_log_for_svn_txn(repo_path, txn_id): \n    return subproc_check_output(['svnlook', 'log', repo_path, '-t', txn_id])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CurrentColumn(): \n    return vim.current.window.cursor[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def broadcast(*args): \n    return Broadcast()(*args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_user_state(openid): \n    return redis.hget(('wechat:user:' + openid), 'state')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_date_from_str(date_input): \n    return datetime.datetime.strptime(date_input.strip(), '%Y-%m-%d').replace(tzinfo=pytz.UTC)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_default_hparams(): \n    return HParams(batch_size=64, residual_blocks=2, n_couplings=2, n_scale=4, learning_rate=0.001, momentum=0.1, decay=0.001, l2_coeff=5e-05, clip_gradient=100.0, optimizer='adam', dropout_mask=0, base_dim=32, bottleneck=0, use_batch_norm=1, alternate=1, use_aff=1, skip=1, data_constraint=0.9, n_opt=0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sum_entries(operator): \n    return lo.LinOp(lo.SUM_ENTRIES, (1, 1), [operator], None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_insert(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _write_data(writer, data): \n    if data: \n      data = data.replace('&', '&amp;').replace('<', '&lt;').replace('\"', '&quot;').replace('>', '&gt;') \n      writer.write(data)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def find_deprecated_defs(pkg_dir): \n    for (root, dirs, files) in os.walk(pkg_dir): \n      for filename in files: \n         if filename.endswith('.py'): \n            s = open(os.path.join(root, filename)).read() \n            for m in DEPRECATED_DEF_RE.finditer(s): \n               if m.group(2): \n                  name = m.group(2) \n                  msg = '   '.join((strip_quotes(s) for s in STRING_RE.findall(m.group(1)))) \n                  msg = '   '.join(msg.split()) \n                  if (m.group()[0] in '    DCTB '): \n                     cls = find_class(s, m.start()) \n                     deprecated_methods[name].add((msg, cls, '()')) \n                  else: \n                     deprecated_funcs[name].add((msg, '', '()')) \n               else: \n                  name = m.group(3) \n                  m2 = STRING_RE.match(s, m.end()) \n                  if m2: \n                     msg = strip_quotes(m2.group()) \n                  else: \n                     msg = '' \n                  msg = '   '.join(msg.split()) \n                  deprecated_classes[name].add((msg, '', ''))",
        "line_count": 23,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def bytes_validator(optdict, name, value): \n    return optik_ext.check_bytes(None, name, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_layers_name(): \n    set_keep['_layers_name_list'] = []",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sync_utils(saltenv='base'): \n    return salt.utils.extmods.sync(__opts__, 'utils', saltenv=saltenv)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rendering_info(obj): \n    return ('<ul>%s</ul>' % ''.join((('<li>%s</li>' % (x % y)) for (x, y) in (('<img   src=\"%s/admin/img/admin/icon-yes.gif\"   alt=\"%s\">   Deferred   rendering', (settings.STATIC_URL, obj.defer_rendering)), ('%s   (last)', obj.last_rendered_at), ('%s   (started)', obj.render_started_at), ('%s   (scheduled)', obj.render_scheduled_at)) if y)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _inFilesystemNamespace(path): \n    return (path[:1] not in ('\\x00', u'\\x00'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def accumulate(name, value): \n    middleware.NewRelicCustomMetrics.accumulate_metric(name, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def secs_to_timestr(secs, compact=False): \n    return _SecsToTimestrHelper(secs, compact).get_value()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_messages(identity): \n    BackendMessage.objects.filter(identity=identity, name=BACKEND_NAME).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return ClairvoyanceRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def l2(x): \n    return T.sum((x ** 2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_pointer_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dictreverse(mapping): \n    return dict([(value, key) for (key, value) in mapping.iteritems()])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def unmarshall_time(tyme): \n    return datetime.datetime(day=tyme['day'], month=tyme['month'], year=tyme['year'], hour=tyme['hour'], minute=tyme['minute'], second=tyme['second'], microsecond=tyme['microsecond'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable_microsites(): \n    microsite.enable_microsites(log)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def not_success(status): \n    return (status['state'] != u'success')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_filepaths(dire): \n    return read_in(os.path.join(dire, 'FILEPATHS'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compare_config(): \n    return __proxy__['napalm.call']('compare_config', **{})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def boundary_expansion(G, S): \n    return (len(nx.node_boundary(G, S)) / len(S))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_running(service): \n    with settings(hide('running', 'stdout', 'stderr', 'warnings'), warn_only=True): \n      if using_systemd(): \n         return systemd.is_running(service) \n      elif (distrib_family() != 'gentoo'): \n         test_upstart = run_as_root(('test   -f   /etc/init/%s.conf' % service)) \n         status = _service(service, 'status') \n         if test_upstart.succeeded: \n            return ('running' in status) \n         else: \n            return status.succeeded \n      else: \n         status = _service(service, 'status') \n         return ('   started' in status)",
        "line_count": 13,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def set_logger_level(logger_name, log_level='error'): \n    logging.getLogger(logger_name).setLevel(LOG_LEVELS.get(log_level.lower(), logging.ERROR))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_cscript_path(): \n    for dir in os.environ.get('PATH', '').split(os.pathsep): \n      cscript_path = os.path.join(dir, 'cscript.exe') \n      if os.path.exists(cscript_path): \n         return cscript_path",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def error_page_404(status, message, traceback, version): \n    return '\\n<html>\\n            <head>\\n                  <script   type=\"text/javascript\">\\n                  <!--\\n                  location.href   =   location.protocol   +   \\'//\\'   +   location.hostname   +   (location.port   ?   \\':\\'   +   location.port   :   \\'\\')   +   \\'/sabnzbd/\\'   ;\\n                  //-->\\n                  </script>\\n            </head>\\n            <body><br/></body>\\n</html>\\n'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_dictionary(worddict, wordcount, loc): \n    with open(loc, 'wb') as f: \n      pkl.dump(worddict, f) \n      pkl.dump(wordcount, f)",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_threshold_graph(G, create_using=None): \n    return threshold_graph(find_creation_sequence(G), create_using)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_get_ipython_dir_4(): \n    with patch_get_home_dir(HOME_TEST_DIR): \n      with patch('os.name', 'posix'): \n         try: \n            os.mkdir(os.path.join(XDG_TEST_DIR, 'ipython')) \n         except OSError as e: \n            if (e.errno != errno.EEXIST): \n               raise \n         with modified_env({'IPYTHON_DIR': None, 'IPYTHONDIR': None, 'XDG_CONFIG_HOME': XDG_TEST_DIR}): \n            with warnings.catch_warnings(record=True) as w: \n               ipdir = paths.get_ipython_dir() \n         nt.assert_equal(ipdir, os.path.join(HOME_TEST_DIR, '.ipython')) \n         if (sys.platform != 'darwin'): \n            nt.assert_equal(len(w), 1) \n            nt.assert_in('Ignoring', str(w[0]))",
        "line_count": 14,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def qnwcheb(n, a=1, b=1): \n    return _make_multidim_func(_qnwcheb1, n, a, b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_ipython_extension(ip): \n    ip.register_magics(StoreMagics)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def limit(e, z, z0, dir='+'): \n    return Limit(e, z, z0, dir).doit(deep=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getString(value): \n    return str(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookupAFSDatabase(name, timeout=None): \n    return getResolver().lookupAFSDatabase(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stopped(service): \n    if is_running(service): \n      if using_systemd(): \n         systemd.stop(service) \n      else: \n         stop(service)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _garbage_collect_connection(socket_instance): \n    if (socket_instance is not None): \n      quiet_shutdown(socket_instance) \n      quiet_close(socket_instance)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def debug(request, message): \n    add_message(get_request(request), constants.DEBUG, message)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def draw_if_interactive(): \n    if matplotlib.is_interactive(): \n      figManager = Gcf.get_active() \n      if (figManager is not None): \n         figManager.canvas.draw_idle()",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def Logistic(name, mu, s): \n    return rv(name, LogisticDistribution, (mu, s))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fmeasure(y_true, y_pred): \n    return fbeta_score(y_true, y_pred, beta=1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_nav_open(fund_type='all'): \n    if (ct._check_nav_oft_input(fund_type) is True): \n      ct._write_head() \n      nums = _get_fund_num((ct.SINA_NAV_COUNT_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], ct.NAV_OPEN_KEY[fund_type], ct.NAV_OPEN_API[fund_type], ct.NAV_OPEN_T2[fund_type], ct.NAV_OPEN_T3))) \n      fund_df = _parse_fund_data((ct.SINA_NAV_DATA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], ct.NAV_OPEN_KEY[fund_type], ct.NAV_OPEN_API[fund_type], nums, ct.NAV_OPEN_T2[fund_type], ct.NAV_OPEN_T3))) \n      return fund_df",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def embed_id(x, W, ignore_label=None): \n    return EmbedIDFunction(ignore_label=ignore_label)(x, W)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eval_number(parse_result): \n    return super_float(''.join(parse_result))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SecondsSince(timestamp): \n    return (time.time() - timestamp)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resource_present(name, resource_id, resource_type, resource_options=None, cibname=None): \n    return _item_present(name=name, item='resource', item_id=resource_id, item_type=resource_type, extra_args=resource_options, cibname=cibname)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_module(name): \n    for ext in CODE_FILES: \n      if name.endswith(ext): \n         return name[:(- len(ext))]",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def shutdown(opts): \n    log.debug('marathon   proxy   shutdown()   called...')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_hybrid_bridge_name(vif): \n    return ('qbr' + vif['id'])[:model.NIC_NAME_LEN]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trailing_blank_lines(physical_line, lines, line_number): \n    if ((physical_line.strip() == '') and (line_number == len(lines))): \n      return (0, 'W391   blank   line   at   end   of   file')",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def instance_tag_set(context, instance_uuid, tags): \n    return IMPL.instance_tag_set(context, instance_uuid, tags)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ipfunc(): \n    return 'ipfunc'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def date_to_str(date): \n    return (datetime.strftime(date, config.DATE_FORMAT) if date else None)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def reload_rules(): \n    return __firewall_cmd('--reload')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nCr(n, r): \n    return reduce((lambda x, y: ((x * y[0]) / y[1])), zip(xrange(((n - r) + 1), (n + 1)), xrange(1, (r + 1))), 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nova_docstring_multiline_start(physical_line, previous_logical, tokens): \n    if is_docstring(physical_line, previous_logical): \n      pos = max([physical_line.find(i) for i in START_DOCSTRING_TRIPLE]) \n      if ((len(tokens) == 0) and (pos != (-1)) and (len(physical_line) == (pos + 4))): \n         if (physical_line.strip() in START_DOCSTRING_TRIPLE): \n            return (pos, 'N404:   multi   line   docstring   should   start   with   a   summary')",
        "line_count": 5,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def getLevelName(level): \n    return _levelNames.get(level, ('Level   %s' % level))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_import_valid(documents): \n    return (isinstance(documents, list) and all((isinstance(d, dict) for d in documents)) and all((all(((k in d) for k in ('pk', 'model', 'fields'))) for d in documents)) and all((all(((k in d['fields']) for k in ('uuid', 'owner'))) for d in documents)))",
        "line_count": 1,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def remove(predicate, coll): \n    return [x for x in coll if (not predicate(x))]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def selWorst(individuals, k): \n    return sorted(individuals, key=attrgetter('fitness'))[:k]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_list(*packages): \n    return file_dict(*packages)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return (salt.utils.which('rabbitmqctl') is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def liftRepositoryDialogs(repositoryDialogs): \n    for repositoryDialog in repositoryDialogs: \n      repositoryDialog.root.withdraw() \n      repositoryDialog.root.lift() \n      repositoryDialog.root.deiconify() \n      repositoryDialog.root.lift() \n      repositoryDialog.root.update_idletasks()",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_all(): \n    return _get_config()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or __virtualname__), ('personal_access_token',))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def unregister_class(class_): \n    _instrumentation_factory.unregister(class_)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def next_multiple(n, k): \n    return (div_ceil(n, k) * k)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RLock(*args, **kwargs): \n    return _RLock(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def can_generate_key(): \n    return (find_executable(u'ssh-keygen') is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_initializer_list_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def custom_key_func(key, key_prefix, version): \n    return ('CUSTOM-' + '-'.join([key_prefix, str(version), key]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_vistara_configuration(): \n    return {'client_id': __opts__['vistara']['client_id'], 'client_key': __opts__['vistara']['client_key'], 'client_secret': __opts__['vistara']['client_secret']}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sync_output(saltenv='base'): \n    return salt.utils.extmods.sync(__opts__, 'output', saltenv=saltenv)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_filename_outliers(filename): \n    return _filename_version_re.sub('<version>/', filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def redis_key(user, domain): \n    return [('ratelimit:%s:%s:%s:%s' % (type(user), user.id, domain, keytype)) for keytype in ['list', 'zset', 'block']]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def polygon_under_graph(xlist, ylist): \n    return (([(xlist[0], 0.0)] + list(zip(xlist, ylist))) + [(xlist[(-1)], 0.0)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(): \n    with pika.BlockingConnection() as conn: \n      channel = conn.channel() \n      channel.queue_declare(queue=SERVER_QUEUE, exclusive=True, auto_delete=True) \n      channel.basic_consume(on_server_rx_rpc_request, queue=SERVER_QUEUE) \n      channel.basic_consume(on_client_rx_reply_from_server, queue='amq.rabbitmq.reply-to', no_ack=True) \n      channel.basic_publish(exchange='', routing_key=SERVER_QUEUE, body='Marco', properties=pika.BasicProperties(reply_to='amq.rabbitmq.reply-to')) \n      channel.start_consuming()",
        "line_count": 7,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random_word(source_alpha, length): \n    return ''.join((random.choice(source_alpha) for i in range(length)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fixed_ip_get_all(context): \n    return IMPL.fixed_ip_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unicode_to_html(text): \n    return ''.join([(u'&#%s;' % ord(i)) for i in text])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def clear_info_cache(app, env, account, container=None): \n    set_info_cache(app, env, account, container, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_(profile=None): \n    return server_list(profile=profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_fignums(): \n    return sorted(_pylab_helpers.Gcf.figs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_pass(name, **kwargs): \n    return {'name': name, 'comment': 'The   lxc.set_pass   state   is   no   longer   supported.   Please   see   the   LXC   states   documentation   for   further   information.', 'result': False, 'changes': {}}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_set_format_basic(): \n    for (format, value) in (('jd', 2451577.5), ('mjd', 51577.0), ('cxcsec', 65923264.184), ('datetime', datetime.datetime(2000, 2, 3, 0, 0)), ('iso', '2000-02-03   00:00:00.000')): \n      t = Time('+02000-02-03', format='fits') \n      t0 = t.replicate() \n      t.format = format \n      assert (t.value == value) \n      assert (t._time.jd1 is t0._time.jd1) \n      assert (t._time.jd2 is t0._time.jd2)",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_aug_path(file_path): \n    return ('/files%s' % file_path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_private_ip(): \n    return file_io.read(constants.PRIVATE_IP_LOC).rstrip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_ratelimited(request): \n    return (is_ratelimited(request, 'kbforum-post-min', '4/m') or is_ratelimited(request, 'kbforum-post-day', '50/d'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_installed_business_segment(shop): \n    return configuration.get(shop, SAMPLE_BUSINESS_SEGMENT_KEY)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_translations(sender, **kwargs): \n    if hasattr(_to_save, 'translations'): \n      _to_save.translations = {}",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def templates(*args): \n    return js_helper('static/scripts/templates/compiled/', *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def campaign(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def catalog(): \n    return s3_rest_controller(rheader=s3db.supply_catalog_rheader)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_rfc3339(datetime_instance=None): \n    return (datetime_instance.isoformat('T') + 'Z')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safe_load(stream): \n    return load(stream, SafeLoader)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_postfix_expression_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return MillRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def warehouse_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def submit(submit_button=None): \n    browser.submit(submit_button)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uninstall(package, *arguments): \n    with log.progress('Uninstalling   package   {}'.format(package)): \n      with context.quiet: \n         return process((['pm', 'uninstall', package] + list(arguments))).recvall()",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def destroy(name): \n    return unregister(name, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def demo_template_statistics(): \n    postag(incremental_stats=True, template_stats=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sendfile(request, filename, **kwargs): \n    return HttpResponse(u'Dummy   backend   response')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def active_window(): \n    return QtWidgets.QApplication.activeWindow()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_saucelabs_username_and_key(): \n    return {'username': settings.SAUCE.get('USERNAME'), 'access-key': settings.SAUCE.get('ACCESS_ID')}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def payload_to_file(payload_name): \n    return os.path.join(PAYLOAD_PATH, (payload_name + '.py'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def scan_for_null_records(table, col_name, check_fkeys): \n    if (col_name in table.columns): \n      if check_fkeys: \n         fkey_found = False \n         fkeys = (table.c[col_name].foreign_keys or []) \n         for fkey in fkeys: \n            if (fkey.column.table.name == 'instances'): \n               fkey_found = True \n         if (not fkey_found): \n            return \n      records = len(list(table.select().where((table.c[col_name] == null())).execute())) \n      if records: \n         msg = (_(\"There   are   %(records)d   records   in   the   '%(table_name)s'   table   where   the   uuid   or   instance_uuid   column   is   NULL.   These   must   be   manually   cleaned   up   before   the   migration   will   pass.   Consider   running   the   'nova-manage   db   null_instance_uuid_scan'   command.\") % {'records': records, 'table_name': table.name}) \n         raise exception.ValidationError(detail=msg)",
        "line_count": 13,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def logSnatch(searchResult): \n    for curEpObj in searchResult.episodes: \n      showid = int(curEpObj.show.indexerid) \n      season = int(curEpObj.season) \n      episode = int(curEpObj.episode) \n      quality = searchResult.quality \n      version = searchResult.version \n      providerClass = searchResult.provider \n      if (providerClass is not None): \n         provider = providerClass.name \n      else: \n         provider = 'unknown' \n      action = Quality.compositeStatus(SNATCHED, searchResult.quality) \n      resource = searchResult.name \n      _logHistoryItem(action, showid, season, episode, quality, resource, provider, version)",
        "line_count": 14,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def init_helper(obj, kw): \n    for (k, v) in kw.iteritems(): \n      if (not hasattr(obj, k)): \n         raise TypeError(((((obj.__class__.__name__ + '   constructor   got   ') + \"unexpected   keyword   argument   '\") + k) + \"'\")) \n      setattr(obj, k, v)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def flatten(l): \n    for el in l: \n      if (isinstance(el, collections.Iterable) and (not isinstance(el, basestring))): \n         for sub in flatten(el): \n            (yield sub) \n      else: \n         (yield el)",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_jids_filter(count, filter_find_job=True): \n    with _get_serv(ret=None, commit=True) as cur: \n      sql = 'SELECT   *   FROM   (\\n                                                               SELECT   DISTINCT   `jid`   ,`load`   FROM   `jids`\\n                                                               {0}\\n                                                               ORDER   BY   `jid`   DESC   limit   {1}\\n                                                               )   `tmp`\\n                                                   ORDER   BY   `jid`;' \n      where = 'WHERE   `load`   NOT   LIKE   \\'%\"fun\":   \"saltutil.find_job\"%\\'   ' \n      cur.execute(sql.format((where if filter_find_job else ''), count)) \n      data = cur.fetchall() \n      ret = [] \n      for jid in data: \n         ret.append(salt.utils.jid.format_jid_instance_ext(jid[0], json.loads(jid[1]))) \n      return ret",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def clear(): \n    _cache.clear()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gethostbyaddr(ip_address): \n    return get_hub().resolver.gethostbyaddr(ip_address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def x_label(epoch_axis): \n    return ('Epoch' if epoch_axis else 'Minibatch')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def EmblIterator(handle): \n    return EmblScanner(debug=0).parse_records(handle)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def minorticks_on(): \n    gca().minorticks_on()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_size(size): \n    for unit in ('B', 'KB', 'MB', 'GB', 'TB'): \n      if (size < 2048): \n         return ('%.f   %s' % (size, unit)) \n      size /= 1024.0",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def eval_image(image, height, width, scope=None): \n    with tf.op_scope([image, height, width], scope, 'eval_image'): \n      image = tf.image.central_crop(image, central_fraction=0.875) \n      image = tf.expand_dims(image, 0) \n      image = tf.image.resize_bilinear(image, [height, width], align_corners=False) \n      image = tf.squeeze(image, [0]) \n      return image",
        "line_count": 6,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def broadcast_to(array, shape): \n    return core.broadcast_to(array, shape)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _list_snapshots_command(filesystem): \n    return ['list', '-H', '-r', '-t', 'snapshot', '-o', 'name', '-s', 'creation', filesystem.name]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _safe(text): \n    return text.replace(\"'\", \"''\").replace('\\\\', '\\\\\\\\')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _skew_symmetric_cross(a): \n    return np.array([[0.0, (- a[2]), a[1]], [a[2], 0.0, (- a[0])], [(- a[1]), a[0], 0.0]])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _invalidate_edge(graph, n1, n2): \n    graph[n1][n2]['heap   item'][3] = False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_rng(): \n    return _rng",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isImageType(t): \n    return hasattr(t, 'im')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def theme(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _index_to_enum(enum, i): \n    return list(enum)[i]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_checkbox(state): \n    return (u'<input   type=\"checkbox\"   disabled%s>   ' % (u'   checked' if (state.lower() == u'x') else u''))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def service_model(service): \n    return {'name': service.name, 'admin': service.admin, 'url': service.url, 'prefix': (service.server.base_url if service.server else ''), 'command': service.command, 'pid': (service.proc.pid if service.proc else 0)}",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_array___eq__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apply_boosts(searcher): \n    return searcher.boost(question_title=4.0, question_content=3.0, question_answer_content=3.0, post_title=2.0, post_content=1.0, document_title=6.0, document_content=1.0, document_keywords=8.0, document_summary=2.0, document_title__match_phrase=10.0, document_content__match_phrase=8.0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Cdfs(cdfs, complement=False, transform=None, **options): \n    for cdf in cdfs: \n      Cdf(cdf, complement, transform, **options)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _SetCountingStyle(level): \n    _cpplint_state.SetCountingStyle(level)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def missing_newline(physical_line): \n    if (physical_line.rstrip() == physical_line): \n      return (len(physical_line), 'W292   no   newline   at   end   of   file')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def captured_stderr(): \n    return captured_output('stderr')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _chop_end_codes(line): \n    return re.sub('\\\\s\\\\s\\\\s\\\\s+[\\\\w]{4}.\\\\s+\\\\d*\\\\Z', '', line)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_logical_or_expression_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_pxe_config_file_path(instance): \n    return os.path.join(CONF.baremetal.tftp_root, instance['uuid'], 'config')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return (salt.utils.which('make-bcache') is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_windows(profile=None, api_key=None): \n    return salt.utils.pagerduty.list_items('maintenance_windows', 'id', __salt__['config.option'](profile), api_key, opts=__opts__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getSquareValuesFromPoint(pixelDictionary, point): \n    return getSquareValues(pixelDictionary, int(round(point.real)), int(round(point.imag)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def symbolic_ref(repo, ref_name, force=False): \n    with open_repo_closing(repo) as repo_obj: \n      ref_path = ('refs/heads/' + ref_name) \n      if ((not force) and (ref_path not in repo_obj.refs.keys())): \n         raise ValueError(('fatal:   ref   `%s`   is   not   a   ref' % ref_name)) \n      repo_obj.refs.set_symbolic_ref('HEAD', ref_path)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def restart(ctid_or_name, wait=True, force=False, fast=False, **kwargs): \n    return _vzctl('restart', ctid_or_name, wait=wait, force=force, fast=fast, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_to_dataset(volume): \n    return ('%s.%s' % (volume.node_id.encode('ascii'), volume.name.to_bytes()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _a_decode_long(stream, offset, count, _): \n    return ((offset + count), long(stream[offset:(offset + count)]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_packer(word_size=None, sign=None, **kwargs): \n    with context.local(sign=sign, **kwargs): \n      word_size = (word_size or context.word_size) \n      endianness = context.endianness \n      sign = (sign if (sign is None) else context.sign) \n      if (word_size in [8, 16, 32, 64]): \n         packer = {(8, 0, 0): _p8lu, (8, 0, 1): _p8ls, (8, 1, 0): _p8bu, (8, 1, 1): _p8bs, (16, 0, 0): _p16lu, (16, 0, 1): _p16ls, (16, 1, 0): _p16bu, (16, 1, 1): _p16bs, (32, 0, 0): _p32lu, (32, 0, 1): _p32ls, (32, 1, 0): _p32bu, (32, 1, 1): _p32bs, (64, 0, 0): _p64lu, (64, 0, 1): _p64ls, (64, 1, 0): _p64bu, (64, 1, 1): _p64bs}.get((word_size, {'big': 1, 'little': 0}[endianness], sign), None) \n         if packer: \n            return packer \n      return (lambda number: pack(number, word_size, endianness, sign))",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def set_close_exec(fd): \n    raise NotImplementedError()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TR4(rv): \n    return rv",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def split(pattern, string, maxsplit=0, flags=0, concurrent=None, **kwargs): \n    return _compile(pattern, flags, kwargs).split(string, maxsplit, concurrent)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def formatUIDListLines(msgs, getUidl): \n    for (i, m) in enumerate(msgs): \n      if (m is not None): \n         uid = getUidl(i) \n         (yield ('%d   %s\\r\\n' % ((i + 1), uid)))",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def ellip_normal(h2, k2, n, p): \n    with np.errstate(all='ignore'): \n      return _ellip_normal_vec(h2, k2, n, p)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_selection_statement_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wait_until_disappeared(browser, css_selector, timeout=10, frequency=1.0): \n    wait_until_condition(browser, condition=(lambda x: (not x.driver.find_element_by_css_selector(css_selector).is_displayed())), timeout=timeout, frequency=frequency)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lock_parent_directory(filename, timeout=10): \n    return lock_path(os.path.dirname(filename), timeout=timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_os_name_from_eol_chars(eol_chars): \n    for (chars, os_name) in EOL_CHARS: \n      if (eol_chars == chars): \n         return os_name",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def stEnergy(frame): \n    return (numpy.sum((frame ** 2)) / numpy.float64(len(frame)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isint(x): \n    return isinstance(x, int)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_expression_uminus(t): \n    t[0] = (- t[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_notif_for_after_purchase_organizer(user, invoice_id, order_url, event_name, buyer_email): \n    send_notification(user=user, action=NOTIF_TICKET_PURCHASED_ORGANIZER, title=NOTIFS[NOTIF_TICKET_PURCHASED_ORGANIZER]['title'].format(invoice_id=invoice_id, event_name=event_name, buyer_email=buyer_email), message=NOTIFS[NOTIF_TICKET_PURCHASED_ORGANIZER]['message'].format(order_url=order_url))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resident(since=0.0): \n    return (_VmB('VmRSS:') - since)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def guestbook_key(guestbook_name=None): \n    return ndb.Key('Guestbook', (guestbook_name or 'default_guestbook'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_command_let_bad(p): \n    p[0] = 'BAD   EXPRESSION   IN   LET'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dataset_id_from_name(name): \n    return unicode(UUID(bytes=md5(name.encode(u'utf-8')).digest(), version=4))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_auto_confd_path(osname=None): \n    return os.path.join(get_confd_path(osname), AUTO_CONFIG_DIR)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_tb(tb, limit=None): \n    return format_list(extract_tb(tb, limit))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_exporter(name): \n    return EXPORTERS[name]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tables(): \n    return s3_rest_controller('s3', 'table', rheader=s3db.s3_table_rheader)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def OpenUrlWithBasicAuth(url, user='root', pwd=''): \n    return requests.get(url, auth=HTTPBasicAuth(user, pwd), verify=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def osd_prepare(**kwargs): \n    return ceph_cfg.osd_prepare(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_fmdump(): \n    return salt.utils.which('fmdump')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_files(filenames, recursive, exclude): \n    while filenames: \n      name = filenames.pop(0) \n      if (recursive and os.path.isdir(name)): \n         for (root, directories, children) in os.walk(name): \n            filenames += [os.path.join(root, f) for f in children if match_file(os.path.join(root, f), exclude)] \n            directories[:] = [d for d in directories if match_file(os.path.join(root, d), exclude)] \n      else: \n         (yield name)",
        "line_count": 8,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def delete_profiler(id): \n    models.Profiler.smart_get(id).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def relu_(x): \n    return (x * (x > 0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_has_group_snapshot_filter(): \n    return IMPL.group_has_group_snapshot_filter()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def partition_list_journal(): \n    return ceph_cfg.partition_list_journal()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_subsystem(name): \n    return SUBSYSTEM_DICT[name]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def result_to_city(result, country, region): \n    if ('city' in result): \n      mapbox_city = result['city'] \n      lookup_args = {'name': mapbox_city['name'], 'country': country, 'region': region} \n      args = {'mapbox_id': mapbox_city['id'], 'lat': mapbox_city['lat'], 'lng': mapbox_city['lon']} \n      args.update(lookup_args) \n      query = (Q(**lookup_args) | Q(mapbox_id=mapbox_city['id'])) \n      city_qs = City.objects.filter(query).distinct() \n      if city_qs.exists(): \n         if (city_qs.count() == 2): \n            deduplicate_cities(city_qs[0], city_qs[1]) \n         city_qs.update(**args) \n         city = city_qs[0] \n      else: \n         city = City.objects.create(**args) \n      return city",
        "line_count": 15,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def is_deleted(kev): \n    return (kev.fflags & select.KQ_NOTE_DELETE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def canon(*rules, **kwargs): \n    return exhaust(top_down(exhaust(do_one(*rules)), **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_reply(exchange, req, msg, producer=None, retry=False, retry_policy=None, **props): \n    return producer.publish(msg, exchange=exchange, retry=retry, retry_policy=retry_policy, **dict({u'routing_key': req.properties[u'reply_to'], u'correlation_id': req.properties.get(u'correlation_id'), u'serializer': serializers.type_to_name[req.content_type], u'content_encoding': req.content_encoding}, **props))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def request_data(request, template='base.html', data='sausage'): \n    return render(request, template, {'get-foo': request.GET.get('foo'), 'get-bar': request.GET.get('bar'), 'post-foo': request.POST.get('foo'), 'post-bar': request.POST.get('bar'), 'data': data})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_attached_console_visible(): \n    return IsWindowVisible(console_window_handle)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_int_list(value, min=None, max=None): \n    return [is_integer(mem) for mem in is_list(value, min, max)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def add_to_sys_path(pathnames, index=0): \n    for pathname in pathnames[::(-1)]: \n      sys.path.insert(index, pathname)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_collection_info(collection): \n    return RESOURCE_ATTRIBUTE_MAP.get(collection)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftSequence(): \n    return 'chop   preface   outset   multiply   whittle   drill   lift   flow   feed   home   lash   fillet   limit   unpause   alteration   export'.split()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shutdown(opts): \n    log.debug('chronos   proxy   shutdown()   called...')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return BatteryModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def millions(x, pos): \n    return ('$%1.1fM' % (x * 1e-06))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jira(registry, xml_parent, data): \n    XML.SubElement(xml_parent, 'hudson.plugins.jira.JiraIssueUpdater')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tree(string, token=[WORD, POS, CHUNK, PNP, REL, ANCHOR, LEMMA]): \n    return Text(string, token)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chunks(it, n): \n    for first in it: \n      (yield ([first] + list(islice(it, (n - 1)))))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getBBHeight(bb): \n    return ((bb[3] - bb[1]) + 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(): \n    Engine().run()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def a_is_b(a, b): \n    return (a is b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def postBuildPage(page): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_esc(esc_chars): \n    return (lambda s: u''.join([((u'\\\\' + c) if (c in esc_chars) else c) for c in s]))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def noop_load(*args, **kwargs): \n    return (None, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_user_partition_json(partition_id, name, description, groups, scheme='random'): \n    return UserPartition(partition_id, name, description, groups, MockUserPartitionScheme(scheme)).to_json()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addressable_list(type_constraint): \n    return _addressable_wrapper(AddressableList, type_constraint)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ClearDatastoreStorage(datastore_path): \n    if os.path.lexists(datastore_path): \n      try: \n         os.remove(datastore_path) \n      except OSError as e: \n         logging.warning('Failed   to   remove   datastore   file   %r:   %s', datastore_path, e)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def FakeRename(src, dst): \n    raise OSError(errno.EPERM, 'Operation   not   permitted', src)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate(name, bracket, bracket_side, bfr): \n    return bfr[bracket.begin:bracket.end].islower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def replaceWith(replStr): \n    return functools.partial(next, itertools.repeat([replStr]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _float_from_json(value, field): \n    if _not_null(value, field): \n      return float(value)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def removePixelTableFromPixelTable(pixelDictionaryToBeRemoved, pixelDictionaryToBeRemovedFrom): \n    removeListFromDictionary(pixelDictionaryToBeRemovedFrom, pixelDictionaryToBeRemoved.keys())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return SkeinforgeRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def outcome(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return CommentRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_interface(iface): \n    return _interface_configs().get(iface, {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_channel_access(channel=14, read_mode='non_volatile', **kwargs): \n    with _IpmiCommand(**kwargs) as s: \n      return s.get_channel_access(channel)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_all_regions(): \n    for window in sublime.windows(): \n      for view in window.views(): \n         for region_key in view.settings().get('bracket_highlighter.regions', []): \n            view.erase_regions(region_key) \n         view.settings().set('bracket_highlighter.locations', {'open': {}, 'close': {}, 'unmatched': {}, 'icon': {}})",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def push_notification_enabled(): \n    return PushNotificationConfig.is_enabled()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_old_jobs(): \n    if (__opts__.get('keep_jobs', False) and (int(__opts__.get('keep_jobs', 0)) > 0)): \n      try: \n         with _get_serv() as cur: \n            sql = 'select   date_sub(now(),   interval   {0}   hour)   as   stamp;'.format(__opts__['keep_jobs']) \n            cur.execute(sql) \n            rows = cur.fetchall() \n            stamp = rows[0][0] \n         if __opts__.get('archive_jobs', False): \n            _archive_jobs(stamp) \n         else: \n            _purge_jobs(stamp) \n      except MySQLdb.Error as e: \n         log.error('Mysql   returner   was   unable   to   get   timestamp   for   purge/archive   of   jobs') \n         log.error(str(e)) \n         raise salt.exceptions.Salt(str(e))",
        "line_count": 15,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_rect_ymin(data): \n    return min(data[0][1], data[1][1], data[2][1], data[3][1])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _log2_floor_filter(value): \n    return int(math.log(value, 2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_password_manager(self): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def threshold_percentile(image, selem, out=None, mask=None, shift_x=False, shift_y=False, p0=0): \n    return _apply(percentile_cy._threshold, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y, p0=p0, p1=0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_errors_patch(result): \n    return make_instancemethod(TextTestResult.printErrors, result)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_dependencies(): \n    return config.check_driver_dependencies(__virtualname__, {'libcloud': HAS_LIBCLOUD})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_event_transaction_id(): \n    return get_cache('event_transaction').get('id', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rotate_naive(lst, dist): \n    lst[:] = (lst[dist:len(lst)] + lst[0:dist])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_pad(buf): \n    if ((len(buf) > 0) and ((len(buf) % 16) == 0)): \n      encrypted_key = buf[:5] \n      key = xor(encrypted_key, bytes([19, 51, 123, 238, 240])) \n      dec = xor(buf, key) \n      return dec[5:20]",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _interact(): \n    AE.AEInteractWithUser(50000000)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_dependencies(): \n    if (not app_is_installed('treebeard')): \n      raise ImproperlyConfigured('django   CMS   requires   django-treebeard.   Please   install   it   and   add   \"treebeard\"   to   INSTALLED_APPS.')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def n(name): \n    return objc.sel_registerName(_utf8(name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getAroundsFromLoop(loop, radius, thresholdRatio=0.9): \n    return getAroundsFromPoints(getPointsFromLoop(loop, radius, thresholdRatio), radius)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('timezone.get_zone' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FindQualifiedTargets(target, qualified_list): \n    return [t for t in qualified_list if (ParseQualifiedTarget(t)[1] == target)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_ip_address(string_ip): \n    return (is_ipv4_address(string_ip) or is_ipv6_address(string_ip))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def quota_usage_refresh(context, resources, keys, until_refresh, max_age, project_id=None, user_id=None): \n    return IMPL.quota_usage_refresh(context, resources, keys, until_refresh, max_age, project_id=project_id, user_id=user_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flocker_keypair(): \n    return ComparableKeyPair(keypair=KeyPair.generate(crypto.TYPE_RSA, size=4096))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def row_sort(cell): \n    return column_index_from_string(cell.column)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def XMLescape(txt): \n    return txt.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('\"', '&quot;').replace(u'\\x0c', '').replace(u'\\x1b', '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cleanup(): \n    for c in _CLASSES: \n      if (c == 'files'): \n         _db_content[c] = [] \n      else: \n         _db_content[c] = {}",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def process_postpay_callback(params, **kwargs): \n    return PROCESSOR_MODULE.process_postpay_callback(params, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_smote_sk_estimator(): \n    check_estimator(SMOTE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _iterate_over_sub_policies(sub_policies, check_statement_func): \n    for sub_policy_name in sub_policies: \n      sub_policy = sub_policies[sub_policy_name] \n      _iterate_over_statements(sub_policy, check_statement_func)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def proxyEndpoint(wrappedEndpoint): \n    return _WrapperServerEndpoint(wrappedEndpoint, HAProxyWrappingFactory)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeExtension(*args, **kwargs): \n    return TasklistExtension(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _can_support_reuse_db(connection): \n    return (not (connection.creation._get_test_db_name() == u':memory:'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_nested_yield(): \n    (yield (yield (yield 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_slotname(slot, name, host=None, admin_username=None, admin_password=None): \n    return __execute_cmd('config   -g   cfgServerInfo   -o   cfgServerName   -i   {0}   {1}'.format(slot, name), host=host, admin_username=admin_username, admin_password=admin_password)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_datetime_equal(dt1, dt2, allowance=500): \n    assert (abs((dt1 - dt2)) < dt.timedelta(milliseconds=allowance))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fake_elsewhere(db, participant, platform): \n    insert_fake_data(db, 'elsewhere', platform=platform, user_id=fake_text_id(), user_name=participant.username, participant=participant.username, extra_info=None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def red(text, attrib=None): \n    return colorize(text, 'red', attrib)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def initIterate(container, generator): \n    return container(generator())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Name(name, prefix=None): \n    return Leaf(token.NAME, name, prefix=prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_set_superuser_password(tmpdir): \n    with tmpdir.as_cwd(): \n      tmpdir.join('genconf').ensure(dir=True) \n      make_default_config_if_needed('genconf/config.yaml') \n      assert ('superuser_password_hash' not in Config('genconf/config.yaml').config) \n      subprocess.check_call(['dcos_installer', '--set-superuser-password', 'foo'], cwd=str(tmpdir)) \n      config = Config('genconf/config.yaml') \n      assert passlib.hash.sha512_crypt.verify('foo', config['superuser_password_hash'])",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def group_creating_from_src(group_id=None, group_snapshot_id=None): \n    return IMPL.group_creating_from_src(group_id, group_snapshot_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def recurrence_term(c, f): \n    return sum(((c[i] * f.subs(n, (n + i))) for i in range(len(c))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def resource_defaults_to(name, default, value, extra_args=None, cibname=None): \n    return _item_present(name=name, item='resource', item_id='{0}={1}'.format(default, value), item_type=None, show='defaults', create='defaults', extra_args=extra_args, cibname=cibname)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_named_colors_mapping(): \n    return _colors_full_map",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def release_ownership_of_exploration(committer_id, exploration_id): \n    _release_ownership_of_activity(committer_id, exploration_id, feconf.ACTIVITY_TYPE_EXPLORATION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _emulate(func, *args, **kwargs): \n    with raise_on_meta_error(funcname(func)): \n      return func(*_extract_meta(args, True), **_extract_meta(kwargs, True))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def process_twitter_outbox(): \n    msg.process_outbox(contact_method='TWITTER')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_disabled(): \n    return __salt__['grains.get']('state_runs_disabled')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def permute(arr, permutation): \n    return array([arr[i] for i in permutation])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def user_redirects(user): \n    return Document.objects.filter(revisions__creator=user).filter(html__startswith='<p>REDIRECT   <a').distinct()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def literal_column(text, type_=None): \n    return ColumnClause(text, type_=type_, is_literal=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onboarding_complete(request): \n    return (setup_wizard_complete() and setup_blocks_complete(request))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def diagonal(a, offset=0, axis1=0, axis2=1): \n    return a.diagonal(offset, axis1, axis2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def token_hex(nbytes=None): \n    return binascii.hexlify(token_bytes(nbytes)).decode('ascii')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list(): \n    return [stem for (stem, extension) in [os.path.splitext(filename) for filename in os.listdir(_dirname)] if ((extension == '.dat') and (stem != 'root'))]",
        "line_count": 1,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def set_network(ip, netmask, gateway, host=None, admin_username=None, admin_password=None): \n    return __execute_cmd('setniccfg   -s   {0}   {1}   {2}'.format(ip, netmask, gateway, host=host, admin_username=admin_username, admin_password=admin_password))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connect_consumer(message, *args, **kwargs): \n    message.reply_channel.send({u'accept': True})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLBELTHOLD(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLBELTHOLD)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dummy_func(x, shape): \n    return np.ones(shape)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def local_repo_clean(): \n    with lcd(LOGDIR): \n      local('rm   le.tar.gz')",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def NamesOfDefinedFlags(): \n    return ['tmod_bar_x', 'tmod_bar_y', 'tmod_bar_z', 'tmod_bar_t', 'tmod_bar_u', 'tmod_bar_v']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_uid(): \n    return uuid4().int",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _extra_config(user_defined_config, base_dir): \n    for (root_dir, _, files) in os.walk(base_dir): \n      for name in files: \n         if name.endswith(('.yml', '.yaml')): \n            with open(os.path.join(root_dir, name), 'rb') as f: \n               du.merge_dict(user_defined_config, (yaml.safe_load(f.read()) or {})) \n               logger.debug('Merged   overrides   from   file   {}'.format(name))",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def sub_irc(ircmatch): \n    return IRC_COLOR_MAP.get(ircmatch.group(), '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def keep_lazy_text(func): \n    return keep_lazy(str)(func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lock(): \n    return windll.user32.LockWorkStation()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log(*a, **kw): \n    with log_lock: \n      print(file=sys.stderr, *a, **kw)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def symmetric(n): \n    for perm in variations(list(range(n)), n): \n      (yield Permutation(perm))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def atomic_copy(src, dst): \n    with temporary_file(root_dir=os.path.dirname(dst)) as tmp_dst: \n      shutil.copyfile(src, tmp_dst.name) \n      os.chmod(tmp_dst.name, os.stat(src).st_mode) \n      os.rename(tmp_dst.name, dst)",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_node_attributes(G, name): \n    return {n: d[name] for (n, d) in G.node.items() if (name in d)}",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def site(request): \n    return {'site': Site.objects.get(id=settings.SITE_ID)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_installed_apps(): \n    return set(settings.INSTALLED_APPS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_descriptor_js(output_root): \n    return _write_js(output_root, _list_descriptors())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _process_worker(call_queue, result_queue, shutdown): \n    while True: \n      try: \n         call_item = call_queue.get(block=True, timeout=0.1) \n      except queue.Empty: \n         if shutdown.is_set(): \n            return \n      else: \n         try: \n            r = call_item.fn(*call_item.args, **call_item.kwargs) \n         except BaseException: \n            e = sys.exc_info()[1] \n            result_queue.put(_ResultItem(call_item.work_id, exception=e)) \n         else: \n            result_queue.put(_ResultItem(call_item.work_id, result=r))",
        "line_count": 14,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def get_starting_chunk(filename, length=1024): \n    with open(filename, 'rb') as f: \n      chunk = f.read(length) \n      return chunk",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hello2(): \n    return T('Hello   World')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCubicPathByBeginEnd(begin, controlPoints, end, xmlElement): \n    return svg_reader.getCubicPoints(begin, controlPoints, end, lineation.getNumberOfBezierPoints(begin, end, xmlElement))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rename(config, unused_plugins): \n    cert_manager.rename_lineage(config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_one_qubit_commutators(): \n    for g1 in (IdentityGate, X, Y, Z, H, T, S): \n      for g2 in (IdentityGate, X, Y, Z, H, T, S): \n         e = Commutator(g1(0), g2(0)) \n         a = matrix_to_zero(represent(e, nqubits=1, format='sympy')) \n         b = matrix_to_zero(represent(e.doit(), nqubits=1, format='sympy')) \n         assert (a == b) \n         e = Commutator(g1(0), g2(1)) \n         assert (e.doit() == 0)",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_code_object(obj): \n    return getattr(obj, '__code__', getattr(obj, 'func_code', None))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deactivate(): \n    if hasattr(_active, 'value'): \n      del _active.value",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _tmp_access_rule(method, ip=None, ttl=None, port=None, direction='in', port_origin='d', ip_origin='d', comment=''): \n    if _status_csf(): \n      if (ip is None): \n         return {'error': 'You   must   supply   an   ip   address   or   CIDR.'} \n      if (ttl is None): \n         return {'error': 'You   must   supply   a   ttl.'} \n      args = _build_tmp_access_args(method, ip, ttl, port, direction, comment) \n      return __csf_cmd(args)",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_sans_from_cert(cert, typ=OpenSSL.crypto.FILETYPE_PEM): \n    return _get_sans_from_cert_or_req(cert, OpenSSL.crypto.load_certificate, typ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pollProcess(process, suppress_errors=False): \n    while True: \n      dataToStdout('.') \n      time.sleep(1) \n      returncode = process.poll() \n      if (returncode is not None): \n         if (not suppress_errors): \n            if (returncode == 0): \n               dataToStdout('   done\\n') \n            elif (returncode < 0): \n               dataToStdout(('   process   terminated   by   signal   %d\\n' % returncode)) \n            elif (returncode > 0): \n               dataToStdout(('   quit   unexpectedly   with   return   code   %d\\n' % returncode)) \n         break",
        "line_count": 13,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def _to_stublist(degree_sequence): \n    return list(chaini((([n] * d) for (n, d) in enumerate(degree_sequence))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def notify(_context, message): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def equalize(image, selem, out=None, mask=None, shift_x=False, shift_y=False): \n    return _apply_scalar_per_pixel(generic_cy._equalize, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_tag(): \n    return sys.implementation.cache_tag",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def distance(feasible_ind, original_ind): \n    return sum((((f - o) ** 2) for (f, o) in zip(feasible_ind, original_ind)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def generate_ratings(addon, num): \n    for n in range(1, (num + 1)): \n      username = 'testuser-{s}'.format(s=get_random_string()) \n      email = '{username}@example.com'.format(username=username) \n      (user, _created) = UserProfile.objects.get_or_create(username=email, email=email, defaults={'display_name': email}) \n      Review.objects.create(addon=addon, user=user, rating=random.randrange(0, 6), title='Test   Review   {n}'.format(n=n), body='review   text')",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def trustPage(request): \n    return direct_to_template(request, 'server/trust.html', {'trust_handler_url': getViewURL(request, processTrustResult)})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shellQuote(value): \n    return (\"'%s'\" % value.replace(\"'\", '\\'\"\\'\"\\''))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_get_all_by_project(context, project_id): \n    return IMPL.floating_ip_get_all_by_project(context, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _root_broyden1_doc(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_topography(info, layout=None, on_pick=None, fig=None, fig_facecolor='k', axis_facecolor='k', axis_spinecolor='k', layout_scale=None): \n    return _iter_topography(info, layout, on_pick, fig, fig_facecolor, axis_facecolor, axis_spinecolor, layout_scale)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_loader_cls(loader): \n    return symbol_by_name(loader, LOADER_ALIASES, imp=import_from_cwd)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def simulate_delete(app, path, **kwargs): \n    return simulate_request(app, 'DELETE', path, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user(name, password, superuser=False, createdb=False, createrole=False, inherit=True, login=True, connection_limit=None, encrypted_password=False): \n    if (not user_exists(name)): \n      create_user(name, password, superuser, createdb, createrole, inherit, login, connection_limit, encrypted_password)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def assert_events_equal(expected, actual): \n    assert_event_matches(expected, actual, tolerate=EventMatchTolerates.strict())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Date(year, month, day): \n    return dateconverter.Date(year, month, day)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_get(context, instance_id): \n    return IMPL.instance_get(context, instance_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_domains(): \n    with _get_xapi_session() as xapi: \n      hosts = xapi.VM.get_all() \n      ret = [] \n      for _host in hosts: \n         if (xapi.VM.get_record(_host)['is_control_domain'] is False): \n            ret.append(xapi.VM.get_name_label(_host)) \n      return ret",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _download_dataset(dataset_dir): \n    for filename in [_TRAIN_DATA_FILENAME, _TRAIN_LABELS_FILENAME, _TEST_DATA_FILENAME, _TEST_LABELS_FILENAME]: \n      filepath = os.path.join(dataset_dir, filename) \n      if (not os.path.exists(filepath)): \n         print(('Downloading   file   %s...' % filename)) \n         def _progress(count, block_size, total_size): \n            sys.stdout.write(('\\r>>   Downloading   %.1f%%' % ((float((count * block_size)) / float(total_size)) * 100.0))) \n            sys.stdout.flush() \n         (filepath, _) = urllib.request.urlretrieve((_DATA_URL + filename), filepath, _progress) \n         print() \n         with tf.gfile.GFile(filepath) as f: \n            size = f.Size() \n         print('Successfully   downloaded', filename, size, 'bytes.')",
        "line_count": 12,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def instantiate(name, *args, **kwargs): \n    return symbol_by_name(name)(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ensure_scope(level, global_dict=None, local_dict=None, resolvers=(), target=None, **kwargs): \n    return Scope((level + 1), global_dict=global_dict, local_dict=local_dict, resolvers=resolvers, target=target)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in_importlib(frame): \n    return (frame.f_code.co_filename == '<frozen   importlib._bootstrap>')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sigmoid(x): \n    return theano.tensor.nnet.sigmoid(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rackconnect(vm_): \n    return config.get_cloud_config_value('rackconnect', vm_, __opts__, default='False', search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def at_server_reload_stop(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isReadable(poller): \n    for fdmask in poller.poll(0): \n      mask = fdmask[1] \n      if (mask & POLLIN): \n         return True",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def shows_by_exact_name(normalized_name, session=None): \n    return session.query(Series).filter((Series._name_normalized == normalized_name)).order_by(func.char_length(Series.name)).all()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_parser_help(p): \n    p.add_argument(u'-h', u'--help', action=argparse._HelpAction, help=u'Show   this   help   message   and   exit.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def idz_sfrm(l, n, w, x): \n    return _id.idz_sfrm(l, n, w, x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookupMailRename(name, timeout=None): \n    return getResolver().lookupMailRename(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_monitor(): \n    for (name, function) in globals().items(): \n      if (not inspect.isfunction(function)): \n         continue \n      args = inspect.getargspec(function)[0] \n      if (args and name.startswith('monitor')): \n         exec ('pep8.%s   =   %s' % (name, name))",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_wsgi_application(): \n    return WSGIHandler()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def patch_user_admin(): \n    if (not getattr(UserAdmin, '_monkeyed', False)): \n      UserAdmin._monkeyed = True \n      UserAdmin.actions = [_activate_users, _deactivate_users]",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def qos_specs_disassociate_all(context, qos_specs_id): \n    return IMPL.qos_specs_disassociate_all(context, qos_specs_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_script_choices(choices): \n    return ([(script, get_script_name(script)) for script in choices] + [('', '')])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def datetime_from_string(s): \n    return datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%S.%f')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_timedelta_conversion_factor(src_unit, dest_unit): \n    return _get_conversion_multiplier(DATETIME_UNITS[src_unit], DATETIME_UNITS[dest_unit])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def allow(ip, port=None, proto='tcp', direction='in', port_origin='d', ip_origin='s', ttl=None, comment=''): \n    return _access_rule('allow', ip, port=port, proto=proto, direction=direction, port_origin=port_origin, ip_origin=ip_origin, comment=comment)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_spark_step_type(step_type): \n    return (step_type.split('_')[0] == 'spark')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def waypoint_upload(): \n    return dict()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fix_namespace(raw): \n    return NULL_NAMESPACE_REGEX.sub(u'\\\\1', raw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_expression_uminus(t): \n    t[0] = (- t[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _lowess_update_nn(x, cur_nn, i): \n    while True: \n      if (cur_nn[1] < x.size): \n         left_dist = (x[i] - x[cur_nn[0]]) \n         new_right_dist = (x[cur_nn[1]] - x[i]) \n         if (new_right_dist < left_dist): \n            cur_nn[0] = (cur_nn[0] + 1) \n            cur_nn[1] = (cur_nn[1] + 1) \n         else: \n            break \n      else: \n         break",
        "line_count": 11,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def serverFromString(reactor, description): \n    return _serverFromStringLegacy(reactor, description, _NO_DEFAULT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getInteriorOverhangAngle(elementNode): \n    return getCascadeFloatWithoutSelf(30.0, elementNode, 'interiorOverhangAngle')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def localdate(value=None, timezone=None): \n    return localtime(value, timezone).date()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_external_ip(host, port): \n    while True: \n      try: \n         with LOG_GET_EXTERNAL_IP(host=unicode(host), port=port) as ctx: \n            with closing(socket()) as sock: \n               sock.connect((host, port)) \n               result = unicode(sock.getsockname()[0], 'ascii') \n               ctx.addSuccessFields(local_ip=result) \n               return result \n      except: \n         sleep(0.1)",
        "line_count": 10,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return CylinderDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def all_weighers(): \n    return HostWeightHandler().get_all_classes()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pytest_addoption(parser): \n    parser.addoption('--gae-sdk')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decompress(data): \n    with GzipFile(fileobj=io.BytesIO(data)) as f: \n      return f.read()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_script_prefix(): \n    return getattr(_prefixes, u'value', u'/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lock_key(): \n    return (config.KEY_PREFIX + config.LOCK_SUFFIX)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addXMLFromVertexes(depth, output, vertexes): \n    for vertexIndex in xrange(len(vertexes)): \n      vertex = vertexes[vertexIndex] \n      addXMLFromXYZ((depth + 1), vertexIndex, output, vertex.x, vertex.y, vertex.z)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sdm_LT(f): \n    return f[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pt(value): \n    return dpi2px(value, 'pt')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def income_source(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sh(cmd): \n    subprocess.check_call(cmd, shell=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_current_user_super_admin(): \n    return users.is_current_user_admin()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_template_info(filename, root_dirs): \n    return Template(filename, [filename[(len(d) + 1):] for d in root_dirs if filename.startswith(d)])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def delete_bridge_dev(dev): \n    if device_exists(dev): \n      try: \n         utils.execute('ip', 'link', 'set', dev, 'down', run_as_root=True) \n         utils.execute('brctl', 'delbr', dev, run_as_root=True) \n      except processutils.ProcessExecutionError: \n         with excutils.save_and_reraise_exception(): \n            LOG.error(_LE(\"Failed   removing   bridge   device:   '%s'\"), dev)",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_tests(**filter_data): \n    return rpc_utils.prepare_for_serialization(models.Test.list_objects(filter_data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def untar(file, dir): \n    _extractall(file, dir)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def keyname(name, i, okey): \n    return ((name, i) + tuple((k for k in okey if (k is not None))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def schedule_probes(probes, test=False, commit=True): \n    return __salt__['net.load_template']('schedule_probes', probes=probes, test=test, commit=commit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _unquote_filename(filename): \n    return urllib.unquote(filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_help(file=None): \n    return options.print_help(file)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resource_create(resource_id, resource_type, resource_options=None, cibfile=None): \n    return item_create(item='resource', item_id=resource_id, item_type=resource_type, extra_args=resource_options, cibfile=cibfile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_type_get_all(context, inactive=False, filters=None, marker=None, limit=None, sort_keys=None, sort_dirs=None, offset=None, list_result=False): \n    return IMPL.volume_type_get_all(context, inactive, filters, marker=marker, limit=limit, sort_keys=sort_keys, sort_dirs=sort_dirs, offset=offset, list_result=list_result)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prod(x, axis=None, keepdims=False): \n    return T.prod(x, axis=axis, keepdims=keepdims)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getBBWidth(bb): \n    return ((bb[2] - bb[0]) + 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reserve_for_production(production_order): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subscribe_filter_to_signals(settings): \n    for sig in settings.get('I18N_FILTER_SIGNALS', []): \n      sig.connect(filter_contents_translations)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def retcode(name, cmd, no_start=False, preserve_state=True, stdin=None, python_shell=True, output_loglevel='debug', use_vt=False, path=None, ignore_retcode=False, chroot_fallback=False, keep_env='http_proxy,https_proxy,no_proxy'): \n    return _run(name, cmd, output='retcode', path=path, no_start=no_start, preserve_state=preserve_state, stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, use_vt=use_vt, ignore_retcode=ignore_retcode, chroot_fallback=chroot_fallback, keep_env=keep_env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_mime(id, mimetype): \n    MIME[id.upper()] = mimetype",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_log_keys(common_config): \n    return dict(((k, v) for (k, v) in common_config.items() if (k in LOG_KEYS)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def missing(name): \n    return (not available(name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DALS(s): \n    return textwrap.dedent(s).lstrip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_service_type(f): \n    return getattr(f, 'service_type', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ShellQuote(value): \n    return pipes.quote(SmartUnicode(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_config(): \n    _ip.magic('config')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _RequireCryptoOrDie(): \n    if (not HAS_CRYPTO): \n      raise CryptoUnavailableError('No   crypto   library   available')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cross_covariance(y, z): \n    return CrossCovariance()(y, z)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dump(blocks, _file): \n    return _file.write(dumps(blocks))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_url(url): \n    return _cache.has_url(url)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timedelta_as_minutes(td): \n    return (timedelta_as_seconds(td) / 60)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return ParamModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_cleaned(mailchimp, list_id): \n    return get_members(mailchimp, list_id, 'cleaned')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_pointer(ltyp): \n    return isinstance(ltyp, ir.PointerType)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def state_path_def(*args): \n    return os.path.join('$state_path', *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def scala_config(append=None, **kwargs): \n    blade_config.update_config('scala_config', append, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_file_name(fileName): \n    return os.path.splitext(fileName)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_port(port): \n    return (0 <= int(port) <= 65535)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_team_member(name, team_name, profile='github'): \n    return (name.lower() in list_team_members(team_name, profile=profile))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _CheckNumberFoundAccuracy(number_found_accuracy): \n    return _CheckInteger(number_found_accuracy, 'number_found_accuracy', zero_ok=False, upper_bound=MAXIMUM_NUMBER_FOUND_ACCURACY)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_emergency_number(number, region_code): \n    return _matches_emergency_number_helper(number, region_code, False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qos_specs_item_delete(context, qos_specs_id, key): \n    return IMPL.qos_specs_item_delete(context, qos_specs_id, key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def colors(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FiniteRV(name, density): \n    return rv(name, FiniteDistributionHandmade, density)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_group_id(*args, **kargs): \n    raise _stub_error",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_pidfile(pidfile): \n    return os.path.isfile(pidfile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return StretchRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _connect_volume(*args, **kwargs): \n    return {'path': u'/dev/disk/by-path/xxxx', 'type': 'block'}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_all_config(): \n    return BACKEND.get_all_config()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _PropertyName(proto_field_name): \n    return proto_field_name",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_docx(name): \n    return absjoin(thisdir, 'test_files', ('%s.docx' % name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flush(): \n    logs_buffer().flush()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def zipp(params, tparams): \n    for (kk, vv) in params.iteritems(): \n      tparams[kk].set_value(vv)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def startViewer(filename): \n    if filename: \n      try: \n         os.startfile(filename) \n      except: \n         os.system(('open   \"%s\"' % filename))",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def ssl_protocols_labels(): \n    return _SSL_PROTOCOLS_LABELS",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random_rotation_matrix(rand=None): \n    return quaternion_matrix(random_quaternion(rand))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_orm_value(obj): \n    return IMPL.is_orm_value(obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cuda_error(): \n    return driver.driver.initialization_error",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_jpeg(h, f): \n    if ((h[6:10] in ('JFIF', 'Exif')) or ((h[:2] == '\\xff\\xd8') and (('JFIF' in h[:32]) or ('8BIM' in h[:32])))): \n      return 'jpeg'",
        "line_count": 2,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def _quote_filename(filename): \n    return urllib.quote(filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ISNULL(x): \n    return (x == None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_pipeline(*steps): \n    return Pipeline(pipeline._name_estimators(steps))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def top_down(rule, fns=basic_fns): \n    return chain(rule, (lambda expr: sall(top_down(rule, fns), fns)(expr)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reload(): \n    if (not _status_apf()): \n      return __apf_cmd('-r')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_bar(**props): \n    return {'bar': props['mplobj'], 'x0': get_rect_xmin(props['data']), 'y0': get_rect_ymin(props['data']), 'x1': get_rect_xmax(props['data']), 'y1': get_rect_ymax(props['data']), 'alpha': props['style']['alpha'], 'edgecolor': props['style']['edgecolor'], 'facecolor': props['style']['facecolor'], 'edgewidth': props['style']['edgewidth'], 'dasharray': props['style']['dasharray'], 'zorder': props['style']['zorder']}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def binary_crossentropy(y_pred, y_true): \n    with tf.name_scope('BinaryCrossentropy'): \n      return tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(y_pred, y_true))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deserialize_usage_key(usage_key_string, course_key): \n    return UsageKey.from_string(usage_key_string).replace(course_key=course_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getsize(filename): \n    return os.stat(filename).st_size",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_bracket_region(obj): \n    return isinstance(obj, BracketRegion)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_os_name(): \n    return os.uname()[0].lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLHANGINGMAN(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLHANGINGMAN)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def OR(domains): \n    return combine(OR_OPERATOR, FALSE_DOMAIN, TRUE_DOMAIN, domains)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_folders(): \n    for (name, folder) in PATHS.items(): \n      if os.path.exists(folder): \n         continue \n      try: \n         os.makedirs(folder) \n      except OSError: \n         pass",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def isList(l): \n    return ((hasattr(l, '__iter__') and (not isString(l))) or (type(l) in (types.ListType, types.TupleType)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def format_iso8601(obj): \n    return obj.strftime('%Y-%m-%dT%H:%M:%SZ')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ping(*args, **kw): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def educateSingleBackticks(s): \n    return s.replace('`', '&#8216;').replace(\"'\", '&#8217;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _value_check(condition, message): \n    if (condition == False): \n      raise ValueError(message)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def introspect(rebulk, context=None): \n    return Introspection(rebulk, context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def extract_command(text): \n    return (text.split()[0].split('@')[0][1:] if is_command(text) else None)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getPlaneDot(vec3First, vec3Second): \n    return ((vec3First.x * vec3Second.x) + (vec3First.y * vec3Second.y))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cgsnapshot_creating_from_src(): \n    return sql.exists().where(and_((models.Cgsnapshot.consistencygroup_id == models.ConsistencyGroup.id), (~ models.Cgsnapshot.deleted), (models.Cgsnapshot.status == 'creating')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text, combRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), combRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_preferred_environment_encoding(): \n    return (locale.getpreferredencoding() or u'utf-8')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_test_content_type(obj): \n    return u'x'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_status_update_request(request_data): \n    return any((('status' in update) for update in request_data))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def safe_file_dump(filename, payload): \n    with safe_open(filename, u'wb') as f: \n      f.write(payload)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RegisterCLSID(clsid, pythonClass): \n    mapCLSIDToClass[str(clsid)] = pythonClass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_assignment_expression_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def img_as_bool(image, force_copy=False): \n    return convert(image, np.bool_, force_copy)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_get_all_by_project(context, project_id): \n    return IMPL.snapshot_get_all_by_project(context, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bernoulli_samples(p): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_timeit_quiet(): \n    with tt.AssertNotPrints('loops'): \n      _ip.run_cell('%timeit   -n1   -r1   -q   1')",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('monit' if ('monit.summary' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def isNegative(phrase): \n    return bool(re.search(\"\\\\b(no(t)?|don\\\\'t|stop|end)\\\\b\", phrase, re.IGNORECASE))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def increment_lineno(node, n=1): \n    for node in zip((node,), walk(node)): \n      if ('lineno' in node._attributes): \n         node.lineno = (getattr(node, 'lineno', 0) + n)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def load_MNIST_labels(filename): \n    with open(filename, 'r') as f: \n      magic = np.fromfile(f, dtype=np.dtype('>i4'), count=1) \n      num_labels = np.fromfile(f, dtype=np.dtype('>i4'), count=1) \n      labels = np.fromfile(f, dtype=np.ubyte) \n      f.close() \n      return labels",
        "line_count": 6,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ae(actual, predicted): \n    return np.abs((np.array(actual) - np.array(predicted)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(data=None): \n    return MD2Hash().new(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compile_command(source, filename='<input>', symbol='single'): \n    return _maybe_compile(_compile, source, filename, symbol)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def py_default(type_name): \n    return {'double': '123.0', 'long': '123', 'integer': '123', 'string': \"'string'\", 'blob': \"b'bytes'\", 'boolean': 'True|False', 'list': '[...]', 'map': '{...}', 'structure': '{...}', 'timestamp': 'datetime(2015,   1,   1)'}.get(type_name, '...')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def HTTPS(port=443, **kwargs): \n    return rule(port, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_(key, value, service=None, profile=None): \n    return query(key, value, service, profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_rgb(h, f): \n    if (h[:2] == '\\x01\\xda'): \n      return 'rgb'",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _is_inline_definition(arg): \n    return (isinstance(arg, dict) and (len(arg) == 1) and isinstance(next(six.itervalues(arg)), list))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def quota_class_destroy_all_by_name(context, class_name): \n    return IMPL.quota_class_destroy_all_by_name(context, class_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_production_filename(filename): \n    return (('test' not in filename) and ('docs' not in filename))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def create_feed_and_todo(): \n    add_info_comment(**{u'subject': _(u'ERPNext   Setup   Complete!')})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def process_input(input, logfile, log_timestamp_format=None, alert_hooks=()): \n    while True: \n      line = input.readline() \n      if (len(line) == 0): \n         write_logline(logfile, TERM_MSG, log_timestamp_format) \n         break \n      if (line == '\\n'): \n         continue \n      write_logline(logfile, line, log_timestamp_format) \n      for (regex, callback) in alert_hooks: \n         match = re.match(regex, line.strip()) \n         if match: \n            callback(*match.groups())",
        "line_count": 12,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def addXIntersectionsFromLoopForTable(loop, xIntersectionsTable, width): \n    for pointIndex in xrange(len(loop)): \n      pointBegin = loop[pointIndex] \n      pointEnd = loop[((pointIndex + 1) % len(loop))] \n      if (pointBegin.imag > pointEnd.imag): \n         pointOriginal = pointBegin \n         pointBegin = pointEnd \n         pointEnd = pointOriginal \n      fillBegin = int(math.ceil((pointBegin.imag / width))) \n      fillEnd = int(math.ceil((pointEnd.imag / width))) \n      if (fillEnd > fillBegin): \n         secondMinusFirstComplex = (pointEnd - pointBegin) \n         secondMinusFirstImaginaryOverReal = (secondMinusFirstComplex.real / secondMinusFirstComplex.imag) \n         beginRealMinusImaginary = (pointBegin.real - (pointBegin.imag * secondMinusFirstImaginaryOverReal)) \n         for fillLine in xrange(fillBegin, fillEnd): \n            y = (fillLine * width) \n            xIntersection = ((y * secondMinusFirstImaginaryOverReal) + beginRealMinusImaginary) \n            addElementToListTable(xIntersection, fillLine, xIntersectionsTable)",
        "line_count": 17,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def RenderTokenApprovedTemplate(): \n    return TOKEN_APPROVED_TEMPLATE",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_known_settings(): \n    return _KNOWN_SETTINGS.values()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_statement_assign(p): \n    names[p[1]] = p[3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cross_entropy(output, target, name='cross_entropy_loss'): \n    with tf.name_scope(name): \n      return tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(output, target))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_shim_context(event): \n    if ('context' in event): \n      context = event['context'] \n      context_fields_to_remove = set(CONTEXT_FIELDS_TO_INCLUDE) \n      context_fields_to_remove.add('client_id') \n      for field in context_fields_to_remove: \n         if (field in context): \n            del context[field]",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def setup_platform(hass, config, add_devices_callback, discovery_info=None): \n    add_devices_callback((VeraThermostat(device, VERA_CONTROLLER) for device in VERA_DEVICES['climate']))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def init(mpstate): \n    return TestModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _lazy_colorama_init(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tamper(payload, **kwargs): \n    return (payload.replace('UNION   ALL   SELECT', 'UNION   SELECT') if payload else payload)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def qos_specs_disassociate(context, qos_specs_id, type_id): \n    return IMPL.qos_specs_disassociate(context, qos_specs_id, type_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def slash_url_suffix(url, suffix): \n    return ((url.endswith('/') and ('%s/' % suffix)) or ('/%s' % suffix))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def aggregate_host_get_by_metadata_key(context, key): \n    return IMPL.aggregate_host_get_by_metadata_key(context, key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sine_transform(f, x, k, **hints): \n    return SineTransform(f, x, k).doit(**hints)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def task_log_end_task(context, task_name, period_beginning, period_ending, host, errors, message=None): \n    return IMPL.task_log_end_task(context, task_name, period_beginning, period_ending, host, errors, message)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load(path): \n    return pickle.loads(bz2.decompress(open(path).read()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape(text): \n    return mark_safe(force_text(text).replace(u'&', u'&amp;').replace(u'<', u'&lt;').replace(u'>', u'&gt;').replace(u'\"', u'&quot;').replace(u\"'\", u'&#39;'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def directories(path_list, use_sudo=False, owner='', group='', mode=''): \n    for path in path_list: \n      directory(path, use_sudo, owner, group, mode)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def vb_machinestate_to_description(machinestate): \n    return vb_machinestate_to_tuple(machinestate)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def regular_variable_name(var): \n    return var.translate(string.maketrans(',-/.+*', '______'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_port_from_host(host): \n    return host.split(':')[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_match_strings(matchDict, value): \n    for key in matchDict: \n      v = matchDict[key] \n      if (not isinstance(v, str)): \n         continue \n      l = len(value) \n      if (v[:l].lower() == value): \n         matchDict['match_type'] = key \n         matchDict['match_string'] = v[:l] \n         next_string = v[l:] \n         if next_string: \n            matchDict['next_string'] = next_string \n         break \n      elif ((key == 'addr') and (value in v.lower())): \n         matchDict['match_type'] = key \n         (pre_string, next_string) = v.lower().split(value, 1) \n         if pre_string: \n            matchDict['pre_string'] = v[:len(pre_string)] \n         if next_string: \n            matchDict['next_string'] = v[(len(pre_string) + l):] \n         matchDict['match_string'] = v[len(pre_string):][:l] \n         break",
        "line_count": 21,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def educate_ellipses(s): \n    return s.replace('...', '&#8230;').replace('.   .   .', '&#8230;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def purge(name=None, pkgs=None, **kwargs): \n    return remove(name=name, pkgs=pkgs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_detached(context, volume_id, attachment_id): \n    return IMPL.volume_detached(context, volume_id, attachment_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TimeFromTicks(ticks): \n    return Time(*time.localtime(ticks)[3:6])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def insert_item_price(args): \n    if ((frappe.db.get_value(u'Price   List', args.price_list, u'currency') == args.currency) and cint(frappe.db.get_single_value(u'Stock   Settings', u'auto_insert_price_list_rate_if_missing'))): \n      if frappe.has_permission(u'Item   Price', u'write'): \n         price_list_rate = ((args.rate / args.conversion_factor) if args.get(u'conversion_factor') else args.rate) \n         item_price = frappe.get_doc({u'doctype': u'Item   Price', u'price_list': args.price_list, u'item_code': args.item_code, u'currency': args.currency, u'price_list_rate': price_list_rate}) \n         name = frappe.db.get_value(u'Item   Price', {u'item_code': args.item_code, u'price_list': args.price_list, u'currency': args.currency}, u'name') \n         if name: \n            item_price = frappe.get_doc(u'Item   Price', name) \n            item_price.price_list_rate = price_list_rate \n            item_price.save() \n            frappe.msgprint(_(u'Item   Price   updated   for   {0}   in   Price   List   {1}').format(args.item_code, args.price_list)) \n         else: \n            item_price.insert() \n            frappe.msgprint(_(u'Item   Price   added   for   {0}   in   Price   List   {1}').format(args.item_code, args.price_list))",
        "line_count": 13,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def parse_http_list(u): \n    return urllib2.parse_http_list(u)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _StringListConverter(s): \n    return [part.strip() for part in s.split(',')]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def update_user(id_, field, value): \n    return update_item('user', id_, field, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def simple_class_factory(model, attrs): \n    return model",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_addon_count(name): \n    return Addon.unfiltered.filter(name__localized_string=name).count()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user_with_role(user, role): \n    return {'id': user.id, 'username': user.username, 'email': user.email, 'role': role}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_not_match(pattern, string, msg=None): \n    assert_none(re.search(pattern, string), msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dstack(tup): \n    return concatenate([cupy.atleast_3d(m) for m in tup], 2)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def available_distributions(flocker_source_path): \n    return set((path.basename() for path in flocker_source_path.descendant(BUILD_TARGETS_SEGMENTS).children() if (path.isdir() and path.child('Dockerfile').exists())))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'multiply', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compile_info(record): \n    return {'state': XENAPI_POWER_STATE[record['power_state']], 'max_mem': (long(record['memory_static_max']) >> 10), 'mem': (long(record['memory_dynamic_max']) >> 10), 'num_cpu': record['VCPUs_max'], 'cpu_time': 0}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def first(seq): \n    return next(iter(seq))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def network_set_host(context, network_id, host_id): \n    return IMPL.network_set_host(context, network_id, host_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def docker_plugin_main(): \n    return FlockerScriptRunner(script=DockerPluginScript(), options=DockerPluginOptions()).main()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def evaluate_sents(inputs, grammar, model, assignment, trace=0): \n    return [[(syn, sem, model.evaluate((u'%s' % sem), assignment, trace=trace)) for (syn, sem) in interpretations] for interpretations in interpret_sents(inputs, grammar)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def installed_features(image=None): \n    return _get_components('Feature   Name', 'Features', 'Enabled')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_c_sync(r, name, sub): \n    return ('\\n            if   (!%(failure_var)s)   {\\n                  %(sync)s\\n                  PyObject*   old   =   PyList_GET_ITEM(storage_%(name)s,   0);\\n                  {Py_XINCREF(py_%(name)s);}\\n                  PyList_SET_ITEM(storage_%(name)s,   0,   py_%(name)s);\\n                  {Py_XDECREF(old);}\\n            }\\n            ' % dict(sync=r.type.c_sync(name, sub), name=name, **sub))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___imul__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def status_autostart(name): \n    return (not os.path.exists(os.path.join(_service_path(name), 'down')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def carmichael(n): \n    return carmichael_of_factorized(factorization(n))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_decimal_symbol(locale=LC_NUMERIC): \n    return Locale.parse(locale).number_symbols.get('decimal', u'.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def REGIONS_CHOICES_SORTED_BY_NAME(): \n    return [(v.id, v.name) for v in REGIONS_LIST_SORTED_BY_NAME()]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def volume_type_extra_specs_get(context, volume_type_id): \n    return IMPL.volume_type_extra_specs_get(context, volume_type_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render_to_image_list(image_list): \n    return render_to_js_vardef('tinyMCEImageList', image_list)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_imlist(path): \n    return [os.path.join(path, f) for f in os.listdir(path) if f.endswith('.jpg')]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def status(): \n    return _statuscmd()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ParseLogs(logs): \n    return [ParseLogEntry(line) for line in logs.split('\\n') if line]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_one_qubit_anticommutators(): \n    for g1 in (IdentityGate, X, Y, Z, H): \n      for g2 in (IdentityGate, X, Y, Z, H): \n         e = AntiCommutator(g1(0), g2(0)) \n         a = matrix_to_zero(represent(e, nqubits=1, format='sympy')) \n         b = matrix_to_zero(represent(e.doit(), nqubits=1, format='sympy')) \n         assert (a == b) \n         e = AntiCommutator(g1(0), g2(1)) \n         a = matrix_to_zero(represent(e, nqubits=2, format='sympy')) \n         b = matrix_to_zero(represent(e.doit(), nqubits=2, format='sympy')) \n         assert (a == b)",
        "line_count": 10,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def getdecoder(encoding): \n    return lookup(encoding).decode",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bin_to_nibbles(s): \n    return [hti[c] for c in encode_hex(s)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def format_distance_matrix(labels, data): \n    return format_matrix(data, labels, labels, convert_matching_names_to_zero=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apply_path_root(path_root): \n    return PathsExpansion(path_root.paths, tuple())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load(data, base_uri=None, parser=M3U8Parser): \n    return parser(base_uri).parse(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_outputs(nb): \n    for ws in nb.worksheets: \n      for cell in ws.cells: \n         if (cell.cell_type == 'code'): \n            cell.outputs = [] \n            if ('prompt_number' in cell): \n               del cell['prompt_number']",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_item_user_text(item): \n    return from_qvariant(item.data(0, Qt.UserRole), to_text_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add(reader, writer, column, start, stop, value): \n    for (i, row) in enumerate(reader): \n      if ((i >= start) and (i <= stop)): \n         row[column] = (type(value)(row[column]) + value) \n      writer.appendRecord(row)",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def prepend_dev(device_name): \n    return (device_name and ('/dev/' + strip_dev(device_name)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return VoronoiDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_file(file_path): \n    _db_content['files'].append(file_path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def EscapeMakeVariableExpansion(s): \n    return s.replace('$', '$$')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def guestbook_key(guestbook_name=None): \n    return ndb.Key('Guestbook', (guestbook_name or 'default_guestbook'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _raise_on_error(result): \n    if (result != 0): \n      raise HomeAssistantError('Error   talking   to   MQTT:   {}'.format(result))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def do_wordcount(s): \n    return len(_word_re.findall(s))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getMemoryLimit(): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def competency(): \n    return s3db.hrm_competency_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_states(saltenv='base'): \n    return __context__['fileclient'].list_states(saltenv)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show(name): \n    return _get_service(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(linter): \n    linter.register_checker(ImportsChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(): \n    for line in MARKDOWN_TEMPLATE.splitlines(): \n      if line.startswith('$tag:'): \n         print(Tag(line).build_help()) \n      else: \n         print(line)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _consteq(str1, str2): \n    return ((len(str1) == len(str2)) and (sum(((ord(x) ^ ord(y)) for (x, y) in zip(str1, str2))) == 0))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _group_type_get_full(context, id): \n    return _group_type_get(context, id, session=None, inactive=False, expected_fields=('group_specs', 'projects'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_specialize(lopt, *tags, **kwargs): \n    theano.compile.optdb['specialize'].register(((kwargs and kwargs.pop('name')) or lopt.__name__), lopt, 'fast_run', *tags)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def make_indentation(indent_size, part=u'   '): \n    return (indent_size * part)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_public_projects(user): \n    return Node.find_for_user(user).filter(is_public=True, is_deleted=False).get_roots()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_secondary_backup(base_path): \n    if (not remove('{0}{1}'.format(base_path, BACKUP_ROLLBACK_SUFFIX))): \n      logging.warning('No   secondary   backup   to   remove.   Skipping...')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _resolveIPv6(ip, port): \n    return socket.getaddrinfo(ip, port, 0, 0, 0, _NUMERIC_ONLY)[0][4]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def example_certificates_status(course_key): \n    return ExampleCertificateSet.latest_status(course_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dummy_deepcopy(*arg): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___ne__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _untested_error(where): \n    raise RuntimeError(('Unknown   %s   failure' % (where,)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CheckForBadCharacters(filename, lines, error): \n    for (linenum, line) in enumerate(lines): \n      if (u'\\ufffd' in line): \n         error(filename, linenum, 'readability/utf8', 5, 'Line   contains   invalid   UTF-8   (or   Unicode   replacement   character).') \n      if ('\\x00' in line): \n         error(filename, linenum, 'readability/nul', 5, 'Line   contains   NUL   byte.')",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def coerce_put_post(request): \n    if (request.method == 'PUT'): \n      if hasattr(request, '_post'): \n         del request._post \n         del request._files \n      try: \n         request.method = 'POST' \n         request._load_post_and_files() \n         request.method = 'PUT' \n      except AttributeError: \n         request.META['REQUEST_METHOD'] = 'POST' \n         request._load_post_and_files() \n         request.META['REQUEST_METHOD'] = 'PUT' \n      request.PUT = request.POST",
        "line_count": 13,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def CDLMATHOLD(barDs, count, penetration=(-4e+37)): \n    return call_talib_with_ohlc(barDs, count, talib.CDLMATHOLD, penetration)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def csm_shape(csm): \n    return csm_properties(csm)[3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _CheckText(value, name='value', empty_ok=True): \n    return _ValidateString(value, name, MAXIMUM_FIELD_VALUE_LENGTH, empty_ok)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Arcsin(name, a=0, b=1): \n    return rv(name, ArcsinDistribution, (a, b))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def renew_books(): \n    return library_check_auth(u'\\u7eed\\u501f\\u4e2d\\u2026\\u2026', renew=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def available(name): \n    return (name in get_all())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten(iterables): \n    return (elem for iterable in iterables for elem in iterable)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def unquote(value, *args, **kwargs): \n    return decode(urllib.unquote(value), *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _filter_discardable_metadata(metadata): \n    return {name: val for (name, val) in metadata.items() if (val is not _DISCARD)}",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def onSelectAccountDBInterface(accountName): \n    return 'default'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_BooleanProperty(model, prop, kwargs): \n    return f.BooleanField(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def grad_sum(x, y, z): \n    return sum(T.grad(z, [x, y]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def report_failure(exception): \n    raise FailedExecution('Exception   encountered.      Rerun   with   loglevel   DEBUG   and/or   check   Elasticsearch   logs   for   more   information.   Exception:   {0}'.format(exception))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_unary_expression_6(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_container(obj): \n    return (hasattr(obj, u'__iter__') and (not isinstance(obj, basestring)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _create_char_spinner(): \n    while True: \n      for c in '|/-\\\\': \n         (yield c)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _quote_name(name): \n    return connection.ops.quote_name(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_external_domain(domain): \n    return (domain not in domains_alias_to_target_domain)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def OutHeader1(text): \n    OutHeader(text, '=')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CAN_MODERATE(article, user): \n    return _is_staff_for_article(article, user)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def consume(iterator): \n    deque(iterator, maxlen=0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_config(c): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def total_seconds(delta): \n    return ((delta.microseconds + ((delta.seconds + ((delta.days * 24) * 3600)) * (10 ** 6))) / (10 ** 6))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def None2NULL(o, d): \n    return NULL",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_link(path): \n    return os.path.islink(os.path.expanduser(path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _deprecation_check(arg0): \n    if (os.path.basename(arg0) == 'desktop'): \n      to_use = os.path.join(os.path.dirname(arg0), 'hue') \n      msg = (\"Warning:   '%s'   has   been   deprecated.   Please   use   '%s'   instead.\" % (arg0, to_use)) \n      print >>sys.stderr, msg \n      LOG.warn(msg)",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_non_existing_unknown_ext(): \n    with pytest.raises(IOError): \n      data = Table.read(u'non-existing-file-with-unknown.ext')",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def approx_equal(a, b, epsilon=EPSILON): \n    return (abs((a - b)) < epsilon)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nltkdemo18(): \n    return [Template(Pos([(-1)])), Template(Pos([1])), Template(Pos([(-2)])), Template(Pos([2])), Template(Pos([(-2), (-1)])), Template(Pos([1, 2])), Template(Pos([(-3), (-2), (-1)])), Template(Pos([1, 2, 3])), Template(Pos([(-1)]), Pos([1])), Template(Word([(-1)])), Template(Word([1])), Template(Word([(-2)])), Template(Word([2])), Template(Word([(-2), (-1)])), Template(Word([1, 2])), Template(Word([(-3), (-2), (-1)])), Template(Word([1, 2, 3])), Template(Word([(-1)]), Word([1]))]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reverse_remove_duplicate_renditions(*args, **kwargs): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def aggregate_metadata_delete(context, aggregate_id, key): \n    IMPL.aggregate_metadata_delete(context, aggregate_id, key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def classification_summary(y, t, label_num=None, beta=1.0, ignore_label=(-1)): \n    return ClassificationSummary(label_num, beta, ignore_label)(y, t)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('ifttt' if ('ifttt.trigger_event' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def start_time_service(): \n    return __salt__['service.start']('w32time')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def denied(request): \n    return render(request, '403.html', {'request_path': request.path, 'title': _('Permission   Denied')}, status=403)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_detail_view_name(model): \n    return ('%(model_name)s-detail' % {'app_label': model._meta.app_label, 'model_name': model._meta.object_name.lower()})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_installed_products(shop): \n    return (configuration.get(shop, SAMPLE_PRODUCTS_KEY) or [])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_vif_host_backend_hostdev_pci_config(conf, pci_slot): \n    (conf.domain, conf.bus, conf.slot, conf.function) = pci_utils.get_pci_address_fields(pci_slot)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _authn_context_decl(decl, authn_auth=None): \n    return factory(saml.AuthnContext, authn_context_decl=decl, authenticating_authority=factory(saml.AuthenticatingAuthority, text=authn_auth))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def select_supported_python(installed_pythons): \n    for python in installed_pythons: \n      if (python[(-3):] in SUPPORTED_PYTHON_VERS): \n         return python",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def running(): \n    return salt.utils.minion.running(__opts__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unpack_files(key_list): \n    for key in key_list: \n      underscore = key.find('_') \n      if (underscore <= 0): \n         filename = (key if (underscore < 0) else key[1:]) \n      else: \n         filename = '{basename}.{ext}'.format(basename=key[(underscore + 1):], ext=key[:underscore]) \n      clear_metadata_to_file(key, filename)",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def avoid_wrapping(value): \n    return value.replace('   ', '\\xa0')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def no_vi_headers(physical_line, line_number, lines): \n    if ((line_number <= 5) or (line_number > (len(lines) - 5))): \n      if VI_HEADER_RE.match(physical_line): \n         return (0, \"T106:   Don't   put   vi   configuration   in   source   files\")",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_current_timezone_name(): \n    return _get_timezone_name(get_current_timezone())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def align(alignment, x): \n    return ((((x + alignment) - 1) // alignment) * alignment)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_english_article(word): \n    return ('a' + ('n' if (word[0].lower() in 'aeiou') else ''))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getCraftSequence(): \n    return 'carve   scale   bottom   preface   widen   inset   fill   multiply   speed   temperature   raft   skirt   chamber   tower   jitter   clip   smooth   stretch   skin   comb   cool   hop   wipe   oozebane   dwindle   splodge   home   lash   fillet   limit   unpause   dimension   altshell   alteration   export'.split()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def identity(*inputs): \n    return Identity()(*inputs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start(app, url='http://localhost:8080/manager', timeout=180): \n    return _simple_cmd('start', app, url, timeout=timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def warn_exception(exc, **kargs): \n    return ('WARNING:   %s   [%r]%s\\n%s' % (exc, exc, (('   [%s]' % ',   '.join((('%s=%s' % (key, value)) for (key, value) in kargs.iteritems()))) if kargs else ''), ((' DCTB %s\\n' % '\\n DCTB '.join(traceback.format_exc().splitlines())) if config.DEBUG else '')))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def IsConfirmedCookie(confirm_time): \n    return ((confirm_time is not None) and (util.GetCurrentTimestamp() < (confirm_time + _CONFIRM_TIME_LIMIT)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def stn(s, length): \n    return (s[:length] + ((length - len(s)) * NUL))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _writeMockResultFile(result): \n    with open(result.filename, 'w') as f: \n      f.write('<?xml   version=\"1.0\"   encoding=\"UTF-8\"?>\\n') \n      if ((len(result.suites) > 1) or (result.noSuitesRoot == False)): \n         f.write('<testsuites>\\n') \n      for suite in result.suites: \n         f.write((((((((((('<testsuite   tests=\"' + str(suite.tests)) + '\"   failures=\"') + str(suite.fail)) + '\"   time=\"') + str(suite.time)) + '\"   errors=\"') + str(suite.errors)) + '\"   name=\"') + suite.name) + '\">\\n')) \n         for case in suite.cases: \n            f.write((((((('<testcase   name=\"' + case.name) + '\"   status=\"run\"   time=\"') + str(case.time)) + '\"   classname=\"') + case.classname) + '\">\\n')) \n            for error in case.errorList: \n               f.write((((('<failure   message=\"' + error.value) + '\"   type=\"') + error.value) + '\"/>\\n')) \n            f.write('</testcase>\\n') \n         f.write('</testsuite>\\n') \n      if ((len(result.suites) > 1) or (result.noSuitesRoot == False)): \n         f.write('</testsuites>\\n')",
        "line_count": 14,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def test_enn_sk_estimator(): \n    check_estimator(RepeatedEditedNearestNeighbours)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_all_eip_addresses(addresses=None, allocation_ids=None, region=None, key=None, keyid=None, profile=None): \n    return [x.public_ip for x in _get_all_eip_addresses(addresses, allocation_ids, region, key, keyid, profile)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def tanh(x): \n    return tf.tanh(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def datetime_to_W3CDTF(dt): \n    return datetime.datetime.strftime(dt, W3CDTF_FORMAT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def checkbox(text=u'', tooltip=u'', checked=None): \n    return _checkbox(QtWidgets.QCheckBox, text, tooltip, checked)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def debug(msg): \n    log(msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def claim_interface(device, interface): \n    device._ctx.managed_claim_interface(device, interface)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def capfirst(value): \n    return (value and (value[0].upper() + value[1:]))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def transpose(matlist, K): \n    return [list(a) for a in zip(*matlist)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _keygen_callback(): \n    return",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return AnalyzeRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_populate_initial_workspace(initial_workspace, root_mask_term, execution_plan, dates, assets): \n    return initial_workspace",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def event_return(events): \n    with _get_serv(events, commit=True) as cur: \n      for event in events: \n         tag = event.get('tag', '') \n         data = event.get('data', '') \n         sql = 'INSERT   INTO   salt_events   (tag,   data,   master_id,   alter_time)\\n                                                               VALUES   (%s,   %s,   %s,   %s)' \n         cur.execute(sql, (tag, psycopg2.extras.Json(data), __opts__['id'], time.strftime('%Y-%m-%d   %H:%M:%S   %z', time.localtime())))",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def parse_commits(head, name): \n    for commit in head.traverse(): \n      (yield {'_id': commit.hexsha, '_parent': name, 'committed_date': datetime.fromtimestamp(commit.committed_date), 'committer': {'name': commit.committer.name, 'email': commit.committer.email}, 'authored_date': datetime.fromtimestamp(commit.authored_date), 'author': {'name': commit.author.name, 'email': commit.author.email}, 'description': commit.message, 'parent_shas': [p.hexsha for p in commit.parents], 'files': list(commit.stats.files), 'stats': commit.stats.total})",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def tablength(word, tabwidth): \n    return (len(word.replace(u' DCTB ', u'')) + (word.count(u' DCTB ') * tabwidth))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_utf8(utfbytes): \n    return _validate_utf8(utfbytes)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def goodlines(path): \n    return list((line for line in path.getContent().splitlines() if (line and (not line.strip().startswith('#')))))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _get_xtool(): \n    for xtool in ['xl', 'xm']: \n      path = salt.utils.which(xtool) \n      if (path is not None): \n         return path",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_config(config_file=None, cache=False): \n    return StarClusterConfig(config_file, cache).load()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_all(): \n    return __build_rules.copy()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def genslices(n): \n    return product(range((- n), (n + 1)), range((- n), (n + 1)), range((- n), (n + 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onLogWrote(logData): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uniqueify(items): \n    return list(set(items))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_filelike(obj): \n    return hasattr(obj, 'read')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_async_tag_url(question_id): \n    return reverse('questions.add_tag_async', kwargs={'question_id': question_id})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def drop_block_ss_columns(store): \n    for c in ['created', 'destroyed']: \n      try: \n         store.sql(('ALTER   TABLE   block   DROP   COLUMN   block_ss_' + c)) \n      except Exception: \n         store.rollback()",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_current_registry(context=None): \n    return manager.get()['registry']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show_backrefs(objs, max_depth=3, extra_ignore=(), filter=None, too_many=10, highlight=None, filename=None, extra_info=None, refcounts=False, shortnames=True, output=None): \n    _show_graph(objs, max_depth=max_depth, extra_ignore=extra_ignore, filter=filter, too_many=too_many, highlight=highlight, edge_func=gc.get_referrers, swap_source_target=False, filename=filename, output=output, extra_info=extra_info, refcounts=refcounts, shortnames=shortnames, cull_func=is_proper_module)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize_html(input): \n    return kuma.wiki.content.parse(unicode(input)).filter(WhitespaceRemovalFilter).serialize(alphabetical_attributes=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return PostscriptRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_super_call(expr): \n    return (isinstance(expr, astroid.CallFunc) and isinstance(expr.func, astroid.Name) and (expr.func.name == 'super'))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def assert_ok(response, msg_prefix=''): \n    return assert_code(response, 200, msg_prefix=msg_prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def diff(path_from, path_to, ignore_empty=False, until_time=None): \n    with open(path_from, 'rb') as fh_from: \n      with open(path_to, 'rb+') as fh_to: \n         return file_diff(fh_from, fh_to, ignore_empty, until_time)",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hidden_param(parser, xml_parent, data): \n    base_param(parser, xml_parent, data, True, 'com.wangyin.parameter.WHideParameterDefinition')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_is(expr1, expr2, msg=None): \n    if (expr1 is not expr2): \n      std_msg = ('%s   is   not   %s' % (_safe_rep(expr1), _safe_rep(expr2))) \n      raise AssertionError(_format_msg(msg, std_msg))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def distribute_keys(): \n    local(('ssh-copy-id   -i   ~/.ssh/sahana_release.pub   %s@%s' % (env.user, env.host)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pokedex(): \n    return _inventory.pokedex",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parseFilePaths(page): \n    if page: \n      for regex in ('   in   <b>(?P<result>.*?)</b>   on   line', '(?:>|\\\\s)(?P<result>[A-Za-z]:[\\\\\\\\/][\\\\w.\\\\\\\\/]*)', '(?:>|\\\\s)(?P<result>/\\\\w[/\\\\w.]+)'): \n         for match in re.finditer(regex, page): \n            absFilePath = match.group('result').strip() \n            page = page.replace(absFilePath, '') \n            if isWindowsDriveLetterPath(absFilePath): \n               absFilePath = posixToNtSlashes(absFilePath) \n            if (absFilePath not in kb.absFilePaths): \n               kb.absFilePaths.add(absFilePath)",
        "line_count": 9,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def _IsSourceExtension(s): \n    return (s in GetNonHeaderExtensions())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def split(str, length=80): \n    return [chunk for line in str.split('\\n') for chunk in textwrap.wrap(line, length)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def data(msg, t=None, obj=None): \n    root.log(msg, level=DATA, t=t, obj=obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(runlevel): \n    return 'Not   implemented   on   Windows   at   this   time.'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def logistic(X): \n    return logistic_sigmoid(X, out=X)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_local_modules_from_sys(testdir): \n    for (modname, mod) in list(sys.modules.items()): \n      if (mod is None): \n         continue \n      if (not hasattr(mod, '__file__')): \n         continue \n      modfile = mod.__file__ \n      if ((not osp.isabs(modfile)) or modfile.startswith(testdir)): \n         del sys.modules[modname]",
        "line_count": 8,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def p_direct_declarator_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def first(iterable): \n    return next(iter(iterable))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_returner(returner_types): \n    for returner in returner_types: \n      if returner: \n         return returner",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def restart_django_servers(): \n    sh(cmd('touch', 'lms/urls.py', 'cms/urls.py'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text, repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO_closed(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def values_reducer(aggregation_fn): \n    return partial(reduce_with, aggregation_fn)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sameopenfile(a, b): \n    return (os.fstat(a)[stat.ST_INO] == os.fstat(b)[stat.ST_INO])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def permission_required(perm, login_url=LOGIN_URL): \n    return user_passes_test((lambda u: u.has_perm(perm)), login_url=login_url)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_course_key(course_key, padding_char): \n    return 'course_{}'.format(b32encode(unicode(course_key)).replace('=', padding_char))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def image_volume_cache_get_and_update_last_used(context, image_id, **filters): \n    return IMPL.image_volume_cache_get_and_update_last_used(context, image_id, **filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iterSourceCode(paths): \n    for path in paths: \n      if os.path.isdir(path): \n         for (dirpath, dirnames, filenames) in os.walk(path): \n            for filename in filenames: \n               if filename.endswith('.py'): \n                  (yield os.path.join(dirpath, filename)) \n      else: \n         (yield path)",
        "line_count": 8,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def _job_dir(): \n    return os.path.join(__opts__['cachedir'], 'jobs')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_ipv4_filter(ip, options=None): \n    return _is_ipv(ip, 4, options=options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stop(service): \n    action('stop', service)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _prepare_write_tfr(tfr, condition): \n    return (condition, dict(times=tfr.times, freqs=tfr.freqs, data=tfr.data, info=tfr.info, nave=tfr.nave, comment=tfr.comment, method=tfr.method))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rc_file_defaults(): \n    rcParams.update(rcParamsOrig)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getTagBracketedProcedure(procedure): \n    return getTagBracketedLine('procedureName', procedure)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def raises(exc, func, *args, **kwds): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _failhard(): \n    raise FileserverConfigError('Failed   to   load   svn   fileserver   backend')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gettext(message): \n    return do_translate(message, u'gettext')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_byteswap(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def extras(*p): \n    return reqs('extras', *p)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_metadata_delete(context, instance_uuid, key): \n    IMPL.instance_metadata_delete(context, instance_uuid, key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_tolist(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delitem(a, b): \n    del a[b]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processXMLElement(xmlElement): \n    xmlElement.parent.object.vertexes.append(evaluate.getVector3FromXMLElement(xmlElement))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def recursive_keypairs(d): \n    for (name, value) in sorted(d.iteritems()): \n      if isinstance(value, dict): \n         for (subname, subvalue) in recursive_keypairs(value): \n            (yield (('%s:%s' % (name, subname)), subvalue)) \n      elif isinstance(value, (tuple, list)): \n         (yield (name, list(map((lambda x: unicode(x).encode('utf-8')), value)))) \n      else: \n         (yield (name, value))",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_urlconf(default=None): \n    return getattr(_urlconfs, 'value', default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def readlineAvailable(): \n    return (readline._readline is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _iter_module_files(): \n    for module in list(sys.modules.values()): \n      if (module is None): \n         continue \n      filename = getattr(module, '__file__', None) \n      if filename: \n         old = None \n         while (not os.path.isfile(filename)): \n            old = filename \n            filename = os.path.dirname(filename) \n            if (filename == old): \n               break \n         else: \n            if (filename[(-4):] in ('.pyc', '.pyo')): \n               filename = filename[:(-1)] \n            (yield filename)",
        "line_count": 15,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def max_pool_2x2(input_): \n    return tf.nn.max_pool(input_, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def root(request, course_key): \n    return ApiResponse(http_response=HttpResponse(), data=API_SETTINGS.get('META'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_events(conf, trait_plugin_mgr): \n    return NotificationEventsConverter(conf, declarative.load_definitions(conf, [], conf.event.definitions_cfg_file), trait_plugin_mgr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def organizations_with(username, number=(-1), etag=None): \n    return gh.organizations_with(username, number, etag)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sm_backend_conf_get_by_sr(context, sr_uuid): \n    return IMPL.sm_backend_conf_get_by_sr(context, sr_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_key(): \n    return config.get_cloud_config_value('private_key', get_configured_provider(), __opts__, search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(version='stable', runas=None): \n    return _rvm(['get', version], runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_ranges(ranges): \n    return foldr(_combine, ranges, ())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_hop_by_hop_headers(headers): \n    headers[:] = [(key, value) for (key, value) in headers if (not is_hop_by_hop_header(key))]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _fd(f): \n    return (f.fileno() if hasattr(f, 'fileno') else f)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def verify_zmq(): \n    if (zmq is None): \n      raise unittest.SkipTest",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def write_theme(): \n    return theme_xml",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dict_with_str_keys(dct, encoding='utf-8'): \n    return {force_str(key, encoding): value for (key, value) in six.iteritems(dct)}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _unit_file_changed(name): \n    return (\"'systemctl   daemon-reload'\" in _systemctl_status(name)['stdout'].lower())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_hg_installed(): \n    return (programs.find_program('hg') is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeExtension(configs=None): \n    return NikolaExtension(configs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fix_divmod(mod): \n    _DivmodFixer().visit(mod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compare_links(actual, expected): \n    return compare_tree_to_dict(actual, expected, ('rel', 'href', 'type'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enforce_action(context, action): \n    return enforce(context, action, {'project_id': context.project_id, 'user_id': context.user_id})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def alter(node, metadata): \n    if ((node is not None) and metadata and ('node' in metadata)): \n      node.attrib.update(dict(((k, str(v)) for (k, v) in metadata['node'].items())))",
        "line_count": 2,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def usecase4(x, N): \n    for k in range(N): \n      y = x[k] \n      print(y.f1, x.s1[k], y.f2)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sync_wheel(saltenv='base'): \n    return salt.utils.extmods.sync(__opts__, 'wheel', saltenv=saltenv)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dist_in_site_packages(dist): \n    return normalize_path(dist_location(dist)).startswith(normalize_path(site_packages))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def commit_tree(repo, tree, message=None, author=None, committer=None): \n    with open_repo_closing(repo) as r: \n      return r.do_commit(message=message, tree=tree, committer=committer, author=author)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hello5(): \n    return HTML(BODY(H1(T('Hello   World'), _style='color:   red;'))).xml()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sort_dict_by_values(adict): \n    return OrderedDict(sorted(adict.items(), key=(lambda item: item[1])))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dup_irreducible_p(f, K): \n    return dmp_irreducible_p(f, 0, K)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start_x_config_set(kodi_setting, all_settings): \n    return '1'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def softmax(x): \n    return tf.nn.softmax(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jn_zeros(n, nt): \n    return jnyn_zeros(n, nt)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_widgets(request): \n    return WIDGETS",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _rate_limit_exceeded(forbidden): \n    return any(((error['reason'] == 'rateLimitExceeded') for error in forbidden._errors))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def rgb_transpose(array): \n    return np.transpose(array, (1, 0, 2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def javascript_url(): \n    return (get_bootstrap_setting(u'javascript_url') or bootstrap_url(u'js/bootstrap.min.js'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def gf_rem(f, g, p, K): \n    return gf_div(f, g, p, K)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_fs_path(path): \n    return smart_str(path, HDFS_ENCODING, errors='strict')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_editor(request, addon): \n    return (check_addons_reviewer(request) or (check_personas_reviewer(request) and addon.is_persona()))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def debug(msg): \n    if sublime.load_settings('bh_core.sublime-settings').get('debug_enable', False): \n      log(msg)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def filter_pathbase(val): \n    return os.path.basename((val or u''))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def config(): \n    return __proxy__['napalm.call']('get_users', **{})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def import_main_path(main_path): \n    _fixup_main_from_path(main_path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def heartbeat(): \n    for device in Devices: \n      device.ping()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_minions(): \n    with _get_serv(ret=None, commit=True) as cur: \n      sql = 'SELECT   DISTINCT   id\\n                                                FROM   salt_returns' \n      cur.execute(sql) \n      data = cur.fetchall() \n      ret = [] \n      for minion in data: \n         ret.append(minion[0]) \n      return ret",
        "line_count": 8,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def create_directories(): \n    for d in (config.SECUREDROP_DATA_ROOT, config.STORE_DIR, config.GPG_KEY_DIR, config.TEMP_DIR): \n      if (not os.path.isdir(d)): \n         os.mkdir(d)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def set_warndays(name, days): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def can_access_all_blocks(requesting_user, course_key): \n    return has_access(requesting_user, CourseStaffRole.ROLE, course_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ellip_harm(h2, k2, n, p, s, signm=1, signn=1): \n    return _ellip_harm(h2, k2, n, p, s, signm, signn)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_dict(*packages): \n    return __salt__['lowpkg.file_dict'](*packages)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def finditem(func, seq): \n    return next((item for item in seq if func(item)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_user(bootinfo): \n    bootinfo.user = frappe.get_user().load_user()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def closeDumper(status, msg=''): \n    if (hasattr(conf, 'dumper') and hasattr(conf.dumper, 'finish')): \n      conf.dumper.finish(status, msg)",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def movmean(x, windowsize=3, lag='lagged'): \n    return movmoment(x, 1, windowsize=windowsize, lag=lag)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _CopyQueryToProtocolBuffer(query, params): \n    params.set_query(query.encode('utf-8'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vboxcmd(): \n    return salt.utils.which('VBoxManage')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def HashEntity(entity): \n    return hashlib.sha1(entity.Encode()).digest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def g(): \n    return 5",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return CombRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove(target, identifier, fn): \n    _event_key(target, identifier, fn).remove()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shutdown(opts): \n    log.debug('rest_sample   proxy   shutdown()   called...')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_get_by_host_and_topic(context, host, topic): \n    return IMPL.service_get_by_host_and_topic(context, host, topic)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ifnotequal(parser, token): \n    return do_ifequal(parser, token, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_none(actual, msg=None): \n    assert (actual is None), msg",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_minus_sign_symbol(locale=LC_NUMERIC): \n    return Locale.parse(locale).number_symbols.get('minusSign', u'-')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rectify(x): \n    return theano.tensor.nnet.relu(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_mm_header(fh, byteorder, dtype, count): \n    return fh.read_record(MM_HEADER, byteorder=byteorder)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lift_quarantine(request): \n    request.session.pop('third_party_auth_quarantined_modules', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _bin_to_long(x): \n    return long(x.encode('hex'), 16)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cluster_get_all(context, is_up=None, get_services=False, services_summary=False, read_deleted='no', name_match_level=None, **filters): \n    return IMPL.cluster_get_all(context, is_up, get_services, services_summary, read_deleted, name_match_level, **filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_float(arg): \n    return ('%f' % float(arg)).rstrip('0').rstrip('.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_vector(): \n    return T.vector()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_import_submodule_global_shadowed(pyi_builder): \n    pyi_builder.test_source('\\n                        #   Assert   that   this   submodule   is   shadowed   by   a   string   global   variable.\\n                        from   pyi_testmod_submodule_global_shadowed   import   submodule\\n                        assert   type(submodule)   ==   str\\n\\n                        #   Assert   that   this   submodule   is   still   frozen   into   this   test   application.\\n                        #   To   do   so:\\n                        #\\n                        #   1.   Delete   this   global   variable   from   its   parent   package.\\n                        #   2.   Assert   that   this   submodule   is   unshadowed   by   this   global   variable.\\n                        import   pyi_testmod_submodule_global_shadowed,   sys\\n                        del      pyi_testmod_submodule_global_shadowed.submodule\\n                        from   pyi_testmod_submodule_global_shadowed   import   submodule\\n                        assert   type(submodule)   ==   type(sys)\\n                        ')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TR6(rv, max=4, pow=False): \n    return _TR56(rv, cos, sin, (lambda x: (1 - x)), max=max, pow=pow)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tamper(payload, **kwargs): \n    return (re.sub('[^\\\\w]', (lambda match: ('&#%d;' % ord(match.group(0)))), payload) if payload else payload)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def parse_form_data(environ, stream_factory=None, charset='utf-8', errors='replace', max_form_memory_size=None, max_content_length=None, cls=None, silent=True): \n    return FormDataParser(stream_factory, charset, errors, max_form_memory_size, max_content_length, cls, silent).parse_from_environ(environ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def toc(): \n    return __timer__.toc()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_enrollment_attributes(user_id, course_id): \n    return _ENROLLMENT_ATTRIBUTES",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def requote_uri(uri): \n    return quote(unquote_unreserved(uri), safe=\"!#$%&'()*+,/:;=?@[]~\")",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def itermulti(seqn): \n    return chain(map((lambda x: x), iterfunc(IterGen(Sequence(seqn)))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def json_encode(value): \n    return json.dumps(value).replace('</', '<\\\\/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def put(url, data=None, **kwargs): \n    return request('put', url, data=data, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_mac(token, serialized_data): \n    return hash_data((serialized_data + token))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or __virtualname__), ('apikey', 'password'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def squared_difference(x1, x2): \n    return SquaredDifference()(x1, x2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clearCaches(): \n    gc.collect()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def error(request, message): \n    add_message(get_request(request), constants.ERROR, message)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connect_button(button, fn): \n    button.pressed.connect(fn)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_plural(text): \n    return (text.find(PLURAL_SEPARATOR) != (-1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return __virtualname__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    evaluate.processArchivable(Group, elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_mo_files(): \n    for (root, dirs, files) in os.walk(MO_DIR, topdown=False): \n      for f in files: \n         if (not f.startswith(DOMAIN)): \n            os.remove(os.path.join(root, f))",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def make_array_ndenumerate_cls(nditerty): \n    return _make_flattening_iter_cls(nditerty, 'ndenumerate')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_timeout(): \n    time.sleep(100)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_profilers_in_db(profilers, description='NA', add_noncompliant=False): \n    for profiler in profilers: \n      name = os.path.basename(profiler) \n      if name.endswith('.py'): \n         name = name[:(-3)] \n      if (not profilers[profiler]): \n         if add_noncompliant: \n            doc = description \n         else: \n            logging.warn('Skipping   %s,   missing   docstring', profiler) \n            continue \n      else: \n         doc = profilers[profiler] \n      model = models.Profiler.objects.get_or_create(name=name)[0] \n      model.description = doc \n      _log_or_execute(repr(model), model.save)",
        "line_count": 15,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def create_models(model, data): \n    return write_models(model, data, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def install_gem(name, version=None, install_args=None, override_args=False): \n    return install(name, version=version, source='ruby', install_args=install_args, override_args=override_args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apply_rollback(datastore, name): \n    return _get_client().apply_rollback(datastore, name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def implements(*interfaces): \n    _implements('implements', interfaces, classImplements)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def local_api_url(): \n    return ('http://%s%s' % (os.environ.get('HTTP_HOST'), LOCAL_GCS_ENDPOINT))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_pre_authed_request(env, method=None, path=None, body=None, headers=None, agent='Swift', swift_source=None): \n    return make_subrequest(env, method=method, path=path, body=body, headers=headers, agent=agent, swift_source=swift_source, make_env=make_pre_authed_env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(fn): \n    callbacks.append(fn)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_no_qapp(request): \n    assert ('qapp' not in request.fixturenames)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def add_unknown_words(word_vecs, vocab, min_df=1, k=300): \n    for word in vocab: \n      if ((word not in word_vecs) and (vocab[word] >= min_df)): \n         word_vecs[word] = np.random.uniform((-0.25), 0.25, k)",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_non_private_exploration_summaries(): \n    return _get_exploration_summaries_from_models(exp_models.ExpSummaryModel.get_non_private())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def coth(arg): \n    return (1 / numpy.tanh(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(callback, agent_type): \n    registry.subscribe(callback, agent_type, events.AFTER_INIT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _a_encode_none(value, mapping): \n    return ['0n']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_cxxflags(): \n    return get_var('CXXFLAGS')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def blankout(src, char): \n    return dot_re.sub(char, src)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_by(lookup_dict, grain='os_family', merge=None, default='default', base=None): \n    return salt.utils.filter_by(lookup_dict=lookup_dict, lookup=grain, traverse=__grains__, merge=merge, default=default, base=base)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_exists(path): \n    return os.path.isfile(os.path.expanduser(path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_title(text): \n    print_col('====================   {}   ===================='.format(text), 'yellow')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_mysql_error(): \n    return sys.modules[__salt__['test.ping'].__module__].__context__.pop('mysql.error', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_job_output(job_id): \n    return job_models.JobModel.get_by_id(job_id).output",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nearlyEqual(lst1, lst2, tolerance=0.001): \n    return all(((abs((i - j)) <= tolerance) for (i, j) in zip(lst1, lst2)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def are_content_experiments_enabled(course): \n    return (('split_test' in ADVANCED_COMPONENT_TYPES) and ('split_test' in course.advanced_modules))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def beta_from_features(dataset, **kwargs): \n    return beta_from_design(dataset.X, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inch_to_dxa(value): \n    return int(((value * 20) * 72))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random_urlsafe_str(): \n    return base64.urlsafe_b64encode(uuid.uuid4().bytes)[:(-2)].decode('utf-8')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetWsdlMethod(ns, wsdlName): \n    with _lazyLock: \n      method = _wsdlMethodMap[(ns, wsdlName)] \n      if isinstance(method, ManagedMethod): \n         return method \n      elif method: \n         LoadManagedType(*method) \n         return _wsdlMethodMap[(ns, wsdlName)] \n      else: \n         raise KeyError('{0}   {1}'.format(ns, name))",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def parse_ansi(string, strip_ansi=False, parser=ANSI_PARSER, xterm256=False, mxp=False): \n    return parser.parse_ansi(string, strip_ansi=strip_ansi, xterm256=xterm256, mxp=mxp)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_jump_statement_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def guard_quota_dp(): \n    scheduler.restart(force=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _pre_yarn_history_unescape(s): \n    return _PRE_YARN_HISTORY_ESCAPE_RE.sub('\\\\1', s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_lang_dict(): \n    return dict(frappe.db.sql(u'select   language_name,   name   from   tabLanguage'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_device_mtu(dev, mtu=None): \n    if mtu: \n      utils.execute('ip', 'link', 'set', dev, 'mtu', mtu, run_as_root=True, check_exit_code=[0, 2, 254])",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_targets(): \n    return AddonGitHubNodeSettings.find((Q('user_settings', 'ne', None) & Q('hook_id', 'ne', None)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unixTime(): \n    return systime.time()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def toChunk(data): \n    return (networkString(('%x' % (len(data),))), '\\r\\n', data, '\\r\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qos_specs_update(context, qos_specs_id, specs): \n    return IMPL.qos_specs_update(context, qos_specs_id, specs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def neutron_public_url(catalog): \n    for i in catalog['access']['serviceCatalog']: \n      if (i['type'] == 'network'): \n         for endpoint in i['endpoints']: \n            return endpoint['publicURL']",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def what(): \n    return 'serializer/mongodb'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_run_tb(): \n    with TemporaryDirectory() as td: \n      path = pjoin(td, 'foo.py') \n      with open(path, 'w') as f: \n         f.write('\\n'.join(['def   foo():', '            return   bar()', 'def   bar():', \"            raise   RuntimeError('hello!')\", 'foo()'])) \n      with capture_output() as io: \n         _ip.magic('run   {}'.format(path)) \n      out = io.stdout \n      nt.assert_not_in('execfile', out) \n      nt.assert_in('RuntimeError', out) \n      nt.assert_equal(out.count('---->'), 3)",
        "line_count": 10,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def glob(pattern): \n    return list(iglob(pattern))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _all_bookmarks(repo): \n    return repo.bookmarks()[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getSpherical(azimuthDegrees, elevationDegrees, radius=1.0): \n    return getSphericalByRadians(math.radians(azimuthDegrees), math.radians(elevationDegrees), radius)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gf_random(n, p, K): \n    return ([K.one] + [K(int(uniform(0, p))) for i in range(0, n)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_number(value): \n    return isinstance(value, (integer_types + (float, complex, decimal.Decimal)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_conda_installed(): \n    with settings(hide('running', 'warnings', 'stderr', 'stdout'), warn_only=True): \n      res = run('conda   -V   2>/dev/null') \n      if res.failed: \n         return False \n      return res.succeeded",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_markdown_extensions(): \n    return _markdown_extensions",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def standard_node(hostname): \n    return ProcessNode.using_ssh(hostname, 22, 'root', SSH_PRIVATE_KEY_PATH)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_event_transaction_type(action_type): \n    get_cache('event_transaction')['type'] = action_type",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _access(*args, **kargs): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def endpoint_address(address): \n    return (address & _ENDPOINT_ADDR_MASK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def peak_signal_to_noise_ratio(true, pred): \n    return ((10.0 * tf.log((1.0 / mean_squared_error(true, pred)))) / tf.log(10.0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def retcode(name, cmd, exec_driver=None, stdin=None, python_shell=True, output_loglevel='debug', use_vt=False, ignore_retcode=False, keep_env=None): \n    return _run(name, cmd, exec_driver=exec_driver, output='retcode', stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, use_vt=use_vt, ignore_retcode=ignore_retcode, keep_env=keep_env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _on_process_docstring(app, what, name, obj, options, lines): \n    if ((what == 'module') and (name == 'falcon')): \n      lines[:] = []",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def put(models, **kwargs): \n    return put_async(models, **kwargs).get_result()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ms_payload_2(payload): \n    return {'1': 'shellcode/pyinject', '2': 'shellcode/multipyinject', '3': 'set/reverse_shell', '4': 'set/reverse_shell', '5': 'set/reverse_shell', '6': 'shellcode/alphanum'}.get(payload, 'ERROR')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clearNode(node): \n    node.childNodes[:] = []",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def release_ownership_of_collection(committer_id, collection_id): \n    _release_ownership_of_activity(committer_id, collection_id, feconf.ACTIVITY_TYPE_COLLECTION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def target_update(target, deps, cmd): \n    if target_outdated(target, deps): \n      os.system(cmd)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_array_fromunicode(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def asResponse(request): \n    return _MemoryResponse('HTTP/1.1', request.code, request.code_message, request.responseHeaders, None, None, request._responseBody)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ms_payload_3(payload): \n    return {'1': 'windows/shell_reverse_tcp', '2': 'windows/meterpreter/reverse_tcp', '3': 'windows/vncinject/reverse_tcp', '4': 'windows/x64/shell_reverse_tcp', '5': 'windows/x64/meterpreter/reverse_tcp', '6': 'windows/x64/shell_bind_tcp', '7': 'windows/meterpreter/reverse_https'}.get(payload, 'ERROR')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape(st): \n    return st.replace('\\\\', '\\\\\\\\').replace(' DCTB ', '\\\\t').replace('\\r', '\\\\r').replace('\\n', '\\\\n').replace('\"', '\\\\\"')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_binary(value, bits): \n    return ''.join([str(((value >> y) & 1)) for y in range((bits - 1), (-1), (-1))])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def report_flaky_tests(output, flaky_tests): \n    for test in flaky_tests: \n      output.write('{}\\n'.format(test))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def prepare_staging_area(sr_path, staging_path, vdi_uuids, seq_num=0): \n    for vdi_uuid in vdi_uuids: \n      source = os.path.join(sr_path, ('%s.vhd' % vdi_uuid)) \n      link_name = os.path.join(staging_path, ('%d.vhd' % seq_num)) \n      _link(source, link_name) \n      seq_num += 1",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def previous_history_or_previous_completion(event): \n    event.current_buffer.auto_up()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def number_connected_components(G): \n    return len(list(connected_components(G)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getOverhangRadians(elementNode): \n    return math.radians(getOverhangAngle(elementNode))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_reply(exchange, req, msg, producer=None, retry=False, retry_policy=None, **props): \n    producer.publish(msg, exchange=exchange, retry=retry, retry_policy=retry_policy, **dict({'routing_key': req.properties['reply_to'], 'correlation_id': req.properties.get('correlation_id'), 'serializer': serializers.type_to_name[req.content_type], 'content_encoding': req.content_encoding}, **props))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___lt__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _bytes_feature_list(values): \n    return tf.train.FeatureList(feature=[_bytes_feature(v) for v in values])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def stararg_func(*args): \n    return args",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def summation(f, *symbols, **kwargs): \n    return Sum(f, *symbols, **kwargs).doit(deep=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def zone(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def await_gc(obj, rc): \n    for i in range(50): \n      if (grc(obj) <= (rc + 2)): \n         return \n      time.sleep(0.05)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def sigma_sub(p, q): \n    return (((C_sub - delta(p, q)) - V(p)) - V(q))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_default_actions(): \n    return [CloseMenuAction([SubmitAction(), DiscardAction(), DeleteAction()]), UpdateMenuAction([UploadDiffAction(), UploadFileAction()]), DownloadDiffAction(), EditReviewAction(), AddGeneralCommentAction(), ShipItAction()]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_args(request, arg): \n    return [v for v in request.GET.getall(arg) if v]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def gdal_version(): \n    return _version_info('RELEASE_NAME')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def one_hot(indices, nb_classes): \n    return tf.one_hot(indices, depth=nb_classes, axis=(-1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PipeConnection(incoming, outgoing): \n    return Connection(Channel(PipeStream(incoming, outgoing)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _pick_runner_opts(runner_alias=None, cloud_role=None): \n    return set((opt_name for (opt_name, conf) in _RUNNER_OPTS.items() if (((runner_alias is None) or (conf.get('runners') is None) or (runner_alias in conf['runners'])) and ((cloud_role is None) or (cloud_role == conf.get('cloud_role'))))))",
        "line_count": 1,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def count_from_1(index, collection): \n    return (index + 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def campaign_response(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def report_status(task, task_id, status): \n    if (task in REPORT_TASKS): \n      logging.debug('Sending   task   status   to   the   AppScale   Portal.   Task:   {0},   Status:   {1}'.format(task, status)) \n      url = '{0}{1}'.format(hermes_constants.PORTAL_URL, hermes_constants.PORTAL_STATUS_PATH) \n      data = urllib.urlencode({JSONTags.TASK_ID: task_id, JSONTags.DEPLOYMENT_ID: get_deployment_id(), JSONTags.STATUS: status}) \n      request = create_request(url=url, method='POST', body=data) \n      for _ in range(REPORT_RETRIES): \n         result = urlfetch(request) \n         if result[JSONTags.SUCCESS]: \n            delete_task_from_mem(task_id) \n            return \n      delete_task_from_mem(task_id)",
        "line_count": 11,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def request(method, url, **kwargs): \n    with sessions.Session() as session: \n      return session.request(method=method, url=url, **kwargs)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_location_path(location=DEFAULT_LOCATION, api_host_suffix=JOYENT_API_HOST_SUFFIX): \n    return '{0}://{1}{2}'.format(_get_proto(), location, api_host_suffix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mkdirall(path): \n    for ancestor in ancestry(path): \n      if (not os.path.isdir(syspath(ancestor))): \n         try: \n            os.mkdir(syspath(ancestor)) \n         except (OSError, IOError) as exc: \n            raise FilesystemError(exc, 'create', (ancestor,), traceback.format_exc())",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def Command(char): \n    return CaselessPreservingLiteral(char)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in6_isgladdr(str): \n    return in6_isincluded(str, '2000::', 3)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return ExtrudeDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('github' if ('github.list_users' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_website_users(): \n    return frappe.db.sql(u\"select   count(*)   from   `tabUser`\\n DCTB  DCTB where   enabled   =   1   and   user_type   =   'Website   User'\")[0][0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _split_rules(rules): \n    return [r.strip() for r in rules.split('|')]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _parens_around_char(label): \n    return '({first}){rest}'.format(first=label[0], rest=label[1:])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ternary_filter(ternary_value): \n    return (ternary_value == constants.TERNARY_YES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape_script(text): \n    return SCRIPT_RE.sub(u'<-\\\\1/script>', text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qual(clazz): \n    return ((clazz.__module__ + '.') + clazz.__name__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apply_palette256(image): \n    return image.convert('RGB').convert('P', palette=Image.ADAPTIVE, colors=256, dither=Image.NONE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qsort(a, start, end): \n    if (start < end): \n      p = choosepivot(start, end) \n      if (p != start): \n         (a[p], a[start]) = (a[start], a[p]) \n      equal = partition(a, start, end) \n      qsort(a, start, (equal - 1)) \n      qsort(a, (equal + 1), end)",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([TcpSensor(hass, config)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random_string(size=6, chars=(string.ascii_letters + string.digits)): \n    return ''.join((random.choice(chars) for _ in range(size)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def register(linter): \n    linter.register_checker(VariablesChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def json_stream(stream): \n    return split_buffer(stream, json_splitter, json_decoder.decode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _fake_is_request_in_microsite(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CPP_INTEGER(t): \n    return t",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_success(status): \n    return ((200 <= status) and (status <= 299))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_z(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def open(filename, flag='c', protocol=None, writeback=False): \n    return DbfilenameShelf(filename, flag, protocol, writeback)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bump_cache_for_pk(cls, pk): \n    cache.bump_version(('%s-%s' % (_get_namespace_prefix(cls), pk)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def at_server_cold_stop(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def zone_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addMenuEntitiesToMenuFrameable(menu, menuEntities): \n    for menuEntity in menuEntities: \n      menuEntity.addToMenuFrameable(menu)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dict_factory(colnames, rows): \n    return [dict(zip(colnames, row)) for row in rows]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def accumNpDicts(d0, d1): \n    for k in d1: \n      if (k in d0): \n         d0[k] += d1[k] \n      else: \n         d0[k] = d1[k]",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def term_job(jid): \n    return signal_job(jid, signal.SIGTERM)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def teardown_test(): \n    warnings.simplefilter('default')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def abs__file__(): \n    for m in sys.modules.values(): \n      if hasattr(m, '__loader__'): \n         continue \n      try: \n         m.__file__ = os.path.abspath(m.__file__) \n      except AttributeError: \n         continue",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def bytes2words(data, length=8): \n    return np.fromstring(data, dtype=np.uint64)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_lights_temp(hass, lights, mired, brightness): \n    for light in lights: \n      if is_on(hass, light): \n         turn_on(hass, light, color_temp=int(mired), brightness=brightness, transition=30)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def clear_all_messages(): \n    BackendMessage.objects.filter(name=BACKEND_NAME).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _find_build_tool(toolname): \n    return (_find_executable(toolname) or _read_output(('/usr/bin/xcrun   -find   %s' % (toolname,))) or '')",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def exec2(ctid_or_name, command): \n    return run_as_root((\"vzctl   exec2   %s   '%s'\" % (ctid_or_name, command)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def initialize(linter): \n    register_plugins(linter, __path__[0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_get_all_by_grantee_security_groups(context, group_ids): \n    return IMPL.instance_get_all_by_grantee_security_groups(context, group_ids)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def join_list(sep, arg): \n    return sep.join(as_list(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _json_team_stats(data): \n    return TeamStats(first_downs=int(data['totfd']), total_yds=int(data['totyds']), passing_yds=int(data['pyds']), rushing_yds=int(data['ryds']), penalty_cnt=int(data['pen']), penalty_yds=int(data['penyds']), turnovers=int(data['trnovr']), punt_cnt=int(data['pt']), punt_yds=int(data['ptyds']), punt_avg=int(data['ptavg']), pos_time=PossessionTime(data['top']))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=Python3Lexer(), buf_class=Python3Buffer, langintel_class=Python3LangIntel, import_handler_class=Python3ImportHandler, cile_driver_class=Python3CILEDriver, is_cpln_lang=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_prosite_raw(id, cgi='http://www.expasy.ch/cgi-bin/get-prosite-raw.pl'): \n    return _urlopen(('%s?%s' % (cgi, id)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getregentry(): \n    return codecs.CodecInfo(name='hexlify', encode=hex_encode, decode=hex_decode, incrementalencoder=IncrementalEncoder, incrementaldecoder=IncrementalDecoder, streamwriter=StreamWriter, streamreader=StreamReader)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_cli(arguments, exit=True): \n    return RobotFramework().execute_cli(arguments, exit=exit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_child_nodes(node): \n    for (name, field) in iter_fields(node): \n      if isinstance(field, AST): \n         (yield field) \n      elif isinstance(field, list): \n         for item in field: \n            if isinstance(item, AST): \n               (yield item)",
        "line_count": 7,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def coffee(): \n    return load('coffee.png')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def symptom_password_regular_expression_description_not_set(): \n    return (CONF.security_compliance.password_regex and (not CONF.security_compliance.password_regex_description))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def keyring_save(**kwargs): \n    return ceph_cfg.keyring_save(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def minimum(x, y): \n    return tf.minimum(x, y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(): \n    sys.exit(RBExt().run(sys.argv[1:]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add(x, y): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False): \n    return a.std(axis=axis, dtype=dtype, out=out, keepdims=keepdims)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def full_info(): \n    return {'node_info': node_info(), 'vm_info': vm_info()}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_client_options(config): \n    if config['use_ssl']: \n      if (('certificate' in config) and config['certificate']): \n         read_file(config['certificate']) \n      if (('client_cert' in config) and config['client_cert']): \n         read_file(config['client_cert']) \n      if (('client_key' in config) and config['client_key']): \n         read_file(config['client_key'])",
        "line_count": 7,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def load_svmlight_file(f, n_features=None, dtype=np.float64, multilabel=False, zero_based='auto', query_id=False): \n    return tuple(load_svmlight_files([f], n_features, dtype, multilabel, zero_based, query_id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getsavefilename(parent=None, caption='', basedir='', filters='', selectedfilter='', options=None): \n    return _qfiledialog_wrapper('getSaveFileName', parent=parent, caption=caption, basedir=basedir, filters=filters, selectedfilter=selectedfilter, options=options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return ReversalRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setattr_default(obj, name, value): \n    if (not hasattr(obj, name)): \n      setattr(obj, name, value)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cgsnapshot_get_all_by_group(context, group_id, filters=None): \n    return IMPL.cgsnapshot_get_all_by_group(context, group_id, filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return (__virtualname__ if salt.utils.which('strace') else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_float_range(): \n    assert (0.5 == float_range('0.5'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def floating_ip_deallocate(context, address): \n    return IMPL.floating_ip_deallocate(context, address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_deployment_physnet_mtu(): \n    return cfg.CONF.global_physnet_mtu",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_template_attribute(template_name, attribute): \n    return getattr(current_app.jinja_env.get_template(template_name).module, attribute)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def key_entry_name_order(entry): \n    return entry[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookupService(name, timeout=None): \n    return getResolver().lookupService(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def output(migration): \n    return {'created_at': migration.created_at, 'dest_compute': migration.dest_compute, 'dest_host': migration.dest_host, 'dest_node': migration.dest_node, 'disk_processed_bytes': migration.disk_processed, 'disk_remaining_bytes': migration.disk_remaining, 'disk_total_bytes': migration.disk_total, 'id': migration.id, 'memory_processed_bytes': migration.memory_processed, 'memory_remaining_bytes': migration.memory_remaining, 'memory_total_bytes': migration.memory_total, 'server_uuid': migration.instance_uuid, 'source_compute': migration.source_compute, 'source_node': migration.source_node, 'status': migration.status, 'updated_at': migration.updated_at}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _normalize_string(orig): \n    return orig.replace('\"', '').replace(\"'\", '').strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def idz_diffsnorm(m, n, matveca, matveca2, matvec, matvec2, its=20): \n    return _id.idz_diffsnorm(m, n, matveca, matveca2, matvec, matvec2, its)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def binary_cross_entropy(input, target, weight=None, size_average=True): \n    return _functions.thnn.BCELoss(size_average, weight=weight)(input, target)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_event_transaction_id(new_id): \n    get_cache('event_transaction')['id'] = UUID(new_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return WriteDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def activity_age_group(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ast_bad_yield(): \n    cant_compile(u'(yield   1   2)')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def VerifyMissingSources(sources, build_dir, generator_flags, gyp_to_ninja): \n    if int(generator_flags.get('msvs_error_on_missing_sources', 0)): \n      no_specials = filter((lambda x: ('$' not in x)), sources) \n      relative = [os.path.join(build_dir, gyp_to_ninja(s)) for s in no_specials] \n      missing = filter((lambda x: (not os.path.exists(x))), relative) \n      if missing: \n         cleaned_up = [os.path.normpath(x) for x in missing] \n         raise Exception(('Missing   input   files:\\n%s' % '\\n'.join(cleaned_up)))",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def condense_whitespace(css): \n    return re.sub('\\\\s+', '   ', css)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def finish_fsdev(force_cleanup=False): \n    if ((FSDEV_PREP_CNT == 1) or force_cleanup): \n      restore_disks(job=FSDEV_JOB, restore=FSDEV_RESTORE, disk_list=FSDEV_DISKLIST)",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def isInsideOtherLoops(loopIndex, loops): \n    return isPathInsideLoops((loops[:loopIndex] + loops[(loopIndex + 1):]), loops[loopIndex])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def context(*args, **kwargs): \n    return _ContextDecorator()(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_page(): \n    data.page()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_service(hass, config, discovery_info=None): \n    return TwitterNotificationService(config[CONF_CONSUMER_KEY], config[CONF_CONSUMER_SECRET], config[CONF_ACCESS_TOKEN], config[CONF_ACCESS_TOKEN_SECRET], config.get(CONF_USERNAME))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nopackage(pkg_name): \n    if is_installed(pkg_name): \n      uninstall(pkg_name)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def convertElementNode(elementNode, geometryOutput): \n    group.convertContainerElementNode(elementNode, geometryOutput, Union())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_rand_pass(): \n    CRYPTOR.gen_rand_pass(20)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ADXR(barDs, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_hlc(barDs, count, talib.ADXR, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isroutine(object): \n    return (isbuiltin(object) or isfunction(object) or ismethod(object) or ismethoddescriptor(object))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def out_of_date(original, derived): \n    return ((not os.path.exists(derived)) or (os.stat(derived).st_mtime < os.stat(original).st_mtime))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def plot_day_summary_ohlc(ax, quotes, ticksize=3, colorup=u'k', colordown=u'r'): \n    return _plot_day_summary(ax, quotes, ticksize=ticksize, colorup=colorup, colordown=colordown, ochl=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def extra_padding_x_keep_ratio(original_size, padding): \n    return _resize(original_size, 0, padding=padding, keep_aspect_ratio=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tableload(datafile, cdfile, hfile=None): \n    return BinTableHDU.load(datafile, cdfile, hfile, replace=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show_user(id_): \n    return show_item('user', id_)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ast_valid_for(): \n    can_compile(u'(for   [a   2]   (print   a))')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_metadata_delete(context, volume_id, key): \n    IMPL.volume_metadata_delete(context, volume_id, key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _initialize_builtins(): \n    if os.path.isdir(_handler_dir): \n      for filename in os.listdir(_handler_dir): \n         if os.path.isfile(_get_yaml_path(filename, '')): \n            _available_builtins.append(filename)",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def passwd_changes(attrs=None, where=None): \n    return _osquery_cmd(table='passwd_changes', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return GcodeTimeSegmentRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _read_uint32(f): \n    return np.uint32(struct.unpack('>I', f.read(4))[0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expand_func(expr, deep=True): \n    return sympify(expr).expand(deep=deep, func=True, basic=False, log=False, mul=False, power_exp=False, power_base=False, multinomial=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def not_equal(*values): \n    return IMPL.not_equal(*values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_postfix_expression_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def indicator_data(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def topic_weight(d, word, k): \n    return (p_word_given_topic(word, k) * p_topic_given_document(k, d))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_expression_opt_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hardware_events(attrs=None, where=None): \n    return _osquery_cmd(table='hardware_events', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _new_Index(cls, d): \n    return cls.__new__(cls, **d)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return DGPSModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_rect_ymax(data): \n    return max(data[0][1], data[1][1], data[2][1], data[3][1])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_if_marathon_app_can_be_deployed(dcos_api_session): \n    dcos_api_session.marathon.deploy_test_app_and_check(*get_test_app())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Pareto(name, xm, alpha): \n    return rv(name, ParetoDistribution, (xm, alpha))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_atexit_function(func): \n    atexit.register(func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookupResponsibility(name, timeout=None): \n    return getResolver().lookupResponsibility(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_long_description(): \n    return 'Evasion   plugins   modify   requests   in   order   to   bypass   IPS   detection.\\n            '",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onLoseChargeCB(ordersID, dbid, success, datas): \n    DEBUG_MSG(('onLoseChargeCB:   ordersID=%s,   dbid=%i,   success=%i,   datas=%s' % (ordersID, dbid, success, datas)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def course_start_date_is_default(start, advertised_start): \n    return ((advertised_start is None) and (start == DEFAULT_START_DATE))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def major_version(best=False): \n    return _distro.major_version(best)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def logs(name): \n    return _client_wrapper('logs', name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def module_path(local_function): \n    return os.path.abspath(inspect.getsourcefile(local_function))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_constant_expression_opt_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_mm_32_format(msg_string): \n    return (msg_string.startswith('mm') and (len(msg_string) == 34))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _parseUNIX(factory, address, mode='666', backlog=50, lockfile=True): \n    return ((address, factory), {'mode': int(mode, 8), 'backlog': int(backlog), 'wantPID': bool(int(lockfile))})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_debtpaying_data(year, quarter): \n    if (ct._check_input(year, quarter) is True): \n      ct._write_head() \n      df = _get_debtpaying_data(year, quarter, 1, pd.DataFrame()) \n      if (df is not None): \n         df['code'] = df['code'].map((lambda x: str(x).zfill(6))) \n      return df",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def plugin_schemas(**kwargs): \n    return {u'type': u'object', u'properties': dict(((p.name, {u'$ref': p.schema[u'id']}) for p in get_plugins(**kwargs))), u'additionalProperties': False, u'error_additionalProperties': u'{{message}}   Only   known   plugin   names   are   valid   keys.', u'patternProperties': {u'^_': {u'title': u'Disabled   Plugin'}}}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ensure_directory_exists(d): \n    if (not os.path.exists(d)): \n      os.makedirs(d)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def NATR(barDs, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_hlc(barDs, count, talib.NATR, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def package(pkg_name, update=False): \n    if (not is_installed(pkg_name)): \n      install(pkg_name, update)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def disable_password_auth(sshd_config='/etc/ssh/sshd_config'): \n    _update_ssh_setting(sshd_config, 'PasswordAuthentication', 'no')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_auth_sub_data(http_request, timestamp, nonce): \n    return ('%s   %s   %s   %s' % (http_request.method, str(http_request.uri), str(timestamp), nonce))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_exposed(minion): \n    return salt.utils.check_whitelist_blacklist(minion, whitelist=__opts__['minionfs_whitelist'], blacklist=__opts__['minionfs_blacklist'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dmp_slice(f, m, n, u, K): \n    return dmp_slice_in(f, m, n, 0, u, K)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def archive_deleted_rows_for_table(context, tablename, max_rows=None): \n    return IMPL.archive_deleted_rows_for_table(context, tablename, max_rows=max_rows)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rs_or_single_client(h=client_context.host, p=client_context.port, **kwargs): \n    return _mongo_client(h, p, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_weighted_edgelist(G, path, comments='#', delimiter='   ', encoding='utf-8'): \n    write_edgelist(G, path, comments=comments, delimiter=delimiter, data=('weight',), encoding=encoding)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hmac_sha256(key, data): \n    return HMAC(key, data, sha256).digest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def word_count_old(documents): \n    return Counter((word for document in documents for word in tokenize(document)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_document(slug, request): \n    return get_object_or_404(Document, slug=slug, locale=request.LANGUAGE_CODE, allow_discussion=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reqs(*f): \n    return [req for subreq in _reqs(*f) for req in subreq]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def start_plugin_services(server): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jsonFileLogObserver(outFile, recordSeparator=u'\\x1e'): \n    return FileLogObserver(outFile, (lambda event: u'{0}{1}\\n'.format(recordSeparator, eventAsJSON(event))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def videos_index_json(course): \n    return JsonResponse({'videos': _get_index_videos(course)}, status=200)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_service_account_info(http, service_account='default'): \n    return get(http, 'instance/service-accounts/{0}/'.format(service_account), recursive=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mean(values): \n    return (sum(values) / len(values))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def one_hot_encoding(labels, num_classes, scope=None): \n    with tf.name_scope(scope, 'OneHotEncoding', [labels]): \n      batch_size = labels.get_shape()[0] \n      indices = tf.expand_dims(tf.range(0, batch_size), 1) \n      labels = tf.cast(tf.expand_dims(labels, 1), indices.dtype) \n      concated = tf.concat([indices, labels], 1) \n      onehot_labels = tf.sparse_to_dense(concated, tf.pack([batch_size, num_classes]), 1.0, 0.0) \n      onehot_labels.set_shape([batch_size, num_classes]) \n      return onehot_labels",
        "line_count": 8,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def atof(string, func=float): \n    return func(delocalize(string))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCarving(fileName): \n    return getFromGNUTriangulatedSurfaceText(archive.getFileText(fileName), trianglemesh.TriangleMesh())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def memory(since=0.0): \n    if ACTUALLY_MEASURE_MEMORY: \n      return (_VmB('VmSize:') - since)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_bytes(obj): \n    return isinstance(obj, bytes_type)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_comparable_csr(*names): \n    return jose.ComparableX509(load_csr(*names))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_group_get_by_instance(context, instance_uuid): \n    return IMPL.instance_group_get_by_instance(context, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chunk(l, n): \n    for i in xrange(0, len(l), n): \n      (yield l[i:(i + n)])",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_value(*args, **kwargs): \n    return db.get_value(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_with(): \n    return (fwith1(1), fwith2(1), BigEgg().f(5))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _auth_to_kv_pairs(auth_string): \n    for item in _split_auth_string(auth_string): \n      (k, v) = item.split('=', 1) \n      if (v.startswith('\"') and (len(v) > 1) and v.endswith('\"')): \n         v = v[1:(-1)] \n      (yield (k, v))",
        "line_count": 5,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def processElementNode(elementNode): \n    path.convertElementNode(elementNode, getGeometryOutput(elementNode))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return MultiplyRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_connection(conf, new=True): \n    return rpc_amqp.create_connection(conf, new, rpc_amqp.get_connection_pool(conf, Connection))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_num_recurring(**filter_data): \n    return models.RecurringRun.query_count(filter_data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getFontsDirectoryPath(): \n    return archive.getFabmetheusUtilitiesPath('fonts')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wait_for_file(filename, interval=10, test_mode=False): \n    while (not exists(filename)): \n      if test_mode: \n         raise RuntimeWarning \n      sleep(interval)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def read(config_file): \n    with io.open(config_file, u'rb') as filehandle: \n      return filehandle.read()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def b64_string(input_string): \n    return b64encode(input_string.encode('utf-8')).decode('utf-8')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_instance_uid_match(user): \n    return (os.geteuid() == __salt__['file.user_to_uid'](user))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_client_login_request_body(email, password, service, source, account_type='HOSTED_OR_GOOGLE', captcha_token=None, captcha_response=None): \n    return gdata.gauth.generate_client_login_request_body(email, password, service, source, account_type, captcha_token, captcha_response)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pre_prompt_hook(self): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return CraftRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_objects(vim, type, properties_to_collect=None, all=False): \n    return vutil.get_objects(vim, type, CONF.vmware.maximum_objects, properties_to_collect, all)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_creole(markup): \n    return creole_parser.generate(markup)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return ScalableVectorGraphicsRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ensure_metadata_ip(): \n    _execute('ip', 'addr', 'add', '169.254.169.254/32', 'scope', 'link', 'dev', 'lo', run_as_root=True, check_exit_code=[0, 2, 254])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_data_from_request(): \n    return {'request': {'url': ('%s://%s%s' % (web.ctx['protocol'], web.ctx['host'], web.ctx['path'])), 'query_string': web.ctx.query, 'method': web.ctx.method, 'data': web.data(), 'headers': dict(get_headers(web.ctx.environ)), 'env': dict(get_environ(web.ctx.environ))}}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PossessiveRepeat(element, min_count, max_count): \n    return Atomic(GreedyRepeat(element, min_count, max_count))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_initializer_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def longest_line_length(code): \n    return max((len(line) for line in code.splitlines()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def Delete(keys, **kwargs): \n    return DeleteAsync(keys, **kwargs).get_result()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_initializer_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def underscore(value): \n    return value.replace(u'.', u'_')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def device_exists(device_name, namespace=None): \n    return IPDevice(device_name, namespace=namespace).exists()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_users(users, test=False, commit=True): \n    return __salt__['net.load_template']('set_users', users=users, test=test, commit=commit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _runMultiple(tupleList): \n    for (f, args, kwargs) in tupleList: \n      f(*args, **kwargs)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _restore_str(unused_name, value): \n    return (None if (value == 'None') else value)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def reissue(csr_file, certificate_id, web_server_type, approver_email=None, http_dc_validation=False, **kwargs): \n    return __get_certificates('namecheap.ssl.reissue', 'SSLReissueResult', csr_file, certificate_id, web_server_type, approver_email, http_dc_validation, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def action_get_by_request_id(context, uuid, request_id): \n    return IMPL.action_get_by_request_id(context, uuid, request_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_task(queue_name, url, payload=None, **kws): \n    TaskQueue(queue_name).add(Task(url, payload, **kws))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _should_retry(resp): \n    return ((resp.status_code == httplib.REQUEST_TIMEOUT) or ((resp.status_code >= 500) and (resp.status_code < 600)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def prop_show(prop, extra_args=None, cibfile=None): \n    return item_show(item='property', item_id=prop, extra_args=extra_args, cibfile=cibfile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_num_cpus(): \n    return multiprocessing.cpu_count()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SizeToReadableString(filesize): \n    for x in ['bytes', 'KiB', 'MiB', 'GiB', 'TiB']: \n      if (filesize < 1000.0): \n         return ('%3.1f   %s' % (filesize, x)) \n      filesize /= 1000.0",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def addToMenu(master, menu, repository, window): \n    settings.addPluginsParentToMenu(skeinforge_analyze.getPluginsDirectoryPath(), menu, __file__, skeinforge_analyze.getPluginFileNames())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def s_num_mutations(): \n    return blocks.CURRENT.num_mutations()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expm(A): \n    return _expm(A, use_exact_onenorm='auto')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_get_all_by_host(context, host): \n    return IMPL.volume_get_all_by_host(context, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def displayFiles(filenames): \n    for filename in filenames: \n      displayFile(filename)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def calledback_url(dispatch='score_update'): \n    return dispatch",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def global_view(request): \n    return Response('global')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _fetch_raw_metadata(api_key, cache, retries, environ): \n    for page_number in count(1): \n      key = ('metadata-page-%d' % page_number) \n      try: \n         raw = cache[key] \n      except KeyError: \n         for _ in range(retries): \n            try: \n               raw = pd.read_csv(format_metadata_url(api_key, page_number), parse_dates=['oldest_available_date', 'newest_available_date'], usecols=['dataset_code', 'name', 'oldest_available_date', 'newest_available_date']) \n               break \n            except ValueError: \n               raw = pd.DataFrame([]) \n               break \n            except Exception: \n               pass \n         else: \n            raise ValueError(('Failed   to   download   metadata   page   %d   after   %d   attempts.' % (page_number, retries))) \n         cache[key] = raw \n      if raw.empty: \n         break \n      (yield raw)",
        "line_count": 20,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def removeEndpoints(layerInfillWidth, paths, pixelTable, removedEndpoints, aroundWidth): \n    for removedEndpointIndex in xrange((len(removedEndpoints) - 1), (-1), (-1)): \n      removedEndpoint = removedEndpoints[removedEndpointIndex] \n      removedEndpointPoint = removedEndpoint.point \n      if isPointAddedAroundClosest(layerInfillWidth, paths, pixelTable, removedEndpointPoint, aroundWidth): \n         removedEndpoints.remove(removedEndpoint)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'stretch', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def idd_diffsnorm(m, n, matvect, matvect2, matvec, matvec2, its=20): \n    return _id.idd_diffsnorm(m, n, matvect, matvect2, matvec, matvec2, its)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tablesample(selectable, sampling, name=None, seed=None): \n    return _interpret_as_from(selectable).tablesample(sampling, name=name, seed=seed)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_handlers(handlers=[]): \n    return (handlers + [('/url([s]?)/([^/]+)/(.*)', URLHandler)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookup(tag): \n    return TAGS_V2.get(tag, TagInfo(tag, TAGS.get(tag, 'unknown')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def distance_metrics(): \n    return PAIRWISE_DISTANCE_FUNCTIONS",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rtuFrameSize(buffer, byte_count_pos): \n    return ((struct.unpack('>B', buffer[byte_count_pos])[0] + byte_count_pos) + 3)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sec(arg): \n    return (1 / numpy.cos(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def identity_matrix(): \n    return numpy.identity(4)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_user(user, identity): \n    if ((user.fxa_id != identity['uid']) or (user.email != identity['email'])): \n      log.info('Updating   user   info   from   FxA   for   {pk}.   Old   {old_email}   {old_uid}   New   {new_email}   {new_uid}'.format(pk=user.pk, old_email=user.email, old_uid=user.fxa_id, new_email=identity['email'], new_uid=identity['uid'])) \n      user.update(fxa_id=identity['uid'], email=identity['email'])",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def squared_error_gradient(x_i, y_i, beta): \n    return [(((-2) * x_ij) * error(x_i, y_i, beta)) for x_ij in x_i]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cancel_job(job_id, connection=None): \n    Job.fetch(job_id, connection=connection).cancel()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def utcnow_ts(): \n    return calendar.timegm(utcnow().timetuple())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def samefile(filename1, filename2): \n    return (os.path.abspath(filename1) == os.path.abspath(filename2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def verify_credit_card(number): \n    return CreditCard(number).verify()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_image_notification(image): \n    return {'id': image.image_id, 'name': image.name, 'status': image.status, 'created_at': timeutils.isotime(image.created_at), 'updated_at': timeutils.isotime(image.updated_at), 'min_disk': image.min_disk, 'min_ram': image.min_ram, 'protected': image.protected, 'checksum': image.checksum, 'owner': image.owner, 'disk_format': image.disk_format, 'container_format': image.container_format, 'size': image.size, 'is_public': (image.visibility == 'public'), 'properties': dict(image.extra_properties), 'tags': list(image.tags), 'deleted': False, 'deleted_at': None}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def block_inception_a(inputs, scope=None, reuse=None): \n    with slim.arg_scope([slim.conv2d, slim.avg_pool2d, slim.max_pool2d], stride=1, padding='SAME'): \n      with tf.variable_scope(scope, 'BlockInceptionA', [inputs], reuse=reuse): \n         with tf.variable_scope('Branch_0'): \n            branch_0 = slim.conv2d(inputs, 96, [1, 1], scope='Conv2d_0a_1x1') \n         with tf.variable_scope('Branch_1'): \n            branch_1 = slim.conv2d(inputs, 64, [1, 1], scope='Conv2d_0a_1x1') \n            branch_1 = slim.conv2d(branch_1, 96, [3, 3], scope='Conv2d_0b_3x3') \n         with tf.variable_scope('Branch_2'): \n            branch_2 = slim.conv2d(inputs, 64, [1, 1], scope='Conv2d_0a_1x1') \n            branch_2 = slim.conv2d(branch_2, 96, [3, 3], scope='Conv2d_0b_3x3') \n            branch_2 = slim.conv2d(branch_2, 96, [3, 3], scope='Conv2d_0c_3x3') \n         with tf.variable_scope('Branch_3'): \n            branch_3 = slim.avg_pool2d(inputs, [3, 3], scope='AvgPool_0a_3x3') \n            branch_3 = slim.conv2d(branch_3, 96, [1, 1], scope='Conv2d_0b_1x1') \n         return tf.concat(3, [branch_0, branch_1, branch_2, branch_3])",
        "line_count": 15,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_tools_to_container(container, tools=default_toolbar_tools): \n    for (group, grouptools) in tools: \n      for (position, tool) in enumerate(grouptools): \n         container.add_tool(tool, group, position)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def upload_dev(user='pandas'): \n    if os.system('cd   build/html;   rsync   -avz   .   {0}@pandas.pydata.org:/usr/share/nginx/pandas/pandas-docs/dev/   -essh'.format(user)): \n      raise SystemExit('Upload   to   Pydata   Dev   failed')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def permutate(x, indices, axis=0, inv=False): \n    return Permutate(axis=axis, inv=inv)(x, indices)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def merge_dict(dic1, dic2): \n    return dict((dic1.items() + dic2.items()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _chop_end_misc(line): \n    return re.sub('\\\\s\\\\s\\\\s\\\\s+.*\\\\Z', '', line)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ignore_CTRL_C_posix(): \n    signal.signal(signal.SIGINT, signal.SIG_IGN)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index_to_one(index): \n    return dindex_to_1[index]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pci_devices(attrs=None, where=None): \n    return _osquery_cmd(table='pci_devices', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dispose(event): \n    for (_, value) in DEVICES.items(): \n      value.netio.stop()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_style_file(filename): \n    return (STYLE_FILE_PATTERN.match(filename) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def l1norm(a): \n    return np.sum(np.abs(a))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _default_ret(): \n    return {'result': False, 'comment': '', 'out': None}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_action_parameters_schema(additional_properties=False): \n    return get_draft_schema(version='action_params', additional_properties=additional_properties)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rand_unicode(length=8): \n    return ''.join((chr(random.randint(0, 50000)) for _ in range(length)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def remove_tagids(source): \n    return _modify_tagids(source, False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _safeReprVars(varsDictItems): \n    return [(name, reflect.safe_repr(obj)) for (name, obj) in varsDictItems]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _lscmp(a, b): \n    return ((not sum(((0 if (x == y) else 1) for (x, y) in zip(a, b)))) and (len(a) == len(b)))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def update_version(event_id, is_created, column_to_increment): \n    VersionUpdater(event_id=event_id, is_created=is_created, column_to_increment=column_to_increment).update()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_node_get_model(context, compute_id): \n    return IMPL.compute_node_get_model(context, compute_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def request_data(request, template='base.html', data='sausage'): \n    return render_to_response(template, {'get-foo': request.GET.get('foo', None), 'get-bar': request.GET.get('bar', None), 'post-foo': request.POST.get('foo', None), 'post-bar': request.POST.get('bar', None), 'request-foo': request.REQUEST.get('foo', None), 'request-bar': request.REQUEST.get('bar', None), 'data': data})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def optional(type_): \n    return (type_, type(None))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index_alt(): \n    s3_redirect_default(URL(f='station', args='summary'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_schema_element(elt, files={}, repr_=Thier_repr(with_ns=False), skip_errors=False): \n    return XmlSchemaParser(files, repr_=repr_, skip_errors=skip_errors).parse_schema(elt)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_rem(p): \n    p[0] = ('REM', p[1])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _extract_translatable_qweb_terms(element, callback): \n    for el in element: \n      if isinstance(el, SKIPPED_ELEMENT_TYPES): \n         continue \n      if ((el.tag.lower() not in SKIPPED_ELEMENTS) and ('t-js' not in el.attrib) and (not (('t-jquery' in el.attrib) and ('t-operation' not in el.attrib))) and (el.get('t-translation', '').strip() != 'off')): \n         _push(callback, el.text, el.sourceline) \n         for att in ('title', 'alt', 'label', 'placeholder'): \n            if (att in el.attrib): \n               _push(callback, el.attrib[att], el.sourceline) \n         _extract_translatable_qweb_terms(el, callback) \n      _push(callback, el.tail, el.sourceline)",
        "line_count": 10,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def mtime(path): \n    return os.stat(path).st_mtime",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eGetRawS(Handle, pIOType, Channel, pValue, x1): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rshift(a, b): \n    return (a >> b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rgw_destroy(**kwargs): \n    return ceph_cfg.rgw_destroy(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stereo_motorcycle(): \n    return (load('motorcycle_left.png'), load('motorcycle_right.png'), np.load(_os.path.join(data_dir, 'motorcycle_disp.npz'))['arr_0'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_discussion_enabled(course_id): \n    return settings.FEATURES.get('ENABLE_DISCUSSION_SERVICE')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pad(s, pad_to_length): \n    return ((u'%-' + (u'%ds' % pad_to_length)) % (s,))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_file_and_readable(pth): \n    return (os.path.isfile(pth) and os.access(pth, os.R_OK))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dates_from_str(dates): \n    return lmap(date_parser, dates)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_to_text(self, in_string, encoding, expected): \n    self.assertEqual(to_text(in_string, encoding), expected)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convertXMLElement(geometryOutput, xmlElement): \n    xmlElement.getXMLProcessor().createChildren(geometryOutput['shapes'], xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def console_delete(context, console_id): \n    return IMPL.console_delete(context, console_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_get_by_address(context, address, columns_to_join=None): \n    return IMPL.fixed_ip_get_by_address(context, address, columns_to_join=columns_to_join)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def like(): \n    return _distro.like()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def search(value, pattern='', ignorecase=False, multiline=False): \n    return regex(value, pattern, ignorecase, multiline, 'search')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rand_text_numeric(length, bad=''): \n    return rand_base(length, bad, set(numerals))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_connection(conf, new, connection_pool): \n    return ConnectionContext(conf, connection_pool, pooled=(not new))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def smartyPants(text, attr=default_smartypants_attr, language='en'): \n    return ''.join([t for t in educate_tokens(tokenize(text), attr, language)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_proxy(*args, **kwargs): \n    return proxy.ServiceProxy(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index_alt(): \n    s3_redirect_default(URL(f='req'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fileContents(fn): \n    return open(fn, 'r').read()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safe_load_all(stream): \n    return load_all(stream, SafeLoader)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cleanup(): \n    call(['sudo', 'pkill', '-9', 'qemu-nbd'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def icio(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def server_poweron(): \n    return __execute_cmd('serveraction   powerup')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_render_ctx(): \n    return getattr(g, '_admin_render_ctx', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Triangular(name, a, b, c): \n    return rv(name, TriangularDistribution, (a, b, c))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _list_modules(): \n    return [desc.module_class for desc in _list_descriptors()]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fake_add_device(devices, update_befor_add=False): \n    if update_befor_add: \n      for speaker in devices: \n         speaker.update()",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_tags_url(): \n    return '{base_url}/{owner}/{repo}/tags'.format(**API_PARAMS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_example_config(filename, config): \n    with open(os.path.realpath(filename), 'w') as f: \n      f.write(yaml.dump(config, default_flow_style=False))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_cache_subnet_groups(name=None, region=None, key=None, keyid=None, profile=None): \n    return [g['CacheSubnetGroupName'] for g in get_all_cache_subnet_groups(name, region, key, keyid, profile)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def urlunquote(quoted_url): \n    return force_text(unquote(force_str(quoted_url)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_constructor(tag, constructor, Loader=Loader): \n    Loader.add_constructor(tag, constructor)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def consistencygroup_get_all_by_project(context, project_id, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None): \n    return IMPL.consistencygroup_get_all_by_project(context, project_id, filters=filters, marker=marker, limit=limit, offset=offset, sort_keys=sort_keys, sort_dirs=sort_dirs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_nt_hash(password): \n    return binascii.hexlify(hashlib.new('md4', password.encode('utf-16le')).digest()).upper()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_comment_app_name(): \n    return getattr(settings, 'COMMENTS_APP', DEFAULT_COMMENTS_APP)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_get_iscsi_target_num(context, volume_id): \n    return IMPL.volume_get_iscsi_target_num(context, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_shared_variable(variable): \n    return (isinstance(variable, SharedVariable) and (not isinstance(variable, RandomStateSharedVariable)) and (not hasattr(variable.tag, 'is_rng')))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def max_name_width(service_names, max_index_width=3): \n    return (max((len(name) for name in service_names)) + max_index_width)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_bake_withspecialchars_and_run_tests(cookies): \n    with bake_in_temp_dir(cookies, extra_context={'full_name': 'name   \"quote\"   name'}) as result: \n      assert result.project.isdir() \n      (run_inside_dir('python   setup.py   test', str(result.project)) == 0)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sleep(seconds): \n    time.sleep(seconds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pc_settings_filename(): \n    return 'Package   Control.sublime-settings'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _p(pp, name): \n    return ('%s_%s' % (pp, name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_cast_expression_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_keys(): \n    local(\"ssh-keygen   -N   ''   -q   -t   rsa   -f   ~/.ssh/sahana_release\")",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def urlsafe_b64decode(s): \n    return b64decode(s.translate(_urlsafe_decode_translation))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def approx_fprime(xk, f, epsilon, *args): \n    return _approx_fprime_helper(xk, f, epsilon, args=args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_nodes_select(): \n    return {}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reloaded(name): \n    return __salt__['syslog_ng.reload'](name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_version(version_tuple): \n    return '.'.join(map(str, version_tuple))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bytes2int(raw_bytes): \n    return int(binascii.hexlify(raw_bytes), 16)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_common(l1, l2): \n    return (set(l1) & set(l2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _install(archive_filename, install_args=()): \n    with archive_context(archive_filename): \n      log.warn('Installing   Setuptools') \n      if (not _python_cmd('setup.py', 'install', *install_args)): \n         log.warn('Something   went   wrong   during   the   installation.') \n         log.warn('See   the   error   message   above.') \n         return 2",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def splitlines(string): \n    return re.split('\\n|\\r\\n', string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gammainc(a, x, dps=50, maxterms=(10 ** 8)): \n    with mp.workdps(dps): \n      (z, a, b) = (mp.mpf(a), mp.mpf(x), mp.mpf(x)) \n      G = [z] \n      negb = mp.fneg(b, exact=True) \n      def h(z): \n         T1 = ([mp.exp(negb), b, z], [1, z, (-1)], [], G, [1], [(1 + z)], b) \n         return (T1,) \n      res = mp.hypercomb(h, [z], maxterms=maxterms) \n      return mpf2float(res)",
        "line_count": 9,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ProcessGlobalSuppresions(lines): \n    for line in lines: \n      if _SEARCH_C_FILE.search(line): \n         for category in _DEFAULT_C_SUPPRESSED_CATEGORIES: \n            _global_error_suppressions[category] = True \n      if _SEARCH_KERNEL_FILE.search(line): \n         for category in _DEFAULT_KERNEL_SUPPRESSED_CATEGORIES: \n            _global_error_suppressions[category] = True",
        "line_count": 7,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def list_resourcepools(service_instance): \n    return list_objects(service_instance, vim.ResourcePool)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bugreport(app=None): \n    return (app or _state.get_current_app()).bugreport()",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def block_device_mapping_update_or_create(context, values, legacy=True): \n    return IMPL.block_device_mapping_update_or_create(context, values, legacy)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dashCapitalize(s): \n    return '-'.join([x.capitalize() for x in s.split('-')])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _find_unpurge_targets(desired): \n    return [x for x in desired if (x in __salt__['pkg.list_pkgs'](purge_desired=True))]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def generate_paragraph(start_with_lorem=False): \n    return _GENERATOR.generate_paragraph(start_with_lorem)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return PolygonDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_compound_statement_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DEFINE_bytes(name, default, help): \n    CONFIG.AddOption(type_info.Bytes(name=name, default=(default or ''), description=help))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def s_block_end(name=None): \n    blocks.CURRENT.pop()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def one_to_index(s): \n    return d1_to_index[s]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iterate(func, x): \n    while True: \n      (yield x) \n      x = func(x)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def disk_block_size(path): \n    return os.statvfs(path).f_bsize",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rel_path(*subpaths): \n    return path.join(BASE_DIR, *subpaths)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _from_qemu_format(fmt): \n    return FROM_QEMU_FORMAT_MAP[fmt]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_request_states(): \n    with _request_states_lock: \n      return _request_states.values()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DfpClassType(value): \n    return value.__class__.__name__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def securitygroup(vm_): \n    return config.get_cloud_config_value('securitygroup', vm_, __opts__, search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _future_expose_api_anonymous(func, to_json=True): \n    return _future_expose_api(func, to_json=to_json, user_required=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _toc_pattern(indexname): \n    return re.compile(('^_%s_([0-9]+).toc$' % indexname))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def event_return(event): \n    print(event)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def func(name): \n    return name",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run(): \n    for c in Collection.objects.all(): \n      c.save()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def bad_app(): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def real_path(path): \n    return ek(os.path.normpath, ek(os.path.normcase, ek(os.path.realpath, path)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def env_purge_doc(app, env, docname): \n    if (docname in env.bokeh_plot_files): \n      del env.bokeh_plot_files[docname]",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def rand_alpha(length=0): \n    return ''.join((choice(letters) for _ in xrange((length or randint(10, 30)))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def to_int_be(data): \n    return reduce((lambda a, b: ((a << 8) + b)), bytearray(data), 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onFini(): \n    INFO_MSG('onFini()')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_editable_type(value): \n    return (get_color_name(value) not in (UNSUPPORTED_COLOR, CUSTOM_TYPE_COLOR))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _kill(req, image_id, from_state): \n    registry.update_image_metadata(req.context, image_id, {'status': 'killed'}, from_state=from_state)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attach_sub(item, filename): \n    item.sub = filename",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backup_get(context, backup_id, read_deleted=None, project_only=True): \n    return IMPL.backup_get(context, backup_id, read_deleted, project_only)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sum_of_squares(n, k, zeros=False): \n    for t in power_representation(n, 2, k, zeros): \n      (yield t)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def attachment_specs_delete(context, attachment_id, key): \n    return IMPL.attachment_specs_delete(context, attachment_id, key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _iter_tests(names): \n    for name in names: \n      suite = _load_tests(name) \n      for test in iterate_tests(suite): \n         (yield test)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def XML2Node(xml): \n    return NodeBuilder(xml).getDom()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _Logger_notice(self, msg, *args, **kwargs): \n    if self.isEnabledFor(logging.NOTICE): \n      self._log(logging.NOTICE, msg, args, **kwargs)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def timedelta2seconds(delta): \n    return (((delta.microseconds / 1000000.0) + delta.seconds) + (((delta.days * 60) * 60) * 24))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getRoundedPoint(point): \n    return Vector3(round(point.x), round(point.y), round(point.z))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def darken(color, percent): \n    return adjust(color, 2, (- percent))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return LatheDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _overrideFunc(v, t): \n    return 'OVERRIDDEN'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skip_if(condition, msg=None): \n    return pytest.mark.skipif(condition, reason=(msg or 'conditional   skip'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def normalize_delete_at_timestamp(timestamp): \n    return ('%010d' % min(max(0, float(timestamp)), 9999999999))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def migrate_up(manager): \n    if db_utils.auth_tables_exist(manager): \n      management.setup_environ(settings) \n      from django.contrib.contenttypes import management as content_management \n      from django.contrib.auth import management as auth_management \n      from django.db import models as db_models \n      content_management.update_all_contenttypes() \n      for app in db_models.get_apps(): \n         auth_management.create_permissions(app, None, 2) \n      manager.execute_script(migration_059.UP_SQL)",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _build_install_args(options): \n    return (['--user'] if options.user_install else [])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _fraud_email(body, kind): \n    Email.handler.add_to_queue(None, g.fraud_email, g.domain, g.fraud_email, kind, body=body)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expect(*bool_exprs): \n    for expr in bool_exprs: \n      assert isinstance(expr, Testable) \n      expr.expect()",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _diff(a, b): \n    return difflib.unified_diff(a, b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_dyad_weight(w): \n    return (is_weight(w) and all((is_dyad(f) for f in w)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def clean_up(): \n    for filename in os.listdir('Emboss'): \n      if filename.startswith('temp_'): \n         try: \n            os.remove(filename) \n         except Exception: \n            pass",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def htons(n): \n    return struct.pack('!h', n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_init_declarator_list_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def basestation(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_latest_gce_image_for_distribution(distribution, compute): \n    return GCE_DISTRIBUTION_TO_IMAGE_MAP[distribution].get_active_image(compute)['selfLink']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def observe_lr(optimizer_name='main', observation_key='lr'): \n    return observe_value(observation_key, (lambda trainer: trainer.updater.get_optimizer(optimizer_name).lr))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_email_for_monthly_fee_payment(email, event_name, date, amount, payment_url): \n    send_email(to=email, action=MONTHLY_PAYMENT_EMAIL, subject=MAILS[MONTHLY_PAYMENT_EMAIL]['subject'].format(event_name=event_name, date=date), html=MAILS[MONTHLY_PAYMENT_EMAIL]['message'].format(event_name=event_name, date=date, payment_url=payment_url, amount=amount, app_name=get_settings()['app_name']))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lighten(color, percent): \n    return adjust(color, 2, percent)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def batch_get_value(xs): \n    return [get_value(x) for x in xs]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def inheriting_field_data(kvs): \n    return InheritingFieldData(inheritable_names=InheritanceMixin.fields.keys(), kvs=kvs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_file(name): \n    with _open(name, 'r', encoding='utf-8') as f: \n      return f.read()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pnt_func(f): \n    return double_output(f, [c_void_p, c_int])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def git_line(*items): \n    return ('   '.join(items) + '\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_user(email, password, is_verified=True): \n    DataManager.create_user([email, password], is_verified=is_verified)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_expression_statement(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iscode(object): \n    return isinstance(object, types.CodeType)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xthreaded(func): \n    return threaded_factory(func, False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return ImportDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_index(group): \n    return (u'%s_%s' % (settings.ES_INDEX_PREFIX, settings.ES_WRITE_INDEXES[group]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _patch_arrays(): \n    ARRAYS['data'] = {'meta_paths': [('traces',)], 'items': list(TRACE_NAMES)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_file(data): \n    with open('requirements_all.txt', 'r') as req_file: \n      return (data == ''.join(req_file))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def powerset(values): \n    return concat((combinations(values, i) for i in range((len(values) + 1))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_nodes_select(call=None): \n    return salt.utils.cloud.list_nodes_select(list_nodes_full(get_location()), __opts__['query.selection'], call)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def T3(ds, count, timeperiod=(- (2 ** 31)), vfactor=(-4e+37)): \n    return call_talib_with_ds(ds, count, talib.T3, timeperiod, vfactor)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_ssl_cacerts(): \n    return SSL_CACERTS.get()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_absolute_url(path): \n    return u'http://testserver/{}'.format(path.lstrip(u'/'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO___sizeof__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _write_file_prefix(f, interpreter): \n    if interpreter: \n      shebang = (('#!' + interpreter.encode(shebang_encoding)) + '\\n') \n      f.write(shebang)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _run_as_pg(command): \n    with cd('~postgres'): \n      return sudo(command, user='postgres')",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gdal_full_version(): \n    return _version_info(u'')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getAreaLoopAbsolute(loop): \n    return abs(getAreaLoop(loop))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hough_ellipse(img, threshold=4, accuracy=1, min_size=4, max_size=None): \n    return _hough_ellipse(img, threshold, accuracy, min_size, max_size)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_email_valid(email_address): \n    return (invalid_email_reason(email_address, '') is None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def contains(a, b): \n    return all(((a.get(k) == v) for (k, v) in b.items()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def weights_bartlett(nlags): \n    return (1 - (np.arange((nlags + 1)) / (nlags + 1.0)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def adjust_timestamp(ts, offset, here=utcoffset): \n    return (ts - ((offset - here()) * 3600))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def source_key(resp): \n    return Timestamp((resp.getheader('x-backend-timestamp') or resp.getheader('x-put-timestamp') or resp.getheader('x-timestamp') or 0))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def rstrips(text, remove): \n    return _strips('r', text, remove)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup(app): \n    app.add_builder(HydeJSONHTMLBuilder)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_body_barycentric_posvel(body, time, ephemeris=None): \n    return _get_body_barycentric_posvel(body, time, ephemeris)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skip(msg=None): \n    return skipif(True, msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uptime(proxy): \n    if proxy: \n      return {'uptime': _get_grain(proxy, 'uptime')}",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def modify_label(id, **data): \n    models.Label.smart_get(id).update_object(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_view(request): \n    return HttpResponse('Hello   world')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def serializeObject(object_): \n    return base64pickle(object_)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def package(pkg_name, update=False): \n    if (not is_installed(pkg_name)): \n      install(pkg_name, update)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_bban_from_iban(iban): \n    return normalize_iban(iban)[4:]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_quartiles(q1, q3): \n    return graph_objs.Scatter(x=[0, 0], y=[q1, q3], text=[('lower-quartile:   ' + '{:0.2f}'.format(q1)), ('upper-quartile:   ' + '{:0.2f}'.format(q3))], mode='lines', line=graph_objs.Line(width=4, color='rgb(0,0,0)'), hoverinfo='text')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encrypt_password(username, password): \n    return hashlib.sha1((username + password)).hexdigest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sortedURIs(service_element): \n    return [uri_element.text for uri_element in prioSort(service_element.findall(uri_tag))]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def parse(handle): \n    while True: \n      record = __read(handle) \n      if (not record): \n         break \n      (yield record)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def ROCR(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.ROCR, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xml_safe(value): \n    return CONTROL_CHARACTERS.sub('?', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bridge_has_service_port(bridge): \n    return bridge_has_port(bridge, is_trunk_service_port)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def migrate_up(manager): \n    if db_utils.auth_tables_exist(manager): \n      manager.execute_script(UP_SQL)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _install_instrumented_lookups(): \n    _install_lookups(dict(instance_state=_instrumentation_factory.state_of, instance_dict=_instrumentation_factory.dict_of, manager_of_class=_instrumentation_factory.manager_of_class))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nopackage(pkg_name): \n    if is_installed(pkg_name): \n      uninstall(pkg_name)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def needsRunningReactor(reactor, thunk): \n    reactor.callWhenRunning(thunk)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def security_group_rule_get(context, security_group_rule_id): \n    return IMPL.security_group_rule_get(context, security_group_rule_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timenow(): \n    return time.strftime('%d/%m/%Y   %H:%M:%S', time.localtime(time.time()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configuration_errors(): \n    return cache.get(u'configuration-errors', [])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_needs_reboot(): \n    return salt.utils.win_update.needs_reboot()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def screenwords(imgdata): \n    if (config.TESSERACT_CMD is not None): \n      proc = subprocess.Popen([config.TESSERACT_CMD, 'stdin', 'stdout'], stdin=subprocess.PIPE, stdout=subprocess.PIPE) \n      proc.stdin.write(imgdata) \n      proc.stdin.close() \n      words = set() \n      result = [] \n      size = MAXVALLEN \n      for line in proc.stdout: \n         if (size == 0): \n            break \n         for word in line.split(): \n            if (word not in words): \n               if (len(word) <= size): \n                  words.add(word) \n                  result.append(word) \n                  size -= len(word) \n               else: \n                  size = 0 \n                  break \n      if result: \n         return result",
        "line_count": 21,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def httpbin(*suffix): \n    return (HTTPBIN_URL + '/'.join(suffix))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rehashconf(): \n    return __salt__['ps.pkill']('znc', signal=signal.SIGHUP)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def teardown(): \n    shutil.rmtree(TMP_TEST_DIR)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_key(): \n    return jwt.rsa_load(settings.WEBAPPS_RECEIPT_KEY)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_tag_url(question_id): \n    return reverse('questions.add_tag', kwargs={'question_id': question_id})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def migration_get_unconfirmed_by_dest_compute(context, confirm_window, dest_compute): \n    return IMPL.migration_get_unconfirmed_by_dest_compute(context, confirm_window, dest_compute)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wipe_yum_cache(repository): \n    return run_from_args(['yum', '--disablerepo=*', ('--enablerepo=' + repository), 'clean', 'expire-cache'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addparentstofks(rels, fks): \n    for j in rels: \n      son = index(fks, j[1]) \n      parent = index(fks, j[0]) \n      fks[son][2] = fks[son][2].replace('models.Model', parent) \n      if (parent not in fks[son][0]): \n         fks[son][0].append(parent)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def workers_init(): \n    return IMPL.workers_init()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def image_create(context, values): \n    return _image_update(context, values, None, False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def article(word, function=INDEFINITE, gender=MALE): \n    return (((function == DEFINITE) and definite_article(word, gender)) or indefinite_article(word, gender))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_admin_static_url(): \n    return getattr(settings, 'ADMIN_MEDIA_PREFIX', (get_static_url() + 'admin/'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def variance(X, condition=None, **kwargs): \n    return cmoment(X, 2, condition, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def periodic_task(*args, **options): \n    return task(**dict({u'base': PeriodicTask}, **options))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sort(tuples, allitems): \n    for set_ in sort_as_subsets(tuples, allitems): \n      for s in set_: \n         (yield s)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def serialize_args(*args, **kwargs): \n    return serialize_obj((args, kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unpublish_collection(committer_id, collection_id): \n    _unpublish_activity(committer_id, collection_id, feconf.ACTIVITY_TYPE_COLLECTION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def checkLRC(data, check): \n    return (computeLRC(data) == check)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _reinstall_default_lookups(): \n    _install_lookups(dict(instance_state=_default_state_getter, instance_dict=_default_dict_getter, manager_of_class=_default_manager_getter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def csm_indptr(csm): \n    return csm_properties(csm)[2]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def verify(*names, **kwargs): \n    return __salt__['lowpkg.verify'](*names, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pickleMethod(method): \n    return (unpickleMethod, (method.im_func.__name__, method.im_self, method.im_class))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nth(n, iterable, default=None): \n    return next(islice(iterable, n, None), default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return CuttingRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_c(): \n    return _USE_C",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_abstract_declarator_opt_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_output(outputs, key): \n    for output in outputs: \n      if (output['OutputKey'] == key): \n         return output['OutputValue']",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def randrange(n, vmin, vmax): \n    return (((vmax - vmin) * np.random.rand(n)) + vmin)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deploy_snmp(snmp, host=None, admin_username=None, admin_password=None, module=None): \n    return __execute_cmd('deploy   -v   SNMPv2   {0}   ro'.format(snmp), host=host, admin_username=admin_username, admin_password=admin_password, module=module)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def latency(): \n    return str(random.random())[:7]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookupCanonicalName(name, timeout=None): \n    return getResolver().lookupCanonicalName(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def match(pattern, string, flags=0): \n    return _compile(pattern, flags).match(string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return ProfileRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_shift_expression_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_branch_head(branch): \n    return ('%s@head' % branch)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def public(f): \n    return f",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_get_new_command(): \n    assert (get_new_command(Command(u'ps   -ef   |\\xa0grep   foo')) == 'ps   -ef   |   grep   foo')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read_double_matrix(fid, rows, cols): \n    return _unpack_matrix(fid, rows, cols, dtype='>f8', out_dtype=np.float64)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def batch_size(items, size): \n    return [items[i:(i + size)] for i in xrange(0, len(items), size)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def tearDownModule(): \n    os.remove(KNOWN_DEV_YAML_PATH)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connect_to_autoscale(region=None): \n    return _create_client(ep_name='autoscale', region=region)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_language_changer(request, func): \n    request._language_changer = func",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def commit(using=None): \n    get_connection(using).commit()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_max_workspace_size(): \n    return _max_workspace_size",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_type_qos_disassociate(context, qos_specs_id, type_id): \n    return IMPL.volume_type_qos_disassociate(context, qos_specs_id, type_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expand_tokens(tokens, equal=False): \n    for token in tokens: \n      for pre in token.pre_tags: \n         (yield pre) \n      if ((not equal) or (not token.hide_when_equal)): \n         if token.trailing_whitespace: \n            (yield (token.html() + token.trailing_whitespace)) \n         else: \n            (yield token.html()) \n      for post in token.post_tags: \n         (yield post)",
        "line_count": 10,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def strip_proto(url): \n    return re.sub('^[^:/]+://', '', url)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def machines(): \n    return [name for (name, state) in _status()]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _env_is_exposed(env): \n    return salt.utils.check_whitelist_blacklist(env, whitelist=__opts__['svnfs_env_whitelist'], blacklist=__opts__['svnfs_env_blacklist'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def time_format(value, format=None, use_l10n=None): \n    return dateformat.time_format(value, get_format((format or 'TIME_FORMAT'), use_l10n=use_l10n))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_non_string_sequence(obj): \n    return ((not isinstance(obj, six.string_types)) and isinstance(obj, Sequence))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cmd_run(module, cmd, check_rc=True): \n    return module.run_command(cmd.split('   '), check_rc=check_rc)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _raises_invalid_signature(**kwargs): \n    return Raises(MatchesException(InvalidSignature, Equals(InvalidSignature(**kwargs))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def drop(n, seq): \n    return itertools.islice(seq, n, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quality_parsed(mime_type, parsed_ranges): \n    return fitness_and_quality_parsed(mime_type, parsed_ranges)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_doctypes_for_user_permissions(): \n    return list(set([p.parent for p in get_valid_perms() if p.set_user_permissions]))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def subclass_exception(name, parent, module): \n    return type(bytes_if_py2(name), (parent,), {u'__module__': module})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _isnumber(string): \n    return _isconvertible(float, string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_schedules(profile='pagerduty', subdomain=None, api_key=None): \n    return _list_items('schedules', 'id', profile=profile, subdomain=subdomain, api_key=api_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_uuid(zone): \n    return ((len(zone) == 36) and (zone.index('-') == 8))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getvalue(name, default): \n    return getattr(settings, name, default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def error_override(self, msg): \n    self.exit(2, msg=None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pixel_print(ansicolor): \n    sys.stdout.write(('\\x1b[48;5;%sm   \\x1b[0m' % ansicolor))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def regex_escape(string): \n    return re.escape(string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ordlist(s): \n    return map(ord, s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _server_group_count_members_by_user(context, group, user_id): \n    return group.count_members_by_user(user_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __py_new(name, string=''): \n    return __get_builtin_constructor(name)(string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def kdd_mapk(actual, predicted, k=10): \n    return np.mean([kdd_apk(a, p, k) for (a, p) in zip(actual, predicted)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ext_pillar(minion_id, pillar, *args, **kwargs): \n    return POSTGRESExtPillar().fetch(minion_id, pillar, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_terms(terms, parent): \n    for term in terms: \n      if (type(terms[term]) != dict): \n         print(((' DCTB ' + parent) + term)) \n      else: \n         print_terms(terms[term], ((parent + term) + '.'))",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def compute_node_get_all(context): \n    return IMPL.compute_node_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def out_of_date(original, derived): \n    return ((not os.path.exists(derived)) or (os.stat(derived).st_mtime < os.stat(original).st_mtime))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def tree_post_save_handler(sender, instance, **kwargs): \n    instance.get_descendants(include_self=True).update(_ct_inventory=None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def followed_by(username, number=(-1), etag=None): \n    return (gh.followed_by(username, number, etag) if username else [])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def partial_max(a): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def restore_long_table_names(): \n    for table in metadata.tables.values(): \n      table.name = table._original_name \n      del table._original_name",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def CDL3LINESTRIKE(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDL3LINESTRIKE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_statement_list_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def display_action(parser, token): \n    return DisplayAction.handle_token(parser, token)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return OutsetRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reduce_abs_inequalities(exprs, gen): \n    return And(*[reduce_abs_inequality(expr, rel, gen) for (expr, rel) in exprs])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _assert_labels_equal(labels_a, labels_b, ignore_pos=False): \n    for (label_a, label_b) in zip(labels_a, labels_b): \n      assert_array_equal(label_a.vertices, label_b.vertices) \n      assert_true((label_a.name == label_b.name)) \n      assert_true((label_a.hemi == label_b.hemi)) \n      if (not ignore_pos): \n         assert_array_equal(label_a.pos, label_b.pos)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def rand_text(): \n    return ('%s%d' % (random.choice(dummy_text), random.randrange(0, 9999)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def str_to_hex(string): \n    return ':'.join((x.encode('hex') for x in string))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read_element_binary(stream, size): \n    return BytesIO(stream.read(size))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sqrt(x): \n    return Sqrt()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(*args, **kwargs): \n    return _UrandomRNG()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isList(l): \n    return (hasattr(l, '__iter__') or (type(l) in (types.ListType, types.TupleType)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def kron(lh_op, rh_op, size): \n    return lo.LinOp(lo.KRON, size, [rh_op], lh_op)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize_date(date): \n    return date.replace(tzinfo=tz.tzutc())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def task_create_flocker_pool_file(): \n    return sequence([run('mkdir   -p   /var/opt/flocker'), run('truncate   --size   10G   /var/opt/flocker/pool-vdev'), run('ZFS_MODULE_LOADING=yes   zpool   create   flocker   /var/opt/flocker/pool-vdev')])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_missing_input(tmpdir): \n    with tmpdir.as_cwd(): \n      for cmd in ['create', 'wait', 'describe', 'delete', 'pytest']: \n         with pytest.raises(FileNotFoundError): \n            main([cmd])",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def reap_children(): \n    for col in all_living_collectors(): \n      now = int(time.time()) \n      status = col.proc.poll() \n      if (status is None): \n         continue \n      col.proc = None \n      if (status == 13): \n         LOG.info('removing   %s   from   the   list   of   collectors   (by   request)', col.name) \n         col.dead = True \n      elif (status != 0): \n         LOG.warning('collector   %s   terminated   after   %d   seconds   with   status   code   %d,   marking   dead', col.name, (now - col.lastspawn), status) \n         col.dead = True \n      else: \n         register_collector(Collector(col.name, col.interval, col.filename, col.mtime, col.lastspawn))",
        "line_count": 14,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def _isLeft(a, b, c): \n    return ((((b[0] - a[0]) * (c[1] - a[1])) - ((b[1] - a[1]) * (c[0] - a[0]))) > 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def missing_newline(physical_line): \n    if (physical_line.rstrip() == physical_line): \n      return (len(physical_line), 'W292   no   newline   at   end   of   file')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getPluginsDirectoryPath(): \n    return archive.getAnalyzePluginsDirectoryPath()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_def(p): \n    p[0] = ('FUNC', p[2], p[4], p[7])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def block_devices(attrs=None, where=None): \n    return _osquery_cmd(table='block_devices', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_float_broken(): \n    return (str(python.NaN) != str(struct.unpack('!d', '\\xff\\xf8\\x00\\x00\\x00\\x00\\x00\\x00')[0]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TR5(rv, max=4, pow=False): \n    return _TR56(rv, sin, cos, (lambda x: (1 - x)), max=max, pow=pow)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_allprop_array(values, target): \n    for value in values: \n      np.testing.assert_array_equal(value, target)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def teardown(): \n    shutil.rmtree(TMP_TEST_DIR)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_condition(condition_class, **kwargs): \n    return Condition.objects.create(proxy_class=_class_path(condition_class), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_ident(): \n    return (-1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_request_in_themed_site(): \n    return (configuration_helpers.is_site_configuration_enabled() or microsite.is_request_in_microsite())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def increment(name): \n    accumulate(name, 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user(): \n    redirect(URL(c='admin', args=request.args, vars=request.vars))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def patch_subprocess(): \n    patch_module('subprocess')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def scratchpad(pl, icons=SCRATCHPAD_ICONS): \n    return [{u'contents': icons.get(w.scratchpad_state, icons[u'changed']), u'highlight_groups': scratchpad_groups(w)} for w in get_i3_connection().get_tree().descendents() if (w.scratchpad_state != u'none')]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def checkerboard(): \n    return load('chessboard_GRAY.png')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def end(value=None): \n    return ReturnEvent(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def row_match(row, conditions): \n    return all((condition_match(row, cond) for cond in conditions))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def resource_mapping(): \n    return {'OS::Heat::ResourceChain': ResourceChain}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RegisterLateBindingCallback(target_name, callback, **kwargs): \n    _LATE_BINDING_STORE.setdefault(target_name, []).append((callback, kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_value_from_json(json_dict, sensor_type, group, tool): \n    if (group in json_dict): \n      if (sensor_type in json_dict[group]): \n         if ((sensor_type == 'target') and (json_dict[sensor_type] is None)): \n            return 0 \n         else: \n            return json_dict[group][sensor_type] \n      elif (tool is not None): \n         if (sensor_type in json_dict[group][tool]): \n            return json_dict[group][tool][sensor_type]",
        "line_count": 9,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def next_char(input_iter): \n    for ch in input_iter: \n      if (ch != '\\\\'): \n         (yield (ch, False)) \n         continue \n      ch = next(input_iter) \n      representative = ESCAPE_MAPPINGS.get(ch, ch) \n      if (representative is None): \n         continue \n      (yield (representative, True))",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _dashCapitalize(name): \n    return '-'.join([word.capitalize() for word in name.split('-')])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def picker(field_name): \n    return (lambda row: row[field_name])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def installed_packages(image=None): \n    return _get_components('Package   Identity', 'Packages', 'Installed')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rebuild(s): \n    return construct(deconstruct(s))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _TagSize(field_number): \n    return _VarintSize(wire_format.PackTag(field_number, 0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def organisation(): \n    return s3db.org_organisation_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True): \n    numpy.testing.assert_array_almost_equal(cupy.asnumpy(x), cupy.asnumpy(y), decimal=decimal, err_msg=err_msg, verbose=verbose)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def equal_weight(x, y): \n    return 1",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_load(jid, load, minions=None): \n    with _get_serv(commit=True) as cur: \n      sql = 'INSERT   INTO   `jids`\\n                                             (`jid`,   `load`)\\n                                                VALUES   (%s,   %s)' \n      try: \n         cur.execute(sql, (jid, json.dumps(load))) \n      except MySQLdb.IntegrityError: \n         pass",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def run_with_stack_context(context, func): \n    with context: \n      return func()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def BlankLine(): \n    return Leaf(token.NEWLINE, '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expand_log(expr, deep=True, force=False): \n    return sympify(expr).expand(deep=deep, log=True, mul=False, power_exp=False, power_base=False, multinomial=False, basic=False, force=force)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _default_chunk_size(): \n    with open(__file__, 'r', encoding='latin-1') as f: \n      return f._CHUNK_SIZE",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def url_path_parts(url): \n    return url_path(url).split('/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def post(url, data=None, json=None, **kwargs): \n    return request('post', url, data=data, json=json, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_suite(): \n    return unittest.TestSuite((DocumentationTestCase('test_readme_encoding'), DocFileSuite(os.path.join(os.pardir, os.pardir, 'README.txt'))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def teardown_module(): \n    if (TEST_FILE in os.listdir('.')): \n      os.remove(TEST_FILE)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def scale(val, inlow=(-1), inhigh=1, outlow=1000, outhigh=2000): \n    return ((((float(val) - inlow) / (inhigh - inlow)) * (outhigh - outlow)) + outlow)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_time(wmi_ts): \n    return (2100, 12, 24, 11, 30, 47, 0, 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def endswith_lf(line): \n    return line.endswith(('\\n' if isinstance(line, str) else '\\n'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_option(s): \n    return ListValueComponent.create(s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _consume_subscriptions(topic): \n    return list(topic.list_subscriptions())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_pony(app, global_conf): \n    return PonyMiddleware(app)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_rpc(deadline=None, callback=None): \n    return apiproxy_stub_map.UserRPC(_APP_IDENTITY_SERVICE_NAME, deadline, callback)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_public_endpoint(path=''): \n    return get_endpoint(settings.EDXNOTES_PUBLIC_API, path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return TowerRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cache_security_group_exists(name, region=None, key=None, keyid=None, profile=None): \n    return bool(describe_cache_security_groups(name=name, region=region, key=key, keyid=keyid, profile=profile))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def route_path(route_name, request, *elements, **kw): \n    return request.route_path(route_name, *elements, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _default_callback_zip(src_path, fi, nfiles): \n    sys.stdout.write(('Adding   to   zip   (%d   of   %d):   %s\\n' % ((fi + 1), nfiles, src_path)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def C(classname): \n    return objc.objc_getClass(_utf8(classname))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_mapped_group_ids(group_ids, mapping_id, identity_api): \n    for group_id in group_ids: \n      try: \n         identity_api.get_group(group_id) \n      except exception.GroupNotFound: \n         raise exception.MappedGroupNotFound(group_id=group_id, mapping_id=mapping_id)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def isDirectorySetting(): \n    return settings.getReadRepository(PolyfileRepository()).directorySetting.value",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addObserverAndInit(name, cb): \n    vehicle.add_attribute_listener(name, cb)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def removePost(klass, name, func): \n    _removeHook(klass, name, POST, func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_lower(value): \n    return unicode(value).islower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def itermessages(conn, channel, queue, limit=1, timeout=None, callbacks=None, **kwargs): \n    return drain_consumer(conn.Consumer(queues=[queue], channel=channel, **kwargs), limit=limit, timeout=timeout, callbacks=callbacks)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getSkeinforgePath(subName=''): \n    return getJoinedPath(getFabmetheusPath('skeinforge_application'), subName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def neighbors(G, n): \n    return G.neighbors(n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('quota' if ('quota.report' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def rand_int_id(start=0, end=2147483647): \n    return random.randint(start, end)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uri_reference(uri, encoding='utf-8'): \n    return URIReference.from_string(uri, encoding)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do(cls, *args, **opts): \n    return do_cmd(cls(*args, **opts))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_not_url_safe(name): \n    return (len(list_url_unsafe_chars(name)) > 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_if_bad2(p): \n    p[0] = 'INVALID   LINE   NUMBER   IN   THEN'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_class_get_defaults(context): \n    return IMPL.quota_class_get_defaults(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def multicall(conf, context, topic, msg, timeout=None): \n    return rpc_amqp.multicall(conf, context, topic, msg, timeout, rpc_amqp.get_connection_pool(conf, Connection))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def UTF8StringToArray(instr): \n    return [ord(c) for c in instr]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def nll_loss(input, target, weight=None, size_average=True): \n    return _functions.thnn.NLLLoss(size_average, weight=weight)(input, target)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def invert_transform(trans): \n    return Transform(trans['to'], trans['from'], linalg.inv(trans['trans']))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_int8(fid): \n    return _unpack_simple(fid, '>i1', np.int8)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('hiera' if salt.utils.which('hiera') else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def games(year, week=None, home=None, away=None, kind='REG', started=False): \n    return list(games_gen(year, week, home, away, kind, started))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_interval(): \n    return 10",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lineno(loc, strg): \n    return (strg.count('\\n', 0, loc) + 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hinge_loss(y_pred, y_true): \n    with tf.name_scope('HingeLoss'): \n      return tf.reduce_mean(tf.maximum((1.0 - (y_true * y_pred)), 0.0))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def url_slash_cleaner(url): \n    return re.sub('(?<!:)/{2,}', '/', url)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _missing_warn(): \n    warnings.warn('One   of   the   clusters   is   empty.   Re-run   kmean   with   a   different   initialization.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def class_renamed(old_name, new_class, message=None): \n    return _defaultdeprecator.class_renamed(None, old_name, new_class, message)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def should_move(move_opt=None): \n    return _bool_fallback(move_opt, (config['import']['move'].get(bool) or config['import']['copy'].get(bool)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getCraftedText(fileName, text, splodgeRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), splodgeRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_estimator(estimator): \n    if ((not hasattr(estimator, 'decision_function')) and (not hasattr(estimator, 'predict_proba'))): \n      raise ValueError('The   base   estimator   should   implement   decision_function   or   predict_proba!')",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_time_format(format='medium', locale=LC_TIME): \n    return Locale.parse(locale).time_formats[format]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def preBuildPage(page, context, data): \n    return (context, data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def client(*args, **kwargs): \n    return _get_default_session().client(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([DemoCover(hass, 'Kitchen   Window'), DemoCover(hass, 'Hall   Window', 10), DemoCover(hass, 'Living   Room   Window', 70, 50)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def regions(**kw_params): \n    return get_regions('swf', connection_cls=boto.swf.layer1.Layer1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pool_add(pool_name, **kwargs): \n    return ceph_cfg.pool_add(pool_name, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_word_blacklist_regex(): \n    return re.compile((('\\\\b(' + '|'.join(map(re.escape, settings.CC_WORD_BLACKLIST))) + ')\\\\b'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DocumentListAclFeedFromString(xml_string): \n    return atom.CreateClassFromXMLString(DocumentListAclFeed, xml_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_any_marketing_link_set(names): \n    return any((is_marketing_link_set(name) for name in names))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def group_volume_type_mapping_create(context, group_id, volume_type_id): \n    return IMPL.group_volume_type_mapping_create(context, group_id, volume_type_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_widget_with_placeholder(widget): \n    return isinstance(widget, (TextInput, Textarea, PasswordInput))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cache_from_env(env, allow_none=False): \n    return item_from_env(env, 'swift.cache', allow_none)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trade(events, strategy, portfolio, execution, heartbeat): \n    while True: \n      try: \n         event = events.get(False) \n      except queue.Empty: \n         pass \n      else: \n         if (event is not None): \n            if (event.type == 'TICK'): \n               logger.info('Received   new   tick   event:   %s', event) \n               strategy.calculate_signals(event) \n               portfolio.update_portfolio(event) \n            elif (event.type == 'SIGNAL'): \n               logger.info('Received   new   signal   event:   %s', event) \n               portfolio.execute_signal(event) \n            elif (event.type == 'ORDER'): \n               logger.info('Received   new   order   event:   %s', event) \n               execution.execute_order(event) \n      time.sleep(heartbeat)",
        "line_count": 18,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def stop(win, ctx): \n    if hasattr(ctx, 'inspector'): \n      win.unbind(children=ctx.inspector.on_window_children, on_keyboard=ctx.inspector.keyboard_shortcut) \n      win.remove_widget(ctx.inspector) \n      del ctx.inspector",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __random_string(size=6): \n    return ('RS-' + ''.join((random.choice((string.ascii_uppercase + string.digits)) for x in range(size))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _env_is_exposed(env): \n    return salt.utils.check_whitelist_blacklist(env, whitelist=__opts__['hgfs_env_whitelist'], blacklist=__opts__['hgfs_env_blacklist'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_cookie_present(response): \n    return (response.cookies.get(settings.SESSION_COOKIE_NAME) and response.cookies[settings.SESSION_COOKIE_NAME].value)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dateify(datestring): \n    return denumify(datestring, 'XXXX-XX-XX   XX:XX:XX')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_coffee(): \n    logger.info(get_coffee.__doc__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_job(name): \n    return (name in _jobs())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_class_update_resource(context, resource, new_resource): \n    return IMPL.quota_class_update_resource(context, resource, new_resource)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mkpath(*paths): \n    return (os.sep + os.sep.join(paths))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def object_class(type): \n    return _TYPE_MAP.get(type, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def configure_listener(mapper, class_): \n    for col_attr in mapper.column_attrs: \n      column = col_attr.columns[0] \n      if (column.default is not None): \n         default_listener(col_attr, column.default)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def relation(*arg, **kw): \n    return relationship(*arg, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rating_post_save(instance, *args, **kwargs): \n    ResourceBase.objects.filter(id=instance.object_id).update(rating=instance.rating)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_member_definitions(group, include_failed=False): \n    return [(resource.name, resource.t) for resource in get_members(group, include_failed)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def archive_deleted_rows(max_rows=None): \n    return IMPL.archive_deleted_rows(max_rows=max_rows)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def triu(m, k=0): \n    return (m * (1 - tri(m.shape[0], m.shape[1], k=(k - 1), dtype=m.dtype)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_test_blockdevice_volume_for_dataset_id(dataset_id, attached_to=None): \n    return BlockDeviceVolume(blockdevice_id=_create_blockdevice_id_for_test(dataset_id), size=int(REALISTIC_BLOCKDEVICE_SIZE.to_Byte()), attached_to=attached_to, dataset_id=UUID(dataset_id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def key_pair_get_all_by_user(context, user_id): \n    return IMPL.key_pair_get_all_by_user(context, user_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dup_normal(f, K): \n    return dup_strip([K.normal(c) for c in f])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cv_available(): \n    return ('cv' in globals())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def osquery_registry(attrs=None, where=None): \n    return _osquery_cmd(table='osquery_registry', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def batch_transformer(U, thetas, out_size, name='BatchSpatialTransformer'): \n    with tf.variable_scope(name): \n      (num_batch, num_transforms) = map(int, thetas.get_shape().as_list()[:2]) \n      indices = [([i] * num_transforms) for i in xrange(num_batch)] \n      input_repeated = tf.gather(U, tf.reshape(indices, [(-1)])) \n      return transformer(input_repeated, thetas, out_size)",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def toLux(raw): \n    return np.power(10, (raw * LOG_LUX_RATIO))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_user_agent(name='python-requests'): \n    return ('%s/%s' % (name, __version__))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_rules(family='ipv4'): \n    return _parse_conf(in_mem=True, family=family)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_(attrs=None, where=None): \n    return _osquery_cmd(table='file', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_node_search_by_hypervisor(context, hypervisor_match): \n    return IMPL.compute_node_search_by_hypervisor(context, hypervisor_match)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_inclusive_or_expression_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_link(link_text): \n    return link_text.strip(' DCTB \\r\\n   \\'\"')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_not_in(x, thing, msg=''): \n    if (x in thing): \n      assert False, (msg or ('%r   is   in   %r' % (x, thing)))",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def isunauthenticated(func): \n    return getattr(func, 'unauthenticated', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeXMLTags(tagStr): \n    return _makeTags(tagStr, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _image_member_format(member_ref): \n    return {'id': member_ref['id'], 'image_id': member_ref['image_id'], 'member': member_ref['member'], 'can_share': member_ref['can_share'], 'status': member_ref['status'], 'created_at': member_ref['created_at'], 'updated_at': member_ref['updated_at']}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_variable(name, value): \n    __build_rules[name] = value",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_rgb_to_hsl_part_1(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def autolabel(rects): \n    for rect in rects: \n      height = rect.get_height() \n      ax.text((rect.get_x() + (rect.get_width() / 2.0)), (1.05 * height), ('%d' % int(height)), ha='center', va='bottom')",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def on_plugin_shutdown(config): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_warns(warning_class, func, *args, **kw): \n    with WarningManager(record=True) as l: \n      warnings.simplefilter('always') \n      func(*args, **kw) \n      if (not (len(l) > 0)): \n         raise AssertionError(('No   warning   raised   when   calling   %s' % func.__name__)) \n      if (not (l[0].category is warning_class)): \n         raise AssertionError(('First   warning   for   %s   is   not   a   %s(   is   %s)' % (func.__name__, warning_class, l[0])))",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def deny(ip): \n    return __apf_cmd('-d   {0}'.format(ip))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _removeHandlerRef(wr): \n    if (_acquireLock is not None): \n      _acquireLock() \n      try: \n         if (wr in _handlerList): \n            _handlerList.remove(wr) \n      finally: \n         _releaseLock()",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def exception_context(e): \n    if hasattr(e, '_context'): \n      return e._context",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def aggregated_indicator(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def guestbook_key(guestbook_name=DEFAULT_GUESTBOOK_NAME): \n    return ndb.Key('Guestbook', guestbook_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uses_yarn(version): \n    return (version_gte(version, '2') or (version_gte(version, '0.23') and (not version_gte(version, '1'))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def readPlistFromString(data): \n    return readPlist(StringIO(data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def virtual_interface_create(context, values): \n    return IMPL.virtual_interface_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def abort_action(session, task): \n    raise importer.ImportAbort()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_if_bad(p): \n    p[0] = 'BAD   RELATIONAL   EXPRESSION'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rsa_crt_dmq1(private_exponent, q): \n    return (private_exponent % (q - 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def walk_posix_integration_targets(): \n    for target in walk_integration_targets(): \n      if ('posix/' in target.aliases): \n         (yield target)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def reduce_mtx(distmat, indices): \n    return distmat.take(indices, 0).take(indices, 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_ipver_str(ip_version): \n    return IP_VERSION_DICT.get(ip_version, '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def collect(names, match=(lambda name: True), match_dir=(lambda name: True)): \n    for name in names: \n      if os.path.isdir(name): \n         for (root, dirs, filenames) in os.walk(name): \n            dirs[:] = [dir for dir in dirs if match_dir(dir)] \n            for filename in filenames: \n               if match(filename): \n                  (yield os.path.join(root, filename)) \n      else: \n         (yield name)",
        "line_count": 9,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def is_resource_enabled(resource): \n    return ((use_resources is None) or (resource in use_resources))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def eventloop(conn, limit=None, timeout=None, ignore_timeouts=False): \n    for i in ((limit and range(limit)) or count()): \n      try: \n         (yield conn.drain_events(timeout=timeout)) \n      except socket.timeout: \n         if (timeout and (not ignore_timeouts)): \n            raise",
        "line_count": 6,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def tp_read(fd, n): \n    return get_hub().threadpool.apply_e(BaseException, _read, (fd, n))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unstyle(text): \n    return strip_ansi(text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def contract_schema(): \n    _sync_repo(repo_name=CONTRACT_REPO)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_keys(self): \n    expected = set([u'Norrbotten', u'V\\xe4sterbotten'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def client_end_all(): \n    for (request, socket, context) in CLIENTS.values()[:]: \n      client_end(request, socket, context)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_declaration_list_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sort_string_key(): \n    return sort_string",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __get_storage_module(collection_type): \n    return module_loader.get_module_from_file('serializers', collection_type, 'serializer_file')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decode_string_escape(str_): \n    raise Exception('Should   be   overriden')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index(): \n    s3_redirect_default(URL(f='building'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def distribution_item(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _statsd_tag(course_title): \n    return u'course_email:{0}'.format(course_title)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_master(saltenv='base', prefix=''): \n    return __context__['fileclient'].file_list(saltenv, prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(file, format, **kwargs): \n    with File.as_handle(file, 'r') as fp: \n      for tree in getattr(supported_formats[format], 'parse')(fp, **kwargs): \n         (yield tree)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def GetIndexes(**kwargs): \n    return GetIndexesAsync(**kwargs).get_result()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_review_request_fieldset(fieldset): \n    fieldset_registry.register(fieldset)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def object_header(num_type, length): \n    return (((object_class(num_type).type_name + '   ') + str(length).encode('ascii')) + '\\x00')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def median_low(name, num, minimum=0, maximum=0, ref=None): \n    return calc(name, num, 'median_low', ref)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_hstore_typecaster(conn): \n    with conn.cursor() as cur: \n      try: \n         cur.execute(\"SELECT   'hstore'::regtype::oid\") \n         oid = cur.fetchone()[0] \n         ext.register_type(ext.new_type((oid,), 'HSTORE', ext.UNICODE)) \n      except Exception: \n         pass",
        "line_count": 7,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ParseLogs(logs): \n    return [ParseLogEntry(line) for line in logs.split('\\n') if line]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _get_svc_list(name='*', status=None): \n    return sorted([os.path.basename(el) for el in _get_svc_path(name, status)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def version(**kwargs): \n    return tsql_query('SELECT   @@version', **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addPositives(derivation, paths, positives): \n    for path in paths: \n      loopListsByPath = getLoopListsByPath(derivation, None, path) \n      geometryOutput = triangle_mesh.getPillarsOutput(loopListsByPath) \n      positives.append(geometryOutput)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_api_query(service, table_id): \n    return service.data().ga().get(ids=table_id, start_date='2012-01-01', end_date='2012-01-15', metrics='ga:visits', dimensions='ga:source,ga:keyword', sort='-ga:visits', filters='ga:medium==organic', start_index='1', max_results='25')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pixels_to_points(value, dpi=96): \n    return ((value * 72) / dpi)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_paragraphs(amount, start_with_lorem=False): \n    return _GENERATOR.generate_paragraphs(amount, start_with_lorem)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enableCache(): \n    if (not isinstance(_entityCache, LRUCache)): \n      _entityCache = _LRUCache(size)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def serial_escape(value): \n    return value.replace('\\\\', '\\\\\\\\').replace('   ', '\\\\   ')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ConvertToUnicodeList(arg): \n    return [_ConvertToUnicode(value) for value in _ConvertToList(arg)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def search(pattern, sentence, *args, **kwargs): \n    return compile(pattern, *args, **kwargs).search(sentence)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prop_set(prop, value, extra_args=None, cibfile=None): \n    return item_create(item='property', item_id='{0}={1}'.format(prop, value), item_type=None, create='set', extra_args=extra_args, cibfile=cibfile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def server_poweron(host=None, admin_username=None, admin_password=None, module=None): \n    return __execute_cmd('serveraction   powerup', host=host, admin_username=admin_username, admin_password=admin_password, module=module)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def route2_view(request): \n    return Response('route2')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_alias(alias, canonical): \n    ALIASES[alias] = canonical",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FileSize(APP_PATH): \n    return round((float(os.path.getsize(APP_PATH)) / (1024 * 1024)), 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_cluster_done(cluster): \n    return ((cluster.status.state == 'TERMINATING') or hasattr(cluster.status.timeline, 'enddatetime'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def skip_bom(f): \n    if (f.read(1) != u'\\ufeff'): \n      f.seek(0)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def Sequence(token): \n    return OneOrMore((token + maybeComma))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_type(magic_kind): \n    if (magic_kind not in magic_spec): \n      raise ValueError(('magic_kind   must   be   one   of   %s,   %s   given' % magic_kinds), magic_kind)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getCraftPreferences(pluginName): \n    return settings.getReadRepository(getCraftModule(pluginName).getNewRepository()).preferences",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isinstancemethod(cls, obj): \n    return _isinstancemethod(cls, obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clip(x, x_min, x_max): \n    return Clip(x_min, x_max)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_gravatar_url(email): \n    return ('https://www.gravatar.com/avatar/%s?d=identicon&s=%s' % (hashlib.md5(email).hexdigest(), GRAVATAR_SIZE_PX))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def suggestions(matches, command): \n    for m in matches: \n      if (('name' in m) and ('suggestions' in m)): \n         before = command[:m['start']] \n         after = command[m['end']:] \n         newsuggestions = [] \n         for othermp in sorted(m['suggestions'], key=(lambda mp: mp.section)): \n            mid = ('%s.%s' % (othermp.name, othermp.section)) \n            newsuggestions.append({'cmd': ''.join([before, mid, after]), 'text': othermp.namesection}) \n         m['suggestions'] = newsuggestions",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def broadcast_to(x, shape): \n    return BroadcastTo(shape)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _plot_unit_kde(ax, x, data, color, **kwargs): \n    _ts_kde(ax, x, data, color, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user_autocreate_handler(sender, instance, created, **kwargs): \n    if created: \n      try: \n         profile = instance.profile \n      except: \n         profile = User(user=instance) \n         profile.save()",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def convert_to_octal(file_name): \n    return oct(os.stat(file_name)[stat.ST_MODE])[(-3):]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return SpeedRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stack(context=1): \n    return getouterframes(sys._getframe(1), context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'whittle', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gt(value, arg): \n    return (value > int(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_declarator_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def educate_dashes_oldschool_inverted(s): \n    return s.replace('---', '&#8211;').replace('--', '&#8212;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def conditionally_calculate_md5(params, context, request_signer, **kwargs): \n    if MD5_AVAILABLE: \n      calculate_md5(params, **kwargs)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def floating_ip_bulk_destroy(context, ips): \n    return IMPL.floating_ip_bulk_destroy(context, ips)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add(name, num, minimum=0, maximum=0, ref=None): \n    return calc(name, num, 'add', ref)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_instance(c_instance): \n    return Push(c_instance=c_instance)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_topic_given_document(topic, d, alpha=0.1): \n    return ((document_topic_counts[d][topic] + alpha) / (document_lengths[d] + (K * alpha)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def virtual_interface_get_by_instance(context, instance_id): \n    return IMPL.virtual_interface_get_by_instance(context, instance_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _cleanse_dict(original): \n    return {k: v for (k, v) in original.items() if ('_pass' not in k)}",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def descriptor_global_local_resource_url(block, uri): \n    raise NotImplementedError('Applications   must   monkey-patch   this   function   before   using   local_resource_url   for   studio_view')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def block_device_mapping_get_all_by_volume_id(context, volume_id, columns_to_join=None): \n    return IMPL.block_device_mapping_get_all_by_volume_id(context, volume_id, columns_to_join)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_exec(cmd): \n    return (which(cmd) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generateCookieSecret(): \n    return base64.b64encode((uuid.uuid4().bytes + uuid.uuid4().bytes))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unstopped(tokenstream): \n    return (t for t in tokenstream if (not t.stopped))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def p_item_string_expr(p): \n    p[0] = (p[1][1:(-1)], p[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random_variables(): \n    return tf.get_collection(RANDOM_VARIABLE_COLLECTION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def calc_domain_replace_prefix(_domain): \n    return dict(slash=('//' + _domain), http=('http://' + _domain), https=('https://' + _domain), double_quoted=('\"%s\"' % _domain), single_quoted=(\"'%s'\" % _domain), hex_lower=('//' + _domain).replace('/', '\\\\x2f'), hex_upper=('//' + _domain).replace('/', '\\\\x2F'), slash_esc=s_esc(('//' + _domain)), http_esc=s_esc(('http://' + _domain)), https_esc=s_esc(('https://' + _domain)), double_quoted_esc=('\\\\\"%s\\\\\"' % _domain), single_quoted_esc=(\"\\\\'%s\\\\'\" % _domain), slash_double_esc=('//' + _domain).replace('/', '\\\\\\\\/'), http_double_esc=('http://' + _domain).replace('/', '\\\\\\\\/'), https_double_esc=('https://' + _domain).replace('/', '\\\\\\\\/'), slash_triple_esc=('//' + _domain).replace('/', '\\\\\\\\\\\\/'), http_triple_esc=('http://' + _domain).replace('/', '\\\\\\\\\\\\/'), https_triple_esc=('https://' + _domain).replace('/', '\\\\\\\\\\\\/'), slash_ue=quote_plus(('//' + _domain)), http_ue=quote_plus(('http://' + _domain)), https_ue=quote_plus(('https://' + _domain)), double_quoted_ue=quote_plus(('\"%s\"' % _domain)), single_quoted_ue=quote_plus((\"'%s'\" % _domain)), slash_esc_ue=quote_plus(s_esc(('//' + _domain))), http_esc_ue=quote_plus(s_esc(('http://' + _domain))), https_esc_ue=quote_plus(s_esc(('https://' + _domain))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _filepath_to_path(filepath): \n    return filepath.path",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices_callback, discovery_info=None): \n    add_devices_callback([DemoSwitch('Decorative   Lights', True, None, True), DemoSwitch('AC', False, 'mdi:air-conditioner', False)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iterkeys(d): \n    return iter(getattr(d, _iterkeys)())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def saxify(element_or_tree, content_handler): \n    return ElementTreeProducer(element_or_tree, content_handler).saxify()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_display_date(date): \n    return date.strftime(DISPLAY_DATE_FORMAT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_dependencies(): \n    return config.check_driver_dependencies(__virtualname__, {'requests': HAS_REQUESTS})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RemoveLinkDependenciesFromNoneTargets(targets): \n    for (target_name, target_dict) in targets.iteritems(): \n      for dependency_key in dependency_sections: \n         dependencies = target_dict.get(dependency_key, []) \n         if dependencies: \n            for t in dependencies: \n               if (target_dict.get('type', None) == 'none'): \n                  if targets[t].get('variables', {}).get('link_dependency', 0): \n                     target_dict[dependency_key] = Filter(target_dict[dependency_key], t)",
        "line_count": 8,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def wheels(opts, whitelist=None): \n    return LazyLoader(_module_dirs(opts, 'wheel'), opts, tag='wheel', whitelist=whitelist)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def migration_get_by_instance_and_status(context, instance_uuid, status): \n    return IMPL.migration_get_by_instance_and_status(context, instance_uuid, status)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def directLoop(isWiddershins, loop): \n    if (euclidean.isWiddershins(loop) != isWiddershins): \n      loop.reverse()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def oauth2decorator_from_clientsecrets(filename, scope, message=None): \n    return OAuth2DecoratorFromClientSecrets(filename, scope, message)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sibpath(path, sibling): \n    return os.path.join(os.path.dirname(os.path.abspath(path)), sibling)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getProcessOutputAndValue(executable, args=(), env={}, path=None, reactor=None): \n    return _callProtocolWithDeferred(_EverythingGetter, executable, args, env, path, reactor)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetSigner(secret): \n    return GetSecretsManagerForSecret(secret).GetSigner(secret)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isscalarlike(x): \n    return (np.isscalar(x) or (isdense(x) and (x.ndim == 0)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def field(name): \n    return dict(field=name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reprogress(): \n    if (_last_progress and _last_progress.endswith('\\r')): \n      progress(_last_progress)",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def validate_fields_spec(cls, model, opts, flds, label): \n    for fields in flds: \n      if (type(fields) != tuple): \n         fields = (fields,) \n      for field in fields: \n         if (field in cls.readonly_fields): \n            continue \n         check_formfield(cls, model, opts, label, field) \n         try: \n            f = opts.get_field(field) \n         except models.FieldDoesNotExist: \n            continue \n         if (isinstance(f, models.ManyToManyField) and (not f.rel.through._meta.auto_created)): \n            raise ImproperlyConfigured((\"'%s.%s'   can't   include   the   ManyToManyField   field   '%s'   because   '%s'   manually   specifies   a   'through'   model.\" % (cls.__name__, label, field, field)))",
        "line_count": 13,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def replace(s, old, new, maxreplace=(-1)): \n    return s.replace(old, new, maxreplace)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def display_upstream_changes(registry, xml_parent, data): \n    XML.SubElement(xml_parent, 'jenkins.plugins.displayupstreamchanges.DisplayUpstreamChangesRecorder')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def version_match(required, candidate): \n    return _discover.version_match(required, candidate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def perform_reset(request, obj): \n    return execute_locked(request, obj, _('All   repositories   have   been   reset.'), obj.do_reset, request)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log(msg, level, t=None, obj=None): \n    root.log(msg, level=level, t=t, obj=obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_ipython_extension(ip): \n    warnings.warn('The   Cython   magic   has   been   moved   to   the   Cython   package')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def custom_generate_access_cookie(input_dict, flask_request): \n    return generate_ip_verify_hash(input_dict)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def security_group_get(context, security_group_id): \n    return IMPL.security_group_get(context, security_group_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def KAMA(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.KAMA, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tanh(x): \n    return theano.tensor.tanh(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getlineno(frame): \n    return frame.f_lineno",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _GetThisModuleObjectAndName(): \n    return _GetModuleObjectAndName(globals())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getBodyStructure(msg, extended=False): \n    return _getMessageStructure(msg).encode(extended)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_evokeds(fname, evoked): \n    _write_evokeds(fname, evoked)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_cache_table(metadata, table_name='beaker_cache'): \n    return sa.Table(table_name, metadata, sa.Column('namespace', sa.String(255), primary_key=True), sa.Column('accessed', sa.DateTime, nullable=False), sa.Column('created', sa.DateTime, nullable=False), sa.Column('data', sa.PickleType, nullable=False))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normjoin(*path_parts): \n    return os.path.normpath(os.path.normcase(os.path.join(*path_parts)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def db_version(): \n    return IMPL.db_version()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('ethtool' if ('ethtool.show_driver' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cnv_date(attribute, arg, element): \n    return str(arg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_active_streams(realm): \n    return Stream.objects.filter(realm=realm, deactivated=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _gen_tag(low): \n    return '{0[state]}_|-{0[__id__]}_|-{0[name]}_|-{0[fun]}'.format(low)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _pragma_foreign_keys(connection, on): \n    connection.execute(('PRAGMA   foreign_keys=%s' % ('ON' if on else 'OFF')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def instance_system_metadata_get(context, instance_uuid): \n    return IMPL.instance_system_metadata_get(context, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_model_name(model): \n    return model._meta.model_name",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_uids(doctree, condition): \n    for node in doctree.traverse(condition): \n      node.uid = uuid4().hex \n      (yield node)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_field_data_type(field): \n    return (field.description % field.__dict__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___new__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_update(context, service_id, values): \n    return IMPL.service_update(context, service_id, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_setting(key, env=None): \n    return settings.get(key, env=env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO___setattr__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_timeline_data(doctype, name): \n    return dict(frappe.db.sql(u'select   unix_timestamp(from_time),   count(*)\\n DCTB  DCTB from   `tabTimesheet   Detail`   where   project=%s\\n DCTB  DCTB  DCTB and   from_time   >   date_sub(curdate(),   interval   1   year)\\n DCTB  DCTB  DCTB and   docstatus   <   2\\n DCTB  DCTB  DCTB group   by   date(from_time)', name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def migration_get_by_id_and_instance(context, migration_id, instance_uuid): \n    return IMPL.migration_get_by_id_and_instance(context, migration_id, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_root(): \n    return (os.geteuid() == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_secret(filename='/etc/appscale/secret.key'): \n    return read_file(os.path.abspath(filename), chomp=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def funcNull(mapDict, dctData, chilidDict, data): \n    return data",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, **kw): \n    return loads(fp.read(), encoding=encoding, cls=cls, object_hook=object_hook, parse_float=parse_float, parse_int=parse_int, parse_constant=parse_constant, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def server_console_output(request, instance_id, tail_length=None): \n    return novaclient(request).servers.get_console_output(instance_id, length=tail_length)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _dict_subset(keys, master_dict): \n    return dict([(k, v) for (k, v) in six.iteritems(master_dict) if (k in keys)])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def qnwbeta(n, a=1.0, b=1.0): \n    return _make_multidim_func(_qnwbeta1, n, a, b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_text(): \n    data.text()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_property(zone, key): \n    return _property('clear', zone, key, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getGeometryOutputByArguments(arguments, xmlElement): \n    return getGeometryOutput(None, xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _cannotInstallHandler(fd): \n    raise RuntimeError('Cannot   install   a   SIGCHLD   handler')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sync_list_settings(): \n    for (key, data) in frappe.cache().hgetall('_list_settings').iteritems(): \n      (doctype, user) = key.split('::') \n      frappe.db.sql('insert   into   __ListSettings   (user,   doctype,   data)   values   (%s,   %s,   %s)\\n DCTB  DCTB  DCTB on   duplicate   key   update   data=%s', (user, doctype, data, data))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def reverse_cuthill_mckee_ordering(G, heuristic=None): \n    return reversed(list(cuthill_mckee_ordering(G, heuristic=heuristic)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_re_replace(val, pattern, repl): \n    return re.sub(pattern, repl, str(val))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def noop_node(lineno): \n    return ExprStmt(Const(0)).set_lineno(lineno)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_item_projected_qty(item_code): \n    frappe.db.sql(u'update   tabItem   set\\n DCTB  DCTB total_projected_qty   =   ifnull((select   sum(projected_qty)   from   tabBin   where   item_code=%s),   0)\\n DCTB  DCTB where   name=%s', (item_code, item_code))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isreadable(object): \n    return _safe_repr(object, {}, None, 0)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def signal_committed_filefields(sender, instance, **kwargs): \n    for field_name in getattr(instance, '_uncommitted_filefields', ()): \n      fieldfile = getattr(instance, field_name) \n      if fieldfile: \n         signals.saved_file.send_robust(sender=sender, fieldfile=fieldfile)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_service(hass, config, discovery_info=None): \n    return DemoNotificationService(hass)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exists(ctid_or_name): \n    with settings(hide('running', 'stdout', 'warnings'), warn_only=True): \n      return status(ctid_or_name).succeeded",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_sprot_raw(id): \n    return _urlopen(('http://www.uniprot.org/uniprot/%s.txt' % id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reload_(name): \n    return __salt__['service.run'](name, 'reload')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def diff(x, n=1, axis=(-1)): \n    return DiffOp(n=n, axis=axis)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def maybe_list(l, scalars=(Mapping, string_t)): \n    return (l if ((l is None) or is_list(l, scalars)) else [l])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getCraftedText(fileName, text, lashRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), lashRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_gunicorn_workers(): \n    return {'gunicorn_workers': multiprocessing.cpu_count()}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_label_2(context, label): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_csr(csr): \n    return encode_b64jose(OpenSSL.crypto.dump_certificate_request(OpenSSL.crypto.FILETYPE_ASN1, csr.wrapped))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iteritems(d): \n    return getattr(d, _iteritems)()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_attach_link(doc, print_format): \n    return frappe.get_template(u'templates/emails/print_link.html').render({u'url': get_url(), u'doctype': doc.reference_doctype, u'name': doc.reference_name, u'print_format': print_format, u'key': doc.get_parent_doc().get_signature()})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_MNIST_images(filename): \n    with open(filename, 'r') as f: \n      magic = np.fromfile(f, dtype=np.dtype('>i4'), count=1) \n      num_images = np.fromfile(f, dtype=np.dtype('>i4'), count=1) \n      num_rows = np.fromfile(f, dtype=np.dtype('>i4'), count=1) \n      num_cols = np.fromfile(f, dtype=np.dtype('>i4'), count=1) \n      images = np.fromfile(f, dtype=np.ubyte) \n      images = images.reshape((num_images, (num_rows * num_cols))).transpose() \n      images = (images.astype(np.float64) / 255) \n      f.close() \n      return images",
        "line_count": 10,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def teardown_function(): \n    HASS.stop()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _group_players_service(service): \n    _apply_service(service, SonosDevice.group_players)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def console(msg, newline=True, stream='stdout'): \n    librarylogger.console(msg, newline, stream)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def py_type_name(type_name): \n    return {'blob': 'bytes', 'character': 'string', 'double': 'float', 'long': 'integer', 'map': 'dict', 'structure': 'dict', 'timestamp': 'datetime'}.get(type_name, type_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wildcards2patterns(wildcards): \n    return [re.compile((('^' + wc.replace('.', '\\\\.').replace('*', '.*')) + '$')) for wc in wildcards]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def alias(selectable, name=None, flat=False): \n    return selectable.alias(name=name, flat=flat)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_rollbacks(): \n    return _proxy_cmd('get_rollbacks')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize_classname(classname): \n    return classname.replace(u'/', u'.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CorrelatedNormalGenerator(mu, sigma, rho): \n    for x in CorrelatedGenerator(rho): \n      (yield ((x * sigma) + mu))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _raise_unknown_type(element_type, element_name): \n    raise InvalidBSON((\"Detected   unknown   BSON   type   %r   for   fieldname   '%s'.   Are   you   using   the   latest   driver   version?\" % (element_type, element_name)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __py_new(name, data='', **kwargs): \n    return __get_builtin_constructor(name)(data, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_device_memory(obj): \n    return getattr(obj, '__cuda_memory__', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has(name): \n    return __salt__['file.file_exists'](_cert_file(name, 'cert'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parameter_space(*args): \n    return tuple(product(*((arg if isinstance(arg, tuple) else (arg,)) for arg in args)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def GeneratePhotoUrl(obj_store, photo_id, suffix): \n    return obj_store.GenerateUrl((photo_id + suffix), cache_control='private,max-age=31536000')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reverse_usage_url(handler_name, usage_key, kwargs=None): \n    return reverse_url(handler_name, 'usage_key_string', usage_key, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(arg=None): \n    return RIPEMD160(arg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def take_nth(n, seq): \n    return itertools.islice(seq, 0, None, n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_escapes(text): \n    return _ANSI_ESCAPE_PATTERN.sub('', text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CAN_CHANGE_PERMISSIONS(article, user): \n    return _is_staff_for_article(article, user)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def header(h, v): \n    context.headers.append((h, v))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sharpe_ratio(returns, periods=252): \n    return ((np.sqrt(periods) * np.mean(returns)) / np.std(returns))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_test_and_set(context, instance_uuid, attr, ok_states, new_state): \n    return IMPL.instance_test_and_set(context, instance_uuid, attr, ok_states, new_state)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def environ(env_key): \n    return os.environ.get(env_key, '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def median_grouped(name, num, minimum=0, maximum=0, ref=None): \n    return calc(name, num, 'median_grouped', ref)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def thin_path(cachedir): \n    return os.path.join(cachedir, 'thin', 'thin.tgz')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rsync_ip(ip): \n    return (('[%s]' % ip) if is_valid_ipv6(ip) else ip)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_disk_timeout(scheme=None): \n    return _get_powercfg_minute_values(scheme, 'SUB_DISK', 'DISKIDLE', 'Turn   off   hard   disk   after')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_true_instance(logical_line): \n    if asse_trueinst_re.match(logical_line): \n      (yield (0, 'G316:   assertTrue(isinstance(a,   b))   sentences   not   allowed'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_data_filename(filename): \n    return pkg_resources.resource_filename('certbot_nginx.tests', os.path.join('testdata', 'etc_nginx', filename))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def theme_url(): \n    return get_bootstrap_setting(u'theme_url')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def font_is_installed(font): \n    return [fam for fam in QFontDatabase().families() if (to_text_string(fam) == font)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _validate_min_score(min_score): \n    if min_score: \n      message = (_('%(min_score)s   is   not   a   valid   grade   percentage') % {'min_score': min_score}) \n      try: \n         min_score = int(min_score) \n      except ValueError: \n         raise GatingValidationError(message) \n      if ((min_score < 0) or (min_score > 100)): \n         raise GatingValidationError(message)",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def convertXMLElement(geometryOutput, xmlElement): \n    xmlElement.getXMLProcessor().createChildren(geometryOutput['shapes'], xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_diff_opcode_generator_class(): \n    return _generator",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def f(x): \n    return int((not (x[0] and x[1])))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def stdev(list): \n    return sqrt(variance(list))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rcdefaults(): \n    rcParams.update(rcParamsDefault)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def double_redirect_view(request): \n    return HttpResponseRedirect('/permanent_redirect_view/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_names(scope): \n    return [name for (name, value) in SCOPE_NAME_DICT.iteritems() if check(value, scope)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def version(): \n    return '0.1.8'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start_response_app(environ, start_response): \n    raise ValueError('hi')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sigmoid(x): \n    return (1.0 / (1.0 + safeExp((- x))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(handle, **kwargs): \n    return Parser(handle).parse(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def not_(a): \n    return (not a)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def security_group_rule_create(context, values): \n    return IMPL.security_group_rule_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_available_project_types(): \n    return ([EmptyProject] + get_available_project_types_plugins())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def torrent_availability(seeds, leeches): \n    return ((seeds * 2) + leeches)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_table_description(cursor, table_name): \n    return [(info['name'], info['type'], None, None, None, None, info['null_ok']) for info in _table_info(cursor, table_name)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def draw_if_interactive(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def permutationFilter(perm): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isInIOThread(): \n    return (ioThread == getThreadID())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def block_device_mapping_update(context, bdm_id, values): \n    return IMPL.block_device_mapping_update(context, bdm_id, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def replace(s, old, new, maxsplit=(-1)): \n    return s.replace(old, new, maxsplit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def install_build_utils(): \n    apt_install(BUILD_UTILS_PKGS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def serialize_user(user): \n    return {'id': user.id}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_entities(value): \n    return re.sub(u'&(?:\\\\w+|#\\\\d+);', u'', force_text(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dist(a, b): \n    return sqrt(sum((((x1 - x2) ** 2) for (x1, x2) in zip(a, b))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read_uint32(fid): \n    return _unpack_simple(fid, '>u4', np.uint32)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def html_unescape(text): \n    return re.sub(('&(%s);' % '|'.join(name2codepoint)), (lambda m: unichr(name2codepoint[m.group(1)])), text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def server_reboot(host=None, admin_username=None, admin_password=None, module=None): \n    return __execute_cmd('serveraction   powercycle', host=host, admin_username=admin_username, admin_password=admin_password, module=module)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stop(win, ctx): \n    if hasattr(ctx, 'console'): \n      win.unbind(children=ctx.console.on_window_children, on_keyboard=ctx.console.keyboard_shortcut) \n      win.remove_widget(ctx.console) \n      del ctx.console",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_index(name, localname): \n    return type(('BB%sIndex' % (name.capitalize(),)), (BBIndex,), dict(name=name, localname=localname))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(data=None): \n    return SHA256Hash().new(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_user_config_path(): \n    return os.path.join(xdg.get_config_dir(), 'config.py')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def IsTypePackable(field_type): \n    return (field_type not in NON_PACKABLE_TYPES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def batch_inv(a): \n    return BatchInv()(a)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_known_host(reactor, hostname): \n    return run(reactor, ['ssh-keygen', '-R', hostname])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def from_rdata(name, ttl, *rdatas): \n    return from_rdata_list(name, ttl, rdatas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_arguments(kwargs, release, deprecated_name, right_name=None): \n    if (deprecated_name in kwargs): \n      if right_name: \n         if (right_name in kwargs): \n            msg = (_LW(\"The   '%(old)s'   argument   is   deprecated   in   %(release)s   and   its   use   may   result   in   errors   in   future   releases.   As   '%(new)s'   is   provided,   the   '%(old)s'   argument   will   be   ignored.\") % {'old': deprecated_name, 'release': release, 'new': right_name}) \n            kwargs.pop(deprecated_name) \n         else: \n            msg = (_LW(\"The   '%(old)s'   argument   is   deprecated   in   %(release)s   and   its   use   may   result   in   errors   in   future   releases.   Use   '%(right)s'   instead.\") % {'old': deprecated_name, 'release': release, 'right': right_name}) \n            kwargs[right_name] = kwargs.pop(deprecated_name) \n      else: \n         msg = (_LW(\"The   '%(old)s'   argument   is   deprecated   in   %(release)s   and   its   use   may   result   in   errors   in   future   releases.\") % {'old': deprecated_name, 'release': release}) \n         kwargs.pop(deprecated_name) \n      warnings.warn(msg)",
        "line_count": 12,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def mygettext(string): \n    return _(string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ascontiguousarray(a, dtype=None): \n    return core.ascontiguousarray(a, dtype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _translate_interface_attachment_view(port_info): \n    return {'net_id': port_info['network_id'], 'port_id': port_info['id'], 'mac_addr': port_info['mac_address'], 'port_state': port_info['status'], 'fixed_ips': port_info.get('fixed_ips', None)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_matching_event(expected_event, actual_event, tolerate=None): \n    return (len(get_event_differences(expected_event, actual_event, tolerate=tolerate)) == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dbg_signal(sig, args): \n    return '{}({})'.format(signal_name(sig), format_args(args))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_location(): \n    return config.get_cloud_config_value('location', get_configured_provider(), __opts__, search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hessian_matrix_eigvals(Hxx, Hxy, Hyy): \n    return _image_orthogonal_matrix22_eigvals(Hxx, Hxy, Hyy)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_ssh_public_key(name, filename): \n    add_ssh_public_keys(name, [filename])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def redirect(request): \n    return HttpResponseRedirect('target/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timestamp(): \n    return str(int((time.time() * 1000)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_ethernet_tag_id(etag_id): \n    return (isinstance(etag_id, numbers.Integral) and (0 <= etag_id <= 4294967295))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewRepository(): \n    return AlterationRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode, prefix, sideLength): \n    return evaluate.EmptyObject()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def working_path(filename): \n    return os.path.join(WORKING_DIR, filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_unicode(a_string): \n    return unicodify(a_string, 'utf-8')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def indefinite_article(word, gender=MALE, role=SUBJECT): \n    return article_indefinite.get((gender[:1].lower(), role[:3].lower()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in_exception_handler(): \n    return (sys.exc_info() != (None, None, None))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def complete_signin(request, redirect_field_name=REDIRECT_FIELD_NAME, openid_form=OpenidSigninForm, auth_form=AuthenticationForm, on_success=signin_success, on_failure=signin_failure, extra_context=None): \n    return complete(request, on_success, on_failure, (get_url_host(request) + reverse('user_complete_signin')), redirect_field_name=redirect_field_name, openid_form=openid_form, auth_form=auth_form, extra_context=extra_context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _prefix_only_url_replace_regex(pattern): \n    return re.compile(u'\\n                        (?x)                                                                  #   flags=re.VERBOSE\\n                        (?P<quote>\\\\\\\\?[\\'\"])                        #   the   opening   quotes\\n                        {}\\n                        (?P=quote)                                                #   the   first   matching   closing   quote\\n                        '.format(pattern))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def HandleRequest(environ, handler_name, url, post_data, error): \n    return WsgiRequest(environ, handler_name, url, post_data, error).Handle()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def netstats(): \n    return _nodetool('netstats')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_prodoc_entry(id, cgi='http://www.expasy.ch/cgi-bin/get-prodoc-entry'): \n    return _urlopen(('%s?%s' % (cgi, id)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Comma(): \n    return Leaf(token.COMMA, ',')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLHIGHWAVE(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLHIGHWAVE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lock_held(): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def squeeze_seq(seq): \n    return sub('([AGCTacgt])\\\\1+', '\\\\1', seq)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_stay_open(): \n    return stay_open",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ec2_instance_create(context, instance_uuid, id=None): \n    return IMPL.ec2_instance_create(context, instance_uuid, id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(key, service=None, profile=None): \n    return query(key, None, service, profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def untokenize(tokens): \n    return Untokenizer().untokenize(tokens)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def notnull(values): \n    return (~ isnull(values))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _donothing_func(*args, **kwargs): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SAR(barDs, count, acceleration=(-4e+37), maximum=(-4e+37)): \n    return call_talib_with_hl(barDs, count, talib.SAR, acceleration, maximum)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_count(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def num_solutions(user): \n    return Question.objects.filter(solution__creator=user).count()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onLoginAppReady(): \n    INFO_MSG(('onLoginAppReady:   bootstrapGroupIndex=%s,   bootstrapGlobalIndex=%s' % (os.getenv('KBE_BOOTIDX_GROUP'), os.getenv('KBE_BOOTIDX_GLOBAL'))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def output(data, **kwargs): \n    return _one_level_values(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def image_dim_ordering(): \n    return _IMAGE_DIM_ORDERING",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(data=None): \n    return SHA1Hash().new(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fflayer(tparams, state_below, options, prefix='rconv', activ='lambda   x:   tensor.tanh(x)', **kwargs): \n    return eval(activ)((tensor.dot(state_below, tparams[_p(prefix, 'W')]) + tparams[_p(prefix, 'b')]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def S_ISBLK(mode): \n    return (S_IFMT(mode) == S_IFBLK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processXMLElement(xmlElement): \n    group.processShape(Cylinder, xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render_to_kmz(*args, **kwargs): \n    return HttpResponse(compress_kml(loader.render_to_string(*args, **kwargs)), mimetype='application/vnd.google-earth.kmz')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    evaluate.processArchivable(Dictionary, elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten(sequence): \n    for item in sequence: \n      if (hasattr(item, '__iter__') and (not isinstance(item, str)) and (not isinstance(item, bytes))): \n         for i in item: \n            (yield i) \n      else: \n         (yield item)",
        "line_count": 6,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def construct_tmp_cg_snap_name(cg_name): \n    return ('tmp-snap-' + six.text_type(cg_name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten(x): \n    return Flatten()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_push_course_update(course_key_string, course_subscription_id, course_display_name): \n    if settings.PARSE_KEYS: \n      try: \n         register(settings.PARSE_KEYS['APPLICATION_ID'], settings.PARSE_KEYS['REST_API_KEY']) \n         push_payload = {'action': 'course.announcement', 'notification-id': unicode(uuid4()), 'course-id': course_key_string, 'course-name': course_display_name} \n         push_channels = [course_subscription_id] \n         Push.alert(data=push_payload, channels={'$in': push_channels}, where={'deviceType': 'android'}) \n         push_payload.update({'alert': '', 'content-available': 1}) \n         Push.alert(data=push_payload, channels={'$in': push_channels}, where={'deviceType': 'ios'}) \n      except ParseError as error: \n         log_exception(error.message)",
        "line_count": 10,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def strip_tags(value): \n    return strip_tags_re.sub(u'', force_text(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___setattr__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def append_cxxflags(value): \n    return append_var('CXXFLAGS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def kill(greenlet, exception=GreenletExit): \n    if (not greenlet.dead): \n      get_hub().loop.run_callback(greenlet.throw, exception)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def isNegInf(value): \n    return ((_sign(value) == 1) and (_exponent(value) == 2047) and _zero_mantissa(value))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _pg_is_older_ext_ver(a, b): \n    return (a < b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _normalized_coerce_fn(r): \n    return r.lower().strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def case_event_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ConnectELB(region_name): \n    return elb.connect_to_region(region_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_writable_file_like(obj): \n    return (hasattr(obj, 'write') and callable(obj.write))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_prosite_entry(id, cgi='http://www.expasy.ch/cgi-bin/get-prosite-entry'): \n    return _urlopen(('%s?%s' % (cgi, id)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_history_import_symlink(): \n    with HistoryArchive() as history_archive: \n      history_archive.write_metafiles() \n      history_archive.write_link('datasets/Pasted_Entry_1.txt', '../target.txt') \n      history_archive.write_file('target.txt', 'insecure') \n      _run_jihaw_cleanup(history_archive, 'Symlink   dataset   in   import   archive   allowed')",
        "line_count": 5,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _secureEnoughString(): \n    return armor(sha1(randomBytes(64)).digest())[:16]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def path_for_script(script): \n    return path.join(current_directory(), script)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mount(device, mountpoint): \n    if (not ismounted(device)): \n      run_as_root(('mount   %(device)s   %(mountpoint)s' % locals()))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def in_subnet(cidr): \n    return salt.utils.network.in_subnet(cidr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def keep_warm_callback(event, context): \n    lambda_handler(event={}, context=context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fill_notebook(work_notebook, script_blocks): \n    for (blabel, bcontent) in script_blocks: \n      if (blabel == 'code'): \n         add_code_cell(work_notebook, bcontent) \n      else: \n         add_markdown_cell(work_notebook, text2string(bcontent))",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_platform(): \n    return platform.system()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load(modname, verbose=False, failfast=False): \n    for app in installed_apps(): \n      get_module(app, modname, verbose, failfast)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def rsplit(s, sep=None, maxsplit=(-1)): \n    return s.rsplit(sep, maxsplit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPluginsDirectoryPath(): \n    return archive.getSkeinforgePluginsPath('profile_plugins')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def not_in_(a, b, msg=None): \n    assert (a not in b), (msg or ('%r   is   in   %r' % (a, b)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def date_created(document): \n    return (document[config.DATE_CREATED] if (config.DATE_CREATED in document) else epoch())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def version(): \n    return salt.version.__version__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_resampler_func(method, args, kwargs): \n    if ((len(args) + len(kwargs)) > 0): \n      if (method in RESAMPLER_NUMPY_OPS): \n         raise UnsupportedFunctionCall('numpy   operations   are   not   valid   with   resample.   Use   .resample(...).{func}()   instead'.format(func=method)) \n      else: \n         raise TypeError('too   many   arguments   passed   in')",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def user_create(username, user=None, host=None, port=None, maintenance_db=None, password=None, createdb=None, createuser=None, createroles=None, inherit=None, login=None, connlimit=None, encrypted=None, superuser=None, replication=None, rolepassword=None, groups=None, runas=None): \n    return _role_create(username, typ_='user', user=user, host=host, port=port, maintenance_db=maintenance_db, password=password, createdb=createdb, createuser=createuser, createroles=createroles, inherit=inherit, login=login, connlimit=connlimit, encrypted=encrypted, superuser=superuser, replication=replication, rolepassword=rolepassword, groups=groups, runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_import_submodule_global_unshadowed(pyi_builder): \n    pyi_builder.test_source('\\n                        #   Assert   that   this   submodule   is   unshadowed   by   this   global   variable.\\n                        import   sys\\n                        from   pyi_testmod_submodule_global_unshadowed   import   submodule\\n                        assert   type(submodule)   ==   type(sys)\\n                        ')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quoteStringArgument(argument): \n    return argument.replace('\\\\', '\\\\\\\\').replace(':', '\\\\:')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user_config_files(): \n    return filter(os.path.exists, map(os.path.expanduser, config_files))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_generated_by_for_biom_tables(): \n    return ('QIIME   ' + get_qiime_library_version())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_tempurl_keys_from_metadata(meta): \n    return [get_valid_utf8_str(value) for (key, value) in meta.items() if (key.lower() in ('temp-url-key', 'temp-url-key-2'))]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def returns(model, downgrade=None, upgrade=None): \n    return attrsetter('_returns', (model, downgrade, upgrade))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def event(request): \n    return HttpResponse(status=204)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sentence_bleu(references, hypothesis, weights=(0.25, 0.25, 0.25, 0.25), smoothing_function=None, auto_reweigh=False): \n    return corpus_bleu([references], [hypothesis], weights, smoothing_function, auto_reweigh)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def execute(cmds): \n    return _wait(cmds, shell=False, stdin=subprocess.PIPE, stdout=subprocess.PIPE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPluginFileNames(): \n    return archive.getPluginFileNamesFromDirectoryPath(getPluginsDirectoryPath())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isListLike(value): \n    return isinstance(value, (list, tuple, set))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_online(user): \n    return (user.lastseen >= time_diff())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apply_vagrant_workaround(): \n    if (os.environ.get('USER', None) == 'vagrant'): \n      del os.link",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _read_bytes(f, n): \n    return f.read(n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def verify_snapshot_list(test): \n    if (not (str(type(test)) == \"<class   'curator.snapshotlist.SnapshotList'>\")): \n      raise TypeError('Not   an   SnapshotList   object.   Type:   {0}.'.format(type(test)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def archive_deleted_rows(context, max_rows=None): \n    return IMPL.archive_deleted_rows(context, max_rows=max_rows)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gather(reference, indices): \n    return reference[indices]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_int(*names, **kwargs): \n    return reduce((lambda prev, next: (prev | SCOPE_NAME_DICT.get(next, 0))), names, kwargs.pop('default', 0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def info(): \n    return _proxy_cmd('info')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_informational(status): \n    return (100 <= status <= 199)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def undo(): \n    with RopeContext() as ctx: \n      changes = ctx.project.history.tobe_undone \n      if (changes is None): \n         env.error('Nothing   to   undo!') \n         return False \n      if env.user_confirm(('Undo   [%s]?' % str(changes))): \n         progress = ProgressHandler(('Undo   %s' % str(changes))) \n         for c in ctx.project.history.undo(task_handle=progress.handle): \n            reload_changes(c)",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def evaluate(x, y, expr, x_value, y_value): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getHex(value): \n    return hex(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_type_access_get_all(context, type_id): \n    return IMPL.group_type_access_get_all(context, type_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show_artifact(id_): \n    return show_item('artifact', id_)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unpack(code): \n    return (unquote_plus(code) if detect(code) else code)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def register(linter): \n    linter.register_checker(SetTraceChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def str(arg): \n    return 'STR'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compress(value): \n    return base64.b64encode(zlib.compress(value)).decode('utf-8')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def my_kde_bandwidth(obj, fac=(1.0 / 5)): \n    return (np.power(obj.n, ((-1.0) / (obj.d + 4))) * fac)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_like(name): \n    return (os.path.exists(name) or os.path.dirname(name) or name.endswith('.py') or (not ident_re.match(os.path.splitext(name)[0])))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def extract_digest_key_date(digest_s3_key): \n    return digest_s3_key[(-24):(-8)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uuid(_uuid=uuid4): \n    return str(_uuid())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _prompt_user_variable(var_name, default_value): \n    return click.prompt(var_name, default=default_value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isValid(text): \n    return bool(re.search('\\\\bmeaning   of   life\\\\b', text, re.IGNORECASE))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'chamber', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hook(watcher, arbiter, hook_name, **kwargs): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dict_delall(d, keys): \n    for key in keys: \n      try: \n         del d[key] \n      except KeyError: \n         pass",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def user_messages(request): \n    return {'user_messages': get_messages(request)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices((VeraCover(device, VERA_CONTROLLER) for device in VERA_DEVICES['cover']))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def basename(path): \n    return path.rsplit(u'/', 1)[(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPointPlusSegmentWithLength(length, point, segment): \n    return (((segment * length) / abs(segment)) + point)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_get(context, volume_id): \n    return IMPL.volume_get(context, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _parse_file(descriptor_file, is_bridge=False, validate=False, **kwargs): \n    while True: \n      if (not is_bridge): \n         extrainfo_content = _read_until_keywords('router-signature', descriptor_file) \n         block_end_prefix = PGP_BLOCK_END.split('   ', 1)[0] \n         extrainfo_content += _read_until_keywords(block_end_prefix, descriptor_file, True) \n      else: \n         extrainfo_content = _read_until_keywords('router-digest', descriptor_file, True) \n      if extrainfo_content: \n         if extrainfo_content[0].startswith('@type'): \n            extrainfo_content = extrainfo_content[1:] \n         if is_bridge: \n            (yield BridgeExtraInfoDescriptor(bytes.join('', extrainfo_content), validate, **kwargs)) \n         else: \n            (yield RelayExtraInfoDescriptor(bytes.join('', extrainfo_content), validate, **kwargs)) \n      else: \n         break",
        "line_count": 16,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def exception(message='Test   Exception'): \n    raise Exception(message)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dummy(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_portage(): \n    return reload(portage)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def int2gray(i): \n    return (i ^ (i >> 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_catalog_discover_hack(service_type, old, new): \n    _discover._VERSION_HACKS.add_discover_hack(service_type, old, new)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_containers(logger, conf): \n    _func_on_containers(logger, conf, 'put_concurrency', client.put_container)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def extension(filename): \n    return os.path.splitext(filename)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_running_from_reloader(): \n    return (os.environ.get('WERKZEUG_RUN_MAIN') == 'true')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def collection_backup_all(location, backup_name=None, **kwargs): \n    for collection_name in collection_list(**kwargs): \n      if (backup_name is not None): \n         backup_name = '&name={backup}.{collection}'.format(backup=backup_name, collection=collection_name) \n      else: \n         backup_name = '' \n      _query('{collection}/replication?command=BACKUP&location={location}{backup_name}&wt=json'.format(collection=collection_name, backup_name=backup_name, location=location), **kwargs)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def CCI(barDs, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_hlc(barDs, count, talib.CCI, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def transfer_get_all_by_project(context, project_id): \n    return IMPL.transfer_get_all_by_project(context, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getIsInFilledRegion(loops, point): \n    return ((getNumberOfIntersectionsToLeftOfLoops(loops, point) % 2) == 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_unique_node(): \n    return str(uuid.uuid1())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DEFINE_constant_string(name, default, help): \n    CONFIG.AddOption(type_info.String(name=name, default=(default or ''), description=help), constant=True)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_supported_locales(): \n    return _supported_locales",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _item_to_table(iterator, resource): \n    return Table.from_api_repr(resource, iterator.dataset)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reservation_rollback(context, reservations, project_id=None, user_id=None): \n    return IMPL.reservation_rollback(context, reservations, project_id=project_id, user_id=user_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def distort_color(image, color_ordering=0, fast_mode=True, scope=None): \n    with tf.name_scope(scope, 'distort_color', [image]): \n      if fast_mode: \n         if (color_ordering == 0): \n            image = tf.image.random_brightness(image, max_delta=(32.0 / 255.0)) \n            image = tf.image.random_saturation(image, lower=0.5, upper=1.5) \n         else: \n            image = tf.image.random_saturation(image, lower=0.5, upper=1.5) \n            image = tf.image.random_brightness(image, max_delta=(32.0 / 255.0)) \n      elif (color_ordering == 0): \n         image = tf.image.random_brightness(image, max_delta=(32.0 / 255.0)) \n         image = tf.image.random_saturation(image, lower=0.5, upper=1.5) \n         image = tf.image.random_hue(image, max_delta=0.2) \n         image = tf.image.random_contrast(image, lower=0.5, upper=1.5) \n      elif (color_ordering == 1): \n         image = tf.image.random_saturation(image, lower=0.5, upper=1.5) \n         image = tf.image.random_brightness(image, max_delta=(32.0 / 255.0)) \n         image = tf.image.random_contrast(image, lower=0.5, upper=1.5) \n         image = tf.image.random_hue(image, max_delta=0.2) \n      elif (color_ordering == 2): \n         image = tf.image.random_contrast(image, lower=0.5, upper=1.5) \n         image = tf.image.random_hue(image, max_delta=0.2) \n         image = tf.image.random_brightness(image, max_delta=(32.0 / 255.0)) \n         image = tf.image.random_saturation(image, lower=0.5, upper=1.5) \n      elif (color_ordering == 3): \n         image = tf.image.random_hue(image, max_delta=0.2) \n         image = tf.image.random_saturation(image, lower=0.5, upper=1.5) \n         image = tf.image.random_contrast(image, lower=0.5, upper=1.5) \n         image = tf.image.random_brightness(image, max_delta=(32.0 / 255.0)) \n      else: \n         raise ValueError('color_ordering   must   be   in   [0,   3]') \n      return tf.clip_by_value(image, 0.0, 1.0)",
        "line_count": 31,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def corpus_to_vw(corpus): \n    for entries in corpus: \n      line = [u'|'] \n      for (word_id, count) in entries: \n         line.append(u'{0}:{1}'.format(word_id, count)) \n      (yield u'   '.join(line))",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def zx_basis_transform(self, format='sympy'): \n    return matrix_cache.get_matrix('ZX', format)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_testfile(fname): \n    with open(fname) as fp: \n      for line in fp: \n         if (line.startswith('--') or (not line.strip())): \n            continue \n         (lhs, rhs) = line.split('->') \n         (id, fn, arg_real, arg_imag) = lhs.split() \n         rhs_pieces = rhs.split() \n         (exp_real, exp_imag) = (rhs_pieces[0], rhs_pieces[1]) \n         flags = rhs_pieces[2:] \n         (yield (id, fn, float(arg_real), float(arg_imag), float(exp_real), float(exp_imag), flags))",
        "line_count": 10,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def getAxialMargin(circleRadius, numberOfSides, polygonRadius): \n    return ((polygonRadius * math.sin((math.pi / float(numberOfSides)))) - circleRadius)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_matrix(num_rows, num_cols, entry_fn): \n    return [[entry_fn(i, j) for j in range(num_cols)] for i in range(num_rows)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def format_to_raw(context, method=None): \n    raise NotImplementedError('raw   format   is   not   supported   yet')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_choices(x): \n    return [(y, y) for y in x]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def posToPix(stim): \n    return convertToPix([0, 0], stim.pos, stim.win.units, stim.win)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stub_function_only(func): \n    return check_supported_function(func, (lambda o: o.IS_STUB))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def monomial_ldiv(A, B): \n    return tuple([(a - b) for (a, b) in zip(A, B)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _pinv_1d(v, eps=1e-05): \n    return np.array([(0 if (abs(x) < eps) else (1 / x)) for x in v], dtype=float)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getHalfwave(pitchRadius, teeth): \n    return ((pitchRadius * math.pi) / float(teeth))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def BinomialCoef(n, k): \n    return scipy.misc.comb(n, k)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, *args, **kwargs): \n    return AESCipher(key, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_darwin(): \n    return (sys.platform == u'darwin')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ccall_method(x): \n    return x.meth()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getIsLarge(loop, radius): \n    return (euclidean.getMaximumSpan(loop) > (2.01 * abs(radius)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def summary(job): \n    return flask.render_template('datasets/images/generic/summary.html', dataset=job)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dbunserialize(data, db_obj=None): \n    return from_pickle(do_unpickle(data), db_obj=db_obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_index(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    evaluate.processCondition(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _warn_missing_microversion_header(header_name): \n    LOG.warning(_LW('Your   request   was   processed   by   a   Nova   API   which   does   not   support   microversions   (%s   header   is   missing   from   response).   Warning:   Response   may   be   incorrect.'), header_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vol_get_usage_by_time(context, begin): \n    return IMPL.vol_get_usage_by_time(context, begin)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rescaled_softmax(x, min_val=1e-05): \n    return _rescale_softmax(T.nnet.softmax(x), min_val=min_val)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def urlunquote_plus(quoted_url): \n    return force_unicode(urllib.unquote_plus(smart_str(quoted_url)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def temporary(location): \n    to(location, falcon.HTTP_307)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _find_monitor_type(cs, vtype): \n    return utils.find_resource(cs.monitor_types, vtype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def course_filename_prefix_generator(course_id, separator='_'): \n    return get_valid_filename(unicode(separator).join([course_id.org, course_id.course, course_id.run]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_dict(dict_name, default=None, **kwargs): \n    return BACKEND.get_dict(dict_name, default, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_node_update(context, compute_id, values, auto_adjust=True): \n    return IMPL.compute_node_update(context, compute_id, values, auto_adjust)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ignore_response_headers_rewriter(ignored_response_headers, state): \n    for (name, value) in state.headers.items(): \n      if (name.lower() in ignored_response_headers): \n         del state.headers[name] \n      try: \n         if isinstance(name, unicode): \n            name = name.encode('ascii') \n         if isinstance(value, unicode): \n            value = value.encode('ascii') \n      except UnicodeEncodeError: \n         del state.headers[name] \n      if ((set(name) - ALLOWED_HEADER_NAME_CHARACTERS) or (set(value) - ALLOWED_HEADER_VALUE_CHARACTERS)): \n         del state.headers[name]",
        "line_count": 12,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return LinearBearingCageDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_compound_statement_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def brand(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_registry_opts(): \n    return [(g, copy.deepcopy(o)) for (g, o) in _registry_opts]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def path_exists(path): \n    return os.path.exists(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def polygon(r, c, shape=None): \n    return _polygon(r, c, shape)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qual_missing(id_, seq, qual): \n    return (qual is None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _breakpoints(cumold, cumnew): \n    return tuple(sorted((cumold + cumnew), key=itemgetter(1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nonzero(a): \n    return a.nonzero()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cpu_count_physical(): \n    return cext.cpu_count_phys()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_mark_unsafe(value): \n    return unicode(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addXIntersectionsFromLoopForTable(loop, xIntersectionsTable, width): \n    for pointIndex in xrange(len(loop)): \n      pointBegin = loop[pointIndex] \n      pointEnd = loop[((pointIndex + 1) % len(loop))] \n      if (pointBegin.imag > pointEnd.imag): \n         pointOriginal = pointBegin \n         pointBegin = pointEnd \n         pointEnd = pointOriginal \n      fillBegin = int(math.ceil((pointBegin.imag / width))) \n      fillEnd = int(math.ceil((pointEnd.imag / width))) \n      if (fillEnd > fillBegin): \n         secondMinusFirstComplex = (pointEnd - pointBegin) \n         secondMinusFirstImaginaryOverReal = (secondMinusFirstComplex.real / secondMinusFirstComplex.imag) \n         beginRealMinusImaginary = (pointBegin.real - (pointBegin.imag * secondMinusFirstImaginaryOverReal)) \n         for fillLine in xrange(fillBegin, fillEnd): \n            y = (fillLine * width) \n            xIntersection = ((y * secondMinusFirstImaginaryOverReal) + beginRealMinusImaginary) \n            addElementToListDictionary(xIntersection, fillLine, xIntersectionsTable)",
        "line_count": 17,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def index_to_slice(idx): \n    return slice(idx, (idx + 1), None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def redirect_to_referrer(request, default): \n    return redirect(safe_referrer(request, default))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_system(version='', ruby=None, runas=None, gem_bin=None): \n    return _gem(['update', '--system', version], ruby, gem_bin=gem_bin, runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_session(filename): \n    return loads(read(filename, binary=False))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gen_dom_authzr(domain, unused_new_authzr_uri, challs, combos=True): \n    return acme_util.gen_authzr(messages.STATUS_PENDING, domain, challs, ([messages.STATUS_PENDING] * len(challs)), combos)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pci_device_update(context, node_id, address, value): \n    return IMPL.pci_device_update(context, node_id, address, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jsonify(form): \n    return {'form': [{'id': field.id, 'label': str(field.label), 'html': str(field), 'description': str(field.description)} for field in form]}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def pull_raw(url, name, verify=False): \n    return _pull_image('raw', url, name, verify=verify)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _item_to_job(iterator, resource): \n    return iterator.client.job_from_resource(resource)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RemoveFlags(flag_values=FLAGS): \n    for flag_name in NamesOfDefinedFlags(): \n      RemoveOneFlag(flag_name, flag_values=flag_values)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def HT_DCPERIOD(ds, count): \n    return call_talib_with_ds(ds, count, talib.HT_DCPERIOD)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Maxwell(name, a): \n    return rv(name, MaxwellDistribution, (a,))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_postfix_expression_8(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_quteproc_skip_and_wait_for(qtbot, quteproc): \n    with pytest.raises(pytest.skip.Exception): \n      quteproc.send_cmd(':jseval   console.log(\"[SKIP]   foo\");') \n      quteproc.wait_for_js('[SKIP]   foo') \n      quteproc.wait_for(message='This   will   not   match')",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def best_docstring(param1, param2): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_raw(): \n    return read_raw_fif(raw_fname, preload=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tearDownModule(): \n    hass.stop()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def library_keyword_tags_with_documentation(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPrecision(elementNode): \n    return getCascadeFloatWithoutSelf((0.2 * getLayerThickness(elementNode)), elementNode, 'precision')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def conf_test(): \n    return __salt__['config.option']('test.foo')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('glusterfs' if ('glusterfs.list_volumes' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def HasClass(clsid): \n    return (clsid in mapCLSIDToClass)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dirname(path): \n    return os.path.dirname(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def calc_easing_degree_for_proportion(proportion): \n    return ((- math.log10(proportion)) + 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_center(value, width=80): \n    return unicode(value).center(width)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decodeGenerator(params): \n    return GenericBatchGenerator",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FillUsersInQuery(filters): \n    for filter in filters: \n      for property in filter.property_list(): \n         FillUser(property)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def __virtual__(): \n    return ('win_dacl' if ('win_dacl.add_ace' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def has_course_ended(end_date): \n    return ((datetime.now(utc) > end_date) if (end_date is not None) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _build_install_args(options): \n    return (['--user'] if options.user_install else [])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def nopackage(pkg_name, options=None): \n    if is_installed(pkg_name): \n      uninstall(pkg_name, options)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def valid(expr): \n    return (not satisfiable(Not(expr)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qos_specs_associate(context, qos_specs_id, type_id): \n    return IMPL.qos_specs_associate(context, qos_specs_id, type_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___getattribute__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def savepoint_rollback(sid, using=None): \n    get_connection(using).savepoint_rollback(sid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def executeLeftOperations(evaluators, operationLevel): \n    for negativeIndex in xrange((- len(evaluators)), (-1)): \n      evaluatorIndex = (negativeIndex + len(evaluators)) \n      evaluators[evaluatorIndex].executeLeftOperation(evaluators, evaluatorIndex, operationLevel)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewRepository(): \n    return SplodgeRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strategy_connected_sequential_dfs(G, colors): \n    return strategy_connected_sequential(G, colors, 'dfs')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_commit(): \n    return s3db.req_send_commit()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stonith_create(stonith_id, stonith_device_type, stonith_device_options=None, cibfile=None): \n    return item_create(item='stonith', item_id=stonith_id, item_type=stonith_device_type, extra_args=stonith_device_options, cibfile=cibfile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_master_symlinks(saltenv='base', prefix=''): \n    return __context__['fileclient'].symlink_list(saltenv, prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bw_usage_get_by_uuids(context, uuids, start_period): \n    return IMPL.bw_usage_get_by_uuids(context, uuids, start_period)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def block_device_mapping_update(context, bdm_id, values, legacy=True): \n    return IMPL.block_device_mapping_update(context, bdm_id, values, legacy)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_(): \n    return get_all()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def error(why, msg): \n    err(why, msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_position_inf(pos1, pos2): \n    return (pos1 < pos2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_tile_features(lock, host, port, path_fmt, tiles, features): \n    while True: \n      try: \n         tile = tiles.pop() \n      except IndexError: \n         break \n      conn = HTTPConnection(host, port) \n      head = {'Accept-Encoding': 'gzip'} \n      path = (path_fmt % tile) \n      conn.request('GET', path, headers=head) \n      resp = conn.getresponse() \n      file = StringIO(resp.read()) \n      if (resp.getheader('Content-Encoding') == 'gzip'): \n         file = GzipFile(fileobj=file, mode='r') \n      with lock: \n         mime_type = resp.getheader('Content-Type') \n         if (mime_type in ('text/json', 'application/json')): \n            file_features = geojson.decode(file) \n         elif (mime_type == 'application/octet-stream+mvt'): \n            file_features = mvt.decode(file) \n         else: \n            logging.error(('Unknown   MIME-Type   \"%s\"   from   %s:%d%s' % (mime_type, host, port, path))) \n            return \n         logging.debug(('%d   features   in   %s:%d%s' % (len(file_features), host, port, path))) \n         features.extend(file_features)",
        "line_count": 24,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def get_hwclock(): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeopts_contains(value): \n    return var_contains('MAKEOPTS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_glance_metadata_copy_to_volume(context, volume_id, snapshot_id): \n    return IMPL.volume_glance_metadata_copy_to_volume(context, volume_id, snapshot_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _can_access_descriptor_with_start_date(user, descriptor, course_key): \n    return check_start_date(user, descriptor.days_early_for_beta, descriptor.start, course_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def downgrade(active_plugin=None, options=None): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def circmean(data, axis=None, weights=None): \n    return _angle(data, 1, 0.0, axis, weights)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_preload(inst): \n    if (inst.preload is False): \n      raise RuntimeError('Modifying   data   of   Instance   is   only   supported   when   preloading   is   used.   Use   preload=True   (or   string)   in   the   constructor.')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def linkify(docs): \n    return [(DOC_SITE_ROOT + x) for x in docs]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def write_request_load_scenario(reactor, cluster, request_rate=10, sample_size=DEFAULT_SAMPLE_SIZE, timeout=45, tolerance_percentage=0.2): \n    return RequestLoadScenario(reactor, WriteRequest(reactor, cluster.get_control_service(reactor)), request_rate=request_rate, sample_size=sample_size, timeout=timeout, tolerance_percentage=tolerance_percentage)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_array_index_eq(left, right): \n    assert_eq(left, (pd.Index(right) if isinstance(right, np.ndarray) else right))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def name_error(): \n    class X(object, ): \n      B = B",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_uint16(fid): \n    return _unpack_simple(fid, '>u2', np.uint16)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iterate_base4(d): \n    return product(xrange(4), repeat=d)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_frame(url, skiprows): \n    return pd.read_csv(url, skiprows=skiprows, skipinitialspace=True, na_values=['Bank   holiday', 'Not   available'], parse_dates=['Date'], index_col='Date').dropna(how='all').tz_localize('UTC').rename(columns=COLUMN_NAMES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_create(context, values): \n    return IMPL.volume_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cluster_quorum(**kwargs): \n    return ceph_cfg.cluster_quorum(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def urlquote_plus(url, safe=u''): \n    return force_text(quote_plus(force_str(url), force_str(safe)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO___new__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _GetKeyKind(key): \n    return key.path().element_list()[(-1)].type()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def concat(xs, axis=1): \n    return Concat(axis=axis)(*xs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ListIndexesResponsePbToGetResponse(response): \n    return GetResponse(results=[_NewIndexFromPb(index) for index in response.index_metadata_list()])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def format_string(msg): \n    return (msg + '\\x00')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def append_features(value): \n    return append_var('FEATURES', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def warn(msg): \n    warnings.warn(msg, UserWarning)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def naf(n): \n    while n: \n      z = ((2 - (n % 4)) if (n & 1) else 0) \n      n = ((n - z) // 2) \n      (yield z)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_topic_name(prefix, table, operation): \n    return ('%s-%s-%s' % (prefix, table, operation))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_application_id(): \n    return app_identity.get_application_id()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def utf8_keys(dictionary): \n    return dict([(key.encode('utf8'), val) for (key, val) in dictionary.items()])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def format_date(value, format='%Y-%m-%d'): \n    return value.strftime(format)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setupApp(root, flist): \n    if isAquaTk(): \n      hideTkConsole(root) \n      overrideRootMenu(root, flist) \n      addOpenEventSupport(root, flist) \n      fixb2context(root)",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def search_users(query, sort=None, order=None, per_page=None, text_match=False, number=(-1), etag=None): \n    return gh.search_users(query, sort, order, per_page, text_match, number, etag)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(argv): \n    correct_font(*argv[1:])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ProgressDatabase(db_filename, signature): \n    return _ProgressDatabase(db_filename, 'INTEGER', int, signature)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getProfilesPath(subName=''): \n    return getJoinedPath(getSettingsPath('profiles'), subName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getnameinfo(sockaddr, flags): \n    return get_hub().resolver.getnameinfo(sockaddr, flags)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MakeCdfFromDict(d, label=None): \n    return Cdf(d, label=label)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def revdict(d): \n    return dict(((v, k) for (k, v) in iteritems(d)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def append_emerge_default_opts(value): \n    return append_var('EMERGE_DEFAULT_OPTS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_direct_abstract_declarator_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ceph_version(): \n    return ceph_cfg.ceph_version()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timedelta_seconds(delta): \n    return (((((delta.days * 24) * 60) * 60) + delta.seconds) + (delta.microseconds / 1000000.0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def keyword(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ScrubUpdateViewpoint(op_args): \n    _ScrubForClass(Viewpoint, op_args['vp_dict'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def le_(a, b, msg=None): \n    assert (a <= b), (msg or ('%r   !=   %r' % (a, b)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def send_message(registration_id, data, cloud_type, **kwargs): \n    if registration_id: \n      return _cm_send_plain(registration_id, data, cloud_type, **kwargs)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_resource_versions(resource_type): \n    return _get_cached_tracker().get_resource_versions(resource_type)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def task_install_flocker(distribution=None, package_source=PackageSource()): \n    return task_package_install('clusterhq-flocker-node', distribution, package_source)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list2(L): \n    return list(L)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return DescriptionRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_tab_menu(needle, tab_entries, separator): \n    for (i, entry) in enumerate(tab_entries): \n      print_local(('%s%s%d%s%s' % (needle, separator, (i + 1), separator, entry.path)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_currency_symbol(currency, locale=LC_NUMERIC): \n    return Locale.parse(locale).currency_symbols.get(currency, currency)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def IS_LINE_JUNK(line, pat=re.compile('\\\\s*#?\\\\s*$').match): \n    return (pat(line) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_chunks(source, chunk_len): \n    return (source[i:(i + chunk_len)] for i in range(0, len(source), chunk_len))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def otsu(image, selem, out=None, mask=None, shift_x=False, shift_y=False): \n    return _apply_scalar_per_pixel(generic_cy._otsu, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def conjugate_transpose(matlist, K): \n    return conjugate(transpose(matlist, K), K)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def synchronize(): \n    return current_context().synchronize()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_node_search_by_hypervisor(context, hypervisor_match): \n    return IMPL.compute_node_search_by_hypervisor(context, hypervisor_match)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _create_uuid(hass, filename=UPDATER_UUID_FILE): \n    with open(hass.config.path(filename), 'w') as fptr: \n      _uuid = uuid.uuid4().hex \n      fptr.write(json.dumps({'uuid': _uuid})) \n      return _uuid",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_nothing(r, name, sub): \n    return ''",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_implied_task_id(d): \n    if (d.get('attempt_id') and (not d.get('task_id'))): \n      d['task_id'] = _attempt_id_to_task_id(d['attempt_id'])",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_variable_shape(x): \n    return int_shape(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_interface_suffix(interface): \n    return interface.partition('@')[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def next_history_or_next_completion(event): \n    event.current_buffer.auto_down()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_subscribed(mailchimp, list_id): \n    return get_members(mailchimp, list_id, 'subscribed')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_negative_indices(*nodes): \n    for node in nodes: \n      if ((node is None) or ((not isinstance(node.constant_result, _py_int_types)) and (not isinstance(node.constant_result, float)))): \n         continue \n      if (node.constant_result < 0): \n         warning(node.pos, \"the   result   of   using   negative   indices   inside   of   code   sections   marked   as   'wraparound=False'   is   undefined\", level=1)",
        "line_count": 5,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def c_moves_s(client): \n    return 'south'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def motion_string(motion): \n    return _motion_names.get(motion, str(motion))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gaussian(mean, ln_var): \n    return Gaussian()(mean, ln_var)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unpack(name, dest=None, path=None, pack_format='tar', compress='bz2'): \n    if (pack_format == 'tar'): \n      _untar(name, dest, path, compress)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_parameter_declaration_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cache_id_func(service): \n    return partial(cache_id, service)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sizeof_fmt(num): \n    for x in ['bytes', 'K', 'M', 'G', 'T']: \n      if (num < 1024.0): \n         return ('%d%s' % (num, x)) \n      num /= 1024.0",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def inter_community_edges(G, partition): \n    return nx.quotient_graph(G, partition, create_using=nx.MultiGraph()).size()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_sessions_for_user(user): \n    Session.remove(Q('data.auth_user_id', 'eq', user._id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def weighted(y): \n    return linkage(y, method='weighted', metric='euclidean')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apiNew(user, passwd): \n    return DeliciousAPI(user=user, passwd=passwd)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def itervalues(d): \n    return getattr(d, _itervalues)()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _safe_html(s): \n    return cgi.escape(s, quote=1).replace(\"'\", '&#39;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_queue_name_prefix(): \n    return u'ckan:{}:'.format(config[u'ckan.site_id'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _path_for_test(test): \n    return FilePath(_path_for_test_id(test.id()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_old_jobs(): \n    return",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _num_plugins_cached(): \n    return len(plugin.PLUGIN_CACHE.keys())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_indent(line): \n    return re.match('^([   \\\\t]*)', line).group()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_global_notification_type(global_subscription, user): \n    for notification_type in constants.NOTIFICATION_TYPES: \n      if getattr(global_subscription, notification_type).filter(id=user.id).exists(): \n         return notification_type",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def TurnIntIntoStrInList(the_list): \n    for index in xrange(0, len(the_list)): \n      item = the_list[index] \n      if (type(item) is int): \n         the_list[index] = str(item) \n      elif (type(item) is dict): \n         TurnIntIntoStrInDict(item) \n      elif (type(item) is list): \n         TurnIntIntoStrInList(item)",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def do_select(): \n    PCap.use_select = True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tz_from_string(_option, _opt_str, value, parser): \n    if (value is not None): \n      if (value[0] in ['+', '-']): \n         valarray = [value[i:(i + 2)] for i in range(1, len(value), 2)] \n         multipliers = [3600, 60] \n         offset = 0 \n         for i in range(min(len(valarray), len(multipliers))): \n            offset += (int(valarray[i]) * multipliers[i]) \n         if (value[0] == '-'): \n            offset = (- offset) \n         timezone = OffsetTzInfo(offset=offset) \n      elif tz_pytz: \n         try: \n            timezone = pytz.timezone(value) \n         except pytz.UnknownTimeZoneError: \n            debug.error('Unknown   display   timezone   specified') \n      else: \n         if (not hasattr(time, 'tzset')): \n            debug.error(\"This   operating   system   doesn't   support   tzset,   please   either   specify   an   offset   (eg.   +1000)   or   install   pytz\") \n         timezone = value \n      parser.values.tz = timezone",
        "line_count": 20,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def array_repr(arr, max_line_width=None, precision=None, suppress_small=None): \n    return numpy.array_repr(cupy.asnumpy(arr), max_line_width, precision, suppress_small)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def aggregate_metadata_get(context, aggregate_id): \n    return IMPL.aggregate_metadata_get(context, aggregate_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_time_override(override_time=datetime.datetime.utcnow()): \n    utcnow.override_time = override_time",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def effective_principals(request): \n    return request.effective_principals",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return skeinforge_craft.CraftRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reinit_crypto(): \n    if HAS_CRYPTO: \n      Crypto.Random.atfork()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _gen_ssl_lab_urls(domains): \n    return [('https://www.ssllabs.com/ssltest/analyze.html?d=%s' % dom) for dom in domains]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def bad_view(request): \n    return HttpResponseNotFound('Not   found!.   This   page   contains   some   MAGIC   content')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reservation_rollback(context, reservations, project_id=None): \n    return IMPL.reservation_rollback(context, reservations, project_id=project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_atomic_group(id): \n    models.AtomicGroup.smart_get(id).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def programme(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def keyring_present(**kwargs): \n    return ceph_cfg.keyring_present(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_direct_declarator_4(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def keyring_auth_del(**kwargs): \n    return ceph_cfg.keyring_auth_del(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render_to_response(template_name, context=None, request=None, processors=None, mimetype=None): \n    return HttpResponse(render_to_string(template_name, context, request, processors), mimetype=mimetype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def need_name(dictionary, raise_error=True): \n    return key_checker(['name'])(dictionary, raise_error)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLSHORTLINE(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLSHORTLINE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def slash_unesc(string): \n    return string.replace('\\\\/', '/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_exif(h, f): \n    if (h[6:10] == 'Exif'): \n      return 'jpeg'",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def run_post_push_script(component): \n    run_hook(component, None, component.post_push_script)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def contains(target, identifier, fn): \n    return _event_key(target, identifier, fn).contains()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _copy_entries(arr): \n    return [c.copy() for c in arr]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_hosts(): \n    return dict(_list_hosts())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def elu(x, alpha=1.0): \n    return ELU(alpha=alpha)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_fault_get_by_instance_uuids(context, instance_uuids): \n    return IMPL.instance_fault_get_by_instance_uuids(context, instance_uuids)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def traverse(obj, opts, visitors): \n    return traverse_using(iterate(obj, opts), obj, visitors)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_url(url, **kwargs): \n    return ('https://ci.appveyor.com/api' + url.format(**kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dmp_add_ground(f, c, u, K): \n    return dmp_add_term(f, dmp_ground(c, (u - 1)), 0, u, K)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_success(status): \n    return (200 <= status <= 299)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_conn(): \n    return ProfitBricksService(username=config.get_cloud_config_value('username', get_configured_provider(), __opts__, search_global=False), password=config.get_cloud_config_value('password', get_configured_provider(), __opts__, search_global=False))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Comma(): \n    return Leaf(token.COMMA, u',')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text='', repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tp_write(fd, buf): \n    return get_hub().threadpool.apply_e(BaseException, _write, (fd, buf))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def three_way_cmp(x, y): \n    return ((x > y) - (x < y))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete(filename): \n    FLAC(filename).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ExtractCLPath(output_of_where): \n    for line in output_of_where.strip().splitlines(): \n      if line.startswith('LOC:'): \n         return line[len('LOC:'):].strip()",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def unique_id_for_user(user, save=True): \n    return anonymous_id_for_user(user, None, save=save)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_marker_param(request): \n    return request.GET['marker']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log_coach_report_view(request): \n    if ('facility_user' in request.session): \n      try: \n         user = request.session['facility_user'] \n         UserLog.begin_user_activity(user, activity_type='coachreport') \n         UserLog.update_user_activity(user, activity_type='login') \n         UserLog.end_user_activity(user, activity_type='coachreport') \n      except ValidationError as e: \n         logging.error(('Failed   to   update   Teacher   userlog   activity   login:   %s' % e))",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def intersects(iterable1, iterable2): \n    return (find((lambda x: (x in iterable1)), iterable2) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('trafficserver' if ('trafficserver.set_config' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def serializeSdr(sdr): \n    return ''.join((str(bit) for bit in sdr))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def rsa_crt_dmp1(private_exponent, p): \n    return (private_exponent % (p - 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def campaign_response_summary(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_error_model(model_name, context): \n    return error_models[model_name](context.call_conv)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vol_usage_update(context, id, rd_req, rd_bytes, wr_req, wr_bytes, instance_id, project_id, user_id, availability_zone, update_totals=False): \n    return IMPL.vol_usage_update(context, id, rd_req, rd_bytes, wr_req, wr_bytes, instance_id, project_id, user_id, availability_zone, update_totals=update_totals)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text='', repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_comma_separated(value): \n    if (not re.search(u'^[a-zA-Z0-9-,\\\\.]+$', value)): \n      raise ValidationError(u'{}   should   be   a   comma-separated   list'.format(value))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _mul2012(num1, num2): \n    return ((num1 * num2) >> 20)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def truncate_hour(dt, measure): \n    return ashour(truncate_second(dt, (measure * 3600)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _pick_data_channels(info, exclude='bads', with_ref_meg=True): \n    return pick_types(info, ref_meg=with_ref_meg, include=[], exclude=exclude, selection=None, **_PICK_TYPES_DATA_DICT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Nonfunction(*args): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def traverse_topologically(start_node, get_parents, get_children, filter_func=None, yield_descendants_of_unyielded=False): \n    return _traverse_generic(start_node, get_parents=get_parents, get_children=get_children, filter_func=filter_func, yield_descendants_of_unyielded=yield_descendants_of_unyielded)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def serialize_part_xml(part_elm): \n    return etree.tostring(part_elm, encoding=u'UTF-8', standalone=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vectorized_is_element(array, choices): \n    return vectorize(choices.__contains__, otypes=[bool])(array)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, gcodeText, repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, gcodeText), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_portaudio_version_text(): \n    return pa.get_version_text()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reshape(operator, size): \n    return lo.LinOp(lo.RESHAPE, size, [operator], None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return ScalableVectorGraphicsRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_tb(tb, limit=None): \n    return format_list(extract_tb(tb, limit))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def force_reload(service): \n    _service(service, 'force-reload')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def source_attributes(domain): \n    return string_attributes(domain)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_vnics(host_reference): \n    return host_reference.config.network.vnic",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def autostartup(): \n    for app in settings.INSTALLED_APPS: \n      try: \n         mod = import_module((app + '.startup')) \n      except ImportError: \n         continue \n      if hasattr(mod, 'run'): \n         mod.run()",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def chunkify(lst, n): \n    return [lst[i::n] for i in xrange(n)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def task_flake8(): \n    (yield {'name': os.path.join(os.getcwd(), 'nikola'), 'actions': ['flake8   nikola/']})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _winding_number(T, field): \n    return int((sum([field(*_values[t][i]) for (t, i) in T]) / field(2)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_http_url(method, host, path, headers): \n    if ((method != None) and (path != None)): \n      if ((host != '') and (not re.match(('(http(s)?://)?' + host), path))): \n         http_url_req = (((method + '   ') + host) + path) \n      else: \n         http_url_req = ((method + '   ') + path) \n      http_url_req = url_filter(http_url_req) \n      return http_url_req",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def fixed_ip_associate(context, address, instance_uuid, network_id=None, reserved=False, virtual_interface_id=None): \n    return IMPL.fixed_ip_associate(context, address, instance_uuid, network_id, reserved, virtual_interface_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_element_string(stream, size): \n    return _read(stream, size).decode('ascii')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uninstall_cache(): \n    _patch_session_factory(OriginalSession)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sleep(sec=0): \n    time.sleep(max(MIN_SLEEP, sec))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return ShaftDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_plugin(path_to_zip_file): \n    return loader.load(path_to_zip_file)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_user_email_language(user): \n    return UserPreference.get_value(user, LANGUAGE_KEY)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def js(*args): \n    return js_helper('static/scripts/', *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pluralize(num=0, text=''): \n    return '{:,}   {}{}'.format(num, text, 's'[(num == 1):])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getTechniqueData(technique=None): \n    return kb.injection.data.get(technique)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def saved(name, suffix=None): \n    return _virt_call(name, 'snapshot', 'saved', 'Snapshots   has   been   taken', suffix=suffix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SHORTER(fragment): \n    return len(fragment)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def img_as_int(image, force_copy=False): \n    return convert(image, np.int16, force_copy)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eagerload_all(*args, **kwargs): \n    return joinedload_all(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ShardName(name, number): \n    return _SuffixName(name, str(number))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_date_str(info, date_str, original=False): \n    if date_str: \n      date_parts = date_str.split('-') \n      for key in ('year', 'month', 'day'): \n         if date_parts: \n            date_part = date_parts.pop(0) \n            try: \n               date_num = int(date_part) \n            except ValueError: \n               continue \n            if original: \n               key = ('original_' + key) \n            setattr(info, key, date_num)",
        "line_count": 12,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def findElements(parent, matcher): \n    return findNodes(parent, (lambda n, matcher=matcher: ((getattr(n, 'tagName', None) is not None) and matcher(n))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test__FileIO___format__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_dim(p): \n    p[0] = ('DIM', p[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def redirect_with_hash(*args, **kw): \n    return http.redirect_with_hash(*args, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return TemperatureRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _dict_helper(desc, row): \n    return dict(zip([col[0] for col in desc], row))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sibpath(filename): \n    return util.sibpath(__file__, filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _wanmen_get_title_by_json_topic_part(json_content, tIndex, pIndex): \n    return '_'.join([json_content[0]['name'], json_content[0]['Topics'][tIndex]['name'], json_content[0]['Topics'][tIndex]['Parts'][pIndex]['name']])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_name(instance): \n    return getattr(instance, 'OS-EXT-SRV-ATTR:instance_name', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subnets(interfaces=None): \n    return salt.utils.network.subnets(interfaces)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shared_floatx_nans(shape, **kwargs): \n    return shared_floatx((numpy.nan * numpy.zeros(shape)), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_read_csv(): \n    Table.read(os.path.join(ROOT, 't/simple_csv.csv'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('boto_cognitoidentity' if ('boto_cognitoidentity.describe_identity_pools' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_default(key, val): \n    return frappe.db.set_default(key, val)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def divisibleby(value, arg): \n    return ((int(value) % int(arg)) == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bump_cache_for_item(item): \n    cache.bump_version(_get_namespace_for_item(item))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_svn_page(html): \n    return (re.search('<title>[^<]*Revision   \\\\d+:', html) and re.search('Powered   by   (?:<a[^>]*?>)?Subversion', html, re.I))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def qos_specs_get_by_name(context, name): \n    return IMPL.qos_specs_get_by_name(context, name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decorator_from_middleware_with_args(middleware_class): \n    return make_middleware_decorator(middleware_class)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _convert_seconds(seconds): \n    return u'{0:.0f}:{1:02.0f}'.format(*divmod(float(seconds), 60))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onInit(isReload): \n    DEBUG_MSG(('onInit::isReload:%s' % isReload))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backup_get_all_by_project(context, project_id): \n    return IMPL.backup_get_all_by_project(context, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bayesian_info_criterion(log_likelihood, n_params, n_samples): \n    return ((n_params * np.log(n_samples)) - (2.0 * log_likelihood))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exception(msg, *args): \n    error(msg, exc_info=1, *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _trace(fmt, *args): \n    print(((fmt % args) + '\\n'), end='', file=sys.stderr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compile(file, cfile=None, dfile=None, doraise=False): \n    return",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ordered_dict_to_dict(probes): \n    return loads(dumps(probes))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_password_changed_notice(user): \n    if config_value('SEND_PASSWORD_CHANGE_EMAIL'): \n      subject = config_value('EMAIL_SUBJECT_PASSWORD_CHANGE_NOTICE') \n      send_mail(subject, user.email, 'change_notice', user=user)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _find_backup(cs, backup): \n    return utils.find_resource(cs.backups, backup)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _merge_into_reversed(*iterables): \n    return sorted(itertools.chain(*iterables), reverse=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return HAS_SQLITE3",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hook_path(name, git_dir): \n    return osp.join(git_dir, 'hooks', name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _decode_string_escape_py2(str_): \n    return str_.decode('string_escape')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tan(x): \n    return (sin(x) / cos(x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isPosInf(val): \n    return (str(float(val)) == str(PosInf))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_ofp_module(ofp_version): \n    return get_ofp_modules()[ofp_version]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uirfft2(inarray, shape=None): \n    return uirfftn(inarray, 2, shape=shape)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def transferClosestPaths(oldOrderedLocation, remainingPaths, skein): \n    while (len(remainingPaths) > 0): \n      transferClosestPath(oldOrderedLocation, remainingPaths, skein)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def huhu(db): \n    db",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FormatForAX(text): \n    return ExpandTabs(AddCR(text))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def interface_ip(iface): \n    return salt.utils.network.interface_ip(iface)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def location(): \n    return s3_rest_controller(main='code')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def AceIterator(handle): \n    for ace_contig in Ace.parse(handle): \n      consensus_seq_str = ace_contig.sequence \n      if ('U' in consensus_seq_str): \n         if ('T' in consensus_seq_str): \n            alpha = generic_nucleotide \n         else: \n            alpha = generic_rna \n      else: \n         alpha = generic_dna \n      if ('*' in consensus_seq_str): \n         assert ('-' not in consensus_seq_str) \n         consensus_seq = Seq(consensus_seq_str.replace('*', '-'), Gapped(alpha, gap_char='-')) \n      else: \n         consensus_seq = Seq(consensus_seq_str, alpha) \n      seq_record = SeqRecord(consensus_seq, id=ace_contig.name, name=ace_contig.name) \n      quals = [] \n      i = 0 \n      for base in consensus_seq: \n         if (base == '-'): \n            quals.append(0) \n         else: \n            quals.append(ace_contig.quality[i]) \n            i += 1 \n      assert (i == len(ace_contig.quality)) \n      seq_record.letter_annotations['phred_quality'] = quals \n      (yield seq_record)",
        "line_count": 26,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def group_status(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def message_get(context, message_id): \n    return IMPL.message_get(context, message_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getWindowAnalyzeFile(fileName): \n    return getWindowAnalyzeFileGivenText(fileName, archive.getFileText(fileName))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def auth(username, sharedsecret, **kwargs): \n    return (sharedsecret == __opts__.get('sharedsecret'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def anon_nodename(hostname=None, prefix=u'gen'): \n    return nodename(u''.join([prefix, str(os.getpid())]), (hostname or gethostname()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def print_to_tty(string): \n    open('/dev/tty', 'w').write((string + '\\n'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reload_modules(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isproperty(obj): \n    return (type(obj) == property)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def preview_loading(request): \n    return HttpResponse(u'<html><head><title></title></head><body></body></html>')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLSEPARATINGLINES(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLSEPARATINGLINES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attach_const_node(node, name, value): \n    if (not (name in node.special_attributes)): \n      _attach_local_node(node, const_factory(value), name)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_profiler_results_dir(autodir): \n    return os.path.join(autodir, 'results', 'default', 'profiler_sync', 'profiling')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_installed(pkg_name): \n    with settings(hide('running', 'stdout', 'stderr', 'warnings'), warn_only=True): \n      res = run(('dpkg   -s   %(pkg_name)s' % locals())) \n      for line in res.splitlines(): \n         if line.startswith('Status:   '): \n            status = line[8:] \n            if ('installed' in status.split('   ')): \n               return True \n      return False",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def convert_ListProperty(model, prop, kwargs): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sample_func(v): \n    return (v + v)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CMakeStringEscape(a): \n    return a.replace('\\\\', '\\\\\\\\').replace(';', '\\\\;').replace('\"', '\\\\\"')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def function(*args, **kwargs): \n    return theano.function(on_unused_input='ignore', *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_labels(**filter_data): \n    return rpc_utils.prepare_rows_as_nested_dicts(models.Label.query_objects(filter_data), ('atomic_group',))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_get_all(context, marker=None, limit=None, sort_keys=None, sort_dirs=None, filters=None, offset=None): \n    return IMPL.volume_get_all(context, marker, limit, sort_keys=sort_keys, sort_dirs=sort_dirs, filters=filters, offset=offset)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _esc(code): \n    return '\\x1b[{}m'.format(code)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reset_all_users(): \n    for user in User.objects.all(): \n      user.delete()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __virtual__(): \n    return (__virtualname__ if ('ini.set_option' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def page_missing(request, page_name, revision_requested, protected=False): \n    return Response(generate_template('page_missing.html', page_name=page_name, revision_requested=revision_requested, protected=protected), status=404)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mean_squared_error(true, pred): \n    return (tf.reduce_sum(tf.square((true - pred))) / tf.to_float(tf.size(pred)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_billed_ops_to_map(billed_ops_map, billed_ops_list): \n    for billed_op in billed_ops_list: \n      if (billed_op.op() not in billed_ops_map): \n         update_me = datamodel_pb.BilledOpProto() \n         update_me.set_op(billed_op.op()) \n         update_me.set_num_ops(0) \n         billed_ops_map[billed_op.op()] = update_me \n      update_me = billed_ops_map[billed_op.op()] \n      update_me.set_num_ops((update_me.num_ops() + billed_op.num_ops()))",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def vector_product(v0, v1, axis=0): \n    return numpy.cross(v0, v1, axis=axis)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tanh(x): \n    return tf.nn.tanh(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_lessthan(value, other): \n    return (value < other)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_redirection(status): \n    return ((300 <= status) and (status <= 399))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def add_model_for_resource(resource, model): \n    _RESOURCE_TO_MODEL_MAP[resource] = model",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upgrade_master(ansible_module, config_base, from_version, to_version, backup): \n    if (from_version == '3.0'): \n      if (to_version == '3.1'): \n         return upgrade_master_3_0_to_3_1(ansible_module, config_base, backup)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def connect_to_cloud_loadbalancers(region=None): \n    return _create_client(ep_name='load_balancer', region=region)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_strategy_name(): \n    return 'store_type'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(*argv, **kwds): \n    return _main((['<main>'] + list(argv)), **kwds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TR0(rv): \n    return rv.normal().factor().expand()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uniform_sequence(n): \n    return [random.uniform(0, n) for i in range(n)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def simplelist(inline): \n    return paramfinder.findall(inline)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return skeinforge_polyfile.PolyfileRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def JumpToTab(tab_number): \n    vim.command(u'silent!   tabn   {0}'.format(tab_number))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_partners(frag_index, part_nodes): \n    return [part_nodes[((frag_index - 1) % len(part_nodes))], part_nodes[((frag_index + 1) % len(part_nodes))]]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hed2rgb(hed): \n    return combine_stains(hed, rgb_from_hed)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return FillRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _remove_async_tag_url(question_id): \n    return reverse('questions.remove_tag_async', kwargs={'question_id': question_id})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def number_of_edges(G): \n    return G.number_of_edges()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processXMLElement(xmlElement): \n    xmlElement.parent.object.vertexes += getQuadraticPath(xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def guard_https_ver(): \n    set_https_verification(cfg.enable_https_verification())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SetIfNotEmpty(dict, attr_name, value): \n    if value: \n      dict[attr_name] = value",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def safe_version(version): \n    return version.replace('.', '_')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_epoch_milliseconds(dt): \n    return int(math.floor((1000.0 * epoch_timestamp(dt))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_next_bad(p): \n    p[0] = 'MALFORMED   NEXT'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_args(x): \n    return (type(x) in (tuple, list, set))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or __virtualname__), ('user', 'password'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sort_apply_nodes(inputs, outputs, cmps): \n    return posort(list_of_nodes(inputs, outputs), *cmps)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isOdd(x): \n    return ((x % 2) == 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_entity_header(header): \n    return (header.lower() in _entity_headers)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_summary(rsync_out): \n    return ('-   ' + '\\n-   '.join([elm for elm in rsync_out.split('\\n\\n')[(-1)].replace('      ', '\\n').split('\\n') if elm]))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_mapping_data_by_usernames(usernames): \n    return [{'username': username, 'remote_id': ('remote_' + username)} for username in usernames]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ParseFile(file, base_uri, *args, **kwds): \n    return _ParseFileEx(file, base_uri, *args, **kwds)[1:]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bit_size(number): \n    return int(math.ceil(math.log(number, 2)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def col(loc, strg): \n    return (loc - strg.rfind('\\n', 0, loc))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _bytes_from_json(value, field): \n    if _not_null(value, field): \n      return base64.decodestring(_to_bytes(value))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _combine_flaky_annotation(flaky1, flaky2): \n    return _FlakyAnnotation(jira_keys=(flaky1.jira_keys | flaky2.jira_keys), max_runs=max(flaky1.max_runs, flaky2.max_runs), min_passes=max(flaky1.min_passes, flaky2.min_passes))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convertElementNode(elementNode, geometryOutput): \n    convertContainerElementNode(elementNode, geometryOutput, Group())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, msg=None, ciphermod=None, cipher_params=None): \n    return CMAC(key, msg, ciphermod, cipher_params)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stop_time_service(): \n    return __salt__['service.stop']('w32time')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_inside_dir(command, dirpath): \n    with inside_dir(dirpath): \n      return subprocess.check_call(shlex.split(command))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _propagate_internal_output(graph, node, field, connections, portinputs): \n    for (destnode, inport, src) in connections: \n      if (field in portinputs): \n         (srcnode, srcport) = portinputs[field] \n         if (isinstance(srcport, tuple) and isinstance(src, tuple)): \n            src_func = srcport[1].split(u'\\\\n')[0] \n            dst_func = src[1].split(u'\\\\n')[0] \n            raise ValueError(u\"Does   not   support   two   inline   functions   in   series   ('{}'      and   '{}'),   found   when   connecting   {}   to   {}.   Please   use   a   Function   node.\".format(src_func, dst_func, srcnode, destnode)) \n         connect = graph.get_edge_data(srcnode, destnode, default={u'connect': []}) \n         if isinstance(src, tuple): \n            connect[u'connect'].append(((srcport, src[1], src[2]), inport)) \n         else: \n            connect = {u'connect': [(srcport, inport)]} \n         old_connect = graph.get_edge_data(srcnode, destnode, default={u'connect': []}) \n         old_connect[u'connect'] += connect[u'connect'] \n         graph.add_edges_from([(srcnode, destnode, old_connect)]) \n      else: \n         value = getattr(node.inputs, field) \n         if isinstance(src, tuple): \n            value = evaluate_connect_function(src[1], src[2], value) \n         destnode.set_input(inport, value)",
        "line_count": 20,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def direct_format_text(text): \n    return text.replace('\\n', '\\\\n').replace('\\r', '\\\\r')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def smart_split(text): \n    for bit in smart_split_re.finditer(text): \n      bit = bit.group(0) \n      if (bit[0] == '\"'): \n         (yield (('\"' + bit[1:(-1)].replace('\\\\\"', '\"').replace('\\\\\\\\', '\\\\')) + '\"')) \n      elif (bit[0] == \"'\"): \n         (yield ((\"'\" + bit[1:(-1)].replace(\"\\\\'\", \"'\").replace('\\\\\\\\', '\\\\')) + \"'\")) \n      else: \n         (yield bit)",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def individual_billed_ops_to_str(self): \n    return billed_ops_to_str(self.billed_ops_list())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skip_unless(condition, msg=None): \n    return pytest.mark.skipif((not condition), reason=(msg or 'conditional   skip'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_if_set(dct, key, value): \n    if (value is not UNSET): \n      dct[key] = value",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def url_for(endpoint, **kw): \n    return url_adapter.build(endpoint, kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def copy_perms(parent): \n    for d in frappe.get_all(u'DocPerm', fields=u'*', filters=dict(parent=parent)): \n      custom_perm = frappe.new_doc(u'Custom   DocPerm') \n      custom_perm.update(d) \n      custom_perm.insert(ignore_permissions=True)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def strategy_largest_first(G, colors): \n    return sorted(G, key=G.degree, reverse=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pci_device_get_all_by_parent_addr(context, node_id, parent_addr): \n    return IMPL.pci_device_get_all_by_parent_addr(context, node_id, parent_addr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def raw(string): \n    return string.replace('{', '{{')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _not_a_coeff(expr): \n    return (expr in [S.NaN, S.Infinity, S.NegativeInfinity, S.ComplexInfinity])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def width_from_max_int(value): \n    return int(math.ceil(math.log((value + 1), 2)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_conn(profile): \n    return salt.utils.etcd_util.get_conn(profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def foldr(fn, sequences, outputs_info, non_sequences=None, mode=None, name=None): \n    return reduce(fn=fn, sequences=sequences, outputs_info=outputs_info, non_sequences=non_sequences, go_backwards=True, mode=mode, name=name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_array_equal(x, y, err_msg='', verbose=True): \n    numpy.testing.assert_array_equal(cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg, verbose=verbose)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_undefined(value): \n    return isinstance(value, Undefined)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_data_get_for_project(context, project_id, session=None): \n    return IMPL.instance_data_get_for_project(context, project_id, session=session)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ngettext(singular, plural, n, **variables): \n    return get_i18n().ngettext(singular, plural, n, **variables)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_post_commit_script(component, translation, filename): \n    run_hook(component, translation, component.post_commit_script, None, filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_multiplicative_expression_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_logging(): \n    if (not app.debug): \n      if app.config.get('LOG_CFG'): \n         _ = app.logger \n         dictConfig(app.config.get('LOG_CFG')) \n      else: \n         if (app.config.get('LOG_FILE') is not None): \n            handler = RotatingFileHandler(app.config.get('LOG_FILE'), maxBytes=10000000, backupCount=100) \n         else: \n            handler = StreamHandler(stream=sys.stderr) \n         handler.setFormatter(Formatter('%(asctime)s   %(levelname)s:   %(message)s   [in   %(pathname)s:%(lineno)d]')) \n         app.logger.setLevel(app.config.get('LOG_LEVEL', DEBUG)) \n         app.logger.addHandler(handler)",
        "line_count": 12,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def parse_datetime(string): \n    return get_i18n().parse_datetime(string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_carrier(): \n    return getattr(_local, 'carrier', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_preview_files(sender, instance, **kw): \n    for filename in [instance.image_path, instance.thumbnail_path]: \n      if storage.exists(filename): \n         log.info(('Removing   filename:   %s   for   preview:   %s' % (filename, instance.pk))) \n         storage.delete(filename)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def forward_drop(): \n    run(settings.iptables, '-P', 'FORWARD', 'DROP')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sigmoid(x): \n    return tanh(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dtype(x): \n    return x.dtype.name",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compact_whitespace(s): \n    return _MULTI_WHITESPACE.sub('   ', s).strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_verifier(length=8): \n    return ''.join([str(random.SystemRandom().randint(0, 9)) for i in range(length)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _value_name(value): \n    return '{}   {}'.format(_node_name(value.node), value.label)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_manual_typechecking(bad_grammar, test_obj): \n    for (attr, value) in bad_grammar: \n      with nt.assert_raises(ValueError) as err: \n         setattr(test_obj, attr, value) \n      nt.assert_equal(err.expected, ValueError)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_escaped(value): \n    return hasattr(value, '__html__')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_gid(path, follow_symlinks=True): \n    return stats(os.path.expanduser(path), follow_symlinks=follow_symlinks).get('gid', (-1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_include_file(include_dirs, filename, package): \n    if (not has_include_file(include_dirs, filename)): \n      raise CheckFailed(('The   C/C++   header   for   %s   (%s)   could   not   be   found.      You   may   need   to   install   the   development   package.' % (package, filename)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getSidesMinimumThreeBasedOnPrecision(radius, xmlElement): \n    return max(getSidesBasedOnPrecision(radius, xmlElement), 3)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _repr_odict(dumper, data): \n    return _repr_pairs(dumper, u'tag:yaml.org,2002:omap', six.iteritems(data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def HashEmails(emails): \n    return [hashlib.sha256(email.strip().lower()).hexdigest() for email in emails]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def SimpleAnalyzer(expression=default_pattern, gaps=False): \n    return (RegexTokenizer(expression=expression, gaps=gaps) | LowercaseFilter())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _to_qemu_format(fmt): \n    return TO_QEMU_FORMAT_MAP[fmt]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_message(request, level, message, extra_tags='', fail_silently=False): \n    if (not horizon_message_already_queued(request, message)): \n      if request.is_ajax(): \n         tag = constants.DEFAULT_TAGS[level] \n         if isinstance(message, SafeData): \n            extra_tags = (extra_tags + '   safe') \n         request.horizon['async_messages'].append([tag, force_text(message), extra_tags]) \n      else: \n         return _messages.add_message(request, level, message, extra_tags, fail_silently)",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def filename_to_domain(filename): \n    return filename.replace('-', '/')[:(-4)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_again(text): \n    return _setup(text).find_again(text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flip_horizontal(request, fileobjects): \n    transpose_image(request, fileobjects, 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_struct_declarator_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def one(s): \n    return next(iter(s))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _arg(bytes, signed, dvi, _): \n    return dvi._arg(bytes, signed)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _register_adapter(value, key): \n    if ((not isinstance(value, (type(None), int, float, six.string_types, bytes, numpy.ndarray))) and (key != 'resumed_from')): \n      sqlite3.register_adapter(type(value), adapt_obj)",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def ls(*args): \n    return list(items(*args).keys())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def import_buffer_to_hst(buf): \n    return tokenize((buf + '\\n'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ListBasename(filelist): \n    return [os.path.basename(f) for f in filelist]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def volume_data_get_for_project(context, project_id): \n    return IMPL.volume_data_get_for_project(context, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cg_creating_from_src(cg_id=None, cgsnapshot_id=None): \n    return IMPL.cg_creating_from_src(cg_id, cgsnapshot_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_sld_boilerplate(symbolizer): \n    return (('\\n<StyledLayerDescriptor   version=\"1.0.0\"   xmlns=\"http://www.opengis.net/sld\"   xmlns:ogc=\"http://www.opengis.net/ogc\"\\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\\n      xsi:schemaLocation=\"http://www.opengis.net/sld   http://schemas.opengis.net/sld/1.0.0/StyledLayerDescriptor.xsd\">\\n      <NamedLayer>\\n            <Name>%(name)s</Name>\\n            <UserStyle>\\n            <Name>%(name)s</Name>\\n            <Title>%(name)s</Title>\\n                  <FeatureTypeStyle>\\n                        <Rule>\\n' + symbolizer) + '\\n                        </Rule>\\n                  </FeatureTypeStyle>\\n            </UserStyle>\\n      </NamedLayer>\\n</StyledLayerDescriptor>\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def object_f(a, indices): \n    for idx in indices: \n      sleep((10 * sleep_factor)) \n      object() \n      a[idx] = PyThread_get_thread_ident()",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def group_destroy(context, group_id): \n    return IMPL.group_destroy(context, group_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def initialize(): \n    db.configure_db()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getatime(filename): \n    return os.stat(filename).st_atime",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def svm_save_model(model_file_name, model): \n    libsvm.svm_save_model(model_file_name.encode(), model)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def synchronized_with_prefix(lock_file_prefix): \n    return functools.partial(synchronized, lock_file_prefix=lock_file_prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def keyring_auth_list(**kwargs): \n    return ceph_cfg.keyring_auth_list(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chworkphone(name, workphone): \n    return _update_gecos(name, 'workphone', workphone)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _encode_none(name, dummy0, dummy1, dummy2): \n    return ('\\n' + name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_system_metadata_update(context, instance_uuid, metadata, delete): \n    IMPL.instance_system_metadata_update(context, instance_uuid, metadata, delete)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def asarray(a, dtype=None): \n    return cupy.array(a, dtype=dtype, copy=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mapall(*args): \n    return list(lazy_mapall(*args))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log(x): \n    return tf.log(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backends(): \n    return {'backends': user_backends_data(g.user, get_helper('AUTHENTICATION_BACKENDS'), get_helper('STORAGE', do_import=True))}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def verifyCryptedPassword(crypted, pw): \n    return (crypt.crypt(pw, crypted) == crypted)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_carrier(name): \n    _local.carrier = name",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_person_status(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def createDict(data, index): \n    return dict(((key, values[index]) for (key, values) in data.iteritems()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _AbiTrimIterator(handle): \n    return AbiIterator(handle, trim=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def restore(self, request, queryset): \n    if request.POST.get('_selected_action'): \n      id = request.POST.get('_selected_action') \n      siteObj = self.model.objects.get(pk=id) \n      if request.POST.get('post'): \n         for siteObj in queryset: \n            self.message_user(request, ('Executed   Restore:   ' + siteObj.name)) \n            out = StringIO.StringIO() \n            if siteObj.location: \n               call_command('restore', force_exec=True, backup_file=str(siteObj.location).strip(), stdout=out) \n            else: \n               self.message_user(request, (siteObj.name + '   backup   not   ready!')) \n      else: \n         context = {'objects_name': 'Restores', 'title': 'Confirm   run   of   Restores:', 'action_exec': 'restore', 'cancellable_backups': [siteObj], 'action_checkbox_name': helpers.ACTION_CHECKBOX_NAME} \n         return TemplateResponse(request, 'admin/backups/confirm_cancel.html', context, current_app=self.admin_site.name)",
        "line_count": 14,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def p_expr_unary(p): \n    p[0] = ('UNARY', '-', p[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_typedef(p): \n    setattr(thrift_stack[(-1)], p[3], p[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upcaseTokens(s, l, t): \n    return [tt.upper() for tt in map(_ustr, t)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def count(s, limit=20): \n    return _gen(parse(s), limit, count=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def distribute_or_over_and(expr): \n    return _distribute((expr, Or, And))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _num_cpus_unix(): \n    return os.sysconf('SC_NPROCESSORS_ONLN')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def EvalLognormalCdf(x, mu=0, sigma=1): \n    return stats.lognorm.cdf(x, loc=mu, scale=sigma)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _resolve_document(request, docid, permission='base.change_resourcebase', msg=_PERMISSION_MSG_GENERIC, **kwargs): \n    return resolve_object(request, Document, {'pk': docid}, permission=permission, permission_msg=msg, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_get_all_by_generic_group(context, group_id, filters=None): \n    return IMPL.volume_get_all_by_generic_group(context, group_id, filters=filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_suites(): \n    for module in find_modules(__name__): \n      mod = import_string(module) \n      if hasattr(mod, 'suite'): \n         (yield mod.suite())",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def compile_dir(dfn): \n    subprocess.call([PYTHON, '-OO', '-m', 'compileall', '-f', dfn])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_const_value(p): \n    p[0] = p[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def no_filter(blast_subject_entry): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def comment(path, regex, char='#', backup='.bak'): \n    return comment_line(path=path, regex=regex, char=char, cmnt=True, backup=backup)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def keyevent2tuple(event): \n    return (event.type(), event.key(), event.modifiers(), event.text(), event.isAutoRepeat(), event.count())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_known_cup_metrics(): \n    return [metric.__name__ for metric in cup_metrics]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def load_all_account_types(): \n    for account_type in account_registry.keys(): \n      _get_or_create_account_type(account_type)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _deg_ord_idx(deg, order): \n    return ((((deg * deg) + deg) + order) - 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_expr_variable(p): \n    p[0] = ('VAR', p[1])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_user(id): \n    models.User.smart_get(id).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_batch_id(): \n    return str(int(time.time()))[(-6):]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_backend(): \n    return rcParams[u'backend']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_rollback(name): \n    return _get_client().get_rollback(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def symptom_unique_key_repositories(): \n    return (CONF.credential.key_repository == CONF.fernet_tokens.key_repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def circle(screensize, center, radius, col1=1.0, col2=0, blur=1): \n    return color_gradient(screensize, p1=center, r=radius, col1=col1, col2=col2, shape='radial', offset=(0 if (radius == 0) else ((1.0 * (radius - blur)) / radius)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def extrudeFiles(filenames): \n    for filename in filenames: \n      extrudeFile(filename)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getProcessOutput(executable, args=(), env={}, path=None, reactor=None, errortoo=0): \n    return _callProtocolWithDeferred((lambda d: _BackRelay(d, errortoo=errortoo)), executable, args, env, path, reactor)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def join(left, right, onclause=None, isouter=False, join_to_left=None): \n    return _ORMJoin(left, right, onclause, isouter)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def i(message): \n    print_log(message)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def url(parser, token): \n    raise NotImplementedError(\"the   'url'   block   tag   is   not   supported   in   the   python27   runtime\")",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _format_error_html(msg): \n    return u'<p   class=\"error_msg\">{msg}</p>'.format(msg=msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_request_suffix(string): \n    return (string + REQUEST_SUFFIX)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_notifications_for_modules(config, notification_count): \n    return get_notifications_for(u'for_module', config, notification_count)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_if_docker_app_can_be_deployed(dcos_api_session): \n    dcos_api_session.marathon.deploy_test_app_and_check(*get_test_app_in_docker(ip_per_container=False))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_cohort_exists(course_key, name): \n    return CourseUserGroup.objects.filter(course_id=course_key, group_type=CourseUserGroup.COHORT, name=name).exists()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _validate_flavor_parameter(flavor): \n    if (flavor is not None): \n      if (flavor == 'sqlite'): \n         warnings.warn(\"the   'flavor'   parameter   is   deprecated   and   will   be   removed   in   a   future   version,   as   'sqlite'   is   the   only   supported   option   when   SQLAlchemy   is   not   installed.\", FutureWarning, stacklevel=2) \n      else: \n         raise ValueError('database   flavor   {flavor}   is   not   supported'.format(flavor=flavor))",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def random_text(length, alph=(string.ascii_letters + string.digits)): \n    return ''.join((random.choice(alph) for _ in range(length)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def onLoginAppShutDown(): \n    INFO_MSG('onLoginAppShutDown()')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_registered_option(key): \n    return _registered_options.get(key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _snapshot_service(service): \n    _apply_service(service, SonosDevice.snapshot)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _scandir_generic(path=unicode('.')): \n    for name in listdir(path): \n      (yield GenericDirEntry(path, name))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_docs_url(path_name, version=None): \n    return urljoin(DOCS_BASE, get_rtd_version(version=version), path_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def float_repr(value, precision_digits): \n    return (('%%.%sf' % precision_digits) % value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def course_and_time_based_filename_generator(course_id, base_name): \n    return u'{course_prefix}_{base_name}_{timestamp_str}'.format(course_prefix=course_filename_prefix_generator(course_id), base_name=get_valid_filename(base_name), timestamp_str=datetime.now(UTC).strftime('%Y-%m-%d-%H%M%S'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def grad(*args, **kwargs): \n    return theano.gradient.grad(disconnected_inputs='ignore', *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_hostname(): \n    with settings(hide('running', 'stdout')): \n      return run('hostname   --fqdn')",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shutdown_hard(): \n    return shutdown(timeout=0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rand_text_alpha_upper(length, bad=''): \n    return rand_base(length, bad, set(upperAlpha))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def education_level(): \n    return s3_rest_controller('pr', 'education_level')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_numpy_unicode_bug(labels): \n    if ((np_version[:3] < (1, 7, 0)) and (labels.dtype.kind == 'U')): \n      raise RuntimeError('NumPy   <   1.7.0   does   not   implement   searchsorted   on   unicode   data   correctly.   Please   upgrade   NumPy   to   use   LabelEncoder   with   unicode   inputs.')",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def all_correlations_book_version(bait, target): \n    return np.array([np.corrcoef(bait, c)[(0, 1)] for c in target])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def version(): \n    return __firewall_cmd('--version')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getMax(value): \n    return max(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_limit(): \n    return _limit[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookupMailBox(name, timeout=None): \n    return getResolver().lookupMailBox(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def refresh(): \n    return __apf_cmd('-e')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_category_value(label): \n    return _get_array_element('category', label, ('animal', 'human', 'airplane', 'truck', 'car', 'blank'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def json_encode(obj, **kwargs): \n    return json.dumps(obj, default=json_default, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_running(service): \n    with settings(hide('running', 'stdout', 'stderr', 'warnings'), warn_only=True): \n      return action('status', service).succeeded",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_timestamp(value): \n    return (value - epoch).total_seconds()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isInf(value): \n    return ((_exponent(value) == 2047) and _zero_mantissa(value))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def security_group_count_by_project(context, project_id, session=None): \n    return IMPL.security_group_count_by_project(context, project_id, session=session)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index(a): \n    return a.__index__()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def responder(f): \n    return _patch_wrapper(f, (lambda *a: f(*a)(*a[(-2):])))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decorated_with_abc(func): \n    if func.decorators: \n      for node in func.decorators.nodes: \n         try: \n            infered = next(node.infer()) \n         except astroid.InferenceError: \n            continue \n         if (infered and (infered.qname() in ABC_METHODS)): \n            return True",
        "line_count": 8,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def post_save_profile(instance, sender, **kwargs): \n    if ((not instance.is_superuser) and kwargs['created'] and (not kwargs['raw']) and (instance.username != 'AnonymousUser')): \n      current_site = Site.objects.get_current() \n      SitePeople.objects.get(site=current_site).people.add(instance)",
        "line_count": 3,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def can_access_others_blocks(requesting_user, course_key): \n    return has_access(requesting_user, CourseStaffRole.ROLE, course_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_user(login, access_level=None): \n    return models.User.add_object(login=login, access_level=access_level).id",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def barrier(*args, **kargs): \n    raise _stub_error",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def removeXMLFile(xmlFilePath): \n    if archive.getEndsWithList(xmlFilePath, ['_interpret.xml']): \n      os.remove(xmlFilePath) \n      print ('removeGeneratedFiles   deleted   ' + xmlFilePath)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cp_key(c, ring): \n    return (lbp_key(lbp(c[0], ring.zero, Num(c[2]))), lbp_key(lbp(c[3], ring.zero, Num(c[5]))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def advance_rest(clock): \n    clock.advance((EXPIRATION_TIME.total_seconds() - 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def python_prereqs_installation(): \n    for req_file in PYTHON_REQ_FILES: \n      pip_install_req_file(req_file)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def responder(f): \n    return update_wrapper((lambda *a: f(*a)(*a[(-2):])), f)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def report(): \n    _get_cached_tracker().report()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_numpy_dtype(obj): \n    if (ndarray is not FakeObject): \n      import numpy as np \n      if (isinstance(obj, np.generic) or isinstance(obj, np.ndarray)): \n         try: \n            return obj.dtype.type \n         except (AttributeError, RuntimeError): \n            return",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def resnet_v1(inputs, blocks, num_classes=None, is_training=True, global_pool=True, output_stride=None, include_root_block=True, reuse=None, scope=None): \n    with tf.variable_scope(scope, 'resnet_v1', [inputs], reuse=reuse) as sc: \n      end_points_collection = (sc.name + '_end_points') \n      with slim.arg_scope([slim.conv2d, bottleneck, resnet_utils.stack_blocks_dense], outputs_collections=end_points_collection): \n         with slim.arg_scope([slim.batch_norm], is_training=is_training): \n            net = inputs \n            if include_root_block: \n               if (output_stride is not None): \n                  if ((output_stride % 4) != 0): \n                     raise ValueError('The   output_stride   needs   to   be   a   multiple   of   4.') \n                  output_stride /= 4 \n               net = resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1') \n               net = slim.max_pool2d(net, [3, 3], stride=2, scope='pool1') \n            net = resnet_utils.stack_blocks_dense(net, blocks, output_stride) \n            if global_pool: \n               net = tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True) \n            if (num_classes is not None): \n               net = slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits') \n            end_points = slim.utils.convert_collection_to_dict(end_points_collection) \n            if (num_classes is not None): \n               end_points['predictions'] = slim.softmax(net, scope='predictions') \n            return (net, end_points)",
        "line_count": 21,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def read_raw_brainvision(vhdr_fname, montage=None, eog=('HEOGL', 'HEOGR', 'VEOGb'), misc='auto', scale=1.0, preload=False, response_trig_shift=0, event_id=None, verbose=None): \n    return RawBrainVision(vhdr_fname=vhdr_fname, montage=montage, eog=eog, misc=misc, scale=scale, preload=preload, response_trig_shift=response_trig_shift, event_id=event_id, verbose=verbose)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_https_enabled(): \n    return bool((SSL_CERTIFICATE.get() and SSL_PRIVATE_KEY.get()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _hmac_sha256(key, msg): \n    return hmac.new(key, msg, hashlib.sha256).digest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_get_all_by_binary(context, binary, include_disabled=False): \n    return IMPL.service_get_all_by_binary(context, binary, include_disabled=include_disabled)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plt_closeall(n=10): \n    for i in range(n): \n      plt.close()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def itervalues(d): \n    return iter(getattr(d, _itervalues)())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setExtendedPoint(lineSegmentEnd, pointOriginal, x): \n    if ((x > min(lineSegmentEnd.point.real, pointOriginal.real)) and (x < max(lineSegmentEnd.point.real, pointOriginal.real))): \n      lineSegmentEnd.point = complex(x, pointOriginal.imag)",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def available(name): \n    return (name in get_all())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def summary_option(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def missing(name): \n    return (not available(name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_lua(filename, **kwargs): \n    with open(filename, 'rb') as f: \n      reader = T7Reader(f, **kwargs) \n      return reader.read()",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unbind_floating_ip(floating_ip, device): \n    _execute('ip', 'addr', 'del', (str(floating_ip) + '/32'), 'dev', device, run_as_root=True, check_exit_code=[0, 2, 254])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_group_delete(context, group_uuid): \n    return IMPL.instance_group_delete(context, group_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_about_info(vim): \n    return vim.service_content.about",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def case_flag(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def move_to_trash(prefix, f, tempdir=None): \n    return move_path_to_trash((join(prefix, f) if f else prefix))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_install_with_pax_header(script, data): \n    script.pip('install', 'paxpkg.tar.bz2', cwd=data.packages)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _api_retry_all(name, output, kwargs): \n    return report(output, keyword='status', data=retry_all_jobs())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO___class__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def device_array_like(ary, stream=0): \n    return device_array(shape=ary.shape, dtype=ary.dtype, strides=ary.strides, stream=stream)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def minimum(input, labels=None, index=None): \n    return _select(input, labels, index, find_min=True)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ppm(h, f): \n    if ((len(h) >= 3) and (h[0] == 'P') and (h[1] in '36') and (h[2] in '    DCTB \\n\\r')): \n      return 'ppm'",
        "line_count": 2,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def _failing_getaddrinfo(*args): \n    raise socket.gaierror(errno.EIO, 'mock:   lookup   failed')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def endsWith(str, suffix): \n    return (str[(- len(suffix)):] == suffix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ignore_request_headers_rewriter(environ): \n    for h in constants.IGNORED_REQUEST_HEADERS: \n      h = ('HTTP_' + h.replace('-', '_').upper()) \n      try: \n         del environ[h] \n      except KeyError: \n         pass",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def broken_send(*args, **kwargs): \n    raise SMTPException('Failure   mocked   by   lettuce')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FindFilesIn(directory, pattern): \n    return glob.glob(os.path.join(directory, pattern))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return DimensionRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def splitdrive(p): \n    return ('', p)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vfstab(config='/etc/vfstab'): \n    return fstab(config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_get_active_by_window_joined(context, begin, end=None, project_id=None, host=None): \n    return IMPL.instance_get_active_by_window_joined(context, begin, end, project_id, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_discussion_id_map(course, user): \n    return dict(map(get_discussion_id_map_entry, get_accessible_discussion_xblocks(course, user)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def poweroff(name): \n    return stop(name, kill=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lastmodified(d): \n    header('Last-Modified', d.strftime('%a,   %d   %b   %Y   %T   GMT'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def initialize(cli): \n    cli.register('building-command-table.codecommit', inject_commands)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pull_request(owner, repository, number): \n    return gh.pull_request(owner, repository, number)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def softmax_categorical_crossentropy(y_pred, y_true): \n    with tf.name_scope('SoftmaxCrossentropy'): \n      return tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(y_pred, y_true))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNestedVectorTestExample(x=0.0, y=0.0, z=0.0): \n    return NestedVectorTestExample(Vector3(x, y, z))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setgid(gid): \n    os.setgid(parse_gid(gid))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getMaximumByPaths(elementNode): \n    return euclidean.getMaximumByVector3Paths(elementNode.xmlObject.getTransformedPaths())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def acquit(fmri): \n    return _fmadm_action_fmri('acquit', fmri)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trim(s): \n    return (s if (len(s) <= 80) else (s[:77] + '...'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def stop_process(name): \n    run_as_root(('supervisorctl   stop   %(name)s' % locals()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_month_names(width='wide', context='format', locale=LC_TIME): \n    return Locale.parse(locale).months[context][width]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def types_data(): \n    return Types",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def last_access_time(path): \n    return os.stat(path)[stat.ST_ATIME]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(linter): \n    linter.register_checker(EncodingChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def butter2d_hp(size, cutoff, n=3): \n    return (1.0 - butter2d_lp(size, cutoff, n))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _PasswordName(user): \n    return '{0}_pwd'.format(user)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def time(): \n    with settings(hide('running', 'stdout')): \n      return int(run('date   +%s'))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_scalar_for_elemwise(arg): \n    return (np.isscalar(arg) or (not isinstance(getattr(arg, 'shape', None), Iterable)) or isinstance(arg, np.dtype) or (isinstance(arg, np.ndarray) and (arg.ndim == 0)))",
        "line_count": 1,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def isPositive(phrase): \n    return bool(re.search('\\\\b(sure|yes|yeah|go)\\\\b', phrase, re.IGNORECASE))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_win(): \n    with settings(hide('everything'), warn_only=True): \n      return ('\"' in run('echo   \"Will   you   echo   quotation   marks\"'))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO_closefd(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stop_gradient(variables): \n    return theano.gradient.disconnected_grad(variables)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processXMLElement(xmlElement): \n    solid.processXMLElementByGeometry(getGeometryOutput(None, xmlElement), xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_list(value): \n    return list(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ErrorUpdate(msg, error_fh=sys.stderr): \n    PrintUpdate(msg, error_fh)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return MissionEditorModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sm_flavor_update(context, sm_flavor_id, values): \n    return IMPL.sm_flavor_update(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _random_string(): \n    return ''.join((random.choice(string.lowercase) for _ in xrange(12)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def rowset(results): \n    return set([tuple(row) for row in results])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def discardBody(response): \n    return client.readBody(response).addCallback((lambda _: response))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iterload(modname, verbose=False, failfast=False): \n    return filter(None, (get_module(app, modname, verbose, failfast) for app in installed_apps()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_data(i): \n    return [[((-1), 1), (2, 0), (0, 4)], [(0, 1), (None, 2), (3, 2)], [((-3), 3), (1, 3), (1, 1)], [(1, 1), (Decimal('1.'), 1), (1, 1)], [(3, 2), (2, 1), (1.0, 1)]][i]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_sql_initial_data(apps): \n    return style.ERROR((\"This   action   has   been   renamed.   Try   './manage.py   sqlcustom   %s'.\" % '   '.join(((apps and apps) or ['app1', 'app2']))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def tiny_escape(val): \n    return (u'' if (val is None) else escape(val))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def equivalent(u, v, r, s, D, N): \n    return (divisible(((u * r) - ((D * v) * s)), N) and divisible(((u * s) - (v * r)), N))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def load(_file): \n    return loads(_file.read())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_default_credentials(aws_access_key_id, aws_secret_access_key): \n    DEFAULT_CREDENTIALS.update({'aws_access_key_id': aws_access_key_id, 'aws_secret_access_key': aws_secret_access_key})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_term_title_xterm(title): \n    sys.stdout.write(('\\x1b]0;%s\\x07' % title))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def osquery_flags(attrs=None, where=None): \n    return _osquery_cmd(table='osquery_flags', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lane_stats(estate=None): \n    return get_stats(estate=estate, stack='lane')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_get_all(context, filters=None, marker=None, limit=None, sort_keys=None, sort_dirs=None, offset=None): \n    return IMPL.snapshot_get_all(context, filters, marker, limit, sort_keys, sort_dirs, offset)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def losetup_detach(device_file): \n    check_output(['losetup', '--detach', device_file.path])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def OptionName(widget): \n    return widget.tk.call('tixOptionName', widget._w)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ypbpr2rgb(ypbpr): \n    return _convert(rgb_from_ypbpr, ypbpr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def r2_op(predictions, targets): \n    with tf.name_scope('StandardError'): \n      a = tf.reduce_sum(tf.square(predictions)) \n      b = tf.reduce_sum(tf.square(targets)) \n      return tf.div(a, b)",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_cookies(filename): \n    browser.load_cookies(filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def host_memory_extents(obj): \n    return mviewbuf.memoryview_get_extents(obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_rz(): \n    raise TypeError('err')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vendor(proxy): \n    if proxy: \n      return {'vendor': _get_grain(proxy, 'vendor')}",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_models(): \n    return MODELS",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, *args, **kwargs): \n    return ARC4Cipher(key, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _NewFacetsFromPb(facet_list): \n    return [_NewFacetFromPb(f) for f in facet_list]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def attach_server(host, port, cert=None, key=None, chain=None): \n    if (sabnzbd.cfg.ipv6_hosting() or ('::1' not in host)): \n      http_server = cherrypy._cpserver.Server() \n      http_server.bind_addr = (host, port) \n      if (cert and key): \n         http_server.ssl_provider = 'builtin' \n         http_server.ssl_certificate = cert \n         http_server.ssl_private_key = key \n         http_server.ssl_certificate_chain = chain \n      http_server.subscribe()",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def require_context(ctxt): \n    if ((not ctxt.is_admin) and (not is_user_context(ctxt))): \n      raise exception.Forbidden()",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def commit_item(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isrecursive(object): \n    return _safe_repr(object, {}, None, 0)[2]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bench_R6(): \n    s = sum((simplify((((x + sin(i)) / x) + ((x - sin(i)) / x))) for i in range(100)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def urlsafe_base64_encode(s): \n    return base64.urlsafe_b64encode(s).rstrip('\\n=')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def warning(code_or_name): \n    return _warning(code_or_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def levels_to_cpm(): \n    return LevelToCPm",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_headers(environ): \n    for (cgi_var, value) in environ.iteritems(): \n      if (cgi_var in _parse_headers_special): \n         (yield (_parse_headers_special[cgi_var], value)) \n      elif cgi_var.startswith('HTTP_'): \n         (yield (cgi_var[5:].title().replace('_', '-'), value))",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def is_running_on_ci(): \n    return (os.environ.get('CIRCLECI', 'false') == 'true')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def if_no_repeat(event): \n    return (not event.is_repeat)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def linkcheck(): \n    os.system('sphinx-build   -b   linkcheck   -d   build/doctrees   .   build/linkcheck')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_elapsed_time(start_event, end_event): \n    return runtime.eventElapsedTime(start_event.ptr, end_event.ptr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_override_var(s): \n    return (parsedotval(item) for item in s.split(u';') if item)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _node_relationships(workflow, parent, child_el): \n    for el in child_el: \n      if (not isinstance(el.tag, basestring)): \n         continue \n      name = etree.QName(el).localname \n      if (name in LINKS): \n         if (name == 'path'): \n            if ('start' not in el.attrib): \n               raise RuntimeError((_(\"Node   %s   has   a   link   that   is   missing   'start'   attribute.\") % parent.name)) \n            to = el.attrib['start'] \n            name = 'start' \n         else: \n            if ('to' not in el.attrib): \n               raise RuntimeError((_(\"Node   %s   has   a   link   that   is   missing   'to'   attribute.\") % parent.name)) \n            to = el.attrib['to'] \n         try: \n            child = Node.objects.get(workflow=workflow, name=to) \n         except Node.DoesNotExist as e: \n            if (name == 'error'): \n               (child, create) = Kill.objects.get_or_create(name='kill', workflow=workflow, node_type=Kill.node_type) \n            else: \n               raise RuntimeError((_('Node   %s   has   not   been   defined') % to)) \n         obj = Link.objects.create(name=name, parent=parent, child=child) \n         obj.save()",
        "line_count": 23,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def find_if(predicate, seq): \n    for x in seq: \n      if predicate(x): \n         return x",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def to_lines(stdout): \n    for item in stdout: \n      if isinstance(item, basestring): \n         item = str(item).split('\\n') \n      (yield item)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def strip_entities(text): \n    return XML_ENTITY_MATCH.sub(u'', text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_get_by_network_host(context, network_uuid, host): \n    return IMPL.fixed_ip_get_by_network_host(context, network_uuid, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_heads_file_path(config): \n    return os.path.join(_get_root_versions_dir(config), HEADS_FILENAME)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_url_key(server_url): \n    return (ASSOCIATIONS_KEY_PREFIX + server_url)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_user_access(uid, channel=14, callback=True, link_auth=True, ipmi_msg=True, privilege_level='administrator', **kwargs): \n    with _IpmiCommand(**kwargs) as s: \n      return s.set_user_access(uid, channel, callback, link_auth, ipmi_msg, privilege_level)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log(x): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nova_except_format(logical_line): \n    if logical_line.startswith('except:'): \n      (yield (6, \"N201:   no   'except:'   at   least   use   'except   Exception:'\"))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def datetime_from_rfc822(datetime_str): \n    return datetime.fromtimestamp(mktime_tz(parsedate_tz(datetime_str)), pytz.utc)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_record(level, created, message, source_location=None): \n    logs_buffer().write_record(level, created, message, source_location)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def time_validator(optdict, name, value): \n    return optik_ext.check_time(None, name, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_response(action, response): \n    return {('%sResponse' % action): {('%sResult' % action): response}}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_sub_elements_from_dict(parent, sub_dict): \n    for (key, value) in sub_dict.items(): \n      if isinstance(value, list): \n         for repeated_element in value: \n            sub_element = ET.SubElement(parent, key) \n            _add_element_attrs(sub_element, repeated_element.get('attrs', {})) \n            children = repeated_element.get('children', None) \n            if isinstance(children, dict): \n               _add_sub_elements_from_dict(sub_element, children) \n            elif isinstance(children, str): \n               sub_element.text = children \n      else: \n         sub_element = ET.SubElement(parent, key) \n         _add_element_attrs(sub_element, value.get('attrs', {})) \n         children = value.get('children', None) \n         if isinstance(children, dict): \n            _add_sub_elements_from_dict(sub_element, children) \n         elif isinstance(children, str): \n            sub_element.text = children",
        "line_count": 18,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def zpk2ss(z, p, k): \n    return tf2ss(*zpk2tf(z, p, k))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ogrinspect(*args, **kwargs): \n    return '\\n'.join((s for s in _ogrinspect(*args, **kwargs)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _retry_on_unavailable(exc): \n    return (exc_to_code(exc) == StatusCode.UNAVAILABLE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def postBuild(site): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_fix_types(): \n    for (fname, change) in ((hp_fif_fname, True), (test_fif_fname, False), (ctf_fname, False)): \n      raw = read_raw_fif(fname) \n      mag_picks = pick_types(raw.info, meg='mag') \n      other_picks = np.setdiff1d(np.arange(len(raw.ch_names)), mag_picks) \n      if change: \n         for ii in mag_picks: \n            raw.info['chs'][ii]['coil_type'] = FIFF.FIFFV_COIL_VV_MAG_T2 \n      orig_types = np.array([ch['coil_type'] for ch in raw.info['chs']]) \n      raw.fix_mag_coil_types() \n      new_types = np.array([ch['coil_type'] for ch in raw.info['chs']]) \n      if (not change): \n         assert_array_equal(orig_types, new_types) \n      else: \n         assert_array_equal(orig_types[other_picks], new_types[other_picks]) \n         assert_true((orig_types[mag_picks] != new_types[mag_picks]).all()) \n         assert_true((new_types[mag_picks] == FIFF.FIFFV_COIL_VV_MAG_T3).all())",
        "line_count": 16,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def get_environ(environ): \n    for key in ('REMOTE_ADDR', 'SERVER_NAME', 'SERVER_PORT'): \n      if (key in environ): \n         (yield (key, environ[key]))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getNewRepository(): \n    return WidenRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_default_extension(): \n    return rawData.Visualization",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normcase(p): \n    return string.lower(p)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chain_files(paths): \n    for path in paths: \n      with open(path, 'r') as f: \n         for line in f: \n            (yield line)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def cost_of_flow(G, flowDict, weight='weight'): \n    return sum(((flowDict[u][v] * d.get(weight, 0)) for (u, v, d) in G.edges(data=True)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _NamesNotIn(names, mapping): \n    return [name for name in names if (name not in mapping)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def stop(name): \n    return (_get_domain(name).destroy() == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def standalone_html_page_for_models(models, resources, title): \n    return file_html(models, resources, title)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixup_building_sdist(): \n    if ('sdist' in sys.argv): \n      if ('--install-js' in sys.argv): \n         print(\"Removing   '--install-js'   incompatible   with   'sdist'\") \n         sys.argv.remove('--install-js') \n      if ('--build-js' not in sys.argv): \n         print(\"Adding   '--build-js'   required   for   'sdist'\") \n         sys.argv.append('--build-js')",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def find_clickable_id_with_wait(context, id_str, **kwargs): \n    return _find_clickable_elem_with_wait(context, (By.ID, id_str), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_ByteStringProperty(model, prop, kwargs): \n    return get_TextField(kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return __virtualname__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def release_lock(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def simple_class_factory(model, attrs): \n    return model",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enclosing_scope(scope): \n    return scope.rpartition(u'.')[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def discard_all_messages(): \n    _formvalue_by_regexp_setall('1', '^\\\\d+$', '3')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_get_init_3(): \n    with make_tempfile(join(TMP_TEST_DIR, '__init__.pyc')): \n      nt.assert_is_none(mp.get_init(TMP_TEST_DIR))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def times_two(a): \n    return (a * 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rheber(): \n    shazeline(random.choice([name for (name, value) in globals().items() if (type(value) is type(rheber))]))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _strcoll(a, b): \n    return ((a > b) - (a < b))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delif(br=None, iface=None): \n    return _os_dispatch('delif', br, iface)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _to_hass_brightness(brightness): \n    return int((brightness * 255))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RotR_64(x, N): \n    return (np.right_shift(x, (N & 63), dtype=np.uint64) | np.left_shift(x, ((64 - N) & 63), dtype=np.uint64))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GitHub_check_authentication(urls, username, password, token): \n    query_GitHub(urls.api_url, username, password, token)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def frontend_rewriter_middleware(application): \n    return functools.partial(_rewriter_middleware, _REQUEST_REWRITER_CHAIN, _FRONTEND_RESPONSE_REWRITER_CHAIN, application)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MakeServerErrorResponse(): \n    return '{\"status\":   21005}'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def all_properties(decl): \n    for item in decl.seq: \n      p = item.value \n      if isinstance(p, Property): \n         (yield p)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def dont_record(): \n    recorder_proxy.clear_for_current_request()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def message_if_missing(filename): \n    return _CLIENT_SECRETS_MESSAGE.format(file_path=filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_purchase_endpoint(): \n    return PROCESSOR_MODULE.get_purchase_endpoint()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tag(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_ipv6_filter(ip, options=None): \n    return _is_ipv(ip, 6, options=options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def purge(name=None, pkgs=None, **kwargs): \n    return remove(name=name, pkgs=pkgs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def task(*args, **kwargs): \n    return current_app.task(*args, **dict({u'base': Task}, **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def contrastive(x0, x1, y, margin=1): \n    return Contrastive(margin)(x0, x1, y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _user_can_manage_leaders(user, group_profile): \n    return user.has_perm('groups.change_groupprofile')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _track_successful_certificate_generation(user_id, course_id): \n    if settings.LMS_SEGMENT_KEY: \n      event_name = 'edx.bi.user.certificate.generate' \n      tracking_context = tracker.get_tracker().resolve_context() \n      analytics.track(user_id, event_name, {'category': 'certificates', 'label': unicode(course_id)}, context={'ip': tracking_context.get('ip'), 'Google   Analytics': {'clientId': tracking_context.get('client_id')}})",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fltcols(vals): \n    return np.atleast_2d(np.array(vals, dtype=float))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def destroy(ctid_or_name): \n    return _vzctl('destroy', ctid_or_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_sw_name(): \n    return get_sw_version().split('-')[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_article(text=u''): \n    return re.sub(u'(?i)^(?:(?:A(?!\\\\s+to)n?)|The)\\\\s(\\\\w)', u'\\\\1', text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def regions(): \n    return get_regions('cloudformation', connection_cls=CloudFormationConnection)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def each_cy_in_bento(bento_file='bento.info'): \n    with open(bento_file) as f: \n      for line in f: \n         line = line.strip() \n         if line.startswith('Extension:'): \n            path = line.lstrip('Extension:').strip() \n            (yield path)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def enable(name, **kwargs): \n    return _switch(name, True, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def java_test_config(append=None, **kwargs): \n    blade_config.update_config('java_test_config', append, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_history_items(): \n    return [readline.get_history_item(i) for i in xrange(1, (readline.get_current_history_length() + 1))]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _in_memory_up_to_date(cache_length): \n    return (_module_values[u'certs'] and _module_values[u'last_update'] and (_module_values[u'last_update'] > (time.time() - ((cache_length * 60) * 60))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def prop_has_value(name, prop, value, extra_args=None, cibname=None): \n    return _item_present(name=name, item='property', item_id='{0}={1}'.format(prop, value), item_type=None, create='set', extra_args=extra_args, cibname=cibname)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cluster_update(context, id, values): \n    return IMPL.cluster_update(context, id, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_tag_delete(context, instance_uuid, tag): \n    return IMPL.instance_tag_delete(context, instance_uuid, tag)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_copy(iter1, iter2, **eql_kwargs): \n    for (elem1, elem2) in zip(iter1, iter2): \n      assert_almost_equal(elem1, elem2, **eql_kwargs) \n      assert (elem1 is not elem2), ('Expected   object   %r   and   object   %r   to   be   different   objects,   were   same.' % (type(elem1), type(elem2)))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def enable(name, **kwargs): \n    return _rcconf_status(name, 'YES')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_config_db_value(key): \n    return settings.settings.get_value('AUTOTEST_WEB', key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def allocate_lock(): \n    return LockType()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def number_of_isolates(G): \n    return sum((1 for v in isolates(G)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def certs(): \n    return __salt__['file.readdir'](LE_LIVE)[2:]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def map_indices_py(arr): \n    return dict([(x, i) for (i, x) in enumerate(arr)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_keyname(): \n    return get_db_info()[':keyname']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_list(load): \n    return _file_lists(load, 'files')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_nothing(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_mixed_stores(mixed_setting): \n    return mixed_setting['default']['OPTIONS']['stores']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def builtin_format_id(fmt): \n    return BUILTIN_FORMATS_REVERSE.get(fmt)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gradients(loss, variables): \n    return tf.gradients(loss, variables, colocate_gradients_with_ops=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def only_skips(tests_run, reasons): \n    return has_results(tests_run=Equals(tests_run), skipped=AfterPreprocessing((lambda xs: list((unicode(x[1]) for x in xs))), Equals(reasons)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def queues(opts): \n    return LazyLoader(_module_dirs(opts, 'queues', 'queue', ext_type_dirs='queue_dirs'), opts, tag='queues')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def translate(s, table, deletions=''): \n    return s.translate(table, deletions)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def args_split(text): \n    for bit in args_split_re.finditer(text): \n      bit = bit.group(0) \n      if ((bit[0] == u'\"') and (bit[(-1)] == u'\"')): \n         (yield ((u'\"' + bit[1:(-1)].replace(u'\\\\\"', u'\"').replace(u'\\\\\\\\', u'\\\\')) + u'\"')) \n      elif ((bit[0] == u\"'\") and (bit[(-1)] == u\"'\")): \n         (yield ((u\"'\" + bit[1:(-1)].replace(u\"\\\\'\", u\"'\").replace(u'\\\\\\\\', u'\\\\')) + u\"'\")) \n      else: \n         (yield bit)",
        "line_count": 8,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def rush(value=True): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_default_proxy(): \n    return socksocket.default_proxy",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _safe_regex_mysql(raw_string): \n    return raw_string.replace('|', '\\\\|')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def download_and_unzip_files(source_url, target_parent_dir, zip_root_name, target_root_name): \n    if (not os.path.exists(os.path.join(target_parent_dir, target_root_name))): \n      print ('Downloading   and   unzipping   file   %s   to   %s' % (zip_root_name, target_parent_dir)) \n      common.ensure_directory_exists(target_parent_dir) \n      urllib.urlretrieve(source_url, TMP_UNZIP_PATH) \n      try: \n         with zipfile.ZipFile(TMP_UNZIP_PATH, 'r') as zfile: \n            zfile.extractall(target_parent_dir) \n         os.remove(TMP_UNZIP_PATH) \n      except Exception: \n         if os.path.exists(TMP_UNZIP_PATH): \n            os.remove(TMP_UNZIP_PATH) \n         req = urllib2.Request(source_url) \n         req.add_header('User-agent', 'python') \n         file_stream = StringIO.StringIO(urllib2.urlopen(req).read()) \n         with zipfile.ZipFile(file_stream, 'r') as zfile: \n            zfile.extractall(target_parent_dir) \n      os.rename(os.path.join(target_parent_dir, zip_root_name), os.path.join(target_parent_dir, target_root_name))",
        "line_count": 17,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def sync_proxymodules(saltenv='base'): \n    return salt.utils.extmods.sync(__opts__, 'proxy', saltenv=saltenv)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setSVGCarvingCorners(rotatedLoopLayers, svgCarving): \n    for rotatedBoundaryLayer in rotatedLoopLayers: \n      for loop in rotatedBoundaryLayer.loops: \n         for point in loop: \n            pointVector3 = Vector3(point.real, point.imag, rotatedBoundaryLayer.z) \n            svgCarving.cornerMaximum = euclidean.getPointMaximum(svgCarving.cornerMaximum, pointVector3) \n            svgCarving.cornerMinimum = euclidean.getPointMinimum(svgCarving.cornerMinimum, pointVector3)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def nat_gateway_exists(nat_gateway_id=None, subnet_id=None, subnet_name=None, vpc_id=None, vpc_name=None, states=('pending', 'available'), region=None, key=None, keyid=None, profile=None): \n    return bool(_find_nat_gateways(nat_gateway_id=nat_gateway_id, subnet_id=subnet_id, subnet_name=subnet_name, vpc_id=vpc_id, vpc_name=vpc_name, states=states, region=region, key=key, keyid=keyid, profile=profile))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def initialize(uri, trace_level=0, trace_file=sys.stdout, trace_stack_limit=None): \n    return LDAPObject(uri, trace_level, trace_file, trace_stack_limit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ShiftedGompertz(name, b, eta): \n    return rv(name, ShiftedGompertzDistribution, (b, eta))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def directional_variance(X, w): \n    return sum((directional_variance_i(x_i, w) for x_i in X))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def nvlist2(thelist, names=None): \n    for (_, _, value) in nvlist(thelist, names): \n      for each in nvlist(value): \n         (yield each)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getVersionFileName(): \n    return os.path.join(os.path.dirname(os.path.abspath(__file__)), 'version.txt')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_legen(x, n_coeff=100): \n    return legendre.legvander(x, (n_coeff - 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backends(request): \n    return {'backends': LazyDict((lambda : user_backends_data(request.user, BACKENDS, Storage)))}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _unicode_output(cursor, name, default_type, size, precision, scale): \n    if (default_type in (cx_Oracle.STRING, cx_Oracle.LONG_STRING, cx_Oracle.FIXED_CHAR, cx_Oracle.CLOB)): \n      return cursor.var(six.text_type, size, cursor.arraysize)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ce(actual, predicted): \n    return (sum([1.0 for (x, y) in zip(actual, predicted) if (x != y)]) / len(actual))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getNewRepository(): \n    return BottomRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_user_name(uid, return_none_on_error=True, **kwargs): \n    with _IpmiCommand(**kwargs) as s: \n      return s.get_user_name(uid, return_none_on_error=True)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def count(): \n    return partial(_force, sequence=_advance((lambda x: x)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upretty(expr, order=None): \n    return xpretty(expr, order=order, use_unicode=True, wrap_line=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_default_settings(): \n    for name in dir(default_settings): \n      if name.isupper(): \n         (yield (name, getattr(default_settings, name)))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def make_binary_operator_eval(oper, f, g): \n    return (lambda inputs, params: tuple((oper(x, y) for (x, y) in zip(f(inputs, params), g(inputs, params)))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def col(loc, strg): \n    return ((((loc < len(strg)) and (strg[loc] == '\\n')) and 1) or (loc - strg.rfind('\\n', 0, loc)))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def accumulate_values_into_parents(accounts, accounts_by_name, period_list, accumulated_values): \n    for d in reversed(accounts): \n      if d.parent_account: \n         for period in period_list: \n            accounts_by_name[d.parent_account][period.key] = (accounts_by_name[d.parent_account].get(period.key, 0.0) + d.get(period.key, 0.0)) \n         accounts_by_name[d.parent_account][u'opening_balance'] = (accounts_by_name[d.parent_account].get(u'opening_balance', 0.0) + d.get(u'opening_balance', 0.0))",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def to_utc(datetime): \n    return get_i18n().to_utc(datetime)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return UnpauseRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_gentoo(): \n    return os.path.exists('/etc/gentoo-release')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_params(module): \n    if ((module.params.get('name') is None) and (module.params.get('id') is None)): \n      module.fail_json(msg='\"name\"   or   \"id\"   is   required')",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getLazyLogger(name='unknown', version='unknown'): \n    return LazyAdapter(name, version)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _safe_isinstance(obj, module, class_name): \n    return ((module in sys.modules) and isinstance(obj, getattr(import_module(module), class_name)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def and_(a, b): \n    return (a & b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_set(obj, encoder): \n    return set(obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def paypaltime2datetime(s): \n    return datetime.datetime(*time.strptime(s, PayPalNVP.TIMESTAMP_FORMAT)[:6])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_frame(d, frame_str): \n    if (d['coord_frame'] != _str_to_frame[frame_str]): \n      raise RuntimeError(('dig   point   must   be   in   %s   coordinate   frame,   got   %s' % (frame_str, _frame_to_str[d['coord_frame']])))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def f(x): \n    return ((x * x) + 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_datacenter_id(location): \n    return avail_locations()[location]['DATACENTERID']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def str_to_bool(str): \n    return (False if (str is None) else (str.lower() == 'true'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def header_length(bytearray): \n    return sum((len(_QUOPRI_HEADER_MAP[octet]) for octet in bytearray))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def eigvals(a, b=None, overwrite_a=False, check_finite=True, homogeneous_eigvals=False): \n    return eig(a, b=b, left=0, right=0, overwrite_a=overwrite_a, check_finite=check_finite, homogeneous_eigvals=homogeneous_eigvals)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trimboth(data, proportiontocut=0.2, inclusive=(True, True), axis=None): \n    return trimr(data, limits=(proportiontocut, proportiontocut), inclusive=inclusive, axis=axis)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mate(exe=u'mate'): \n    install_editor((exe + u'   -w   -l   {line}   {filename}'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rgb2hex(c): \n    return to_hex(c)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def for_CF_orders(name='order'): \n    return for_orders(['C', 'F'], name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _snapshot_metadata_update(context, snapshot_id, metadata, delete): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _copy_volume(*args, **kwargs): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def smbios_tables(attrs=None, where=None): \n    return _osquery_cmd(table='smbios_tables', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shared_floatx_zeros(shape, **kwargs): \n    return shared_floatx(numpy.zeros(shape), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def natsort(string): \n    return [(int(s) if s.isdigit() else s) for s in re.split('(\\\\d+)', string)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def fit_model(k, features, labels): \n    return (k, features.copy(), labels.copy())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_hwclock(clock): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def autolevel(image, selem, out=None, mask=None, shift_x=False, shift_y=False): \n    return _apply_scalar_per_pixel(generic_cy._autolevel, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO___doc__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def open(path): \n    return Picture(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set(key, value): \n    if ((key == 'DXImageTransform.Microsoft') and (value == True)): \n      import cssproductions \n      import tokenize2 \n      tokenize2._TOKENIZER_CACHE.clear() \n      cssproductions.PRODUCTIONS.insert(1, cssproductions._DXImageTransform)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def CreateTransactionOptions(**kwds): \n    return datastore_rpc.TransactionOptions(**kwds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apns_send_message(registration_id, alert, **kwargs): \n    return _apns_send(registration_id, alert, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def config_items(**kwargs): \n    return kwargs",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_py_test(): \n    nose.main(addplugins=[NoseSQLAlchemy()], argv=['runner'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def display_name_with_default(block): \n    return (block.display_name if (block.display_name is not None) else url_name_for_block(block).replace('_', '   '))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def iter_child_nodes(node, omit=None, _fields_order=_FieldsOrder()): \n    for name in _fields_order[node.__class__]: \n      if (name == omit): \n         continue \n      field = getattr(node, name, None) \n      if isinstance(field, ast.AST): \n         (yield field) \n      elif isinstance(field, list): \n         for item in field: \n            (yield item)",
        "line_count": 9,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def remove_copying_files(): \n    for filename in ['COPYING']: \n      os.remove(os.path.join(PROJECT_DIRECTORY, filename))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cron_task_host(): \n    while True: \n      if (not enable_cron_tasks): \n         if (threading.current_thread() != threading.main_thread()): \n            exit() \n         else: \n            return \n      sleep(60) \n      try: \n         task_scheduler.run() \n      except: \n         errprint('ErrorDuringExecutingCronTasks') \n         traceback.print_exc()",
        "line_count": 12,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def perform_commit(request, obj): \n    return execute_locked(request, obj, _('All   pending   translations   were   committed.'), obj.commit_pending, request)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ring(): \n    return _nodetool('ring')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_events(): \n    return read_events(event_fname)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_64bit(): \n    return (sizeof(c_ulong) != sizeof(c_void_p))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_capitalize(s): \n    return soft_unicode(s).capitalize()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_type(value, types, description, application_name): \n    if (not isinstance(value, types)): \n      raise ConfigurationError(u\"Application   '{application_name}'   has   a   config   error.   {description};   got   type   '{type}'.\".format(application_name=application_name, description=description, type=type(value).__name__))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def s3_plugin_initialize(event_handlers): \n    awscli_initialize(event_handlers)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quote_unescape(value, lf='&mjf-lf;', quot='&mjf-quot;'): \n    return value.replace(lf, '\\n').replace(quot, '\"')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def patch(url, data=None, **kwargs): \n    return request('patch', url, data=data, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_new_collection_id(): \n    return collection_models.CollectionModel.get_new_id('')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def detect_avro(contents): \n    return (contents[:3] == 'Obj')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ShutdownDB(): \n    if hasattr(DBClient, '_instance'): \n      DBClient.Instance().Shutdown()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sum_of_squares(v): \n    return sum(((v_i ** 2) for v_i in v))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cost(w): \n    return (0.5 * sum((((y - h(w, np.array(x))) ** 2) for (x, y) in zip(INPUTS, OUTPUTS))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_tuple(value, min=None, max=None): \n    return tuple(is_list(value, min, max))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _read_int64(f): \n    return np.int64(struct.unpack('>q', f.read(8))[0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_trim(value): \n    return soft_unicode(value).strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def go_data(ofile): \n    return itertools.dropwhile((lambda x: (not r_datameta.match(x))), ofile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dictConfig(config): \n    dictConfigClass(config).configure()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetSubmoduleName(fullname): \n    return fullname.rsplit('.', 1)[(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def b64encode(value, *args, **kwargs): \n    return base64.b64encode(encode(value, *args, **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def returner(ret): \n    return _send_splunk(ret)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_non_outlier_interval(d1, d2): \n    return graph_objs.Scatter(x=[0, 0], y=[d1, d2], name='', mode='lines', line=graph_objs.Line(width=1.5, color='rgb(0,0,0)'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_gentoo_mirrors(): \n    return get_var('GENTOO_MIRRORS')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _dummy_process(text, *args, **kwargs): \n    return text",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def slugify(s): \n    return import_dotted_path(settings.SLUGIFY)(s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _clear_context(): \n    for var in [x for x in __context__ if x.startswith('nspawn.')]: \n      log.trace(\"Clearing   __context__['{0}']\".format(var)) \n      __context__.pop(var, None)",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def CAN_ASSIGN_OWNER(article, user): \n    return _is_staff_for_article(article, user)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def retry(func, max_attempts): \n    return _call_with_retry(max_attempts)(func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_scale(scale): \n    if (np.isscalar(scale) and (scale <= 0)): \n      raise ValueError(('scale   must   be   positive,   not   %s' % scale))",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def conv(lh_op, rh_op, size): \n    return lo.LinOp(lo.CONV, size, [rh_op], lh_op)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def utctotimestamp(dt): \n    return total_seconds((dt - epoch))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_decimal(number, format=None): \n    return get_i18n().format_decimal(number, format)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _union_items(baselist, comparelist): \n    return list((set(baselist) | set(comparelist)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_move_descriptions(): \n    for m in Move.objects.all(): \n      f_moves = open('data/moves.csv', 'rb') \n      f_descrips = open('data/move_effects.csv', 'rb') \n      for row in csv.reader(f_moves, delimiter=','): \n         if (str(row[1]) == m.name): \n            for drow in csv.reader(f_descrips, delimiter=','): \n               if (str(row[10]) == str(drow[0])): \n                  s = str(drow[3]).replace('$effect_chance', str(row[11])) \n                  s = s.replace('[', '') \n                  s = s.replace(']', '') \n                  m.description = s \n                  m.save() \n                  print ('added   description   to   %s' % m.name)",
        "line_count": 13,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def intr(n): \n    return int(round(n))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key): \n    return PKCS115_SigScheme(key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unquote_slashes(text): \n    return re.sub('(;;|;_)', _unquote_slashes, text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def truncate_file(filename): \n    open(filename, 'w').close()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def characters(probabilities): \n    return [id2bi(c) for c in np.argmax(probabilities, 1)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_ast_good_import_from(): \n    can_compile(u'(import   [x   [y]])')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _params(url): \n    return parse_qs(urlparse(url).query)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_in(value, seq): \n    return (value in seq)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _collapse_whitespace(text): \n    return re.sub('\\\\s+', '   ', text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reindent(src, indent): \n    return src.replace('\\n', ('\\n' + ('   ' * indent)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_manifest(package): \n    return parse_file(manifest_file(package))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_all(request): \n    return HttpResponse(request.read())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index_alt(): \n    s3_redirect_default(URL(f='demographic_data', args='summary'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def route_url(route_name, request, *elements, **kw): \n    return request.route_url(route_name, *elements, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def osquery_extensions(attrs=None, where=None): \n    return _osquery_cmd(table='osquery_extensions', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def httranslate(text): \n    return Markup(_(text))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ones(shape, dtype=float): \n    return full(shape, 1, dtype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return CraftRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def labeller(n, symbol='q'): \n    return [('%s_%d' % (symbol, ((n - i) - 1))) for i in range(n)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def should_be_embargoed(embargo): \n    return ((timezone.now() - embargo.initiation_date) >= settings.EMBARGO_PENDING_TIME)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FromPropertyTypeName(type_name): \n    return _PROPERTY_TYPE_STRINGS[type_name]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nova_except_format_assert(logical_line): \n    if logical_line.startswith('self.assertRaises(Exception'): \n      (yield (1, 'N202:   assertRaises   Exception   too   broad'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def summary(job): \n    return flask.render_template('datasets/images/classification/summary.html', dataset=job)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find(s, *args): \n    return _apply(s.find, args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def login_protected_redirect_view(request): \n    return HttpResponseRedirect('/test_client_regress/get_view/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DEFINE_integer_list(name, default, help): \n    CONFIG.AddOption(type_info.List(name=name, default=default, description=help, validator=type_info.Integer()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def error_rate(predictions, labels): \n    return (100.0 - ((100.0 * np.sum((np.argmax(predictions, 1) == labels))) / predictions.shape[0]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def put(url, data=None, **kwargs): \n    return request('put', url, data=data, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def randomKey(b=32): \n    return ''.join((random.choice(((string.ascii_letters + string.digits) + '{}!@#$^&()*&[]|,./?')) for x in range(b)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def platformTrust(): \n    return OpenSSLDefaultPaths()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_course_enrollments(student_id): \n    return _ENROLLMENTS",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read(name, *args): \n    with open(os.path.join(THIS_DIR, name)) as f: \n      return f.read(*args)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PIL_to_npimage(im): \n    return np.array(im)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, msg=None, digestmod=None): \n    return HMAC(key, msg, digestmod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sqlwhere(dictionary, grouping='   AND   '): \n    return SQLQuery.join([((k + '   =   ') + sqlparam(v)) for (k, v) in dictionary.items()], grouping)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cleanup_stubs(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CreateFolder(path, timestamp, token=None): \n    with test_lib.FakeTime(timestamp): \n      with aff4.FACTORY.Create(path, aff4_type=aff4_standard.VFSDirectory, mode='w', token=token) as _: \n         pass",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def simulate_put(app, path, **kwargs): \n    return simulate_request(app, 'PUT', path, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def indent(s, N=4): \n    return s.replace('\\n', ('\\n' + (N * '   ')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pretty(expr, order=None): \n    return xpretty(expr, order=order, use_unicode=False, wrap_line=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ode_linear_coefficients(eq, func, order, match): \n    return ode_1st_homogeneous_coeff_best(eq, func, order, match)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _convert_all_package_confs_to_dir(): \n    for conf_file in SUPPORTED_CONFS: \n      _package_conf_file_to_dir(conf_file)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def check_for_invalid_qos_spec_combination(info, volume_type): \n    if (info['legacy'] and info['spec']): \n      msg = (_('Conflicting   QoS   specifications   in   volume   type   %s:   when   QoS   spec   is   associated   to   volume   type,   legacy   \"netapp:qos_policy_group\"   is   not   allowed   in   the   volume   type   extra   specs.') % volume_type['id']) \n      raise exception.Invalid(msg)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def isprint(c): \n    return (c in (((string.ascii_letters + string.digits) + string.punctuation) + '   '))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def smart_str(s, strings_only=False, errors='strict'): \n    return django.utils.encoding.smart_str(s, get_site_encoding(), strings_only, errors)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decorator_factory(decfac): \n    return partial((lambda df, param: decorator(partial(df, param))), decfac)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_prime(number): \n    return randomized_primality_testing(number, 6)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_snapshot_get_all_by_project(context, project_id, filters=None): \n    return IMPL.group_snapshot_get_all_by_project(context, project_id, filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_key(record, composite_key): \n    return tuple((record.get(key) for key in composite_key))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def partname_to_device(part): \n    return os.path.join(os.sep, 'dev', part)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def refresh_action(parent): \n    return qtutils.add_action(parent, cmds.Refresh.name(), cmds.run(cmds.Refresh), hotkeys.REFRESH)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def partial_max(a): \n    return a.max(axis=(1, 2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete(filename): \n    OggVorbis(filename).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sdm_from_dict(d, O): \n    return sdm_strip(sdm_sort(list(d.items()), O))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_period(array): \n    return (isinstance(array, ABCPeriodIndex) or is_period_arraylike(array))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_script_prefix(): \n    return getattr(_prefixes, 'value', '/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unpack(source): \n    return (jseval(('print   %s;' % source[4:])) if detect(source) else source)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def literal_string(s): \n    return ((u\"'\" + s.replace(u\"'\", u\"''\").replace(u'\\x00', '')) + u\"'\")",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __ipv4_quad(value): \n    return (salt.utils.validate.net.ipv4_addr(value), value, 'dotted   IPv4   address')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def debug(parser, token): \n    return DebugNode()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def experimental(api_name): \n    if (not chainer.disable_experimental_feature_warning): \n      warnings.warn('{}   is   experimental.   The   interface   can   change   in   the   future.'.format(api_name), FutureWarning)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def available_attrs(fn): \n    return tuple((a for a in WRAPPER_ASSIGNMENTS if hasattr(fn, a)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def removePrefixFromDictionary(dictionary, prefix): \n    for key in dictionary.keys(): \n      if key.startswith(prefix): \n         del dictionary[key]",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def id(accessing_obj, accessed_obj, *args, **kwargs): \n    return dbref(accessing_obj, accessed_obj, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def createFillForSurroundings(nestedRings, radius, radiusAround, shouldExtraLoopsBeAdded): \n    for nestedRing in nestedRings: \n      createExtraFillLoops(nestedRing, radius, radiusAround, shouldExtraLoopsBeAdded)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def utf8_recoder(stream, encoding): \n    for line in codecs.getreader(encoding)(stream): \n      (yield line.encode('utf-8'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_require_single_existing_key(): \n    require('version')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_senn_sk_estimator(): \n    check_estimator(SMOTEENN)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def virtual_interface_get_by_address(context, address): \n    return IMPL.virtual_interface_get_by_address(context, address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cache(opts, serial): \n    return LazyLoader(_module_dirs(opts, 'cache', 'cache'), opts, tag='cache', pack={'__opts__': opts, '__context__': {'serial': serial}})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_single_statement(sql): \n    return (len(sqlparse.split(sql)) <= 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_token(token): \n    return ((token == u'') or (re.match(u'[^\\\\r\\\\n\\\\t   ]?([^\\\\r\\\\n\\\\t   ]|   [^\\\\r\\\\n\\\\t   ])*[^\\\\r\\\\n\\\\t   ]?$', token) is not None))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def QuadraticU(name, a, b): \n    return rv(name, QuadraticUDistribution, (a, b))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_thread_analytics_multi(exploration_ids): \n    return feedback_jobs_continuous.FeedbackAnalyticsAggregator.get_thread_analytics_multi(exploration_ids)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index_alt(): \n    s3_redirect_default(URL(f='membership', args=['summary']))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apply_rollback(datastore, name): \n    return _proxy_cmd('apply_rollback', datastore, name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_file(name): \n    return absjoin(thisdir, 'test_files', ('%s' % name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_key(k, trie): \n    return (_retrive_branch(k, trie) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_metadata_delete(context, snapshot_id, key): \n    return IMPL.snapshot_metadata_delete(context, snapshot_id, key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_available(): \n    return (driver.driver.is_available and nvvm.is_available())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def isinteractive(): \n    return matplotlib.is_interactive()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def password_param(registry, xml_parent, data): \n    base_param(registry, xml_parent, data, True, 'hudson.model.PasswordParameterDefinition')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_name(tablename): \n    return tablename[(tablename.find('_') + 1):].replace('_', '   ').capitalize()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_number(value): \n    return isinstance(value, (int, long, float, complex))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_file(filename, path): \n    for (root, _, files) in os.walk(path): \n      if (filename in files): \n         return os.path.abspath(os.path.join(root, filename))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getNewRepository(): \n    return CoilRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _Repr(class_instance, ordered_dictionary): \n    return (u'search.%s(%s)' % (class_instance.__class__.__name__, ',   '.join([('%s=%r' % (key, value)) for (key, value) in ordered_dictionary if ((value is not None) and (value != []))])))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def vec(M): \n    return M.T.ravel()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def recursive_copy(source, dest): \n    for (root, _, files) in os.walk(source): \n      path_from_source = root.replace(source, '').lstrip('/') \n      target_directory = os.path.join(dest, path_from_source) \n      if (not os.path.exists(target_directory)): \n         os.makedirs(target_directory) \n      for name in files: \n         file_path_from_source = os.path.join(source, path_from_source, name) \n         target_path = os.path.join(target_directory, name) \n         shutil.copyfile(file_path_from_source, target_path)",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def group(): \n    return s3db.hrm_group_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _element_in_child_template(root, e): \n    return any((x.typeid.startswith('bind:template') for x in root.path_to(e)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def data(readonly=False): \n    return collections.OrderedDict([('general', sect.KeyValue(('ignore-case', SettingValue(typ.IgnoreCase(), 'smart'), 'Whether   to   find   text   on   a   page   case-insensitively.'), ('startpage', SettingValue(typ.List(typ.String()), 'https://start.duckduckgo.com'), 'The   default   page(s)   to   open   at   the   start,   separated   by   commas.'), ('yank-ignored-url-parameters', SettingValue(typ.List(typ.String()), 'ref,utm_source,utm_medium,utm_campaign,utm_term,utm_content'), 'The   URL   parameters   to   strip   with   :yank   url,   separated   by   commas.'), ('default-open-dispatcher', SettingValue(typ.String(none_ok=True), ''), 'The   default   program   used   to   open   downloads.   Set   to   an   empty   string   to   use   the   default   internal   handler.\\n\\nAny   {}   in   the   string   will   be   expanded   to   the   filename,   else   the   filename   will   be   appended.'), ('default-page', SettingValue(typ.FuzzyUrl(), '${startpage}'), 'The   page   to   open   if   :open   -t/-b/-w   is   used   without   URL.   Use   `about:blank`   for   a   blank   page.'), ('auto-search', SettingValue(typ.AutoSearch(), 'naive'), 'Whether   to   start   a   search   when   something   else   than   a   URL   is   entered.'), ('auto-save-config', SettingValue(typ.Bool(), 'true'), 'Whether   to   save   the   config   automatically   on   quit.'), ('auto-save-interval', SettingValue(typ.Int(minval=0, maxval=MAXVALS['int']), '15000'), 'How   often   (in   milliseconds)   to   auto-save   config/cookies/etc.'), ('editor', SettingValue(typ.ShellCommand(placeholder=True), 'gvim   -f   \"{}\"'), 'The   editor   (and   arguments)   to   use   for   the   `open-editor`   command.\\n\\nThe   arguments   get   split   like   in   a   shell,   so   you   can   use   `\"`   or   `\\'`   to   quote   them.\\n`{}`   gets   replaced   by   the   filename   of   the   file   to   be   edited.'), ('editor-encoding', SettingValue(typ.Encoding(), 'utf-8'), 'Encoding   to   use   for   editor.'), ('private-browsing', SettingValue(typ.Bool(), 'false', backends=[usertypes.Backend.QtWebKit]), 'Do   not   record   visited   pages   in   the   history   or   store   web   page   icons.'), ('developer-extras', SettingValue(typ.Bool(), 'false', backends=[usertypes.Backend.QtWebKit]), \"Enable   extra   tools   for   Web   developers.\\n\\nThis   needs   to   be   enabled   for   `:inspector`   to   work   and   also   adds   an   _Inspect_   entry   to   the   context   menu.   For   QtWebEngine,   see   'qutebrowser   --help'   instead.\"), ('print-element-backgrounds', SettingValue(typ.Bool(), 'true', backends=[usertypes.Backend.QtWebKit]), 'Whether   the   background   color   and   images   are   also   drawn   when   the   page   is   printed.'), ('xss-auditing', SettingValue(typ.Bool(), 'false'), \"Whether   load   requests   should   be   monitored   for   cross-site   scripting   attempts.\\n\\nSuspicious   scripts   will   be   blocked   and   reported   in   the   inspector's   JavaScript   console.   Enabling   this   feature   might   have   an   impact   on   performance.\"), ('site-specific-quirks', SettingValue(typ.Bool(), 'true', backends=[usertypes.Backend.QtWebKit]), 'Enable   workarounds   for   broken   sites.'), ('default-encoding', SettingValue(typ.String(none_ok=True), ''), 'Default   encoding   to   use   for   websites.\\n\\nThe   encoding   must   be   a   string   describing   an   encoding   such   as   _utf-8_,   _iso-8859-1_,   etc.   If   left   empty   a   default   value   will   be   used.'), ('new-instance-open-target', SettingValue(typ.String(valid_values=typ.ValidValues(('tab', 'Open   a   new   tab   in   the   existing   window   and   activate   the   window.'), ('tab-bg', 'Open   a   new   background   tab   in   the   existing   window   and   activate   the   window.'), ('tab-silent', 'Open   a   new   tab   in   the   existing   window   without   activating   the   window.'), ('tab-bg-silent', 'Open   a   new   background   tab   in   the   existing   window   without   activating   the   window.'), ('window', 'Open   in   a   new   window.'))), 'tab'), 'How   to   open   links   in   an   existing   instance   if   a   new   one   is   launched.'), ('new-instance-open-target.window', SettingValue(typ.String(valid_values=typ.ValidValues(('first-opened', 'Open   new   tabs   in   the   first   (oldest)   opened   window.'), ('last-opened', 'Open   new   tabs   in   the   last   (newest)   opened   window.'), ('last-focused', 'Open   new   tabs   in   the   most   recently   focused   window.'), ('last-visible', 'Open   new   tabs   in   the   most   recently   visible   window.'))), 'last-focused'), 'Which   window   to   choose   when   opening   links   as   new   tabs.'), ('log-javascript-console', SettingValue(typ.String(valid_values=typ.ValidValues(('none', \"Don't   log   messages.\"), ('debug', 'Log   messages   with   debug   level.'), ('info', 'Log   messages   with   info   level.'))), 'debug'), 'How   to   log   javascript   console   messages.'), ('save-session', SettingValue(typ.Bool(), 'false'), 'Whether   to   always   save   the   open   pages.'), ('session-default-name', SettingValue(typ.SessionName(none_ok=True), ''), 'The   name   of   the   session   to   save   by   default,   or   empty   for   the   last   loaded   session.'), ('url-incdec-segments', SettingValue(typ.FlagList(valid_values=typ.ValidValues('host', 'path', 'query', 'anchor')), 'path,query'), 'The   URL   segments   where   `:navigate   increment/decrement`   will   search   for   a   number.'), readonly=readonly)), ('ui', sect.KeyValue(('zoom-levels', SettingValue(typ.List(typ.Perc(minval=0)), '25%,33%,50%,67%,75%,90%,100%,110%,125%,150%,175%,200%,250%,300%,400%,500%'), 'The   available   zoom   levels,   separated   by   commas.'), ('default-zoom', SettingValue(typ.Perc(), '100%'), 'The   default   zoom   level.'), ('downloads-position', SettingValue(typ.VerticalPosition(), 'top'), 'Where   to   show   the   downloaded   files.'), ('status-position', SettingValue(typ.VerticalPosition(), 'bottom'), 'The   position   of   the   status   bar.'), ('message-timeout', SettingValue(typ.Int(), '2000'), 'Time   (in   ms)   to   show   messages   in   the   statusbar   for.'), ('message-unfocused', SettingValue(typ.Bool(), 'false'), 'Whether   to   show   messages   in   unfocused   windows.'), ('confirm-quit', SettingValue(typ.ConfirmQuit(), 'never'), 'Whether   to   confirm   quitting   the   application.'), ('zoom-text-only', SettingValue(typ.Bool(), 'false', backends=[usertypes.Backend.QtWebKit]), 'Whether   the   zoom   factor   on   a   frame   applies   only   to   the   text   or   to   all   content.'), ('frame-flattening', SettingValue(typ.Bool(), 'false', backends=[usertypes.Backend.QtWebKit]), 'Whether   to      expand   each   subframe   to   its   contents.\\n\\nThis   will   flatten   all   the   frames   to   become   one   scrollable   page.'), ('user-stylesheet', SettingValue(typ.File(none_ok=True), ''), 'User   stylesheet   to   use   (absolute   filename   or   filename   relative   to   the   config   directory).   Will   expand   environment   variables.'), ('hide-scrollbar', SettingValue(typ.Bool(), 'true'), 'Hide   the   main   scrollbar.'), ('css-media-type', SettingValue(typ.String(none_ok=True), '', backends=[usertypes.Backend.QtWebKit]), 'Set   the   CSS   media   type.'), ('smooth-scrolling', SettingValue(typ.Bool(), 'false'), 'Whether   to   enable   smooth   scrolling   for   webpages.'), ('remove-finished-downloads', SettingValue(typ.Int(minval=(-1)), '-1'), 'Number   of   milliseconds   to   wait   before   removing   finished   downloads.   Will   not   be   removed   if   value   is   -1.'), ('hide-statusbar', SettingValue(typ.Bool(), 'false'), 'Whether   to   hide   the   statusbar   unless   a   message   is   shown.'), ('statusbar-padding', SettingValue(typ.Padding(), '1,1,0,0'), 'Padding   for   statusbar   (top,   bottom,   left,   right).'), ('window-title-format', SettingValue(typ.FormatString(fields=['perc', 'perc_raw', 'title', 'title_sep', 'id', 'scroll_pos', 'host', 'backend']), '{perc}{title}{title_sep}qutebrowser'), \"The   format   to   use   for   the   window   title.   The   following   placeholders   are   defined:\\n\\n*   `{perc}`:   The   percentage   as   a   string   like   `[10%]`.\\n*   `{perc_raw}`:   The   raw   percentage,   e.g.   `10`\\n*   `{title}`:   The   title   of   the   current   web   page\\n*   `{title_sep}`:   The   string   `   -   `   if   a   title   is   set,   empty   otherwise.\\n*   `{id}`:   The   internal   window   ID   of   this   window.\\n*   `{scroll_pos}`:   The   page   scroll   position.\\n*   `{host}`:   The   host   of   the   current   web   page.\\n*   `{backend}`:   Either   'webkit'   or   'webengine'\"), ('modal-js-dialog', SettingValue(typ.Bool(), 'false'), 'Use   standard   JavaScript   modal   dialog   for   alert()   and   confirm()'), ('hide-wayland-decoration', SettingValue(typ.Bool(), 'false'), 'Hide   the   window   decoration   when   using   wayland   (requires   restart)'), ('keyhint-blacklist', SettingValue(typ.List(typ.String(), none_ok=True), ''), \"Keychains   that   shouldn't   be   shown   in   the   keyhint   dialog\\n\\nGlobs   are   supported,   so   ';*'   will   blacklist   all   keychainsstarting   with   ';'.   Use   '*'   to   disable   keyhints\"), ('prompt-radius', SettingValue(typ.Int(minval=0), '8'), 'The   rounding   radius   for   the   edges   of   prompts.'), ('prompt-filebrowser', SettingValue(typ.Bool(), 'true'), 'Show   a   filebrowser   in   upload/download   prompts.'), readonly=readonly)), ('network', sect.KeyValue(('do-not-track', SettingValue(typ.Bool(), 'true'), 'Value   to   send   in   the   `DNT`   header.'), ('accept-language', SettingValue(typ.String(none_ok=True), 'en-US,en'), 'Value   to   send   in   the   `accept-language`   header.'), ('referer-header', SettingValue(typ.String(valid_values=typ.ValidValues(('always', 'Always   send.'), ('never', 'Never   send;   this   is   not   recommended,   as   some   sites   may   break.'), ('same-domain', \"Only   send   for   the   same   domain.   This   will   still   protect   your   privacy,   but   shouldn't   break   any   sites.\"))), 'same-domain', backends=[usertypes.Backend.QtWebKit]), 'Send   the   Referer   header'), ('user-agent', SettingValue(typ.UserAgent(none_ok=True), ''), 'User   agent   to   send.   Empty   to   send   the   default.'), ('proxy', SettingValue(typ.Proxy(), 'system', backends=[usertypes.Backend.QtWebKit]), 'The   proxy   to   use.\\n\\nIn   addition   to   the   listed   values,   you   can   use   a   `socks://...`   or   `http://...`   URL.'), ('proxy-dns-requests', SettingValue(typ.Bool(), 'true', backends=[usertypes.Backend.QtWebKit]), 'Whether   to   send   DNS   requests   over   the   configured   proxy.'), ('ssl-strict', SettingValue(typ.BoolAsk(), 'ask'), 'Whether   to   validate   SSL   handshakes.'), ('dns-prefetch', SettingValue(typ.Bool(), 'true', backends=[usertypes.Backend.QtWebKit]), 'Whether   to   try   to   pre-fetch   DNS   entries   to   speed   up   browsing.'), ('custom-headers', SettingValue(typ.HeaderDict(none_ok=True), ''), 'Set   custom   headers   for   qutebrowser   HTTP   requests.'), ('netrc-file', SettingValue(typ.File(none_ok=True), ''), 'Set   location   of   a   netrc-file   for   HTTP   authentication.   If   empty,   ~/.netrc   is   used.'), readonly=readonly)), ('completion', sect.KeyValue(('show', SettingValue(typ.String(valid_values=typ.ValidValues(('always', 'Whenever   a   completion   is   available.'), ('auto', 'Whenever   a   completion   is   requested.'), ('never', 'Never.'))), 'always'), 'When   to   show   the   autocompletion   window.'), ('download-path-suggestion', SettingValue(typ.String(valid_values=typ.ValidValues(('path', 'Show   only   the   download   path.'), ('filename', 'Show   only   download   filename.'), ('both', 'Show   download   path   and   filename.'))), 'path'), 'What   to   display   in   the   download   filename   input.'), ('timestamp-format', SettingValue(typ.TimestampTemplate(none_ok=True), '%Y-%m-%d'), 'How   to   format   timestamps   (e.g.   for   history)'), ('height', SettingValue(typ.PercOrInt(minperc=0, maxperc=100, minint=1), '50%'), 'The   height   of   the   completion,   in   px   or   as   percentage   of   the   window.'), ('cmd-history-max-items', SettingValue(typ.Int(minval=(-1)), '100'), 'How   many   commands   to   save   in   the   command   history.\\n\\n0:   no   history   /   -1:   unlimited'), ('web-history-max-items', SettingValue(typ.Int(minval=(-1)), '1000'), 'How   many   URLs   to   show   in   the   web   history.\\n\\n0:   no   history   /   -1:   unlimited'), ('quick-complete', SettingValue(typ.Bool(), 'true'), \"Whether   to   move   on   to   the   next   part   when   there's   only   one   possible   completion   left.\"), ('shrink', SettingValue(typ.Bool(), 'false'), 'Whether   to   shrink   the   completion   to   be   smaller   than   the   configured   size   if   there   are   no   scrollbars.'), ('scrollbar-width', SettingValue(typ.Int(minval=0), '12'), 'Width   of   the   scrollbar   in   the   completion   window   (in   px).'), ('scrollbar-padding', SettingValue(typ.Int(minval=0), '2'), 'Padding   of   scrollbar   handle   in   completion   window   (in   px).'), readonly=readonly)), ('input', sect.KeyValue(('timeout', SettingValue(typ.Int(minval=0, maxval=MAXVALS['int']), '500'), 'Timeout   (in   milliseconds)   for   ambiguous   key   bindings.\\n\\nIf   the   current   input   forms   both   a   complete   match   and   a   partial   match,   the   complete   match   will   be   executed   after   this   time.'), ('partial-timeout', SettingValue(typ.Int(minval=0, maxval=MAXVALS['int']), '5000'), 'Timeout   (in   milliseconds)   for   partially   typed   key   bindings.\\n\\nIf   the   current   input   forms   only   partial   matches,   the   keystring   will   be   cleared   after   this   time.'), ('insert-mode-on-plugins', SettingValue(typ.Bool(), 'false'), 'Whether   to   switch   to   insert   mode   when   clicking   flash   and   other   plugins.'), ('auto-leave-insert-mode', SettingValue(typ.Bool(), 'true'), 'Whether   to   leave   insert   mode   if   a   non-editable   element   is   clicked.'), ('auto-insert-mode', SettingValue(typ.Bool(), 'false'), 'Whether   to   automatically   enter   insert   mode   if   an   editable   element   is   focused   after   page   load.'), ('forward-unbound-keys', SettingValue(typ.String(valid_values=typ.ValidValues(('all', 'Forward   all   unbound   keys.'), ('auto', 'Forward   unbound   non-alphanumeric   keys.'), ('none', \"Don't   forward   any   keys.\"))), 'auto'), 'Whether   to   forward   unbound   keys   to   the   webview   in   normal   mode.'), ('spatial-navigation', SettingValue(typ.Bool(), 'false'), 'Enables   or   disables   the   Spatial   Navigation   feature.\\n\\nSpatial   navigation   consists   in   the   ability   to   navigate   between   focusable   elements   in   a   Web   page,   such   as   hyperlinks   and   form   controls,   by   using   Left,   Right,   Up   and   Down   arrow   keys.   For   example,   if   a   user   presses   the   Right   key,   heuristics   determine   whether   there   is   an   element   he   might   be   trying   to   reach   towards   the   right   and   which   element   he   probably   wants.'), ('links-included-in-focus-chain', SettingValue(typ.Bool(), 'true'), 'Whether   hyperlinks   should   be   included   in   the   keyboard   focus   chain.'), ('rocker-gestures', SettingValue(typ.Bool(), 'false'), 'Whether   to   enable   Opera-like   mouse   rocker   gestures.   This   disables   the   context   menu.'), ('mouse-zoom-divider', SettingValue(typ.Int(minval=1), '512'), 'How   much   to   divide   the   mouse   wheel   movements   to   translate   them   into   zoom   increments.'), readonly=readonly)), ('tabs', sect.KeyValue(('background-tabs', SettingValue(typ.Bool(), 'false'), 'Whether   to   open   new   tabs   (middleclick/ctrl+click)   in   background.'), ('select-on-remove', SettingValue(typ.SelectOnRemove(), 'next'), 'Which   tab   to   select   when   the   focused   tab   is   removed.'), ('new-tab-position', SettingValue(typ.NewTabPosition(), 'next'), 'How   new   tabs   are   positioned.'), ('new-tab-position-explicit', SettingValue(typ.NewTabPosition(), 'last'), 'How   new   tabs   opened   explicitly   are   positioned.'), ('last-close', SettingValue(typ.String(valid_values=typ.ValidValues(('ignore', \"Don't   do   anything.\"), ('blank', 'Load   a   blank   page.'), ('startpage', 'Load   the   start   page.'), ('default-page', 'Load   the   default   page.'), ('close', 'Close   the   window.'))), 'ignore'), 'Behavior   when   the   last   tab   is   closed.'), ('show', SettingValue(typ.String(valid_values=typ.ValidValues(('always', 'Always   show   the   tab   bar.'), ('never', 'Always   hide   the   tab   bar.'), ('multiple', 'Hide   the   tab   bar   if   only   one   tab   is   open.'), ('switching', 'Show   the   tab   bar   when   switching   tabs.'))), 'always'), 'When   to   show   the   tab   bar'), ('show-switching-delay', SettingValue(typ.Int(), '800'), \"Time   to   show   the   tab   bar   before   hiding   it   when   tabs->show   is   set   to   'switching'.\"), ('wrap', SettingValue(typ.Bool(), 'true'), 'Whether   to   wrap   when   changing   tabs.'), ('movable', SettingValue(typ.Bool(), 'true'), 'Whether   tabs   should   be   movable.'), ('close-mouse-button', SettingValue(typ.String(valid_values=typ.ValidValues(('right', 'Close   tabs   on   right-click.'), ('middle', 'Close   tabs   on   middle-click.'), ('none', \"Don't   close   tabs   using   the   mouse.\"))), 'middle'), 'On   which   mouse   button   to   close   tabs.'), ('position', SettingValue(typ.Position(), 'top'), 'The   position   of   the   tab   bar.'), ('show-favicons', SettingValue(typ.Bool(), 'true'), 'Whether   to   show   favicons   in   the   tab   bar.'), ('width', SettingValue(typ.PercOrInt(minperc=0, maxperc=100, minint=1), '20%'), \"The   width   of   the   tab   bar   if   it's   vertical,   in   px   or   as   percentage   of   the   window.\"), ('indicator-width', SettingValue(typ.Int(minval=0), '3'), 'Width   of   the   progress   indicator   (0   to   disable).'), ('tabs-are-windows', SettingValue(typ.Bool(), 'false'), 'Whether   to   open   windows   instead   of   tabs.'), ('title-format', SettingValue(typ.FormatString(fields=['perc', 'perc_raw', 'title', 'title_sep', 'index', 'id', 'scroll_pos', 'host'], none_ok=True), '{index}:   {title}'), \"The   format   to   use   for   the   tab   title.   The   following   placeholders   are   defined:\\n\\n*   `{perc}`:   The   percentage   as   a   string   like   `[10%]`.\\n*   `{perc_raw}`:   The   raw   percentage,   e.g.   `10`\\n*   `{title}`:   The   title   of   the   current   web   page\\n*   `{title_sep}`:   The   string   `   -   `   if   a   title   is   set,   empty   otherwise.\\n*   `{index}`:   The   index   of   this   tab.\\n*   `{id}`:   The   internal   tab   ID   of   this   tab.\\n*   `{scroll_pos}`:   The   page   scroll   position.\\n*   `{host}`:   The   host   of   the   current   web   page.\\n*   `{backend}`:   Either   'webkit'   or   'webengine'\"), ('title-alignment', SettingValue(typ.TextAlignment(), 'left'), 'Alignment   of   the   text   inside   of   tabs'), ('mousewheel-tab-switching', SettingValue(typ.Bool(), 'true'), 'Switch   between   tabs   using   the   mouse   wheel.'), ('padding', SettingValue(typ.Padding(), '0,0,5,5'), 'Padding   for   tabs   (top,   bottom,   left,   right).'), ('indicator-padding', SettingValue(typ.Padding(), '2,2,0,4'), 'Padding   for   indicators   (top,   bottom,   left,   right).'), readonly=readonly)), ('storage', sect.KeyValue(('download-directory', SettingValue(typ.Directory(none_ok=True), ''), 'The   directory   to   save   downloads   to.   An   empty   value   selects   a   sensible   os-specific   default.   Will   expand   environment   variables.'), ('prompt-download-directory', SettingValue(typ.Bool(), 'true'), \"Whether   to   prompt   the   user   for   the   download   location.\\nIf   set   to   false,   'download-directory'   will   be   used.\"), ('remember-download-directory', SettingValue(typ.Bool(), 'true'), 'Whether   to   remember   the   last   used   download   directory.'), ('maximum-pages-in-cache', SettingValue(typ.Int(none_ok=True, minval=0, maxval=MAXVALS['int']), '', backends=[usertypes.Backend.QtWebKit]), 'The   maximum   number   of   pages   to   hold   in   the   global   memory   page   cache.\\n\\nThe   Page   Cache   allows   for   a   nicer   user   experience   when   navigating   forth   or   back   to   pages   in   the   forward/back   history,   by   pausing   and   resuming   up   to   _n_   pages.\\n\\nFor   more   information   about   the   feature,   please   refer   to:   http://webkit.org/blog/427/webkit-page-cache-i-the-basics/'), ('object-cache-capacities', SettingValue(typ.List(typ.WebKitBytes(maxsize=MAXVALS['int'], none_ok=True), none_ok=True, length=3), '', backends=[usertypes.Backend.QtWebKit]), 'The   capacities   for   the   global   memory   cache   for   dead   objects   such   as   stylesheets   or   scripts.   Syntax:   cacheMinDeadCapacity,   cacheMaxDead,   totalCapacity.\\n\\nThe   _cacheMinDeadCapacity_   specifies   the   minimum   number   of   bytes   that   dead   objects   should   consume   when   the   cache   is   under   pressure.\\n\\n_cacheMaxDead_   is   the   maximum   number   of   bytes   that   dead   objects   should   consume   when   the   cache   is   *not*   under   pressure.\\n\\n_totalCapacity_   specifies   the   maximum   number   of   bytes   that   the   cache   should   consume   *overall*.'), ('offline-storage-default-quota', SettingValue(typ.WebKitBytes(maxsize=MAXVALS['int64'], none_ok=True), '', backends=[usertypes.Backend.QtWebKit]), 'Default   quota   for   new   offline   storage   databases.'), ('offline-web-application-cache-quota', SettingValue(typ.WebKitBytes(maxsize=MAXVALS['int64'], none_ok=True), '', backends=[usertypes.Backend.QtWebKit]), 'Quota   for   the   offline   web   application   cache.'), ('offline-storage-database', SettingValue(typ.Bool(), 'true', backends=[usertypes.Backend.QtWebKit]), 'Whether   support   for   the   HTML   5   offline   storage   feature   is   enabled.'), ('offline-web-application-storage', SettingValue(typ.Bool(), 'true', backends=[usertypes.Backend.QtWebKit]), 'Whether   support   for   the   HTML   5   web   application   cache   feature   is   enabled.\\n\\nAn   application   cache   acts   like   an   HTTP   cache   in   some   sense.   For   documents   that   use   the   application   cache   via   JavaScript,   the   loader   engine   will   first   ask   the   application   cache   for   the   contents,   before   hitting   the   network.\\n\\nThe   feature   is   described   in   details   at:   http://dev.w3.org/html5/spec/Overview.html#appcache'), ('local-storage', SettingValue(typ.Bool(), 'true'), 'Whether   support   for   the   HTML   5   local   storage   feature   is   enabled.'), ('cache-size', SettingValue(typ.Int(minval=0, maxval=MAXVALS['int64']), '52428800'), 'Size   of   the   HTTP   network   cache.'), readonly=readonly)), ('content', sect.KeyValue(('allow-images', SettingValue(typ.Bool(), 'true'), 'Whether   images   are   automatically   loaded   in   web   pages.'), ('allow-javascript', SettingValue(typ.Bool(), 'true'), 'Enables   or   disables   the   running   of   JavaScript   programs.'), ('allow-plugins', SettingValue(typ.Bool(), 'false'), 'Enables   or   disables   plugins   in   Web   pages.\\n\\nQt   plugins   with   a   mimetype   such   as   \"application/x-qt-plugin\"   are   not   affected   by   this   setting.'), ('webgl', SettingValue(typ.Bool(), 'false'), 'Enables   or   disables   WebGL.   For   QtWebEngine,   Qt/PyQt   >=   5.7   is   required   for   this   setting.'), ('css-regions', SettingValue(typ.Bool(), 'true', backends=[usertypes.Backend.QtWebKit]), 'Enable   or   disable   support   for   CSS   regions.'), ('hyperlink-auditing', SettingValue(typ.Bool(), 'false'), 'Enable   or   disable   hyperlink   auditing   (<a   ping>).'), ('geolocation', SettingValue(typ.BoolAsk(), 'ask'), 'Allow   websites   to   request   geolocations.'), ('notifications', SettingValue(typ.BoolAsk(), 'ask'), 'Allow   websites   to   show   notifications.'), ('media-capture', SettingValue(typ.BoolAsk(), 'ask', backends=[usertypes.Backend.QtWebEngine]), 'Allow   websites   to   record   audio/video.'), ('javascript-can-open-windows-automatically', SettingValue(typ.Bool(), 'false'), 'Whether   JavaScript   programs   can   open   new   windows   without   user   interaction.'), ('javascript-can-close-windows', SettingValue(typ.Bool(), 'false', backends=[usertypes.Backend.QtWebKit]), 'Whether   JavaScript   programs   can   close   windows.'), ('javascript-can-access-clipboard', SettingValue(typ.Bool(), 'false'), 'Whether   JavaScript   programs   can   read   or   write   to   the   clipboard.'), ('ignore-javascript-prompt', SettingValue(typ.Bool(), 'false'), 'Whether   all   javascript   prompts   should   be   ignored.'), ('ignore-javascript-alert', SettingValue(typ.Bool(), 'false'), 'Whether   all   javascript   alerts   should   be   ignored.'), ('local-content-can-access-remote-urls', SettingValue(typ.Bool(), 'false'), 'Whether   locally   loaded   documents   are   allowed   to   access   remote   urls.'), ('local-content-can-access-file-urls', SettingValue(typ.Bool(), 'true'), 'Whether   locally   loaded   documents   are   allowed   to   access   other   local   urls.'), ('cookies-accept', SettingValue(typ.String(valid_values=typ.ValidValues(('all', 'Accept   all   cookies.'), ('no-3rdparty', 'Accept   cookies   from   the   same   origin   only.'), ('no-unknown-3rdparty', 'Accept   cookies   from   the   same   origin   only,   unless   a   cookie   is   already   set   for   the   domain.'), ('never', \"Don't   accept   cookies   at   all.\"))), 'no-3rdparty', backends=[usertypes.Backend.QtWebKit]), 'Control   which   cookies   to   accept.'), ('cookies-store', SettingValue(typ.Bool(), 'true', backends=[usertypes.Backend.QtWebKit]), 'Whether   to   store   cookies.'), ('host-block-lists', SettingValue(typ.List(typ.Url(), none_ok=True), 'https://www.malwaredomainlist.com/hostslist/hosts.txt,http://someonewhocares.org/hosts/hosts,http://winhelp2002.mvps.org/hosts.zip,http://malwaredomains.lehigh.edu/files/justdomains.zip,https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext'), \"List   of   URLs   of   lists   which   contain   hosts   to   block.\\n\\nThe   file   can   be   in   one   of   the   following   formats:\\n\\n-   An   '/etc/hosts'-like   file\\n-   One   host   per   line\\n-   A   zip-file   of   any   of   the   above,   with   either   only   one   file,   or   a   file   named   'hosts'   (with   any   extension).\"), ('host-blocking-enabled', SettingValue(typ.Bool(), 'true'), 'Whether   host   blocking   is   enabled.'), ('host-blocking-whitelist', SettingValue(typ.List(typ.String(), none_ok=True), 'piwik.org'), 'List   of   domains   that   should   always   be   loaded,   despite   being   ad-blocked.\\n\\nDomains   may   contain   *   and   ?   wildcards   and   are   otherwise   required   to   exactly   match   the   requested   domain.\\n\\nLocal   domains   are   always   exempt   from   hostblocking.'), ('enable-pdfjs', SettingValue(typ.Bool(), 'false'), 'Enable   pdf.js   to   view   PDF   files   in   the   browser.\\n\\nNote   that   the   files   can   still   be   downloaded   by   clicking   the   download   button   in   the   pdf.js   viewer.'), readonly=readonly)), ('hints', sect.KeyValue(('border', SettingValue(typ.String(), '1px   solid   #E3BE23'), 'CSS   border   value   for   hints.'), ('mode', SettingValue(typ.String(valid_values=typ.ValidValues(('number', 'Use   numeric   hints.'), ('letter', 'Use   the   chars   in   the   hints   ->   chars   setting.'), ('word', 'Use   hints   words   based   on   the   html   elements   and   the   extra   words.'))), 'letter'), 'Mode   to   use   for   hints.'), ('chars', SettingValue(typ.UniqueCharString(minlen=2, completions=[('asdfghjkl', 'Home   row'), ('aoeuidnths', 'Home   row   (Dvorak)'), ('abcdefghijklmnopqrstuvwxyz', 'All   letters')]), 'asdfghjkl'), 'Chars   used   for   hint   strings.'), ('min-chars', SettingValue(typ.Int(minval=1), '1'), 'Minimum   number   of   chars   used   for   hint   strings.'), ('scatter', SettingValue(typ.Bool(), 'true'), 'Whether   to   scatter   hint   key   chains   (like   Vimium)   or   not   (like   dwb).   Ignored   for   number   hints.'), ('uppercase', SettingValue(typ.Bool(), 'false'), 'Make   chars   in   hint   strings   uppercase.'), ('dictionary', SettingValue(typ.File(required=False), '/usr/share/dict/words'), 'The   dictionary   file   to   be   used   by   the   word   hints.'), ('auto-follow', SettingValue(typ.String(valid_values=typ.ValidValues(('always', 'Auto-follow   whenever   there   is   only   a   single   hint   on   a   page.'), ('unique-match', 'Auto-follow   whenever   there   is   a   unique   non-empty   match   in   either   the   hint   string   (word   mode)   or   filter   (number   mode).'), ('full-match', \"Follow   the   hint   when   the   user   typed   the   whole   hint   (letter,   word   or   number   mode)   or   the   element's   text   (only   in   number   mode).\"), ('never', 'The   user   will   always   need   to   press   Enter   to   follow   a   hint.'))), 'unique-match'), 'Controls   when   a   hint   can   be   automatically   followed   without   the   user   pressing   Enter.'), ('auto-follow-timeout', SettingValue(typ.Int(), '0'), 'A   timeout   (in   milliseconds)   to   inhibit   normal-mode   key   bindings   after   a   successful   auto-follow.'), ('next-regexes', SettingValue(typ.List(typ.Regex(flags=re.IGNORECASE)), '\\\\bnext\\\\b,\\\\bmore\\\\b,\\\\bnewer\\\\b,\\\\b[>\\xe2\\x86\\x92\\xe2\\x89\\xab]\\\\b,\\\\b(>>|\\xc2\\xbb)\\\\b,\\\\bcontinue\\\\b'), \"A   comma-separated   list   of   regexes   to   use   for   'next'   links.\"), ('prev-regexes', SettingValue(typ.List(typ.Regex(flags=re.IGNORECASE)), '\\\\bprev(ious)?\\\\b,\\\\bback\\\\b,\\\\bolder\\\\b,\\\\b[<\\xe2\\x86\\x90\\xe2\\x89\\xaa]\\\\b,\\\\b(<<|\\xc2\\xab)\\\\b'), \"A   comma-separated   list   of   regexes   to   use   for   'prev'   links.\"), ('find-implementation', SettingValue(typ.String(valid_values=typ.ValidValues(('javascript', 'Better   but   slower'), ('python', 'Slightly   worse   but   faster'))), 'python'), 'Which   implementation   to   use   to   find   elements   to   hint.'), ('hide-unmatched-rapid-hints', SettingValue(typ.Bool(), 'true'), 'Controls   hiding   unmatched   hints   in   rapid   mode.'), readonly=readonly)), ('searchengines', sect.ValueList(typ.SearchEngineName(), typ.SearchEngineUrl(), ('DEFAULT', 'https://duckduckgo.com/?q={}'), readonly=readonly)), ('aliases', sect.ValueList(typ.String(forbidden='   '), typ.Command(), readonly=readonly)), ('colors', sect.KeyValue(('completion.fg', SettingValue(typ.QtColor(), 'white'), 'Text   color   of   the   completion   widget.'), ('completion.bg', SettingValue(typ.QssColor(), '#333333'), 'Background   color   of   the   completion   widget.'), ('completion.alternate-bg', SettingValue(typ.QssColor(), '#444444'), 'Alternating   background   color   of   the   completion   widget.'), ('completion.category.fg', SettingValue(typ.QtColor(), 'white'), 'Foreground   color   of   completion   widget   category   headers.'), ('completion.category.bg', SettingValue(typ.QssColor(), 'qlineargradient(x1:0,   y1:0,   x2:0,   y2:1,   stop:0   #888888,   stop:1   #505050)'), 'Background   color   of   the   completion   widget   category   headers.'), ('completion.category.border.top', SettingValue(typ.QssColor(), 'black'), 'Top   border   color   of   the   completion   widget   category   headers.'), ('completion.category.border.bottom', SettingValue(typ.QssColor(), '${completion.category.border.top}'), 'Bottom   border   color   of   the   completion   widget   category   headers.'), ('completion.item.selected.fg', SettingValue(typ.QtColor(), 'black'), 'Foreground   color   of   the   selected   completion   item.'), ('completion.item.selected.bg', SettingValue(typ.QssColor(), '#e8c000'), 'Background   color   of   the   selected   completion   item.'), ('completion.item.selected.border.top', SettingValue(typ.QssColor(), '#bbbb00'), 'Top   border   color   of   the   completion   widget   category   headers.'), ('completion.item.selected.border.bottom', SettingValue(typ.QssColor(), '${completion.item.selected.border.top}'), 'Bottom   border   color   of   the   selected   completion   item.'), ('completion.match.fg', SettingValue(typ.QssColor(), '#ff4444'), 'Foreground   color   of   the   matched   text   in   the   completion.'), ('completion.scrollbar.fg', SettingValue(typ.QssColor(), '${completion.fg}'), 'Color   of   the   scrollbar   handle   in   completion   view.'), ('completion.scrollbar.bg', SettingValue(typ.QssColor(), '${completion.bg}'), 'Color   of   the   scrollbar   in   completion   view'), ('statusbar.fg', SettingValue(typ.QssColor(), 'white'), 'Foreground   color   of   the   statusbar.'), ('statusbar.bg', SettingValue(typ.QssColor(), 'black'), 'Background   color   of   the   statusbar.'), ('statusbar.fg.insert', SettingValue(typ.QssColor(), '${statusbar.fg}'), 'Foreground   color   of   the   statusbar   in   insert   mode.'), ('statusbar.bg.insert', SettingValue(typ.QssColor(), 'darkgreen'), 'Background   color   of   the   statusbar   in   insert   mode.'), ('statusbar.fg.command', SettingValue(typ.QssColor(), '${statusbar.fg}'), 'Foreground   color   of   the   statusbar   in   command   mode.'), ('statusbar.bg.command', SettingValue(typ.QssColor(), '${statusbar.bg}'), 'Background   color   of   the   statusbar   in   command   mode.'), ('statusbar.fg.caret', SettingValue(typ.QssColor(), '${statusbar.fg}'), 'Foreground   color   of   the   statusbar   in   caret   mode.'), ('statusbar.bg.caret', SettingValue(typ.QssColor(), 'purple'), 'Background   color   of   the   statusbar   in   caret   mode.'), ('statusbar.fg.caret-selection', SettingValue(typ.QssColor(), '${statusbar.fg}'), 'Foreground   color   of   the   statusbar   in   caret   mode   with   a   selection'), ('statusbar.bg.caret-selection', SettingValue(typ.QssColor(), '#a12dff'), 'Background   color   of   the   statusbar   in   caret   mode   with   a   selection'), ('statusbar.progress.bg', SettingValue(typ.QssColor(), 'white'), 'Background   color   of   the   progress   bar.'), ('statusbar.url.fg', SettingValue(typ.QssColor(), '${statusbar.fg}'), 'Default   foreground   color   of   the   URL   in   the   statusbar.'), ('statusbar.url.fg.success', SettingValue(typ.QssColor(), 'white'), 'Foreground   color   of   the   URL   in   the   statusbar   on   successful   load   (http).'), ('statusbar.url.fg.success.https', SettingValue(typ.QssColor(), 'lime'), 'Foreground   color   of   the   URL   in   the   statusbar   on   successful   load   (https).'), ('statusbar.url.fg.error', SettingValue(typ.QssColor(), 'orange'), 'Foreground   color   of   the   URL   in   the   statusbar   on   error.'), ('statusbar.url.fg.warn', SettingValue(typ.QssColor(), 'yellow'), \"Foreground   color   of   the   URL   in   the   statusbar   when   there's   a   warning.\"), ('statusbar.url.fg.hover', SettingValue(typ.QssColor(), 'aqua'), 'Foreground   color   of   the   URL   in   the   statusbar   for   hovered   links.'), ('tabs.fg.odd', SettingValue(typ.QtColor(), 'white'), 'Foreground   color   of   unselected   odd   tabs.'), ('tabs.bg.odd', SettingValue(typ.QtColor(), 'grey'), 'Background   color   of   unselected   odd   tabs.'), ('tabs.fg.even', SettingValue(typ.QtColor(), 'white'), 'Foreground   color   of   unselected   even   tabs.'), ('tabs.bg.even', SettingValue(typ.QtColor(), 'darkgrey'), 'Background   color   of   unselected   even   tabs.'), ('tabs.fg.selected.odd', SettingValue(typ.QtColor(), 'white'), 'Foreground   color   of   selected   odd   tabs.'), ('tabs.bg.selected.odd', SettingValue(typ.QtColor(), 'black'), 'Background   color   of   selected   odd   tabs.'), ('tabs.fg.selected.even', SettingValue(typ.QtColor(), '${tabs.fg.selected.odd}'), 'Foreground   color   of   selected   even   tabs.'), ('tabs.bg.selected.even', SettingValue(typ.QtColor(), '${tabs.bg.selected.odd}'), 'Background   color   of   selected   even   tabs.'), ('tabs.bg.bar', SettingValue(typ.QtColor(), '#555555'), 'Background   color   of   the   tab   bar.'), ('tabs.indicator.start', SettingValue(typ.QtColor(), '#0000aa'), 'Color   gradient   start   for   the   tab   indicator.'), ('tabs.indicator.stop', SettingValue(typ.QtColor(), '#00aa00'), 'Color   gradient   end   for   the   tab   indicator.'), ('tabs.indicator.error', SettingValue(typ.QtColor(), '#ff0000'), 'Color   for   the   tab   indicator   on   errors..'), ('tabs.indicator.system', SettingValue(typ.ColorSystem(), 'rgb'), 'Color   gradient   interpolation   system   for   the   tab   indicator.'), ('hints.fg', SettingValue(typ.QssColor(), 'black'), 'Font   color   for   hints.'), ('hints.bg', SettingValue(typ.QssColor(), 'qlineargradient(x1:0,   y1:0,   x2:0,   y2:1,   stop:0   rgba(255,   247,   133,   0.8),   stop:1   rgba(255,   197,   66,   0.8))'), 'Background   color   for   hints.   Note   that   you   can   use   a   `rgba(...)`   value   for   transparency.'), ('hints.fg.match', SettingValue(typ.QssColor(), 'green'), 'Font   color   for   the   matched   part   of   hints.'), ('downloads.bg.bar', SettingValue(typ.QssColor(), 'black'), 'Background   color   for   the   download   bar.'), ('downloads.fg.start', SettingValue(typ.QtColor(), 'white'), 'Color   gradient   start   for   download   text.'), ('downloads.bg.start', SettingValue(typ.QtColor(), '#0000aa'), 'Color   gradient   start   for   download   backgrounds.'), ('downloads.fg.stop', SettingValue(typ.QtColor(), '${downloads.fg.start}'), 'Color   gradient   end   for   download   text.'), ('downloads.bg.stop', SettingValue(typ.QtColor(), '#00aa00'), 'Color   gradient   stop   for   download   backgrounds.'), ('downloads.fg.system', SettingValue(typ.ColorSystem(), 'rgb'), 'Color   gradient   interpolation   system   for   download   text.'), ('downloads.bg.system', SettingValue(typ.ColorSystem(), 'rgb'), 'Color   gradient   interpolation   system   for   download   backgrounds.'), ('downloads.fg.error', SettingValue(typ.QtColor(), 'white'), 'Foreground   color   for   downloads   with   errors.'), ('downloads.bg.error', SettingValue(typ.QtColor(), 'red'), 'Background   color   for   downloads   with   errors.'), ('webpage.bg', SettingValue(typ.QtColor(none_ok=True), 'white', backends=[usertypes.Backend.QtWebKit]), \"Background   color   for   webpages   if   unset   (or   empty   to   use   the   theme's   color)\"), ('keyhint.fg', SettingValue(typ.QssColor(), '#FFFFFF'), 'Text   color   for   the   keyhint   widget.'), ('keyhint.fg.suffix', SettingValue(typ.CssColor(), '#FFFF00'), 'Highlight   color   for   keys   to   complete   the   current   keychain'), ('keyhint.bg', SettingValue(typ.QssColor(), 'rgba(0,   0,   0,   80%)'), 'Background   color   of   the   keyhint   widget.'), ('messages.fg.error', SettingValue(typ.QssColor(), 'white'), 'Foreground   color   of   an   error   message.'), ('messages.bg.error', SettingValue(typ.QssColor(), 'red'), 'Background   color   of   an   error   message.'), ('messages.border.error', SettingValue(typ.QssColor(), '#bb0000'), 'Border   color   of   an   error   message.'), ('messages.fg.warning', SettingValue(typ.QssColor(), 'white'), 'Foreground   color   a   warning   message.'), ('messages.bg.warning', SettingValue(typ.QssColor(), 'darkorange'), 'Background   color   of   a   warning   message.'), ('messages.border.warning', SettingValue(typ.QssColor(), '#d47300'), 'Border   color   of   an   error   message.'), ('messages.fg.info', SettingValue(typ.QssColor(), 'white'), 'Foreground   color   an   info   message.'), ('messages.bg.info', SettingValue(typ.QssColor(), 'black'), 'Background   color   of   an   info   message.'), ('messages.border.info', SettingValue(typ.QssColor(), '#333333'), 'Border   color   of   an   info   message.'), ('prompts.fg', SettingValue(typ.QssColor(), 'white'), 'Foreground   color   for   prompts.'), ('prompts.bg', SettingValue(typ.QssColor(), 'darkblue'), 'Background   color   for   prompts.'), ('prompts.selected.bg', SettingValue(typ.QssColor(), '#308cc6'), 'Background   color   for   the   selected   item   in   filename   prompts.'), readonly=readonly)), ('fonts', sect.KeyValue(('_monospace', SettingValue(typ.Font(), 'Terminus,   Monospace,   \"DejaVu   Sans   Mono\",   Monaco,   \"Bitstream   Vera   Sans   Mono\",   \"Andale   Mono\",   \"Courier   New\",   Courier,   \"Liberation   Mono\",   monospace,   Fixed,   Consolas,   Terminal'), 'Default   monospace   fonts.'), ('completion', SettingValue(typ.Font(), (DEFAULT_FONT_SIZE + '   ${_monospace}')), 'Font   used   in   the   completion   widget.'), ('completion.category', SettingValue(typ.Font(), 'bold   ${completion}'), 'Font   used   in   the   completion   categories.'), ('tabbar', SettingValue(typ.QtFont(), (DEFAULT_FONT_SIZE + '   ${_monospace}')), 'Font   used   in   the   tab   bar.'), ('statusbar', SettingValue(typ.Font(), (DEFAULT_FONT_SIZE + '   ${_monospace}')), 'Font   used   in   the   statusbar.'), ('downloads', SettingValue(typ.Font(), (DEFAULT_FONT_SIZE + '   ${_monospace}')), 'Font   used   for   the   downloadbar.'), ('hints', SettingValue(typ.Font(), 'bold   13px   ${_monospace}'), 'Font   used   for   the   hints.'), ('debug-console', SettingValue(typ.QtFont(), (DEFAULT_FONT_SIZE + '   ${_monospace}')), 'Font   used   for   the   debugging   console.'), ('web-family-standard', SettingValue(typ.FontFamily(none_ok=True), ''), 'Font   family   for   standard   fonts.'), ('web-family-fixed', SettingValue(typ.FontFamily(none_ok=True), ''), 'Font   family   for   fixed   fonts.'), ('web-family-serif', SettingValue(typ.FontFamily(none_ok=True), ''), 'Font   family   for   serif   fonts.'), ('web-family-sans-serif', SettingValue(typ.FontFamily(none_ok=True), ''), 'Font   family   for   sans-serif   fonts.'), ('web-family-cursive', SettingValue(typ.FontFamily(none_ok=True), ''), 'Font   family   for   cursive   fonts.'), ('web-family-fantasy', SettingValue(typ.FontFamily(none_ok=True), ''), 'Font   family   for   fantasy   fonts.'), ('web-size-minimum', SettingValue(typ.Int(none_ok=True, minval=1, maxval=MAXVALS['int']), ''), 'The   hard   minimum   font   size.'), ('web-size-minimum-logical', SettingValue(typ.Int(none_ok=True, minval=1, maxval=MAXVALS['int']), ''), 'The   minimum   logical   font   size   that   is   applied   when   zooming   out.'), ('web-size-default', SettingValue(typ.Int(none_ok=True, minval=1, maxval=MAXVALS['int']), ''), 'The   default   font   size   for   regular   text.'), ('web-size-default-fixed', SettingValue(typ.Int(none_ok=True, minval=1, maxval=MAXVALS['int']), ''), 'The   default   font   size   for   fixed-pitch   text.'), ('keyhint', SettingValue(typ.Font(), (DEFAULT_FONT_SIZE + '   ${_monospace}')), 'Font   used   in   the   keyhint   widget.'), ('messages.error', SettingValue(typ.Font(), (DEFAULT_FONT_SIZE + '   ${_monospace}')), 'Font   used   for   error   messages.'), ('messages.warning', SettingValue(typ.Font(), (DEFAULT_FONT_SIZE + '   ${_monospace}')), 'Font   used   for   warning   messages.'), ('messages.info', SettingValue(typ.Font(), (DEFAULT_FONT_SIZE + '   ${_monospace}')), 'Font   used   for   info   messages.'), ('prompts', SettingValue(typ.Font(), (DEFAULT_FONT_SIZE + '   sans-serif')), 'Font   used   for   prompts.'), readonly=readonly))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cmd_list_available(args, opts): \n    for x in jsonrpc_call(opts, 'crawler/spiders', 'list'): \n      print(x)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def floatX(arr): \n    return np.asarray(arr, dtype=theano.config.floatX)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SpaceSeparatedTokenizer(): \n    return RegexTokenizer('[^   \\\\t\\\\r\\\\n]+')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def c12_mapping(char): \n    return (u'   ' if stringprep.in_table_c12(char) else None)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read_uint64(fid): \n    return _unpack_simple(fid, '>u8', np.uint64)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_for_bad_final(p): \n    p[0] = 'BAD   FINAL   VALUE   IN   FOR   STATEMENT'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sprint(text, *colors): \n    return ('\\x1b[{}m{content}\\x1b[{}m'.format(';'.join([str(color) for color in colors]), RESET, content=text) if (IS_ANSI_TERMINAL and colors) else text)",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def getNewMouseTool(): \n    return DisplayLine()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_base64_dict(array): \n    return {'__ndarray__': base64.b64encode(array.data).decode('utf-8'), 'shape': array.shape, 'dtype': array.dtype.name}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def consistencygroup_get_all(context, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None): \n    return IMPL.consistencygroup_get_all(context, filters=filters, marker=marker, limit=limit, offset=offset, sort_keys=sort_keys, sort_dirs=sort_dirs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apart_full_decomposition(P, Q): \n    return assemble_partfrac_list(apart_list((P / Q), P.gens[0]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_current_user(user): \n    _thread_locals.user = user",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def http_now(): \n    return dt_to_http(utcnow())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _iter_id(iterable): \n    for item in iterable: \n      (yield (id(item), item))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def afunc(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_list(value): \n    return list(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_user_yes_no(question, default_value): \n    return click.prompt(question, default=default_value, type=click.BOOL)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jwt_get_username_from_payload_handler(payload): \n    return payload.get('username')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isdag(d, keys): \n    return (not getcycle(d, keys))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def finditer(pattern, string, flags=0): \n    return _compile(pattern, flags).finditer(string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getTime(): \n    return monotonicClock.getTime()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mon_create(**kwargs): \n    return ceph_cfg.mon_create(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_keqv_list(l): \n    return urllib2.parse_keqv_list(l)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CONTAINSSTRING(expr, pattern): \n    return expr.like(('%%%s%%' % pattern))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DeclareExtraKeyFlags(flag_values=FLAGS): \n    gflags.ADOPT_module_key_flags(module_bar, flag_values=flag_values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def available_attrs(fn): \n    return WRAPPER_ASSIGNMENTS",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rsa_crt_dmp1(private_exponent, p): \n    return (private_exponent % (p - 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_raw_eeglab(input_fname, montage=None, eog=(), event_id=None, event_id_func='strip_to_integer', preload=False, verbose=None, uint16_codec=None): \n    return RawEEGLAB(input_fname=input_fname, montage=montage, preload=preload, eog=eog, event_id=event_id, event_id_func=event_id_func, verbose=verbose, uint16_codec=uint16_codec)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _sample_even_odd(W_list, b_list, samples, beta, odd=True): \n    for i in xrange(odd, len(samples), 2): \n      samples[i] = sample_hi_given(samples, i, W_list, b_list, beta)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def addGeometryList(elementNode, faces): \n    for face in faces: \n      faceElement = xml_simple_reader.ElementNode() \n      face.addToAttributes(faceElement.attributes) \n      faceElement.localName = 'face' \n      faceElement.parentNode = elementNode \n      elementNode.childNodes.append(faceElement)",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def isNaN(val): \n    return (str(float(val)) == str(NaN))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def purge(name, **kwargs): \n    return remove(name, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_char(fid, count=1): \n    return _unpack_simple(fid, ('>S%s' % count), 'S')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_multiplicative_expression_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_down(hass): \n    hass.services.call(DOMAIN, SERVICE_VOLUME_DOWN)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GenBankIterator(handle): \n    return GenBankScanner(debug=0).parse_records(handle)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getLittleEndianFloatGivenFile(file): \n    return unpack('<f', file.read(4))[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_get_all(context): \n    return IMPL.floating_ip_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_ascii(s): \n    return s",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def redirect_to_login(next, login_url=LOGIN_URL): \n    return HttpResponseRedirect(('%s?%s=%s' % (login_url, REDIRECT_FIELD_NAME, next)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_get_all_by_project_and_user(context, project_id, user_id): \n    return IMPL.quota_get_all_by_project_and_user(context, project_id, user_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_setup_wizard_pane(shop, request, pane_id): \n    for pane_spec in getattr(settings, 'SHUUP_SETUP_WIZARD_PANE_SPEC', []): \n      pane_class = load(pane_spec) \n      pane_inst = pane_class(request=request, object=shop) \n      if ((pane_inst.identifier == pane_id) and pane_inst.valid()): \n         return pane_inst",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def circvar(data, axis=None, weights=None): \n    return (1.0 - _length(data, 1, 0.0, axis, weights))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cloudstack_displayname(vm_): \n    return config.get_cloud_config_value('cloudstack_displayname', vm_, __opts__, search_global=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def image_resize_image_medium(base64_source, size=(128, 128), encoding='base64', filetype=None, avoid_if_small=False): \n    return image_resize_image(base64_source, size, encoding, filetype, avoid_if_small)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ts_css(text): \n    return ('<span   class=\"ts\">%s</span>' % text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def synchronousIsValidUser(user): \n    return (user in ['Alice', 'Angus', 'Agnes'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def confirm_email_token_status(token): \n    return get_token_status(token, 'confirm', 'CONFIRM_EMAIL')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _millis_from_datetime(value): \n    if (value is not None): \n      return _millis(value)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def unique(x): \n    return dict([(val, 1) for val in x]).keys()",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def octave_code(expr, assign_to=None, **settings): \n    return OctaveCodePrinter(settings).doprint(expr, assign_to)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return skeinforge_help.HelpRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_hybi00(headers): \n    return (('Sec-WebSocket-Key1' in headers) and ('Sec-WebSocket-Key2' in headers))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _config_dir(): \n    return __salt__['config.option']('poudriere.config_dir')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_null_handler(): \n    _DULWICH_LOGGER.removeHandler(_NULL_HANDLER)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ee_sk_estimator(): \n    check_estimator(EasyEnsemble)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def equate(point, returnValue): \n    point.setToVector3(evaluate.getVector3ByDictionaryListValue(returnValue, point))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getRotatedWiddershinsQuarterAroundZAxis(vector3): \n    return Vector3((- vector3.y), vector3.x, vector3.z)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def max_api_window(user): \n    return _rules_for_user(user)[(-1)][0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_syntax_error_for_scenarios_with_no_name(): \n    expect(Feature.from_string).when.called_with(FEATURE20).to.throw(LettuceSyntaxError, 'In   the   feature   \"My   scenarios   have   no   name\",   scenarios   must   have   a   name,   make   sure   to   declare   a   scenario   like   this:   `Scenario:   name   of   your   scenario`')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_terminate_threads(whitelist=list()): \n    for t in threading.enumerate(): \n      if (not isinstance(t, TerminatableThread)): \n         continue \n      if (whitelist and (t not in whitelist)): \n         continue \n      t.schedule_termination() \n      t.stop_and_join()",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def rsa_crt_dmq1(private_exponent, q): \n    return (private_exponent % (q - 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_stockwell_check_input(): \n    for last_dim in (127, 128): \n      data = np.zeros((2, 10, last_dim)) \n      (x_in, n_fft, zero_pad) = _check_input_st(data, None) \n      assert_equal(x_in.shape, (2, 10, 128)) \n      assert_equal(n_fft, 128) \n      assert_equal(zero_pad, (128 - last_dim))",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_tl_sk_estimator(): \n    check_estimator(TomekLinks)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def words(text): \n    for word in text.split(): \n      normed = re.sub('[^a-z]', '', word.lower()) \n      if (not normed): \n         continue \n      (yield normed)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def clear(): \n    MIGRATIONS.clear()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def local_git_PR(repo_url, PRnumstr, merge_master=True): \n    with lcd(LOGDIR): \n      local('if   [   -d   letsencrypt   ];   then   rm   -rf   letsencrypt;   fi') \n      local(('git   clone   %s   letsencrypt' % repo_url)) \n      local(('cd   letsencrypt   &&   git   fetch   origin   pull/%s/head:lePRtest' % PRnumstr)) \n      local('cd   letsencrypt   &&   git   checkout   lePRtest') \n      if merge_master: \n         local('cd   letsencrypt   &&   git   remote   update   origin') \n         local('cd   letsencrypt   &&   git   merge   origin/master   -m   \"testmerge\"') \n      local('tar   czf   le.tar.gz   letsencrypt')",
        "line_count": 9,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fixed_ip_cidrs(fixed_ips): \n    return [ip_to_cidr(fixed_ip['ip_address'], fixed_ip.get('prefixlen')) for fixed_ip in fixed_ips]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __virtual__(): \n    return ('zabbix.hostgroup_create' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onCellAppDeath(addr): \n    WARNING_MSG(('onCellAppDeath:   %s' % str(addr)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_sort(value, reverse=False): \n    return sorted(value, reverse=reverse)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def EscapeXcodeDefine(s): \n    return re.sub(_xcode_define_re, '\\\\\\\\\\\\1', s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def daemonize(enable_stdio_inheritance=False): \n    if ('GUNICORN_FD' not in os.environ): \n      if os.fork(): \n         os._exit(0) \n      os.setsid() \n      if os.fork(): \n         os._exit(0) \n      os.umask(18) \n      if (not enable_stdio_inheritance): \n         closerange(0, 3) \n         fd_null = os.open(REDIRECT_TO, os.O_RDWR) \n         if (fd_null != 0): \n            os.dup2(fd_null, 0) \n         os.dup2(fd_null, 1) \n         os.dup2(fd_null, 2) \n      else: \n         fd_null = os.open(REDIRECT_TO, os.O_RDWR) \n         if (fd_null != 0): \n            os.close(0) \n            os.dup2(fd_null, 0) \n         def redirect(stream, fd_expect): \n            try: \n               fd = stream.fileno() \n               if ((fd == fd_expect) and stream.isatty()): \n                  os.close(fd) \n                  os.dup2(fd_null, fd) \n            except AttributeError: \n               pass \n         redirect(sys.stdout, 1) \n         redirect(sys.stderr, 2)",
        "line_count": 29,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def __virtual__(): \n    return ('pagerduty_service' if ('pagerduty_util.get_resource' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _unpickle_app(cls, pickler, *args): \n    return pickler()(cls, *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _read_uint16(f): \n    return np.uint16(struct.unpack('>H', f.read(4)[2:4])[0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(description, factory, default='tcp'): \n    return endpoints._parseServer(description, factory, default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def err_xml(message, type='Sender', code='ValidationError'): \n    return ('<ErrorResponse   xmlns=\"http://elasticmapreduce.amazonaws.com/doc/2009-03-31\">\\n      <Error>\\n            <Type>%s</Type>\\n            <Code>%s</Code>\\n            <Message>%s</Message>\\n      </Error>\\n      <RequestId>eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee</RequestId>\\n</ErrorResponse>' % (type, code, message))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def simple_first(kv): \n    return (isinstance(kv[1], (list, dict, tuple)), kv[0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def formatUIDListLines(msgs, getUidl): \n    for (i, m) in enumerate(msgs): \n      if (m is not None): \n         uid = getUidl(i) \n         (yield ('%d   %s\\r\\n' % ((i + 1), uid)))",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def assert_soon(condition, message=None, max_tries=60): \n    if (not wait_for(condition, max_tries=max_tries)): \n      raise AssertionError((message or ''))",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _GetCallingModule(): \n    return _GetCallingModuleObjectAndName()[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def custom_key_func(key, key_prefix, version): \n    return (u'CUSTOM-' + u'-'.join([key_prefix, str(version), key]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_equal(a, b, msg=''): \n    assert (a == b), ('%s:   %r   !=   %r' % (msg.format(a, b), a, b))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_diff_opcode_generator(*args, **kwargs): \n    return _generator(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return msg(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _missing_count(album): \n    return ((album.albumtotal or 0) - len(album.items()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewRepository(): \n    return MillingRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_registered(msg_type_name): \n    return (msg_type_name in REGISTERED_TYPES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upsize_quota_delta(context, new_flavor, old_flavor): \n    return resize_quota_delta(context, new_flavor, old_flavor, 1, 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_git_host_key(module, url, accept_hostkey=True, create_dir=True): \n    if is_ssh_url(url): \n      fqdn = get_fqdn(url) \n      if fqdn: \n         known_host = check_hostkey(module, fqdn) \n         if (not known_host): \n            if accept_hostkey: \n               (rc, out, err) = add_host_key(module, fqdn, create_dir=create_dir) \n               if (rc != 0): \n                  module.fail_json(msg=('failed   to   add   %s   hostkey:   %s' % (fqdn, (out + err)))) \n            else: \n               module.fail_json(msg=('%s   has   an   unknown   hostkey.   Set   accept_hostkey   to   True   or   manually   add   the   hostkey   prior   to   running   the   git   module' % fqdn))",
        "line_count": 11,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def volume_get_all(context, marker, limit, sort_key, sort_dir): \n    return IMPL.volume_get_all(context, marker, limit, sort_key, sort_dir)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def status(name, sig=None): \n    return __salt__['status.pid']((sig if sig else name))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _filter_keys(item, keys): \n    return dict(((k, v) for (k, v) in item.iteritems() if (k in keys)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def ntToPosixSlashes(filepath): \n    return (filepath.replace('\\\\', '/') if filepath else filepath)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def buy_data(): \n    return {}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ofc(id): \n    return ('ofc-%s' % id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_debug_queries(): \n    return g.get('sqlalchemy_queries', ())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=DjangoLexer(), buf_class=DjangoBuffer, langintel_class=DjangoLangIntel, import_handler_class=None, cile_driver_class=DjangoCILEDriver, is_cpln_lang=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def constantX(value): \n    return theano.tensor.constant(np.asarray(value, dtype=theano.config.floatX))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_subject(subject): \n    return subject.replace('\\n', '\\\\n').replace('\\r', '\\\\r')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_declaration_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def action_event_start(context, values): \n    return IMPL.action_event_start(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_tofile(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    evaluate.processArchivable(Union, elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_connection(config=None, default_model=None): \n    return datastore_rpc.Connection(adapter=ModelAdapter(default_model), config=config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_and_associativity(): \n    assert (((A & B) & C) == (A & (B & C)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def httpdate(date_obj): \n    return date_obj.strftime('%a,   %d   %b   %Y   %H:%M:%S   GMT')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _int64_feature_list(values): \n    return tf.train.FeatureList(feature=[_int64_feature(v) for v in values])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def boundary(value, minvalue, maxvalue): \n    return min(max(value, minvalue), maxvalue)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_fault_get_by_instance_uuids(context, instance_uuids, latest=False): \n    return IMPL.instance_fault_get_by_instance_uuids(context, instance_uuids, latest=latest)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def poi_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('boto_sns' if ('boto_sns.exists' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_url(imdb_id): \n    return (u'http://www.imdb.com/title/%s/' % imdb_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def contract_creation_exceptions(): \n    return {sa.Column: ['.'.join([table, 'project_id']) for table in get_tables()], sa.Index: get_tables()}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def StatusUpdate(msg, error_fh=sys.stderr): \n    PrintUpdate(msg, error_fh)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def urlquote_plus(url, safe=''): \n    return force_unicode(urllib.quote_plus(smart_str(url), smart_str(safe)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_on_failure(request, message, **kwargs): \n    return render('openid_failure.html', {'message': message})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lstm(c_prev, x): \n    return LSTM()(c_prev, x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_filter(filter): \n    return (filter in CONF.filter_scheduler.enabled_filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def demo(): \n    postag()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RegisterValidator(flag_name, checker, message='Flag   validation   failed', flag_values=FLAGS): \n    flag_values.AddValidator(gflags_validators.SimpleValidator(flag_name, checker, message))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sector(): \n    return s3_rest_controller('org', 'sector')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bool_option(arg): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start(ctid_or_name, wait=False, force=False, **kwargs): \n    return _vzctl('start', ctid_or_name, wait=wait, force=force, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_user_agent(name='python-requests'): \n    return ('%s/%s' % (name, __version__))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_array(img): \n    return (numpy.array(img.getdata()) / 255.0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reservation_commit(context, reservations, project_id=None): \n    return IMPL.reservation_commit(context, reservations, project_id=project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quoteArguments(arguments): \n    return '   '.join(map(cmdLineQuote, arguments))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flush(logger=root): \n    logger.flush()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stop(name, call=None): \n    return _query('grid', 'server/power', args={'name': name, 'power': 'stop'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cgsnapshot_get_all_by_project(context, project_id, filters=None): \n    return IMPL.cgsnapshot_get_all_by_project(context, project_id, filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sdm_monomial_mul(M, X): \n    return ((M[0],) + monomial_mul(X, M[1:]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([MqttTemplate(hass, config.get(CONF_NAME), config.get(CONF_EFFECT_LIST), {key: config.get(key) for key in (CONF_STATE_TOPIC, CONF_COMMAND_TOPIC)}, {key: config.get(key) for key in (CONF_COMMAND_ON_TEMPLATE, CONF_COMMAND_OFF_TEMPLATE, CONF_STATE_TEMPLATE, CONF_BRIGHTNESS_TEMPLATE, CONF_RED_TEMPLATE, CONF_GREEN_TEMPLATE, CONF_BLUE_TEMPLATE, CONF_EFFECT_TEMPLATE)}, config.get(CONF_OPTIMISTIC), config.get(CONF_QOS), config.get(CONF_RETAIN))])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def p_selection_statement_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def data_of(s): \n    return s.container.storage[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize(x, eps=1e-05): \n    return NormalizeL2(eps)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def notify_users(users, msg, **kwargs): \n    for user in users: \n      notify_user(user, msg, **kwargs)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ADOSC(barDs, count, fastperiod=(- (2 ** 31)), slowperiod=(- (2 ** 31))): \n    return call_talib_with_hlcv(barDs, count, talib.ADOSC, fastperiod, slowperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show_conf(conf_file=_DEFAULT_CONF): \n    return _parse_conf(conf_file)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chain_dot(*matrices): \n    return reduce((lambda x, y: np.dot(y, x)), matrices[::(-1)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_billed_op_to_trace(trace, num_ops, op): \n    if num_ops: \n      billed_op = trace.add_billed_ops() \n      billed_op.set_num_ops(num_ops) \n      billed_op.set_op(op)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def task_log_start(task_id): \n    _tasks[thread.get_ident()] = task_id",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_hl_group_name(hl_group, context_mark, context, echoerr): \n    return _highlight_group_spec.match(hl_group, context_mark=context_mark, context=context, echoerr=echoerr)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def http_get(url): \n    return Effect(HTTPGet(url=url))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def E_n(n, omega): \n    return ((hbar * omega) * (n + Rational(1, 2)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_labels_url(): \n    return '{base_url}/{owner}/{repo}/labels'.format(**API_PARAMS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def search_repositories(query, sort=None, order=None, per_page=None, text_match=False, number=(-1), etag=None): \n    return gh.search_repositories(query, sort, order, per_page, text_match, number, etag)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qos_specs_create(context, values): \n    return IMPL.qos_specs_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('boto_lambda' if ('boto_lambda.function_exists' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def int2ip(ipint): \n    return socket.inet_ntoa(struct.pack('!I', ipint))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return __virtualname__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def point_to_tuple(point): \n    return (point.x(), point.y())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_factory(): \n    return random.choice([DogFactory, CatFactory])()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _read_int16(f): \n    return np.int16(struct.unpack('>h', f.read(4)[2:4])[0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gt(a, b): \n    return (a > b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_bytes_io(): \n    for (pdf, config, hs) in zip(pdf_fnames, config_fnames, hs_fnames): \n      raw = read_raw_bti(pdf, config, hs, convert=True, preload=False) \n      with open(pdf, 'rb') as fid: \n         pdf = six.BytesIO(fid.read()) \n      with open(config, 'rb') as fid: \n         config = six.BytesIO(fid.read()) \n      with open(hs, 'rb') as fid: \n         hs = six.BytesIO(fid.read()) \n      raw2 = read_raw_bti(pdf, config, hs, convert=True, preload=False) \n      repr(raw2) \n      assert_array_equal(raw[:][0], raw2[:][0])",
        "line_count": 11,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def resource(*args, **kwargs): \n    return _get_default_session().resource(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_dataframe_indexer_caches(df): \n    for attr in _INDEXER_NAMES: \n      try: \n         delattr(df, attr) \n      except AttributeError: \n         pass",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getCraftedText(fileName, text, clipRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), clipRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timeout_for_protocol(reactor, protocol): \n    return Timeout(reactor, (2 * PING_INTERVAL.seconds), (lambda : protocol.transport.abortConnection()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addFacesByConvexBottomTopLoop(faces, indexedLoopBottom, indexedLoopTop): \n    for indexedLoopIndex in xrange(max(len(indexedLoopBottom), len(indexedLoopTop))): \n      indexedLoopIndexEnd = ((indexedLoopIndex + 1) % len(indexedLoopBottom)) \n      indexedConvex = [] \n      if (len(indexedLoopBottom) > 1): \n         indexedConvex.append(indexedLoopBottom[indexedLoopIndex]) \n         indexedConvex.append(indexedLoopBottom[((indexedLoopIndex + 1) % len(indexedLoopBottom))]) \n      else: \n         indexedConvex.append(indexedLoopBottom[0]) \n      if (len(indexedLoopTop) > 1): \n         indexedConvex.append(indexedLoopTop[((indexedLoopIndex + 1) % len(indexedLoopTop))]) \n         indexedConvex.append(indexedLoopTop[indexedLoopIndex]) \n      else: \n         indexedConvex.append(indexedLoopTop[0]) \n      addFacesByConvex(faces, indexedConvex)",
        "line_count": 14,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def vm_info(vm_=None): \n    with _get_xapi_session() as xapi: \n      def _info(vm_): \n         vm_rec = _get_record_by_label(xapi, 'VM', vm_) \n         if (vm_rec is False): \n            return False \n         vm_metrics_rec = _get_metrics_record(xapi, 'VM', vm_rec) \n         return {'cpu': vm_metrics_rec['VCPUs_number'], 'maxCPU': _get_val(vm_rec, ['VCPUs_max']), 'cputime': vm_metrics_rec['VCPUs_utilisation'], 'disks': get_disks(vm_), 'nics': get_nics(vm_), 'maxMem': int(_get_val(vm_rec, ['memory_dynamic_max'])), 'mem': int(vm_metrics_rec['memory_actual']), 'state': _get_val(vm_rec, ['power_state'])} \n      info = {} \n      if vm_: \n         ret = _info(vm_) \n         if (ret is not None): \n            info[vm_] = ret \n      else: \n         for vm_ in list_domains(): \n            ret = _info(vm_) \n            if (ret is not None): \n               info[vm_] = _info(vm_) \n      return info",
        "line_count": 18,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def consts(t): \n    for elt in t: \n      r = repr(elt) \n      if r.startswith('<code   object'): \n         (yield ('<code   object   %s>' % elt.co_name)) \n      else: \n         (yield r)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def reset_shortcuts(): \n    CONF.reset_to_defaults(section='shortcuts')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _mxwarn(msg): \n    warn(('Possible   MaxFilter   bug:   %s,   more   info:   http://imaging.mrc-cbu.cam.ac.uk/meg/maxbugs' % msg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def signalHandler(signum, frame): \n    raise Timeout('Timeout   exceed!')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _validate_quota(quota): \n    if (quota is not None): \n      if (not isinstance(quota, dict)): \n         raise TypeError('quota   must   be   a   dictionary,   provided   value:   {0}'.format(quota)) \n      periods = ['DAY', 'WEEK', 'MONTH'] \n      if (('period' not in quota) or (quota['period'] not in periods)): \n         raise ValueError('quota   must   have   a   valid   period   specified,   valid   values   are   {0}'.format(','.join(periods))) \n      if ('limit' not in quota): \n         raise ValueError('quota   limit   must   have   a   valid   value')",
        "line_count": 8,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def test_grouped_slicing(T1): \n    for masked in (False, True): \n      t1 = Table(T1, masked=masked) \n      tg = t1.group_by('a') \n      tg2 = tg[3:5] \n      assert np.all((tg2.groups.indices == np.array([0, len(tg2)]))) \n      assert (tg2.groups.keys is None)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def detect_images_and_galleries(generators): \n    for generator in generators: \n      if isinstance(generator, ArticlesGenerator): \n         for article in itertools.chain(generator.articles, generator.translations, generator.drafts): \n            detect_image(generator, article) \n            detect_gallery(generator, article) \n      elif isinstance(generator, PagesGenerator): \n         for page in itertools.chain(generator.pages, generator.translations, generator.hidden_pages): \n            detect_image(generator, page) \n            detect_gallery(generator, page)",
        "line_count": 9,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def get_version(): \n    return '.'.join((str(each) for each in VERSION[:3]))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def service_get_all_computes_by_hv_type(context, hv_type, include_disabled=False): \n    return IMPL.service_get_all_computes_by_hv_type(context, hv_type, include_disabled=include_disabled)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _arg_cache(name): \n    return wf().cachefile(u'{0}.argcache'.format(name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DACrange(n): \n    return numpy.arange(0.0, 256.0, (255.0 / (n - 1))).astype(numpy.uint8)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reservation_expire(context): \n    return IMPL.reservation_expire(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def office_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _do_mb_post(path, body): \n    return _mb_request(path, 'POST', AUTH_YES, True, body=body)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_StringListProperty(model, prop, kwargs): \n    return StringListPropertyField(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_peer_verification_for_url_hostname(ssl_context, url, if_verify_enabled=False): \n    if ((not if_verify_enabled) or (ssl_context.get_verify_mode() & SSL.VERIFY_PEER)): \n      urlObj = urlparse.urlparse(url) \n      hostname = urlObj.hostname \n      server_ssl_cert_verif = ServerSSLCertVerification(hostname=hostname) \n      verify_callback_ = server_ssl_cert_verif.get_verify_server_cert_func() \n      ssl_context.set_verify(SSL.VERIFY_PEER, verify_callback_)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def chain(*tasks): \n    for (up_task, down_task) in zip(tasks[:(-1)], tasks[1:]): \n      up_task.set_downstream(down_task)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_fake_volume(): \n    return {'id': '114774fb-e15a-4fae-8ee2-c9723e3645ef', 'size': 1, 'volume_name': 'lun1', 'host': 'hostname@backend#DDP', 'os_type': 'linux', 'provider_location': 'lun1', 'name_id': '114774fb-e15a-4fae-8ee2-c9723e3645ef', 'provider_auth': 'provider   a   b', 'project_id': 'project', 'display_name': None, 'display_description': 'lun1', 'volume_type_id': None, 'migration_status': None, 'attach_status': fields.VolumeAttachStatus.DETACHED}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def query(sql=None): \n    return _osquery(sql)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(data=None): \n    return MD2Hash().new(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subXMLRefs(s): \n    return re_entcharrefssub(_replXMLRef, s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fstime_floor_secs(ns): \n    return (int(ns) / (10 ** 9))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def STOU(val): \n    return val",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_decoder(t): \n    return _decoders[_aliases.get(t, t)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rand_int(start=1, end=10): \n    return random.randint(start, end)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_flash(message, category=None): \n    if config_value('FLASH_MESSAGES'): \n      flash(message, category)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def CDL3WHITESOLDIERS(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDL3WHITESOLDIERS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add(matlist1, matlist2, K): \n    return [addrow(row1, row2, K) for (row1, row2) in zip(matlist1, matlist2)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_account_for_tenant(test_auth, tenant_id): \n    return ('%s%s' % (test_auth.reseller_prefixes[0], tenant_id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add(value, arg): \n    return (int(value) + int(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setDefaultPrivacyList(disp, listname=None): \n    return setActivePrivacyList(disp, listname, 'default')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def removeTrueFromDictionary(dictionary, key): \n    if (key in dictionary): \n      if getBooleanFromValue(dictionary[key]): \n         del dictionary[key]",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def lowerstrip(s, all=False): \n    return strip_punc(s.lower().strip(), all=all)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO___str__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_export_url(component): \n    return get_site_url(reverse('git-export', kwargs={'project': component.project.slug, 'subproject': component.slug, 'path': ''}))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_file(filename): \n    return os.path.join(TEST_DIR, filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def applied_items(): \n    return _inventory.applied_items",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _cx_oracle_req(): \n    return 'Need   \"cx_Oracle\"   and   Oracle   Client   installed   for   this   function   exist'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def body_line_iterator(msg, decode=False): \n    for subpart in msg.walk(): \n      payload = subpart.get_payload(decode=decode) \n      if isinstance(payload, basestring): \n         for line in StringIO(payload): \n            (yield line)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def ChiSquared(name, k): \n    return rv(name, ChiSquaredDistribution, (k,))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_indexes(cursor, table_name): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_cache_durations(): \n    return getattr(settings, 'CMS_CACHE_DURATIONS', {'menus': (60 * 60), 'content': 60, 'permissions': (60 * 60)})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quote(str): \n    return str.replace('\\\\', '\\\\\\\\').replace('\"', '\\\\\"')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_lang(request, profile): \n    if profile.language: \n      request.session[LANGUAGE_SESSION_KEY] = profile.language",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_app_submodules(submodule_name): \n    for (name, module) in get_app_modules(): \n      if module_has_submodule(module, submodule_name): \n         (yield (name, import_module((u'%s.%s' % (name, submodule_name)))))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def run(cmd): \n    return call(cmd.split('   '))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def squeeze(value): \n    return re.sub('[\\\\x00-\\\\x20]+', '   ', value).strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return MetaRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_allclose(actual, desired, rtol=1e-07, atol=0, err_msg='', verbose=True): \n    numpy.testing.assert_allclose(cupy.asnumpy(actual), cupy.asnumpy(desired), rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def product(u, v): \n    return flatten1(map((lambda a, v=v: map((lambda b, a=a: (a, b)), v)), u))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create(): \n    redirect(URL(f='vehicle', args='create'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skipIfDBFeature(feature): \n    return _deferredSkip((lambda : getattr(connection.features, feature)), ('Database   has   feature   %s' % feature))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def json_dump(data, filename): \n    with open(filename, u'w') as fh: \n      json.dump(data, fh, cls=JSONEncoder, indent=2)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timestamp(): \n    return ('%s   %s' % (date.today().isoformat(), datetime.now().strftime('%I:%M%p')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_loopback(ip_addr): \n    return ipaddress.ip_address(ip_addr).is_loopback",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subgraph(G, nbunch): \n    return G.subgraph(nbunch)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def undeny(ip): \n    return _access_rule('undeny', ip)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return skeinforge_meta.MetaRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expander(where): \n    return _expander(tuple(where))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def database(name, owner, template='template0', encoding='UTF8', locale='en_US.UTF-8'): \n    if (not database_exists(name)): \n      if (locale not in run('locale   -a').split()): \n         require_locale(locale) \n         restarted(_service_name()) \n      create_database(name, owner, template=template, encoding=encoding, locale=locale)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def readHeader(file): \n    while (ord(file.read(1)) != 26): \n      pass",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def change_name(command_table, session, **kwargs): \n    utils.rename_command(command_table, 'codedeploy', 'deploy')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def worker_disable(worker, lbn, profile='default'): \n    return _worker_ctl(worker, lbn, 'd', profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def select_query(query_type='list_nodes_select'): \n    return query(query_type=query_type)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def condense_semicolons(css): \n    return re.sub(';;+', ';', css)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_email_after_account_create_with_password(form): \n    send_email(to=form['email'], action=USER_REGISTER_WITH_PASSWORD, subject=MAILS[USER_REGISTER_WITH_PASSWORD]['subject'].format(app_name=get_settings()['app_name']), html=MAILS[USER_REGISTER_WITH_PASSWORD]['message'].format(email=form['email'], password=form['password']))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_server_info(repo='.'): \n    with open_repo_closing(repo) as r: \n      server_update_server_info(r)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backend(entry): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def allpairs(x): \n    return [(s, f) for (i, f) in enumerate(x) for s in x[(i + 1):]]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def mrjob_pythonpath(): \n    return os.path.abspath(os.path.join(os.path.dirname(mrjob.__file__), '..'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_orig(): \n    _main_module()._orig_get_script_args = easy_install.get_script_args",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def joinall(threads): \n    for t in threads: \n      t.join(300) \n      assert (not t.isAlive()), ('Thread   %s   hung' % t)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def supplier(): \n    return s3_rest_controller('org', 'organisation')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _isfile_side_effect(path): \n    return {'/tmp/foo.tar.gz': True, '/tmp/out': False, '/usr/bin/tar': True, '/bin/tar': True, '/tmp/test_extracted_tar': False}[path]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addVector3ToElementNode(elementNode, key, vector3): \n    elementNode.attributes[key] = ('[%s,%s,%s]' % (vector3.x, vector3.y, vector3.z))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mask_passwords(registry, xml_parent, data): \n    XML.SubElement(xml_parent, 'com.michelin.cio.hudson.plugins.maskpasswords.MaskPasswordsBuildWrapper')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decode_language(code): \n    for (tag, (language, region, iso639, iso3166)) in LANGUAGE_REGION.items(): \n      if (iso639 == code.lower()): \n         return language",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_sample_cats(pmf, category): \n    return {k: pmf[k][category] for k in pmf if (pmf[k][category] != '')}",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def version_sorted(elements): \n    return sorted(elements, key=LooseVersion, reverse=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def walk_network_integration_targets(): \n    for target in walk_integration_targets(): \n      if ('network/' in target.aliases): \n         (yield target)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_login_url(*args, **kwargs): \n    return get_client().get_login_url(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_timestamp(): \n    return int(time.time())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def production(): \n    env.hosts = ['cabot.arachnys.com']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_pxe_mac_path(mac): \n    return os.path.join(CONF.baremetal.tftp_root, 'pxelinux.cfg', ('01-' + mac.replace(':', '-').lower()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def verify_private_key(private_key, public_key, passphrase=None): \n    return bool((get_public_key(private_key, passphrase) == get_public_key(public_key)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getRoundedToPlacesString(decimalPlaces, number): \n    return str(getRoundedToPlaces(decimalPlaces, number))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return SquareDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exponential_weights(length, decay_rate): \n    return (full(length, decay_rate, float64_dtype) ** arange((length + 1), 1, (-1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def image_resize_image_small(base64_source, size=(64, 64), encoding='base64', filetype=None, avoid_if_small=False): \n    return image_resize_image(base64_source, size, encoding, filetype, avoid_if_small)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instantiate(): \n    d = defer.Deferred()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def StatusUpdate(msg): \n    PrintUpdate(msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_process_name(pid): \n    return get_field(read_file(('/proc/%d/stat' % pid)), 1)[1:(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def basename(p): \n    return split(p)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    lineation.processElementNodeByFunction(elementNode, getManipulatedPaths)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetClass(clsid): \n    return mapCLSIDToClass[clsid]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wrap_socket(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=CERT_NONE, ssl_version=PROTOCOL_SSLv23, ca_certs=None, do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None): \n    return SSLSocket(sock, keyfile=keyfile, certfile=certfile, server_side=server_side, cert_reqs=cert_reqs, ssl_version=ssl_version, ca_certs=ca_certs, do_handshake_on_connect=do_handshake_on_connect, suppress_ragged_eofs=suppress_ragged_eofs, ciphers=ciphers)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_destroy(context, address): \n    return IMPL.floating_ip_destroy(context, address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iddr_aidi(m, n, k): \n    return _id.iddr_aidi(m, n, k)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def identity(arg): \n    return arg",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main_loop(): \n    while True: \n      if ((mestate is None) or mestate.exit): \n         return \n      while (not mestate.input_queue.empty()): \n         line = mestate.input_queue.get() \n         cmds = line.split(';') \n         for c in cmds: \n            process_stdin(c) \n      time.sleep(0.1)",
        "line_count": 9,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def qos_specs_delete(context, qos_specs_id): \n    return IMPL.qos_specs_delete(context, qos_specs_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def device_pointer(obj): \n    return device_ctypes_pointer(obj).value",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def all_builtins(): \n    return (p for p in plugin.plugins.values() if p.builtin)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'drill', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def error_page(request, template, status=None): \n    return render(request, ('%d.html' % template), status=(status or template))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def CDLDOJISTAR(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLDOJISTAR)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def touch_nonadmin(prefix): \n    if (on_win and exists(join(context.root_dir, u'.nonadmin'))): \n      if (not isdir(prefix)): \n         os.makedirs(prefix) \n      with open(join(prefix, u'.nonadmin'), u'w') as fo: \n         fo.write(u'')",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def encode_hex16(value): \n    return binascii.hexlify(value).decode()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _mk_client(): \n    if ('cp.fileclient' not in __context__): \n      __context__['cp.fileclient'] = salt.fileclient.get_file_client(__opts__)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def from_text(text): \n    return _from_text(text, _by_text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addslashes(value): \n    return value.replace('\\\\', '\\\\\\\\').replace('\"', '\\\\\"').replace(\"'\", \"\\\\'\")",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ncr_sk_estimator(): \n    check_estimator(NeighbourhoodCleaningRule)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unallow(ip): \n    return _access_rule('unallow', ip)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def conditional_update(context, model, values, expected_values, filters=(), include_deleted='no', project_only=False, order=None): \n    return IMPL.conditional_update(context, model, values, expected_values, filters, include_deleted, project_only, order)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getobjdir(obj): \n    return [item for item in dir(obj) if is_text_string(item)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def css_url(): \n    return (get_bootstrap_setting(u'css_url') or bootstrap_url(u'css/bootstrap.min.css'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_strict_version(normalized): \n    return distutils.version.StrictVersion(normalized.replace('.dev', 'a'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def effect_noise(size, sigma): \n    return Image()._new(core.effect_noise(size, sigma))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_libcloud_or_fail(): \n    if (not HAS_LIBCLOUD): \n      raise LibcloudNotFound('apache-libcloud   is   required.')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _relpath_from_file(archive_dir, from_file): \n    return os.path.relpath(archive_dir, os.path.dirname(from_file))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _file_reader(fh): \n    while True: \n      chunk = fh.read(DOWNLOAD_CHUNK_SIZE) \n      if (chunk == ''): \n         fh.close() \n         break \n      (yield chunk)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def register(name, inputhook): \n    registered[name] = inputhook",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _should_keep_module(name): \n    return ((name in ('__builtin__', 'sys', 'codecs', 'encodings', 'site', 'google', 'crontab', 'pwd')) or name.startswith('google.') or name.startswith('encodings.') or ('mysql' in name.lower()))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def make_temp_file_copies(file_paths): \n    for file_path in file_paths: \n      temp_file_path = get_temp_file_path(file_path) \n      shutil.copyfile(file_path, temp_file_path)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def string_at(ptr, size=(-1)): \n    return _string_at(ptr, size)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_dir(root, drive): \n    return os.path.isdir(os.path.join(root, drive))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_final(node): \n    return FINAL.match(node.name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def InitAndRun(run_callback, shutdown_callback=None, scan_ops=False, server_logging=True): \n    main.InitAndRun(run_callback=partial(_StartWWW, run_callback, scan_ops), shutdown_callback=shutdown_callback, server_logging=server_logging)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_form_data(environ, stream_factory=None, charset='utf-8', errors='replace', max_form_memory_size=None, max_content_length=None, cls=None, silent=True): \n    return FormDataParser(stream_factory, charset, errors, max_form_memory_size, max_content_length, cls, silent).parse_from_environ(environ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_apps_root(*append): \n    return __get_root('apps', *append)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compat_patch_logging_config(logging_config): \n    if ('filters' not in logging_config.get('handlers', {}).get('mail_admins', {'filters': []})): \n      warnings.warn(\"You   have   no   filters   defined   on   the   'mail_admins'   logging   handler:   adding   implicit   debug-false-only   filter.   See   http://docs.djangoproject.com/en/dev/releases/1.4/#request-exceptions-are-now-always-logged\", DeprecationWarning) \n      filter_name = 'require_debug_false' \n      filters = logging_config.setdefault('filters', {}) \n      while (filter_name in filters): \n         filter_name = (filter_name + '_') \n      filters[filter_name] = {'()': 'django.utils.log.RequireDebugFalse'} \n      logging_config['handlers']['mail_admins']['filters'] = [filter_name]",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def cdf(x, mean=0.0, stdev=1.0): \n    return min(1.0, (0.5 * erfc((((- x) + mean) / (stdev * (2 ** 0.5))))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text, towerRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), towerRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run(verbosity=1): \n    TextTestRunner(verbosity=verbosity).run(suite())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_cases(suite): \n    for suite_or_case in suite._tests: \n      if isinstance(suite_or_case, unittest.TestCase): \n         (yield suite_or_case) \n      else: \n         for case in test_cases(suite_or_case): \n            (yield case)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def user_id(): \n    return random.randint(1, 100000000)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_extra_get_by_instance_uuid(context, instance_uuid, columns=None): \n    return IMPL.instance_extra_get_by_instance_uuid(context, instance_uuid, columns=columns)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_path_to_egg(path): \n    return (get_path_to_egg(path) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_shortcut(context, name, keystr): \n    CONF.set('shortcuts', ('%s/%s' % (context, name)), keystr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def idle_seconds(): \n    return default_scheduler.idle_seconds",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inverse_matrix(matrix): \n    return numpy.linalg.inv(matrix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_orphaned_instances(xenapi, orphaned_instances): \n    for (vm_ref, vm_rec, instance) in orphaned_instances: \n      if CONF.verbose: \n         print ('CLEANING   INSTANCE   (%s)' % instance.name) \n      cleanup_instance(xenapi, instance, vm_ref, vm_rec)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_get_syslog_facility_case_insensitive(monkeypatch): \n    for low_name in ([('local' + str(n)) for n in range(8)] + ['user']): \n      monkeypatch.setenv('WALE_SYSLOG_FACILITY', low_name) \n      (out, valid_facility) = log_help.get_syslog_facility() \n      assert (valid_facility is True) \n      monkeypatch.setenv('WALE_SYSLOG_FACILITY', low_name.upper()) \n      (out, valid_facility) = log_help.get_syslog_facility() \n      assert (valid_facility is True)",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def _get_sorted_time_zone_list(time_zone_list): \n    return sorted([_get_time_zone_dictionary(time_zone) for time_zone in time_zone_list], key=(lambda tz_dict: tz_dict['description']))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def update_block(block): \n    return modulestore().update_item(block, ModuleStoreEnum.UserID.test)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _user_profile(user_profile): \n    return {'profile': {'image': user_profile['profile_image']}}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_footer(is_secure=True): \n    return {'copyright': _footer_copyright(), 'logo_image': _footer_logo_img(is_secure), 'social_links': _footer_social_links(), 'navigation_links': _footer_navigation_links(), 'mobile_links': _footer_mobile_links(is_secure), 'legal_links': _footer_legal_links(), 'openedx_link': _footer_openedx_link()}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cbExamineMbox(result, proto): \n    return proto.fetchSpecific('1:*', headerType='HEADER.FIELDS', headerArgs=['SUBJECT']).addCallback(cbFetch, proto)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def move_item_xy(item, x, y, animate=True, duration=None): \n    move_item(item, QPointF(x, y), animate, duration)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dp(value): \n    return dpi2px(value, 'dp')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_child_rows(rows, doctype): \n    for p in list(set([r[1] for r in rows])): \n      if p: \n         frappe.db.sql(u'delete   from   `tab{0}`   where   parent=%s'.format(doctype), p)",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def export_book(databook): \n    return yaml.safe_dump(databook._package(ordered=False))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_private_key_size(private_key, passphrase=None): \n    return (_get_private_key_obj(private_key, passphrase).size() * 8)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _connected_by_alternating_paths(G, matching, targets): \n    return {v for v in G if _is_connected_by_alternating_path(G, v, matching, targets)}",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def interface(iface): \n    return salt.utils.network.interface(iface)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def key_pair_create(context, values): \n    return IMPL.key_pair_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return bool(len(available_backends))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_get_by_host_and_binary(context, host, binary): \n    return IMPL.service_get_by_host_and_binary(context, host, binary)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_expr_list(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run(*args): \n    return check_output((['flocker-volume'] + list(args)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode, prefix, sideLength): \n    return ScaleDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO_readable(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pop_connection(): \n    return _connection_stack.pop()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable(display=1, logdir=None, context=5, format='html'): \n    sys.excepthook = Hook(display=display, logdir=logdir, context=context, format=format)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_template_attribute(template_name, attribute): \n    return getattr(current_app.jinja_env.get_template(template_name).module, attribute)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return skeinforge_help.HelpRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return ChopRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _append_container_types(inventory, host_type): \n    for _host in inventory['_meta']['hostvars'].keys(): \n      hdata = inventory['_meta']['hostvars'][_host] \n      if ('container_name' in hdata): \n         if hdata['container_name'].startswith(host_type): \n            if ('physical_host' not in hdata): \n               logger.debug('Set   physical   host   for   %s   to   %s', _host, host_type) \n               hdata['physical_host'] = host_type",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def launch(__INSTANCE__=None, **kw): \n    for (k, v) in kw.iteritems(): \n      if (v is True): \n         v = k \n         k = '' \n      try: \n         v = int(v) \n      except: \n         old = v \n         v = logging.DEBUG \n         def dofail(): \n            core.getLogger(k).error('Bad   log   level:   %s.   Defaulting   to   DEBUG.', old) \n         if ((len(old) == 0) or (len(old.strip(string.ascii_uppercase)) != 0)): \n            dofail() \n         else: \n            vv = getattr(logging, old, None) \n            if (not isinstance(vv, int)): \n               dofail() \n            else: \n               v = vv \n      core.getLogger(k).setLevel(v)",
        "line_count": 20,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def objattr(accessing_obj, accessed_obj, *args, **kwargs): \n    return attr(accessed_obj, accessed_obj, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _encode_maxkey(name, dummy0, dummy1, dummy2): \n    return ('\\x7f' + name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def checksum(s): \n    return hashlib.md5(s).hexdigest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stop(name): \n    return __salt__['service.run'](name, 'stop')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_setting(key, val, env=None): \n    return settings.set(key, val, env=env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_associate_pool(context, network_id, instance_uuid=None, host=None, virtual_interface_id=None): \n    return IMPL.fixed_ip_associate_pool(context, network_id, instance_uuid, host, virtual_interface_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _default_to(parser, dest, value): \n    if (getattr(parser.values, dest) is None): \n      setattr(parser.values, dest, value)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def missing_docutils_page(request): \n    return render_to_response('admin_doc/missing_docutils.html')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_get_by_floating_address(context, floating_address): \n    return IMPL.fixed_ip_get_by_floating_address(context, floating_address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index(): \n    return settings.customise_home(module, alt_function='index_alt')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def console_get(context, console_id, instance_uuid=None): \n    return IMPL.console_get(context, console_id, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _AppendTokenSubtype(node, subtype): \n    pytree_utils.AppendNodeAnnotation(node, pytree_utils.Annotation.SUBTYPE, subtype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_values(data): \n    if data.set_value: \n      for args in data.set_value: \n         doc = frappe.get_doc(args[0], (args[1] or args[0])) \n         doc.set(args[2], args[3]) \n         doc.save()",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def create_connection(conf, new=True): \n    return rpc_amqp.create_connection(conf, new, rpc_amqp.get_connection_pool(conf, Connection))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sub64(a, b): \n    return np.subtract(a, b, dtype=np.uint64)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cyimport(import_path): \n    if HAVE_CYTHON: \n      import pyximport \n      (py_importer, pyx_importer) = pyximport.install() \n      mod = __import__(import_path, fromlist=[True]) \n      pyximport.uninstall(py_importer, pyx_importer) \n      return mod",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_hubble(): \n    data.hubble_deep_field()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'dimension', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def id_srando(): \n    _id.id_srando()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hello_plugin(): \n    return u'Hello   World,   this   is   served   from   an   extension'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start(service): \n    action('start', service)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def manifestations_from_deployment(deployment, dataset_id): \n    for node in deployment.nodes.itervalues(): \n      if (dataset_id in node.manifestations): \n         (yield (node.manifestations[dataset_id], node))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def usage(): \n    print(__doc__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ValidatePropertyKey(name, value): \n    if (not value.has_id_or_name()): \n      raise datastore_errors.BadValueError(('Incomplete   key   found   for   reference   property   %s.' % name))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def print_numa_stats(numafiles): \n    for numafilename in numafiles: \n      numafile = open(numafilename) \n      node_id = int(numafile.name[(numafile.name.find('/node/node') + 10):(-9)]) \n      ts = int(time.time()) \n      stats = dict((line.split() for line in numafile.read().splitlines())) \n      for (stat, tag) in (('numa_hit', 'hit'), ('numa_miss', 'miss')): \n         print ('sys.numa.zoneallocs   %d   %s   node=%d   type=%s' % (ts, stats[stat], node_id, tag)) \n      print ('sys.numa.foreign_allocs   %d   %s   node=%d' % (ts, stats['numa_foreign'], node_id)) \n      for (stat, tag) in (('local_node', 'local'), ('other_node', 'remote')): \n         print ('sys.numa.allocation   %d   %s   node=%d   type=%s' % (ts, stats[stat], node_id, tag)) \n      print ('sys.numa.interleave   %d   %s   node=%d   type=hit' % (ts, stats['interleave_hit'], node_id)) \n      numafile.close()",
        "line_count": 12,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def check_abstract_methods(base, subclass): \n    for attrname in dir(base): \n      if attrname.startswith('_'): \n         continue \n      attr = getattr(base, attrname) \n      if is_abstract_method(attr): \n         oattr = getattr(subclass, attrname) \n         if is_abstract_method(oattr): \n            raise Exception(('%s.%s   not   overridden' % (subclass.__name__, attrname)))",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def add_wsgi_middleware(application): \n    return webapp._config_handle.add_wsgi_middleware(application)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_change_list(state_name, property_name, new_value): \n    return [{'cmd': 'edit_state_property', 'state_name': state_name, 'property_name': property_name, 'new_value': new_value}]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_abstract_model(model): \n    return (hasattr(model, '_meta') and hasattr(model._meta, 'abstract') and model._meta.abstract)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def codeword(bits): \n    return (int(bits, 2), len(bits))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_find_module_2(): \n    nt.assert_is_none(mp.find_module('xmod', []))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exp(x): \n    return Exp()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isabstract(object): \n    return (isinstance(object, type) and (object.__flags__ & TPFLAGS_IS_ABSTRACT))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def symptom_unreasonable_max_token_size(): \n    return ((('uuid' in CONF.token.provider) and (CONF.max_token_size != 32)) or (('fernet' in CONF.token.provider) and (CONF.max_token_size > 255)))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def IgnoreHeadersRewriter(response): \n    for h in _IGNORE_RESPONSE_HEADERS: \n      if (h in response.headers): \n         del response.headers[h]",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _rows_from_json(rows, schema): \n    return [_row_from_json(row, schema) for row in rows]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def reset(): \n    return '<!--:   spam\\nContent-Type:   text/html\\n\\n<body   bgcolor=\"#f0f0f8\"><font   color=\"#f0f0f8\"   size=\"-5\">   -->\\n<body   bgcolor=\"#f0f0f8\"><font   color=\"#f0f0f8\"   size=\"-5\">   -->   -->\\n</font>   </font>   </font>   </script>   </object>   </blockquote>   </pre>\\n</table>   </table>   </table>   </table>   </table>   </font>   </font>   </font>'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_datastore_path(datastore_name, path): \n    return ('[%s]   %s' % (datastore_name, path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_int(x): \n    return (isinstance(x, int) or str(x).isdigit())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def pants_release(): \n    return u'Pants   {version}   https://pypi.python.org/pypi/pantsbuild.pants/{version}'.format(version=pants_version())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def LINEARREG_INTERCEPT(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.LINEARREG_INTERCEPT, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_topic_move_same_forum(topic): \n    assert (not topic.move(topic.forum))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def eval_node(scope, node): \n    return eval_node2(scope, node)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_datacenter_id(): \n    return config.get_cloud_config_value('datacenter_id', get_configured_provider(), __opts__, search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __newobj_ex__(cls, args, kwargs): \n    return cls.__new__(cls, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def image_from_path(path): \n    with lopen(path, u'rb') as f: \n      return image_from_data(f.read())",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___delslice__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volunteer_cluster(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def negate(matlist, K): \n    return [negaterow(row, K) for row in matlist]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def DEFINE(parser, name, default, help, flag_values=FLAGS, serializer=None, **args): \n    DEFINE_flag(Flag(parser, serializer, name, default, help, **args), flag_values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def docx_path(name): \n    return absjoin(test_file_dir, ('%s.docx' % name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_file_mode(path): \n    return stat.S_IMODE(os.stat(path).st_mode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_type_qos_associations_get(context, qos_specs_id, inactive=False): \n    return IMPL.volume_type_qos_associations_get(context, qos_specs_id, inactive)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reverse_upsize_quota_delta(context, instance): \n    return resize_quota_delta(context, instance.new_flavor, instance.old_flavor, (-1), (-1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_exclusive_or_expression_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def job_show(context, data_dict): \n    return {'success': False}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def matching_dict_to_set(matching): \n    return set(map(frozenset, matching.items()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def datetime_to_seconds(date): \n    return ((date.second + (60 * date.minute)) + (3600 * date.hour))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_provider_export_as_json(): \n    assert json.dumps(dict(providers))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_repository_by_name(app, name): \n    return get_repository_query(app).filter_by(name=name).first()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def empty(shape, dtype=float, order='C'): \n    return cupy.ndarray(shape, dtype=dtype, order=order)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update(dest, upd, recursive_update=True, merge_lists=False): \n    return salt.utils.dictupdate.update(dest, upd, recursive_update, merge_lists)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def aggregate_get(context, aggregate_id): \n    return IMPL.aggregate_get(context, aggregate_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def max(x, axis=None, keepdims=False): \n    return Max(axis, keepdims)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_capture_stream(): \n    return getattr(local_context, u'output', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def handle_del(request, basket, line_id, **kwargs): \n    return {u'ok': basket.delete_line(int(line_id))}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unscrub(txt): \n    return txt.replace(u'_', u'   ').replace(u'-', u'   ').title()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prettytuple(t): \n    return (('(' + ',   '.join((str(f) for f in t))) + ')')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sdm_monomial_lcm(A, B): \n    return ((A[0],) + monomial_lcm(A[1:], B[1:]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _delete_ntp_peers(peers): \n    return __salt__['ntp.delete_peers'](commit=False, *peers)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_pipeline_timeout(strategy, user, *args, **kwargs): \n    if (strategy.request and (not user)): \n      strategy.request.session.set_expiry(strategy.setting('PIPELINE_TIMEOUT', 600))",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def unquote(s): \n    return chr(int(s[1:3], 16))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return __virtualname__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_running(search): \n    return _action('is_running', search, False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_hash(): \n    return ('*' if (__grains__['os'].lower() == 'freebsd') else '*************')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def base_search(index, query, params, search, schema): \n    with index.searcher() as searcher: \n      queries = [] \n      for param in params: \n         if search[param]: \n            parser = qparser.QueryParser(param, schema) \n            queries.append(parser.parse(query)) \n      terms = functools.reduce((lambda x, y: (x | y)), queries) \n      return [result['pk'] for result in searcher.search(terms)]",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def sync_runners(saltenv='base'): \n    return salt.utils.extmods.sync(__opts__, 'runners', saltenv=saltenv)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_global_aliases(): \n    return {u'shop': [u'store', u'store_id', u'_store'], u'default_price_value': [u'price', u'original_price', u'originalprice', u'default_price'], u'first_name': [u'firstname'], u'last_name': [u'lastname'], u'street': [u'street_address', u'address_street', u'addr_street', u'address[street]'], u'country': [u'country_id'], u'slug': [u'url_key', u'url'], u'phone': [u'telephone'], u'postal_code': [u'postcode', u'postalcode', u'address_postcode', u'address_postalcode', u'address_postal_code', u'address[postcode]', u'address[postalcode]', u'address[postal_code]']}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addresses_from_address_families(address_families): \n    return Addresses(tuple((a for af in address_families for a in af.addressables.keys())))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def check_encoding(ET, encoding): \n    ET.XML((\"<?xml   version='1.0'   encoding='%s'?><xml   />\" % encoding))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bucket_upload_fileobj(self, Fileobj, Key, ExtraArgs=None, Callback=None, Config=None): \n    return self.meta.client.upload_fileobj(Fileobj=Fileobj, Bucket=self.name, Key=Key, ExtraArgs=ExtraArgs, Callback=Callback, Config=Config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or __virtualname__), ('access_key_id', 'secret_access_key', 'zone', 'key_filename'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ResetNolintSuppressions(): \n    _error_suppressions.clear()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default(no_flow=False, network='192.168.0.0/24', first=100, last=199, count=None, ip='192.168.0.254', router=(), dns=()): \n    launch(no_flow, network, first, last, count, ip, router, dns)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_registers(task, addr_space): \n    return list(read_int_list((task.thread.sp0 - (21 * address_size)), task.thread.sp0, addr_space))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stack(): \n    return ''.join(traceback.format_stack())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _copy_from_to(from_file, to_file): \n    with pelican_open(from_file) as text_in: \n      encoding = 'utf-8' \n      with open(to_file, 'w', encoding=encoding) as text_out: \n         text_out.write(text_in) \n         logger.info('Writing   %s', to_file)",
        "line_count": 5,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dependency_is_none(dependency): \n    return (dependency is None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_verifier(length=8): \n    return ''.join([str(random.randint(0, 9)) for i in range(length)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def GetRootKey(): \n    return win32con.HKEY_LOCAL_MACHINE",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_header_type(type_): \n    return (type_ in [HEADER, 'std_msgs/Header', 'roslib/Header'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def net_connections(kind='inet'): \n    return _connections.retrieve(kind)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_paths(path_list): \n    return [p for p in path_list if os.path.exists(os.path.realpath(p))]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getReadCraftSequence(): \n    return skeinforge_profile.getCraftTypePluginModule().getCraftSequence()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xml_findtext(xpath): \n    return all(xml_find(xpath), getattr('text'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _safe_output(line): \n    return (not any([(line.startswith('Listing') and line.endswith('...')), ('...done' in line), line.startswith('WARNING:')]))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fg1eu(x): \n    return (x + (0.5 * np.exp(((-50) * ((x - 0.5) ** 2)))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def approve_files(files_with_review_type): \n    for (file_, review_type) in files_with_review_type: \n      version = file_.version \n      addon = version.addon \n      helper = ReviewHelper(request=None, addon=addon, version=file_.version) \n      helper.set_data({'addon_files': [file_], 'comments': u'bulk   approval'}) \n      if (review_type == 'full'): \n         helper.handler.process_public() \n         log.info(u'File   %s   (addon   %s)   approved', file_.pk, addon.pk) \n      else: \n         log.info(u'File   %s   (addon   %s)   not   approved:   addon   status:   %s,   file   status:   %s', file_.pk, addon.pk, addon.status, file_.status)",
        "line_count": 10,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def cigame(registry, xml_parent, data): \n    XML.SubElement(xml_parent, 'hudson.plugins.cigame.GamePublisher')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_wheel_version(package_source): \n    return get_installable_version((package_source.version or version))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def product(iter_a, iter_b): \n    for a in iter_a: \n      for b in iter_b: \n         (yield (a, b))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def start(service): \n    _service(service, 'start')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rebot_cli(arguments, exit=True): \n    return Rebot().execute_cli(arguments, exit=exit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def package(pkg_name, name=None, prefix=None, **kwargs): \n    packages([pkg_name], name=name, prefix=prefix, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def person(): \n    return s3_rest_controller('pr', 'person')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run(name, cmd, exec_driver=None, stdin=None, python_shell=True, output_loglevel='debug', use_vt=False, ignore_retcode=False, keep_env=None): \n    return _run(name, cmd, exec_driver=exec_driver, output=None, stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, use_vt=use_vt, ignore_retcode=ignore_retcode, keep_env=keep_env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def execute_salt_restart_task(): \n    return __salt__['task.run'](name='restart-salt-minion')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_input_endpoint(kwargs=None, conn=None, call=None): \n    return update_input_endpoint(kwargs=kwargs, conn=conn, call='function', activity='delete')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def url_is_from_spider(url, spider): \n    return url_is_from_any_domain(url, ([spider.name] + list(getattr(spider, 'allowed_domains', []))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def autolabel(rectangles): \n    for rect in rectangles: \n      height = rect.get_height() \n      ax.text((rect.get_x() + (rect.get_width() / 2.0)), (1.05 * height), ('%.4f' % height), ha='center', va='bottom')",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getCraftedText(fileName, gcodeText='', repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, gcodeText), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def job_cancel(context, data_dict): \n    return {'success': False}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def join_css_classes(class_list): \n    return '   '.join(sorted((str(val) for val in class_list if val)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _is_junction(arg): \n    return (isinstance(arg, dict) and (len(arg) == 1) and (next(six.iterkeys(arg)) == 'junction'))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def block_device_mapping_create(context, values, legacy=True): \n    return IMPL.block_device_mapping_create(context, values, legacy)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def export_set(dataset): \n    return export_set_wrapper(dataset, delimiter=DELIMITER)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def numify(string): \n    return ''.join([c for c in str(string) if c.isdigit()])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def backup_update(context, backup_id, values): \n    return IMPL.backup_update(context, backup_id, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _H(n): \n    return struct.pack('>H', n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Time(hour, minute, second): \n    return dateconverter.Time(hour, minute, second)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quoteArguments(arguments): \n    return '   '.join(map(cmdLineQuote, arguments))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encoders(): \n    return list(_encoders)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def NotImplementedFake(*args, **kwargs): \n    raise NotImplementedError('This   class/method   is   not   available.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def transformVector3ByMatrix(matrixTetragrid, vector3): \n    vector3.setToVector3(getVector3TransformedByMatrix(matrixTetragrid, vector3))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_transfer(fn): \n    transfer._others.append(fn)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add(a, b): \n    return (a + b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_captcha_challenge(http_body, captcha_base_url='http://www.google.com/accounts/'): \n    return gdata.gauth.get_captcha_challenge(http_body, captcha_base_url)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def atoi(str): \n    return atof(str, int)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('gem.list' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def provider_fw_rule_create(context, rule): \n    return IMPL.provider_fw_rule_create(context, rule)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def status(): \n    return _lib.RAND_status()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connect_to_queues(region=None, public=True): \n    return _create_client(ep_name='queues', region=region, public=public)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(handle, **kwargs): \n    return Parser(handle).parse(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLLONGLINE(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLLONGLINE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disable_warnings(category=exceptions.HTTPWarning): \n    warnings.simplefilter('ignore', category)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def contains(folder, path): \n    return (False if (len(path) >= len(folder)) else (folder[:len(path)] == path))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _has_access_xmodule(user, action, xmodule, course_key): \n    return has_access(user, action, xmodule.descriptor, course_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compile(pattern, flags=0): \n    return _compile(pattern, flags)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_get_all(context, disabled=None): \n    return IMPL.service_get_all(context, disabled)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _CheckSortLimit(limit): \n    return _CheckInteger(limit, 'limit', upper_bound=MAXIMUM_SORTED_DOCUMENTS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def standard_deviation(iterable, *args, **kwargs): \n    return sqrt(variance(iterable, *args, **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group(lst, n): \n    return list(izip_longest(*[lst[i::n] for i in range(n)]))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_init_declarator_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getSheetThickness(xmlElement): \n    return xmlElement.getCascadeFloat(3.0, 'sheetThickness')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __py_new(name, data=''): \n    return __get_builtin_constructor(name)(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rsa_crt_iqmp(p, q): \n    return _modinv(q, p)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_atom_number(p): \n    p[0] = ast.Const(p[1])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_entity(expression): \n    if expression: \n      namespace = sys.modules.copy() \n      namespace.update(__main__.__dict__) \n      try: \n         return eval(expression, namespace) \n      except BaseException: \n         return None",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def instance_update(context, instance_uuid, values, expected=None): \n    return IMPL.instance_update(context, instance_uuid, values, expected=expected)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_shareable_memory(a): \n    return (_get_backing_memmap(a) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ne_(a, b, msg=None): \n    assert (a != b), (msg or ('%r   ==   %r' % (a, b)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def parse_setheader(s): \n    return _parse_hook(s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_str(length=20): \n    return salt.utils.pycrypto.secure_password(length)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_test_show_dir(): \n    if (not os.path.exists(SHOW_DIR)): \n      os.makedirs(SHOW_DIR)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_external_ip(): \n    return search_upnp_device().addCallback((lambda x: x.get_external_ip()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_deleted_exploration_change_list(exploration_id): \n    return [{'cmd': collection_domain.CMD_DELETE_COLLECTION_NODE, 'exploration_id': exploration_id}]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def allocation(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tensordot(a, b, axes=2): \n    return _tensordot_as_dot(a, b, axes, dot=dot, batched=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def redirect_or_next(endpoint, **kwargs): \n    return redirect((request.args.get('next') or endpoint), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_extension_module(filename): \n    return (os.path.splitext(filename)[1].lower() in ('.so', '.pyd'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_use(atom, use): \n    return has_flag('use', atom, use)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def map_fn(fn, elems, name=None): \n    return tf.map_fn(fn, elems, name=name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _to_secs(delta): \n    return (((delta.days * 86400.0) + delta.seconds) + (delta.microseconds / 1000000.0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def EvalExponentialPdf(x, lam): \n    return (lam * math.exp(((- lam) * x)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _data(response): \n    return response.data",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ListInstancesDNS(region, instances=None, node_types=[], states=[], names=[]): \n    return [i.public_dns_name for i in ListInstances(region, instances=instances, node_types=node_types, states=states, names=names)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def format_uint32(num): \n    return pack('!I', num)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _to_unicode(msg): \n    return _to_unicode_impl(msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deform(image, deformer, resample=Image.BILINEAR): \n    return image.transform(image.size, Image.MESH, deformer.getmesh(image), resample)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bracelets(n, k): \n    return necklaces(n, k, free=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def toUTF8(s): \n    return s",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assertIsNone(expr, msg=''): \n    return assertIs(expr, None, msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ellip_harm_2(h2, k2, n, p, s): \n    with np.errstate(all='ignore'): \n      return _ellip_harm_2_vec(h2, k2, n, p, s)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_inequalities_symbol_name_same_complex(): \n    for a in (x, S(0), (S(1) / 3), pi, oo): \n      raises(TypeError, (lambda : Gt(a, I))) \n      raises(TypeError, (lambda : (a > I))) \n      raises(TypeError, (lambda : Lt(a, I))) \n      raises(TypeError, (lambda : (a < I))) \n      raises(TypeError, (lambda : Ge(a, I))) \n      raises(TypeError, (lambda : (a >= I))) \n      raises(TypeError, (lambda : Le(a, I))) \n      raises(TypeError, (lambda : (a <= I)))",
        "line_count": 9,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_password(vm_): \n    return config.get_cloud_config_value('password', vm_, __opts__, default=config.get_cloud_config_value('passwd', vm_, __opts__, search_global=False), search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _compose2(f, g): \n    return (lambda *args, **kwargs: f(g(*args, **kwargs)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_installed(): \n    return (get_binstar is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def no_testtools_skip_decorator(logical_line): \n    if TESTTOOLS_SKIP_DECORATOR.match(logical_line): \n      (yield (0, 'T109:   Cannot   use   testtools.skip   decorator;   instead   use   decorators.skip_because   from   tempest.lib'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_boolean(): \n    _test_interop_set(clr_types, py_types, bool_test_cases)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _find_file_type(file_names, extension): \n    return filter((lambda f: f.lower().endswith(extension)), file_names)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, *args, **kwargs): \n    return BlowfishCipher(key, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sync_contains(value): \n    return var_contains('SYNC', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getMemoryUsage(): \n    return (_thisProcess.memory_info()[0] / 1048576.0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def warning(request, message, extra_tags='', fail_silently=False): \n    add_message(request, constants.WARNING, message, extra_tags=extra_tags, fail_silently=fail_silently)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log_buffer_bytes(): \n    return logs_buffer().bytes()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skipIfDBFeature(feature): \n    return _deferredSkip((lambda : getattr(connection.features, feature)), (u'Database   has   feature   %s' % feature))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_windows(): \n    return (platform.system() == 'Windows')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_pytest_runner(pyi_builder): \n    pyi_builder.test_source(\"\\n                        import   pytest\\n                        import   sys\\n                        sys.exit(pytest.main(['--help']))\\n                        \")",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def netserviceHandle(target): \n    GlobalObject().netfactory.service.mapTarget(target)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_error_codes(new_codes): \n    for (code, message) in new_codes.iteritems(): \n      error_list[code] = _(message) \n      errors[code] = code",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_notifications_for_other(config, notification_count): \n    return get_notifications_for(u'for_other', config, notification_count)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def macColonHex(mac): \n    return _colonHex(mac, 6)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_not_instance_of(expected, actual, msg=None): \n    assert (not isinstance(actual, expected, msg))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def interfaces(): \n    return salt.utils.network.interfaces()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def educate_backticks(s): \n    return s.replace('``', '&#8220;').replace(\"''\", '&#8221;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connect_to_region(region_name, **kwargs): \n    for region in regions(): \n      if (region.name == region_name): \n         return region.connect(**kwargs)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def verify_open(strategy, backend, user=None, **kwargs): \n    if ((not user) and (not appsettings.REGISTRATION_OPEN)): \n      raise AuthException(backend, _(u'New   registrations   are   disabled!'))",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def utf8encode(value): \n    return unicodeencode(value, 'utf-8')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def split_function(payload): \n    return (payload[:(- append_size)], payload)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _translate_message(message): \n    return {'id': message['id'], 'project_id': message['project_id'], 'request_id': message['request_id'], 'resource_type': message['resource_type'], 'resource_uuid': message.get('resource_uuid'), 'event_id': message['event_id'], 'message_level': message['message_level'], 'created_at': message['created_at'], 'expires_at': message.get('expires_at')}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def every(interval=1): \n    return default_scheduler.every(interval)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _deserialize_dependencies(artifact_type, deps_from_db, artifact_properties, plugins): \n    for (dep_name, dep_value) in six.iteritems(deps_from_db): \n      if (not dep_value): \n         continue \n      if isinstance(artifact_type.metadata.attributes.dependencies.get(dep_name), declarative.ListAttributeDefinition): \n         val = [] \n         for v in dep_value: \n            val.append(deserialize_from_db(v, plugins)) \n      elif (len(dep_value) == 1): \n         val = deserialize_from_db(dep_value[0], plugins) \n      else: \n         raise exception.InvalidArtifactPropertyValue(message=_('Relation   %(name)s   may   not   have   multiple   values'), name=dep_name) \n      artifact_properties[dep_name] = val",
        "line_count": 12,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def get_cache(): \n    return cache",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _scan_sr(session, sr_ref=None): \n    if sr_ref: \n      LOG.debug(_('Re-scanning   SR   %s'), sr_ref) \n      session.call_xenapi('SR.scan', sr_ref)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def splitdrive(p): \n    return (p[:0], p)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_strategy_name(): \n    return 'location_order'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return FilletRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_disk_timeout(timeout, power='ac', scheme=None): \n    return _set_powercfg_value(scheme, 'SUB_DISK', 'DISKIDLE', power, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PutSecret(secret, secret_value): \n    GetSecretsManagerForSecret(secret).PutSecret(secret, secret_value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_permalink_url(self): \n    return '/'.join((self.settings['SITEURL'], self.get_permalink_path()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reset(): \n    if ('rootmodules' in modules_db): \n      del modules_db['rootmodules']",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _compute_singular_values(a): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('mysql.grant_exists' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_struct_declaration_list_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backup_get_all_active_by_window(context, begin, end=None, project_id=None): \n    return IMPL.backup_get_all_active_by_window(context, begin, end, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_file(file_name): \n    return _parse(file_name=file_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return __virtualname__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_edit_and_list_urls(url_prefix, view_template, name_template, permissions=()): \n    return [admin_url((u'%s/(?P<pk>\\\\d+)/$' % url_prefix), (view_template % u'Edit'), name=(name_template % u'edit'), permissions=permissions), admin_url((u'%s/new/$' % url_prefix), (view_template % u'Edit'), name=(name_template % u'new'), kwargs={u'pk': None}, permissions=permissions), admin_url((u'%s/$' % url_prefix), (view_template % u'List'), name=(name_template % u'list'), permissions=permissions), admin_url((u'%s/list-settings/' % url_prefix), u'shuup.admin.modules.settings.views.ListSettingsView', name=(name_template % u'list_settings'), permissions=permissions)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def starred_by(username, number=(-1), etag=None): \n    return gh.starred_by(username, number, etag)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unread_count_for(user): \n    return InboxMessage.objects.filter(to=user, read=False).count()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dedent_strip_nodetext_formatter(nodetext, has_options, caller=None): \n    return dedent(nodetext).strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_local_path(s): \n    return s.replace('/', os.sep)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index(): \n    return s3db.cms_index(module, alt_function='index_alt')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mse(actual, predicted): \n    return np.mean(se(actual, predicted))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def utc_timestamp_to_datetime(timestamp): \n    if (timestamp is not None): \n      return datetime.fromtimestamp(timestamp, utc)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def to_rgb(c): \n    return to_rgba(c)[:3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_ntp_peers(peers): \n    return __salt__['ntp.set_peers'](commit=False, *peers)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_expand(): \n    return (flask.request.args.get('expand') is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rdf_view(request): \n    return Response('rdf')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rackconnectv3(vm_): \n    return config.get_cloud_config_value('rackconnectv3', vm_, __opts__, default=False, search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLINVERTEDHAMMER(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLINVERTEDHAMMER)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def linscale(d, lim): \n    return (((d - d.min()) * (lim[1] - lim[0])) + lim[0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_zonecode(): \n    return __salt__['cmd.run'](['date', '+%Z'], python_shell=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def repeat_call_proxy_for(interface, provider): \n    return proxyForInterface(interface, originalAttribute='_original')(_RepeatProxy(_provider=provider))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ((LEA is not None), 'The   ACME   execution   module   cannot   be   loaded:   letsencrypt-auto   not   installed.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rgb(r, g, b, a=255): \n    return (qRgba(r, g, b, a) & 4294967295)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prep_jid(nocache, passed_jid=None): \n    return (passed_jid if (passed_jid is not None) else salt.utils.jid.gen_jid())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _root_broyden2_doc(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _collect_post_update_commands(base_mapper, uowtransaction, table, states_to_update, post_update_cols): \n    for (state, state_dict, mapper, connection) in states_to_update: \n      pks = mapper._pks_by_table[table] \n      params = {} \n      hasdata = False \n      for col in mapper._cols_by_table[table]: \n         if (col in pks): \n            params[col._label] = mapper._get_state_attr_by_column(state, state_dict, col, passive=attributes.PASSIVE_OFF) \n         elif (col in post_update_cols): \n            prop = mapper._columntoproperty[col] \n            history = state.manager[prop.key].impl.get_history(state, state_dict, attributes.PASSIVE_NO_INITIALIZE) \n            if history.added: \n               value = history.added[0] \n               params[col.key] = value \n               hasdata = True \n      if hasdata: \n         (yield (params, connection))",
        "line_count": 16,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def argspec(module=''): \n    return salt.utils.argspec_report(__salt__, module)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sdm_to_dict(f): \n    return dict(f)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addPathIndexFirstSegment(gridPixel, pathIndexTable, pixelTable, segmentFirstPixel): \n    for yStep in xrange(gridPixel[1], (segmentFirstPixel[1] - 1), (-1)): \n      if getKeyIsInPixelTableAddValue((gridPixel[0], yStep), pathIndexTable, pixelTable): \n         return",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def iter_docstring_info(dir_name): \n    for file_info in iter_filename_info(dir_name): \n      if ('error' in file_info): \n         Logger.error(file_info['error']) \n         continue \n      source = slash(examples_dir, file_info['dir'], ((file_info['file'] + '.') + file_info['ext'])) \n      if (not os.path.exists(source)): \n         Logger.error('Screen   shot   references   source   code   that   does   not   exist:      %s', source) \n         continue \n      with open(source) as f: \n         text = f.read() \n         docstring_info = parse_docstring_info(text) \n         if ('error' in docstring_info): \n            Logger.error(((docstring_info['error'] + '      File:   ') + source)) \n            continue \n         else: \n            file_info.update(docstring_info) \n      (yield file_info)",
        "line_count": 17,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def isNullValue(value): \n    return (isinstance(value, basestring) and (value.upper() == NULL))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def perform_update(request, obj): \n    return execute_locked(request, obj, _('All   repositories   were   updated.'), obj.do_update, request, method=request.GET.get('method', None))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_sudo_prefix_with_group(): \n    eq_(_sudo_prefix(user=None, group='foo'), ('%s   -g   \"foo\"   ' % (env.sudo_prefix % env)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ImgtIterator(handle): \n    return _ImgtScanner(debug=0).parse_records(handle)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def greet(name): \n    print ('Hello   %s!' % name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DEFINE_integer(name, default, help): \n    CONFIG.AddOption(type_info.Integer(name=name, default=default, description=help))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def consume(iterable): \n    for event in iterable: \n      pass",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_bind_addr(default_port=None): \n    return (CONF.bind_host, (CONF.bind_port or default_port))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read_plain_byte_array_fixed(file_obj, fixed_length): \n    return file_obj.read(fixed_length)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_attr_protected(attrname): \n    return ((attrname[0] == '_') and (not (attrname == '_')) and (not (attrname.startswith('__') and attrname.endswith('__'))))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def prefix(*args): \n    return os.path.join(_prefix, *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def py__iter__types(evaluator, types, node=None): \n    return unite(py__iter__(evaluator, types, node))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prepare_bearer_uri(token, uri): \n    return add_params_to_uri(uri, [(u'access_token', token)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shell_quote(text): \n    return \"\\\\'\".join(((\"'%s'\" % p) for p in text.split(\"'\")))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getReactorTypes(): \n    return getPlugins(IReactorInstaller)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onLoginCallbackFromDB(loginName, accountName, errorno, datas): \n    INFO_MSG(('onLoginCallbackFromDB()   loginName=%s,   accountName=%s,   errorno=%s' % (loginName, accountName, errorno)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def notify(context, topic, msg, envelope=False): \n    return _get_impl().notify(cfg.CONF, context, topic, msg, envelope)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_snapshot_glance_metadata_get(context, snapshot_id): \n    return IMPL.volume_snapshot_glance_metadata_get(context, snapshot_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ValidatePropertyString(name, value): \n    ValidateStringLength(name, value, max_len=_MAX_STRING_LENGTH)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def urlquote_plus(url, safe=u''): \n    return force_text(urllib_parse.quote_plus(force_str(url), force_str(safe)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TextAfterCursor(): \n    return ToUnicode(vim.current.line[CurrentColumn():])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookup_ssh_host_config(hostname, config): \n    return config.lookup(hostname)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_tarfile(dst_path, src_path, tar_filter): \n    with tarfile.TarFile.gzopen(dst_path, mode='w', compresslevel=4) as tar: \n      tar.add(src_path, filter=tar_filter)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten(l): \n    for el in l: \n      if _iterable_not_string(el): \n         for s in flatten(el): \n            (yield s) \n      else: \n         (yield el)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def inside(accessing_obj, accessed_obj, *args, **kwargs): \n    return (accessing_obj.location == accessed_obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape(s): \n    return str(s).replace('<', '&lt;').replace('>', '&gt;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_course_enrollment(student_id, course_id, mode='honor', is_active=True): \n    return add_enrollment(student_id, course_id, mode=mode, is_active=is_active)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def evalUnits(unitStr): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_feed(file_path=FILE_PATH): \n    with default_storage.open(file_path, u'wb') as output_file: \n      if six.PY3: \n         output = gzip.open(output_file, u'wt') \n      else: \n         output = gzip.GzipFile(fileobj=output_file, mode=u'w') \n      write_feed(output) \n      output.close()",
        "line_count": 7,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def solr_literal(t): \n    return ((u'\"' + t.replace(u'\"', u'')) + u'\"')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fromstring(xml_string): \n    return BeautifulSoup.BeautifulStoneSoup(xml_string, convertEntities=None).findChild(True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape(s): \n    return parse.quote(s.encode('utf-8'), safe='~')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_message(payload, key=None): \n    return kafka.structs.Message(0, 0, key, payload)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def basePre(base, a, b): \n    base.calledBasePre = (base.calledBasePre + 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FindUnixSocket(): \n    for path in _POTENTIAL_SOCKET_LOCATIONS: \n      if os.path.exists(path): \n         return path",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _parallel_decision_function(estimators, estimators_features, X): \n    return sum((estimator.decision_function(X[:, features]) for (estimator, features) in zip(estimators, estimators_features)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _create_blockdevice_id_for_test(dataset_id): \n    return ('blockdevice-' + unicode(dataset_id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _deprecateGetPageClasses(): \n    for klass in [HTTPPageGetter, HTTPPageDownloader, HTTPClientFactory, HTTPDownloader]: \n      deprecatedModuleAttribute(Version('Twisted', 16, 7, 0), getDeprecationWarningString(klass, Version('Twisted', 16, 7, 0), replacement=_GETPAGE_REPLACEMENT_TEXT).split(';   ')[1], klass.__module__, klass.__name__)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dfs_predecessors(G, source=None): \n    return dict(((t, s) for (s, t) in dfs_edges(G, source=source)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def from_rdata(ttl, *rdatas): \n    return from_rdata_list(ttl, rdatas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isolates(G): \n    return (n for (n, d) in G.degree() if (d == 0))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def recursive_dict_removal(inventory, purge_list): \n    for (key, value) in inventory.iteritems(): \n      if isinstance(value, dict): \n         for (child_key, child_value) in value.iteritems(): \n            if isinstance(child_value, dict): \n               for item in purge_list: \n                  if (item in child_value): \n                     del child_value[item] \n            elif isinstance(child_value, list): \n               recursive_list_removal(child_value, purge_list) \n      elif isinstance(value, list): \n         recursive_list_removal(value, purge_list)",
        "line_count": 11,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def get_university_for_request(): \n    return configuration_helpers.get_value('university')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_external_account(host='foo.bar.baz', token='doremi-abc-123'): \n    return ExternalAccountFactory(provider='dataverse', provider_name='Dataverse', display_name=host, oauth_key=host, oauth_secret=token)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _install_from_scratch(python_cmd, use_sudo): \n    with cd('/tmp'): \n      download(EZ_SETUP_URL) \n      command = ('%(python_cmd)s   ez_setup.py' % locals()) \n      if use_sudo: \n         run_as_root(command) \n      else: \n         run(command) \n      run('rm   -f   ez_setup.py')",
        "line_count": 8,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_dimitem_single(p): \n    p[0] = (p[1], eval(p[3]), 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_layer_variables_by_name(name): \n    return tf.get_collection(((tf.GraphKeys.LAYER_VARIABLES + '/') + name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iterfunc(seqn): \n    for i in seqn: \n      (yield i)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _is_dev2_environment(): \n    return (os.environ.get('SERVER_SOFTWARE', '') == 'Development/2.0')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, *args, **kwargs): \n    return DESCipher(key, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vgg_a(inputs, num_classes=1000, is_training=True, dropout_keep_prob=0.5, spatial_squeeze=True, scope='vgg_a'): \n    with tf.variable_scope(scope, 'vgg_a', [inputs]) as sc: \n      end_points_collection = (sc.name + '_end_points') \n      with slim.arg_scope([slim.conv2d, slim.max_pool2d], outputs_collections=end_points_collection): \n         net = slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1') \n         net = slim.max_pool2d(net, [2, 2], scope='pool1') \n         net = slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2') \n         net = slim.max_pool2d(net, [2, 2], scope='pool2') \n         net = slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3') \n         net = slim.max_pool2d(net, [2, 2], scope='pool3') \n         net = slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4') \n         net = slim.max_pool2d(net, [2, 2], scope='pool4') \n         net = slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5') \n         net = slim.max_pool2d(net, [2, 2], scope='pool5') \n         net = slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6') \n         net = slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6') \n         net = slim.conv2d(net, 4096, [1, 1], scope='fc7') \n         net = slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7') \n         net = slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8') \n         end_points = slim.utils.convert_collection_to_dict(end_points_collection) \n         if spatial_squeeze: \n            net = tf.squeeze(net, [1, 2], name='fc8/squeezed') \n            end_points[(sc.name + '/fc8')] = net \n         return (net, end_points)",
        "line_count": 23,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def erroneous_sub_view(request): \n    raise SubException()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ast_valid_if(): \n    can_compile(u'(if*   foo   bar)')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_fill_first_cost_fn(host_state, weight_properties): \n    return (- host_state.free_ram_mb)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def usage(): \n    print('\\nUsage:\\nfirst   argument   is   a   cPickle   file   to   load\\nif   no   more   arguments   are   supplied,   will   analyze   each   field   of   the   root-level   object   stored   in   the   file\\nsubsequent   arguments   let   you   index   into   fields   /   dictionary   entries   of   the   object\\nFor   example,\\npkl_inspector.py   foo.pkl   .my_field   [my_key]   3\\nwill   load   an   object   obj   from   foo.pkl   and   analyze   obj.my_field[\"my_key\"][3]\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_testdata_filename(mission_type, filename): \n    return os.path.join(os.path.dirname(__file__), '..', mission_type, 'testdata', filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeHTMLTags(tagStr): \n    return _makeTags(tagStr, False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reload(module): \n    return importlib.reload(module)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_unittest_unexpected_success_a_failure(): \n    return (sys.version_info >= (3, 4))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_image_notification(image): \n    return {'id': image.image_id, 'name': image.name, 'status': image.status, 'created_at': timeutils.isotime(image.created_at), 'updated_at': timeutils.isotime(image.updated_at), 'min_disk': image.min_disk, 'min_ram': image.min_ram, 'protected': image.protected, 'checksum': image.checksum, 'owner': image.owner, 'disk_format': image.disk_format, 'container_format': image.container_format, 'size': image.size, 'virtual_size': image.virtual_size, 'is_public': (image.visibility == 'public'), 'visibility': image.visibility, 'properties': dict(image.extra_properties), 'tags': list(image.tags), 'deleted': False, 'deleted_at': None}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def process_rules(app, rules, prefix=''): \n    for rule in rules: \n      if callable(rule.view_func_or_data): \n         view_func = rule.view_func_or_data \n         renderer_name = getattr(rule.renderer, '__name__', rule.renderer.__class__.__name__) \n         endpoint = '{}__{}'.format(renderer_name, rule.view_func_or_data.__name__) \n         view_functions[endpoint] = rule.view_func_or_data \n      else: \n         view_func = data_to_lambda(rule.view_func_or_data) \n         endpoint = '__'.join((route.replace('/', '') for route in rule.routes)) \n      wrapped_view_func = wrap_with_renderer(view_func, rule.renderer, rule.view_kwargs, debug_mode=app.debug) \n      for url in rule.routes: \n         try: \n            app.add_url_rule((prefix + url), endpoint=(endpoint + rule.endpoint_suffix), view_func=wrapped_view_func, methods=rule.methods) \n         except AssertionError: \n            raise AssertionError(\"URLRule({},   {})'s   view   function   name   is   overwriting   an   existing   endpoint\".format((prefix + url), (view_func.__name__ + rule.endpoint_suffix)))",
        "line_count": 15,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def raising(): \n    (yield {}['foo'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_include_directive(entry): \n    return (isinstance(entry, list) and (len(entry) == 2) and (entry[0] == 'include') and isinstance(entry[1], str))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def trim_cxxflags(value): \n    return trim_var('CXXFLAGS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def buildFlavorString(): \n    return ('valid   build   flavors:   %s' % '   '.join(sorted(isoURLs)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_long_be(s): \n    return ((((ord(s[0]) << 24) | (ord(s[1]) << 16)) | (ord(s[2]) << 8)) | ord(s[3]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'alteration', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_user_with_status_unrequested(user): \n    _add_user(user, CourseCreator.UNREQUESTED)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xpath(elem, path): \n    return elem.xpath(path, namespaces=NS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_type_access_remove(context, type_id, project_id): \n    return IMPL.volume_type_access_remove(context, type_id, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log_to_stdout(runlevel): \n    get_logger().addHandler(_StdoutLogger(runlevel))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nametofont(name): \n    return Font(name=name, exists=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def network_count_reserved_ips(context, network_id): \n    return IMPL.network_count_reserved_ips(context, network_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def metric_cleanup(): \n    __worker__.shutdown()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def depth2space(X, r): \n    return Depth2Space(r)(X)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onload(options, tags): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def version_check(version, op=operator.ge): \n    return op(pkg_resources.parse_version(qVersion()), pkg_resources.parse_version(version))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean(x): \n    return ensure_sorted_indices(remove0(x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_seqs_to_keep_lookup_from_fasta_file(fasta_f): \n    return set([seq_id.split()[0] for (seq_id, seq) in parse_fasta(fasta_f)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __virtual__(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _config_file(): \n    return __salt__['config.option']('poudriere.config')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def roles(*role_list): \n    return _list_annotating_decorator('roles', *role_list)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_calendar(name): \n    return holiday_calendars[name]()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def typed_list(conversion_func): \n    return (lambda setting: [conversion_func(StringConverter(elem)) for elem in setting])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def show_interfaces(resolve_mac=True): \n    return ifaces.show(resolve_mac)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def very_simple(): \n    (yield 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return CalibrationModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vol_usage_update(context, id, rd_req, rd_bytes, wr_req, wr_bytes, instance_id, last_refreshed=None, update_totals=False): \n    return IMPL.vol_usage_update(context, id, rd_req, rd_bytes, wr_req, wr_bytes, instance_id, last_refreshed=last_refreshed, update_totals=update_totals)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _property_tuples(entity_pb): \n    return six.iteritems(entity_pb.properties)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nltkdemo18plus(): \n    return (nltkdemo18() + [Template(Word([(-1)]), Pos([1])), Template(Pos([(-1)]), Word([1])), Template(Word([(-1)]), Word([0]), Pos([1])), Template(Pos([(-1)]), Word([0]), Word([1])), Template(Pos([(-1)]), Word([0]), Pos([1]))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def query_package(module, opkg_path, name, state='present'): \n    if (state == 'present'): \n      (rc, out, err) = module.run_command(('%s   list-installed   |   grep   -q   \"^%s   \"' % (pipes.quote(opkg_path), pipes.quote(name))), use_unsafe_shell=True) \n      if (rc == 0): \n         return True \n      return False",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def processXMLElement(xmlElement): \n    group.processShape(Union, xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('stormpath.create_account' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chain_dot(*arrs): \n    return reduce((lambda x, y: np.dot(y, x)), arrs[::(-1)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ListBuckets(): \n    return ObjectStore.ListInstances()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qos_specs_associations_get(context, qos_specs_id): \n    return IMPL.qos_specs_associations_get(context, qos_specs_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render_and_scrub(markdown): \n    return Markup.escape(render(markdown).striptags())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_datetime(obj): \n    return obj.strftime('%Y-%m-%d   %H:%M')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_owner_permissions(resource): \n    if resource.polymorphic_ctype: \n      if (resource.polymorphic_ctype.name == 'layer'): \n         for perm in LAYER_ADMIN_PERMISSIONS: \n            assign_perm(perm, resource.owner, resource.layer) \n      set_geofence_owner(resource, str(resource.owner)) \n      for perm in ADMIN_PERMISSIONS: \n         assign_perm(perm, resource.owner, resource.get_self_resource())",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def FakeUname(): \n    return ('Linux', '', '', '', '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_field_value_list(headers, field, mdata): \n    return sorted(set(mdata[:, headers.index(field)]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def task_log_stop(task_id): \n    _tasks.pop(thread.get_ident(), None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_service(options): \n    return PrometheusMetricsService(options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qos_specs_get(context, qos_specs_id): \n    return IMPL.qos_specs_get(context, qos_specs_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tag_for_tool(tool): \n    return slugify(tool.name, delim='-')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_nanpa_country(region_code): \n    return (region_code in _NANPA_REGIONS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attach(*packages): \n    _attached_packages.extend(packages)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def survey_answerlist_dataTable_post(r): \n    current.response.s3.actions = [{'label': str(current.messages.UPDATE), '_class': 'action-btn   edit', 'url': URL(c='survey', f='series', args=[r.id, 'complete', '[id]', 'update'])}]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def should_write(write_opt=None): \n    return _bool_fallback(write_opt, config['import']['write'].get(bool))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subset_mapping_data(mdata, samples_of_interest): \n    return mdata[in1d(mdata[:, 0], samples_of_interest)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _empty_bucket(bucket): \n    for blob in bucket.list_blobs(): \n      try: \n         blob.delete() \n      except exceptions.NotFound: \n         pass",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _lookup_style(element, names): \n    return (_STYLES.get(('_' + element), '') + ''.join([_STYLES.get(name, '') for name in names]))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _to_int(byte_string): \n    return int(byte_string[::(-1)].encode('hex'), 16)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def publish_over_ssh(registry, xml_parent, data): \n    ssh(registry, xml_parent, data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apply_acoustid_metadata(task, session): \n    for item in task.imported_items(): \n      if (item.path in _fingerprints): \n         item.acoustid_fingerprint = _fingerprints[item.path] \n      if (item.path in _acoustids): \n         item.acoustid_id = _acoustids[item.path]",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def getNewRepository(): \n    return TemperatureRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expand_power_exp(expr, deep=True): \n    return sympify(expr).expand(deep=deep, complex=False, basic=False, log=False, mul=False, power_exp=True, power_base=False, multinomial=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_program_installed(basename): \n    for path in os.environ['PATH'].split(os.pathsep): \n      abspath = osp.join(path, basename) \n      if osp.isfile(abspath): \n         return abspath",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def lstrips(text, remove): \n    return _strips('l', text, remove)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_comment_form(parser, token): \n    return CommentFormNode.handle_token(parser, token)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _serialize_command(command_modified): \n    return _serialize_item(command_modified)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_certificate_issuer_id(vault, name): \n    return create_object_id('certificates/issuers', vault, name, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ipset_cmd(): \n    return salt.utils.which('ipset')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def feature_hidden(feature_name): \n    return ((feature_name is not None) and (feature_name in settings.OSCAR_HIDDEN_FEATURES))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def pretty_iban(iban): \n    return '   '.join([iban[i:(i + 4)] for i in range(0, len(iban), 4)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def null_applicable_aside_types(block): \n    return []",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_nodes_full(): \n    return {}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_dict(filename): \n    return getcfs(('lang:' + filename), filename, (lambda : read_dict_aux(filename)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unscale_by_constant(builder, val, factor): \n    return builder.sdiv(val, Constant.int(TIMEDELTA64, factor))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prep(opts, ryn='manor'): \n    if (not lane_stack): \n      _setup(opts=opts, ryn=ryn)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def center(value, arg): \n    return value.center(int(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attr_eq(accessing_obj, accessed_obj, *args, **kwargs): \n    return attr(accessing_obj, accessed_obj, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _configs_from_dir(conf_dir): \n    for filename in sorted(os.listdir(conf_dir)): \n      if (filename.startswith('.') or (not filename.endswith('.ini'))): \n         continue \n      LOG.debug(('Loading   configuration   from:   %s' % filename)) \n      try: \n         conf = configobj.ConfigObj(os.path.join(conf_dir, filename)) \n      except configobj.ConfigObjError as ex: \n         LOG.error((\"Error   in   configuration   file   '%s':   %s\" % (os.path.join(conf_dir, filename), ex))) \n         raise \n      conf['DEFAULT'] = dict(desktop_root=get_desktop_root(), build_dir=get_build_dir()) \n      (yield conf)",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def volume_type_get_by_name(context, name): \n    return IMPL.volume_type_get_by_name(context, name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return __virtualname__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_release_date_from(xblock): \n    return _xblock_type_and_display_name(find_release_date_source(xblock))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def conv3D(V, W, b, d): \n    return _conv3D(V, W, b, d)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def distrib_desc(): \n    with settings(hide('running', 'stdout')): \n      if (not is_file('/etc/redhat-release')): \n         return run('lsb_release   --desc   --short') \n      return run('cat   /etc/redhat-release')",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def find_triples(tokens, left_dependency_label='NSUBJ', head_part_of_speech='VERB', right_dependency_label='DOBJ'): \n    for (head, token) in enumerate(tokens): \n      if (token['partOfSpeech']['tag'] == head_part_of_speech): \n         children = dependents(tokens, head) \n         left_deps = [] \n         right_deps = [] \n         for child in children: \n            child_token = tokens[child] \n            child_dep_label = child_token['dependencyEdge']['label'] \n            if (child_dep_label == left_dependency_label): \n               left_deps.append(child) \n            elif (child_dep_label == right_dependency_label): \n               right_deps.append(child) \n         for left_dep in left_deps: \n            for right_dep in right_deps: \n               (yield (left_dep, head, right_dep))",
        "line_count": 15,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def Gumbel(name, beta, mu): \n    return rv(name, GumbelDistribution, (beta, mu))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def from_table(table, table_id=None): \n    return tree.VOTableFile.from_table(table, table_id=table_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lazify(dsk): \n    return valmap(lazify_task, dsk)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable_profiling(profile, signal, frame): \n    profile.enable()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in6_ismlladdr(str): \n    return in6_isincluded(str, 'ff02::', 16)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_get_all(context, columns_to_join=None): \n    return IMPL.instance_get_all(context, columns_to_join=columns_to_join)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_key_id(id): \n    return parse_object_id('keys', id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inf_range(start=0, step=1): \n    while True: \n      (yield start) \n      start += step",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def init(mpstate): \n    return TrackerModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def datetime_from_uuid1(uuid_arg): \n    return datetime_from_timestamp(unix_time_from_uuid1(uuid_arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normcase(s): \n    return s.replace('/', '\\\\').lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def working_function(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def output_log(msg_enum, **kwargs): \n    return msg_enum.output_log(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gen_extractors(): \n    return [klass() for klass in _ALL_CLASSES]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def addOrbitsIfLarge(distanceFeedRate, loop, orbitalFeedRatePerSecond, temperatureChangeTime, z): \n    if orbitsAreLarge(loop, temperatureChangeTime): \n      addOrbits(distanceFeedRate, loop, orbitalFeedRatePerSecond, temperatureChangeTime, z)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _read_id_struct(fid, tag, shape, rlims): \n    return dict(version=int(np.fromstring(fid.read(4), dtype='>i4')), machid=np.fromstring(fid.read(8), dtype='>i4'), secs=int(np.fromstring(fid.read(4), dtype='>i4')), usecs=int(np.fromstring(fid.read(4), dtype='>i4')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def logbasechange(a, b): \n    return (np.log(b) / np.log(a))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_currentitem(objects): \n    assert (objects.history.currentItemIndex() == 1)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def extras_require(): \n    return {x: extras((x + '.txt')) for x in EXTENSIONS}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def CDLCLOSINGMARUBOZU(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLCLOSINGMARUBOZU)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_function_definition_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_funcdef(p): \n    p[0] = ast.Function(None, p[2], tuple(p[3]), (), 0, None, p[5])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def activate_foreign_keys(sender, connection, **kwargs): \n    if (connection.vendor == 'sqlite'): \n      cursor = connection.cursor() \n      cursor.execute('PRAGMA   foreign_keys   =   ON;')",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_hello(): \n    return 'foo'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_fromlist(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('layman' if ('layman.add' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getTextLines(text): \n    return text.replace('\\r', '\\n').split('\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def valid_publish_topic(value): \n    return valid_subscribe_topic(value, invalid_chars='#+\\x00')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_proc_mounts(): \n    with open('/proc/mounts') as mounts: \n      return mounts.readlines()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(linter): \n    linter.register_checker(RawMetricsChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def document_form_initial(document): \n    return {'title': document.title, 'slug': document.slug, 'is_localizable': document.is_localizable, 'tags': list(document.tags.names())}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def local_uri_to_file_uri(uri, media_dir): \n    return path_to_file_uri(local_uri_to_path(uri, media_dir))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_representer(data_type, representer, Dumper=Dumper): \n    Dumper.add_representer(data_type, representer)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load(modname, verbose=False, failfast=False): \n    for app in settings.INSTALLED_APPS: \n      get_module(app, modname, verbose, failfast)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return GearDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_hooks(): \n    return {'hookspath': hookspath(), 'runtime_hooks': runtime_hooks()}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_query_string(): \n    return dict(([param, urllib.unquote(value)] for (param, value) in ((x.split('=', 1) if ('=' in x) else [x, None]) for x in os.getenv('QUERY_STRING', '').split('&'))))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def printException(exctype, value, traceback): \n    print(''.join(formatException(exctype, value, traceback, skip=1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_installed_patterns(): \n    return _get_patterns(installed_only=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_config_defaults(): \n    return dict(FILE_CONTENT[CONFIG_FILE])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, gcodeText='', repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, gcodeText), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_dim_bad(p): \n    p[0] = 'MALFORMED   VARIABLE   LIST   IN   DIM'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def html(url): \n    return BeautifulSoup(get(url), convertEntities=BeautifulSoup.HTML_ENTITIES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connections_support_transactions(): \n    return all((conn.features.supports_transactions for conn in connections.all()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_cluster_init_process_names(runner, nodes): \n    return gather_deferreds(list((get_node_init_process_name(runner, node) for node in nodes)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def certificate_get_all_by_project(context, project_id): \n    return IMPL.certificate_get_all_by_project(context, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetGeneratedFileName(clsid, lcid, major, minor): \n    return (str(clsid).upper()[1:(-1)] + ('x%sx%sx%s' % (lcid, major, minor)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return BottomRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_used_in_graph(var): \n    return (not ((var.clients == [('output', 1)]) or (var.clients == [])))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def model_key(model): \n    return ('%s.%s' % (model._meta.app_label, model._meta.object_name.lower()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_has_text(output, text): \n    assert (output.find(text) >= 0), (\"Output   file   did   not   contain   expected   text   '%s'   (output   '%s')\" % (text, output))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cluster_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def partners(request): \n    return render(request, 'ecosystem/partners.html', {'page': 'partners'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_zk_locations_string(zk_location_ips): \n    return ((((':' + str(zk.DEFAULT_PORT)) + ',').join(zk_location_ips) + ':') + str(zk.DEFAULT_PORT))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mysql_encode(t): \n    return ('CHAR(%s)' % ','.join((str(ord(c)) for c in t)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def lesser(x, y): \n    return tf.less(x, y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def block_device_mapping_destroy_by_instance_and_device(context, instance_uuid, device_name): \n    return IMPL.block_device_mapping_destroy_by_instance_and_device(context, instance_uuid, device_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return (__virtualname__ if HAS_ETCD else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([manual.ManualAlarm(hass, 'Alarm', '1234', 5, 10, False)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _read_julian(fid, tag, shape, rlims): \n    return jd2jcal(int(np.fromstring(fid.read(4), dtype='>i4')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cot(arg): \n    return (1 / numpy.tan(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeReviewResult(message, *labels): \n    return dict(message=message, labels=dict(labels))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return fabmetheus_interpret.InterpretRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(request): \n    return request.session.get('partial_pipeline')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _zero_fill_array(context, builder, ary): \n    cgutils.memset(builder, ary.data, builder.mul(ary.itemsize, ary.nitems), 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _BeforeBlockOffsets(single, with_body): \n    return {single: SINGLE_LINE, with_body: WITH_BODY}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cleanup_instance(xenapi, instance, vm_ref, vm_rec): \n    xenapi._vmops._destroy(instance, vm_ref)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def todo(reason): \n    return _skip_test(reason, 'TODO')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mobile_view(is_user=False): \n    return view_auth_classes(is_user)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sendStayAwake(): \n    cocoa.UpdateSystemActivity(0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_get_all(context): \n    return IMPL.fixed_ip_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_path_bkrcache(r): \n    return (((AUTOTEST_CACHE_DIR + '/recipes/') + r) + '/beaker_recipe.cache')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_get_by_address(context, address): \n    return IMPL.floating_ip_get_by_address(context, address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PrintUpdate(msg): \n    if (verbosity > 0): \n      timestamp = datetime.datetime.now() \n      print >>sys.stderr, ('%s' % datetime.datetime.now().strftime('%I:%M   %p')), \n      print >>sys.stderr, msg",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def strswapmid(data): \n    return ''.join(arrswapmid(data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLONNECK(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLONNECK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def info(request): \n    return render_to_response('info.html', {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def desaturate(color, percent): \n    return adjust(color, 1, (- percent))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _cursor(): \n    return connections[router.db_for_read(Metric)].cursor()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shortest_path(files_path_list): \n    if (len(files_path_list) > 0): \n      shortest_path = files_path_list[0] \n      shortest_path_length = len(files_path_list[0]) \n      for path_elmts in files_path_list: \n         if (len(path_elmts) < shortest_path_length): \n            shortest_path_length = len(path_elmts) \n            shortest_path = path_elmts \n      return os.path.join(*shortest_path)",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def MININDEX(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.MININDEX, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def document_nav_links(obj): \n    return combine_funcs(obj, (parent_document_link, topic_parent_document_link, topic_sibling_documents_link, topic_children_documents_link))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compress(context, data, name): \n    return CompressorNode(nodelist=TextNode(data), kind=name, mode='file').render(context=context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_deprecated_tense(removal_version, future_tense=u'will   be', past_tense=u'was'): \n    return (future_tense if (Version(removal_version) >= PANTS_SEMVER) else past_tense)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _rows_to_ndarray(cursor): \n    return np.squeeze(np.array([row[3:] for row in cursor.fetchall()]))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def main(): \n    writeHypertext()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def b1_mapping(char): \n    return (u'' if stringprep.in_table_b1(char) else None)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def top_contributors_kb(start=None, end=None, product=None, count=10, page=1): \n    return top_contributors_l10n(start, end, settings.WIKI_DEFAULT_LANGUAGE, product, count)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return (True if ('infoblox.get_record' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def rst_xline(width, char='='): \n    return (char * width)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_dependencies(): \n    return config.check_driver_dependencies(__virtualname__, {'lmxl': HAS_XML_LIBS})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def packb(o, **kwargs): \n    return Packer(**kwargs).pack(o)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_arraylike(x): \n    return (hasattr(x, '__len__') or hasattr(x, 'shape') or hasattr(x, '__array__'))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def max_api_calls(user): \n    return _rules_for_user(user)[(-1)][1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vm_info(domain): \n    return __salt__['vmadm.get'](domain)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isString(s): \n    return isinstance(s, _basestring)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def partitioning_index(df, npartitions): \n    return (hash_pandas_object(df, index=False) % int(npartitions))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getLittleEndianUnsignedLongGivenFile(file): \n    return unpack('<L', file.read(4))[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ufft2(inarray): \n    return ufftn(inarray, 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_all(path, pattern='*', keep_folder=False, recursive=False): \n    if os.path.exists(path): \n      files = globber_full(path, pattern) \n      if ((pattern == '*') and (not sabnzbd.WIN32)): \n         files.extend(globber_full(path, '.*')) \n      for f in files: \n         if os.path.isfile(f): \n            try: \n               os.remove(f) \n            except: \n               logging.info('Cannot   remove   file   %s', f) \n         elif recursive: \n            remove_all(f, pattern, False, True) \n      if (not keep_folder): \n         try: \n            os.rmdir(path) \n         except: \n            logging.info('Cannot   remove   folder   %s', path)",
        "line_count": 17,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def trace(X): \n    return extract_diag(X).sum()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prod(a, axis=None, dtype=None, out=None, keepdims=False): \n    return a.prod(axis, dtype, out, keepdims)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def transpose(x): \n    return tf.transpose(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _dict_compat(d): \n    return dict(((_maybe_box_datetimelike(key), value) for (key, value) in iteritems(d)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def kinda_order_mod(x, m): \n    return order_mod(x, largest_factor_relatively_prime(m, x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten_iterator(x): \n    for elem in x: \n      if ((not isinstance(elem, str)) and hasattr(elem, '__iter__')): \n         for y in flatten_iterator(elem): \n            (yield y) \n      else: \n         (yield elem)",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def decodestring(s): \n    return binascii.a2b_base64(s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def callbackmethod(callback): \n    return callback",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addPost(klass, name, func): \n    _addHook(klass, name, POST, func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tpstats(): \n    return _nodetool('tpstats')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _fwd_bem_homog_solution(solids, nps): \n    return _fwd_bem_multi_solution(solids, None, nps)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_path(G, nodes, **attr): \n    G.add_edges_from(pairwise(nodes), **attr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def script_retcode(name, source, saltenv='base', args=None, template=None, exec_driver=None, stdin=None, python_shell=True, output_loglevel='debug', ignore_retcode=False, use_vt=False, keep_env=None): \n    return _script(name, source, saltenv=saltenv, args=args, template=template, exec_driver=exec_driver, stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, ignore_retcode=ignore_retcode, use_vt=use_vt, keep_env=keep_env)['retcode']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_names(): \n    return [n.strip() for n in codecs.open(os.path.join('data', 'names.txt'), 'rb', 'utf8').readlines()]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def toBitList(inbyte): \n    return [getBit(inbyte, b) for b in range(8)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def LINEARREG(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.LINEARREG, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_default_zone(zone): \n    return __firewall_cmd('--set-default-zone={0}'.format(zone))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_struct_declarator_list_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_maker(engine, autocommit=True, expire_on_commit=False): \n    return sqlalchemy.orm.sessionmaker(bind=engine, class_=Session, autocommit=autocommit, expire_on_commit=expire_on_commit, query_cls=Query)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ids(**kwargs): \n    return _wrapper('IDS', **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def notify_init_event(agent_type, agent): \n    registry.notify(agent_type, events.AFTER_INIT, agent, agent=agent)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_ascii(input_string): \n    return unicodedata.normalize('NFKD', unicode(input_string)).encode('ascii', 'ignore')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(linter): \n    linter.register_checker(MisdesignChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skel_load(skeleton, inventory): \n    for (key, value) in skeleton.iteritems(): \n      _parse_belongs_to(key, belongs_to=value['belongs_to'], inventory=inventory)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def disable(): \n    if _status_csf(): \n      return __csf_cmd('-x')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def translateVector3Paths(paths, translateVector3): \n    for path in paths: \n      translateVector3Path(path, translateVector3)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def addXMLFromObjects(depth, objects, output): \n    for object in objects: \n      object.addXML(depth, output)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_command_read(p): \n    p[0] = ('READ', p[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_list_of(class_, objects): \n    return [class_.from_metadata(obj) for obj in objects]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_ref_to_error(error): \n    return get_ref_to_doc(('webapi2.0-error-%s' % error.code))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_hook(component, translation, script, env=None, *args): \n    if script: \n      command = [script] \n      if args: \n         command.extend(args) \n      if component.is_repo_link: \n         target = component.linked_subproject \n      else: \n         target = component \n      environment = {'WL_VCS': target.vcs, 'WL_REPO': target.repo, 'WL_PATH': target.get_path(), 'WL_FILEMASK': component.filemask, 'WL_TEMPLATE': component.template, 'WL_FILE_FORMAT': component.file_format, 'WL_BRANCH': component.branch} \n      if translation: \n         environment['WL_LANGUAGE'] = translation.language_code \n      if (env is not None): \n         environment.update(env) \n      try: \n         subprocess.check_call(command, env=get_clean_env(environment), cwd=component.get_path()) \n         return True \n      except (OSError, subprocess.CalledProcessError) as err: \n         component.log_error('failed   to   run   hook   script   %s:   %s', script, err) \n         return False",
        "line_count": 19,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def root_test(): \n    return (getpass.getuser() == 'root')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addXIntersectionIndexesFromLoop(frontOverWidth, loop, solidIndex, xIntersectionIndexLists, width, yList): \n    for pointIndex in xrange(len(loop)): \n      pointBegin = loop[pointIndex] \n      pointEnd = loop[((pointIndex + 1) % len(loop))] \n      if (pointBegin.imag > pointEnd.imag): \n         pointOriginal = pointBegin \n         pointBegin = pointEnd \n         pointEnd = pointOriginal \n      fillBegin = int(math.ceil(((pointBegin.imag / width) - frontOverWidth))) \n      fillBegin = max(0, fillBegin) \n      fillEnd = int(math.ceil(((pointEnd.imag / width) - frontOverWidth))) \n      fillEnd = min(len(xIntersectionIndexLists), fillEnd) \n      if (fillEnd > fillBegin): \n         secondMinusFirstComplex = (pointEnd - pointBegin) \n         secondMinusFirstImaginaryOverReal = (secondMinusFirstComplex.real / secondMinusFirstComplex.imag) \n         beginRealMinusImaginary = (pointBegin.real - (pointBegin.imag * secondMinusFirstImaginaryOverReal)) \n         for fillLine in xrange(fillBegin, fillEnd): \n            xIntersection = ((yList[fillLine] * secondMinusFirstImaginaryOverReal) + beginRealMinusImaginary) \n            xIntersectionIndexList = xIntersectionIndexLists[fillLine] \n            xIntersectionIndexList.append(XIntersectionIndex(solidIndex, xIntersection))",
        "line_count": 19,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def parse(s, *args, **kwargs): \n    return parser.parse(unicode(s), *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return SynopsisRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def all_filters(): \n    return CellFilterHandler().get_all_classes()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wrap_output(output, encoding): \n    return codecs.getwriter(encoding)((output.buffer if hasattr(output, u'buffer') else output))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _community_defaults(): \n    return {'mode': 'ro'}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connect_to_cloud_networks(region=None): \n    return _create_client(ep_name='compute:network', region=region)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def askquestion(title=None, message=None, **options): \n    return _show(title, message, QUESTION, YESNO, **options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def on_off(tag): \n    return ['OFF', 'ON'][tag]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def R(seqn): \n    for i in seqn: \n      (yield i)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def trace(expr): \n    return Trace(expr).doit()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_session(session): \n    Session.remove_one(session)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def aes_cipher_from_key(key): \n    return AES.new(key, AES.MODE_CBC, generate_aes_iv(key))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_in(path): \n    with open(path, 'r') as file_fd: \n      return file_fd.read()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def process_envs(attrs=None, where=None): \n    return _osquery_cmd(table='process_envs', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape(string): \n    return ('\"%s\"' % string.replace('\\\\', '\\\\\\\\').replace(' DCTB ', '\\\\t').replace('\\r', '\\\\r').replace('\\n', '\\\\n').replace('\"', '\\\\\"'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(): \n    capabilities.register(driver.init_handler, constants.AGENT_TYPE_OVS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_go_binary(target, source, env): \n    return _generate_go_package(target, source, env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __del(collection, item, _sa_initiator=None): \n    if (_sa_initiator is not False): \n      executor = collection._sa_adapter \n      if executor: \n         executor.fire_remove_event(item, _sa_initiator)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def validate_loop(doctype, name, lft, rgt): \n    if (name in frappe.db.sql_list((u'select   name   from   `tab%s`   where   lft   <=   %s   and   rgt   >=   %s' % (doctype, u'%s', u'%s')), (lft, rgt))): \n      frappe.throw(_(u'Item   cannot   be   added   to   its   own   descendents'), NestedSetRecursionError)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def hex_encode(data, errors='strict'): \n    return (serial.to_bytes([int(h, 16) for h in data.split()]), len(data))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _ToWebSafeString(per_result, internal_cursor): \n    return ((str(per_result) + ':') + internal_cursor)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def multitarget(): \n    with ContextManager((1, 2, (3, (4, 5)))) as (a, b, (c, (d, e))): \n      print ('%s   %s   %s   %s   %s' % (a, b, c, d, e))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(source, filename='<unknown>', mode='exec'): \n    return compile(source, filename, mode, PyCF_ONLY_AST)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _quote_domain(domain): \n    return urllib.quote(domain.replace('.', '%2E'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def demo_multiposition_feature(): \n    postag(templates=[Template(Pos([(-3), (-2), (-1)]))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def notify(_context, message): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _future_expose_api_anonymous_and_sessionless(func, to_json=True): \n    return _future_expose_api(func, to_json=to_json, user_required=False, user_or_session_required=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def running_under_virtualenv(): \n    return hasattr(sys, 'real_prefix')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setitem(a, b, c): \n    a[b] = c",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_ssl_connection_selector(connection, app_blame, client_hello): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(migration): \n    MIGRATIONS[migration.__name__] = migration",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def S_ISSOCK(mode): \n    return (S_IFMT(mode) == S_IFSOCK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_custom_objects(): \n    return _GLOBAL_CUSTOM_OBJECTS",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PackFloat(name, value, pbvalue): \n    pbvalue.set_doublevalue(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return RelayModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_type_size(param): \n    return TYPE_LEN.get(param, 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def message_url_path(course_key, access_point): \n    return RestrictedCourse.message_url_path(course_key, access_point)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ToDatastoreError(err): \n    return _DatastoreExceptionFromErrorCodeAndDetail(err.application_error, err.error_detail)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def relevent_issue(issue, after): \n    return (closed_issue(issue, after) and issue_completed(issue) and issue_section(issue))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def globfind(directory, pattern, blacklist=STD_BLACKLIST): \n    for (curdir, dirnames, filenames) in os.walk(directory): \n      _handle_blacklist(blacklist, dirnames, filenames) \n      for fname in fnmatch.filter(filenames, pattern): \n         (yield join(curdir, fname))",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _view_on_get(request): \n    return ((request.method == 'GET') and acl.action_allowed(request, 'ReviewerTools', 'View'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sanitize_results_data(results_dirpath): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_server_running(server): \n    if (server.poll() is not None): \n      raise RuntimeError(('Server   died   unexpectedly!   Check   %s' % (LOG_FILE,)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _basic_auth_str(username, password): \n    return ('Basic   ' + b64encode(('%s:%s' % (username, password)).encode('latin1')).strip().decode('latin1'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _custom_getter(resource, resource_id): \n    if (resource == quotasv2.RESOURCE_NAME): \n      return quota.get_tenant_quotas(resource_id)[quotasv2.RESOURCE_NAME]",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _validate_mutable_mappings(a, b): \n    if (not (isinstance(a, MutableMapping) and isinstance(b, MutableMapping))): \n      myvars = [] \n      for x in [a, b]: \n         try: \n            myvars.append(dumps(x)) \n         except: \n            myvars.append(to_native(x)) \n      raise AnsibleError(\"failed   to   combine   variables,   expected   dicts   but   got   a   '{0}'   and   a   '{1}':   \\n{2}\\n{3}\".format(a.__class__.__name__, b.__class__.__name__, myvars[0], myvars[1]))",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def lock_exists(name): \n    return os.path.exists(get_lock_path(name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getpath(environ): \n    return ''.join([quote(environ.get('SCRIPT_NAME', '')), quote(environ.get('PATH_INFO', ''))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dup_neg(f, K): \n    return [(- coeff) for coeff in f]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def drop_user(name): \n    _run_as_pg(('psql   -c   \"DROP   USER   %(name)s;\"' % locals()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def recommend_for_brands(brands): \n    return []",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([DemoBinarySensor('Basement   Floor   Wet', False, 'moisture'), DemoBinarySensor('Movement   Backyard', True, 'motion')])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render_markdown(markdown_text): \n    return markdown.markdown(markdown_text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mu_law_decode(output, quantization_channels): \n    with tf.name_scope('decode'): \n      mu = (quantization_channels - 1) \n      casted = tf.cast(output, tf.float32) \n      signal = ((2 * (casted / mu)) - 1) \n      magnitude = ((1 / mu) * (((1 + mu) ** abs(signal)) - 1)) \n      return (tf.sign(signal) * magnitude)",
        "line_count": 6,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def broadcasted_add(a, b): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return SkeinisoRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_plugins(namespace, interface=None, check_extras=True, load_now=False): \n    return _DB.add_namespace(namespace, interface, check_extras, load_now)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_freezing_date(posting_date, adv_adj=False): \n    if (not adv_adj): \n      acc_frozen_upto = frappe.db.get_value(u'Accounts   Settings', None, u'acc_frozen_upto') \n      if acc_frozen_upto: \n         frozen_accounts_modifier = frappe.db.get_value(u'Accounts   Settings', None, u'frozen_accounts_modifier') \n         if ((getdate(posting_date) <= getdate(acc_frozen_upto)) and (not (frozen_accounts_modifier in frappe.get_roles()))): \n            frappe.throw(_(u'You   are   not   authorized   to   add   or   update   entries   before   {0}').format(formatdate(acc_frozen_upto)))",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def getos(): \n    return {'os': __pillar__.get('proxy', {}).get('driver', '')}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def atof(s): \n    return _float(s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hazard(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_biweight_location_axis(): \n    with NumpyRNGContext(12345): \n      ny = 100 \n      nx = 200 \n      data = normal(5, 2, (ny, nx)) \n      bw = funcs.biweight_location(data, axis=0) \n      bwi = [] \n      for i in range(nx): \n         bwi.append(funcs.biweight_location(data[:, i])) \n      bwi = np.array(bwi) \n      assert_allclose(bw, bwi) \n      bw = funcs.biweight_location(data, axis=1) \n      bwi = [] \n      for i in range(ny): \n         bwi.append(funcs.biweight_location(data[i, :])) \n      bwi = np.array(bwi) \n      assert_allclose(bw, bwi)",
        "line_count": 16,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def skew(a): \n    return array([[0, (- a[2]), a[1]], [a[2], 0, (- a[0])], [(- a[1]), a[0], 0]])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def move_task_by_id(task_id, dest, **kwargs): \n    return move_by_idmap({task_id: dest}, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tagTest(tag, comment=None): \n    return getattr(pytest.mark, tag)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def containsAny(str, set): \n    return (1 in [(c in str) for c in set])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def quantiles(data, nbins_or_partition_bounds): \n    return apply_along_axis(qcut, 1, data, q=nbins_or_partition_bounds, labels=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def avg_pool2d(input, kernel_size, stride=None, padding=0, ceil_mode=False, count_include_pad=True): \n    return _functions.thnn.AvgPool2d(kernel_size, stride, padding, ceil_mode, count_include_pad)(input)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___getitem__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_headers_from_response(response, *headers): \n    response.remove_headers = headers",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_net(t): \n    return (100 * (0.5 + (0.5 * np.sin(((0.7 * np.pi) * (t - 0.1))))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_declaration_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_number(dtype): \n    return (is_float(dtype) or ('int' in dtype.name) or ('long' in dtype.name) or ('short' in dtype.name))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_purchase_endpoint(): \n    return get_processor_config().get('PURCHASE_ENDPOINT', '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_raw(previous, current, property_name): \n    return current[property_name]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_tags(value): \n    return re.sub('<[^>]*?>', '', force_unicode(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def no_fsl_course_data(): \n    return (not ((u'FSL_COURSE_DATA' in os.environ) and os.path.isdir(os.path.abspath(os.environ[u'FSL_COURSE_DATA']))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def in6_ismnladdr(str): \n    return in6_isincluded(str, 'ff01::', 16)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_surf2bem(): \n    check_usage(mne_surf2bem)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cblas_header_text(): \n    return '\\n            //#include   <stddef.h>\\n\\n            #undef   __BEGIN_DECLS\\n            #undef   __END_DECLS\\n            #ifdef   __cplusplus\\n            #define   __BEGIN_DECLS   extern   \"C\"   {\\n            #define   __END_DECLS   }\\n            #else\\n            #define   __BEGIN_DECLS                                 /*   empty   */\\n            #define   __END_DECLS                                       /*   empty   */\\n            #endif\\n\\n            __BEGIN_DECLS\\n\\n            #define   MOD   %\\n\\n            /*\\n               *   Enumerated   and   derived   types\\n               */\\n            #define   CBLAS_INDEX   size_t      /*   this   may   vary   between   platforms   */\\n\\n            enum   CBLAS_ORDER   {CblasRowMajor=101,   CblasColMajor=102};\\n            enum   CBLAS_TRANSPOSE   {CblasNoTrans=111,   CblasTrans=112,   CblasConjTrans=113};\\n            enum   CBLAS_UPLO   {CblasUpper=121,   CblasLower=122};\\n            enum   CBLAS_DIAG   {CblasNonUnit=131,   CblasUnit=132};\\n            enum   CBLAS_SIDE   {CblasLeft=141,   CblasRight=142};\\n\\n            float      cblas_sdsdot(const   int   N,   const   float   alpha,   const   float   *X,\\n                                                                        const   int   incX,   const   float   *Y,   const   int   incY);\\n            double   cblas_dsdot(const   int   N,   const   float   *X,   const   int   incX,   const   float   *Y,\\n                                                                     const   int   incY);\\n            float      cblas_sdot(const   int   N,   const   float      *X,   const   int   incX,\\n                                                                  const   float      *Y,   const   int   incY);\\n            double   cblas_ddot(const   int   N,   const   double   *X,   const   int   incX,\\n                                                                  const   double   *Y,   const   int   incY);\\n\\n            /*\\n               *   Functions   having   prefixes   Z   and   C   only\\n               */\\n            void         cblas_cdotu_sub(const   int   N,   const   void   *X,   const   int   incX,\\n                                                                                 const   void   *Y,   const   int   incY,   void   *dotu);\\n            void         cblas_cdotc_sub(const   int   N,   const   void   *X,   const   int   incX,\\n                                                                                 const   void   *Y,   const   int   incY,   void   *dotc);\\n\\n            void         cblas_zdotu_sub(const   int   N,   const   void   *X,   const   int   incX,\\n                                                                                 const   void   *Y,   const   int   incY,   void   *dotu);\\n            void         cblas_zdotc_sub(const   int   N,   const   void   *X,   const   int   incX,\\n                                                                                 const   void   *Y,   const   int   incY,   void   *dotc);\\n\\n\\n            /*\\n               *   Functions   having   prefixes   S   D   SC   DZ\\n               */\\n            float      cblas_snrm2(const   int   N,   const   float   *X,   const   int   incX);\\n            float      cblas_sasum(const   int   N,   const   float   *X,   const   int   incX);\\n\\n            double   cblas_dnrm2(const   int   N,   const   double   *X,   const   int   incX);\\n            double   cblas_dasum(const   int   N,   const   double   *X,   const   int   incX);\\n\\n            float      cblas_scnrm2(const   int   N,   const   void   *X,   const   int   incX);\\n            float      cblas_scasum(const   int   N,   const   void   *X,   const   int   incX);\\n\\n            double   cblas_dznrm2(const   int   N,   const   void   *X,   const   int   incX);\\n            double   cblas_dzasum(const   int   N,   const   void   *X,   const   int   incX);\\n\\n\\n            /*\\n               *   Functions   having   standard   4   prefixes   (S   D   C   Z)\\n               */\\n            CBLAS_INDEX   cblas_isamax(const   int   N,   const   float      *X,   const   int   incX);\\n            CBLAS_INDEX   cblas_idamax(const   int   N,   const   double   *X,   const   int   incX);\\n            CBLAS_INDEX   cblas_icamax(const   int   N,   const   void         *X,   const   int   incX);\\n            CBLAS_INDEX   cblas_izamax(const   int   N,   const   void         *X,   const   int   incX);\\n\\n            /*\\n               *   ===========================================================================\\n               *   Prototypes   for   level   1   BLAS   routines\\n               *   ===========================================================================\\n               */\\n\\n            /*\\n               *   Routines   with   standard   4   prefixes   (s,   d,   c,   z)\\n               */\\n            void   cblas_sswap(const   int   N,   float   *X,   const   int   incX,\\n                                                               float   *Y,   const   int   incY);\\n            void   cblas_scopy(const   int   N,   const   float   *X,   const   int   incX,\\n                                                               float   *Y,   const   int   incY);\\n            void   cblas_saxpy(const   int   N,   const   float   alpha,   const   float   *X,\\n                                                               const   int   incX,   float   *Y,   const   int   incY);\\n\\n            void   cblas_dswap(const   int   N,   double   *X,   const   int   incX,\\n                                                               double   *Y,   const   int   incY);\\n            void   cblas_dcopy(const   int   N,   const   double   *X,   const   int   incX,\\n                                                               double   *Y,   const   int   incY);\\n            void   cblas_daxpy(const   int   N,   const   double   alpha,   const   double   *X,\\n                                                               const   int   incX,   double   *Y,   const   int   incY);\\n\\n            void   cblas_cswap(const   int   N,   void   *X,   const   int   incX,\\n                                                               void   *Y,   const   int   incY);\\n            void   cblas_ccopy(const   int   N,   const   void   *X,   const   int   incX,\\n                                                               void   *Y,   const   int   incY);\\n            void   cblas_caxpy(const   int   N,   const   void   *alpha,   const   void   *X,\\n                                                               const   int   incX,   void   *Y,   const   int   incY);\\n\\n            void   cblas_zswap(const   int   N,   void   *X,   const   int   incX,\\n                                                               void   *Y,   const   int   incY);\\n            void   cblas_zcopy(const   int   N,   const   void   *X,   const   int   incX,\\n                                                               void   *Y,   const   int   incY);\\n            void   cblas_zaxpy(const   int   N,   const   void   *alpha,   const   void   *X,\\n                                                               const   int   incX,   void   *Y,   const   int   incY);\\n\\n\\n            /*\\n               *   Routines   with   S   and   D   prefix   only\\n               */\\n            void   cblas_srotg(float   *a,   float   *b,   float   *c,   float   *s);\\n            void   cblas_srotmg(float   *d1,   float   *d2,   float   *b1,   const   float   b2,   float   *P);\\n            void   cblas_srot(const   int   N,   float   *X,   const   int   incX,\\n                                                            float   *Y,   const   int   incY,   const   float   c,   const   float   s);\\n            void   cblas_srotm(const   int   N,   float   *X,   const   int   incX,\\n                                                            float   *Y,   const   int   incY,   const   float   *P);\\n\\n            void   cblas_drotg(double   *a,   double   *b,   double   *c,   double   *s);\\n            void   cblas_drotmg(double   *d1,   double   *d2,   double   *b1,   const   double   b2,   double   *P);\\n            void   cblas_drot(const   int   N,   double   *X,   const   int   incX,\\n                                                            double   *Y,   const   int   incY,   const   double   c,   const   double      s);\\n            void   cblas_drotm(const   int   N,   double   *X,   const   int   incX,\\n                                                            double   *Y,   const   int   incY,   const   double   *P);\\n\\n\\n            /*\\n               *   Routines   with   S   D   C   Z   CS   and   ZD   prefixes\\n               */\\n            void   cblas_sscal(const   int   N,   const   float   alpha,   float   *X,   const   int   incX);\\n            void   cblas_dscal(const   int   N,   const   double   alpha,   double   *X,   const   int   incX);\\n            void   cblas_cscal(const   int   N,   const   void   *alpha,   void   *X,   const   int   incX);\\n            void   cblas_zscal(const   int   N,   const   void   *alpha,   void   *X,   const   int   incX);\\n            void   cblas_csscal(const   int   N,   const   float   alpha,   void   *X,   const   int   incX);\\n            void   cblas_zdscal(const   int   N,   const   double   alpha,   void   *X,   const   int   incX);\\n\\n            /*\\n               *   ===========================================================================\\n               *   Prototypes   for   level   2   BLAS\\n               *   ===========================================================================\\n               */\\n\\n            /*\\n               *   Routines   with   standard   4   prefixes   (S,   D,   C,   Z)\\n               */\\n            void   cblas_sgemv(const   enum   CBLAS_ORDER   order,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   int   M,   const   int   N,\\n                                                               const   float   alpha,   const   float   *A,   const   int   lda,\\n                                                               const   float   *X,   const   int   incX,   const   float   beta,\\n                                                               float   *Y,   const   int   incY);\\n            void   cblas_sgbmv(const   enum   CBLAS_ORDER   order,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   int   M,   const   int   N,\\n                                                               const   int   KL,   const   int   KU,   const   float   alpha,\\n                                                               const   float   *A,   const   int   lda,   const   float   *X,\\n                                                               const   int   incX,   const   float   beta,   float   *Y,   const   int   incY);\\n            void   cblas_strmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   float   *A,   const   int   lda,\\n                                                               float   *X,   const   int   incX);\\n            void   cblas_stbmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   int   K,   const   float   *A,   const   int   lda,\\n                                                               float   *X,   const   int   incX);\\n            void   cblas_stpmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   float   *Ap,   float   *X,   const   int   incX);\\n            void   cblas_strsv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   float   *A,   const   int   lda,   float   *X,\\n                                                               const   int   incX);\\n            void   cblas_stbsv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   int   K,   const   float   *A,   const   int   lda,\\n                                                               float   *X,   const   int   incX);\\n            void   cblas_stpsv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   float   *Ap,   float   *X,   const   int   incX);\\n\\n            void   cblas_dgemv(const   enum   CBLAS_ORDER   order,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   int   M,   const   int   N,\\n                                                               const   double   alpha,   const   double   *A,   const   int   lda,\\n                                                               const   double   *X,   const   int   incX,   const   double   beta,\\n                                                               double   *Y,   const   int   incY);\\n            void   cblas_dgbmv(const   enum   CBLAS_ORDER   order,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   int   M,   const   int   N,\\n                                                               const   int   KL,   const   int   KU,   const   double   alpha,\\n                                                               const   double   *A,   const   int   lda,   const   double   *X,\\n                                                               const   int   incX,   const   double   beta,   double   *Y,   const   int   incY);\\n            void   cblas_dtrmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   double   *A,   const   int   lda,\\n                                                               double   *X,   const   int   incX);\\n            void   cblas_dtbmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   int   K,   const   double   *A,   const   int   lda,\\n                                                               double   *X,   const   int   incX);\\n            void   cblas_dtpmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   double   *Ap,   double   *X,   const   int   incX);\\n            void   cblas_dtrsv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   double   *A,   const   int   lda,   double   *X,\\n                                                               const   int   incX);\\n            void   cblas_dtbsv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   int   K,   const   double   *A,   const   int   lda,\\n                                                               double   *X,   const   int   incX);\\n            void   cblas_dtpsv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   double   *Ap,   double   *X,   const   int   incX);\\n\\n            void   cblas_cgemv(const   enum   CBLAS_ORDER   order,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   int   M,   const   int   N,\\n                                                               const   void   *alpha,   const   void   *A,   const   int   lda,\\n                                                               const   void   *X,   const   int   incX,   const   void   *beta,\\n                                                               void   *Y,   const   int   incY);\\n            void   cblas_cgbmv(const   enum   CBLAS_ORDER   order,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   int   M,   const   int   N,\\n                                                               const   int   KL,   const   int   KU,   const   void   *alpha,\\n                                                               const   void   *A,   const   int   lda,   const   void   *X,\\n                                                               const   int   incX,   const   void   *beta,   void   *Y,   const   int   incY);\\n            void   cblas_ctrmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   void   *A,   const   int   lda,\\n                                                               void   *X,   const   int   incX);\\n            void   cblas_ctbmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   int   K,   const   void   *A,   const   int   lda,\\n                                                               void   *X,   const   int   incX);\\n            void   cblas_ctpmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   void   *Ap,   void   *X,   const   int   incX);\\n            void   cblas_ctrsv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   void   *A,   const   int   lda,   void   *X,\\n                                                               const   int   incX);\\n            void   cblas_ctbsv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   int   K,   const   void   *A,   const   int   lda,\\n                                                               void   *X,   const   int   incX);\\n            void   cblas_ctpsv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   void   *Ap,   void   *X,   const   int   incX);\\n\\n            void   cblas_zgemv(const   enum   CBLAS_ORDER   order,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   int   M,   const   int   N,\\n                                                               const   void   *alpha,   const   void   *A,   const   int   lda,\\n                                                               const   void   *X,   const   int   incX,   const   void   *beta,\\n                                                               void   *Y,   const   int   incY);\\n            void   cblas_zgbmv(const   enum   CBLAS_ORDER   order,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   int   M,   const   int   N,\\n                                                               const   int   KL,   const   int   KU,   const   void   *alpha,\\n                                                               const   void   *A,   const   int   lda,   const   void   *X,\\n                                                               const   int   incX,   const   void   *beta,   void   *Y,   const   int   incY);\\n            void   cblas_ztrmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   void   *A,   const   int   lda,\\n                                                               void   *X,   const   int   incX);\\n            void   cblas_ztbmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   int   K,   const   void   *A,   const   int   lda,\\n                                                               void   *X,   const   int   incX);\\n            void   cblas_ztpmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   void   *Ap,   void   *X,   const   int   incX);\\n            void   cblas_ztrsv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   void   *A,   const   int   lda,   void   *X,\\n                                                               const   int   incX);\\n            void   cblas_ztbsv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   int   K,   const   void   *A,   const   int   lda,\\n                                                               void   *X,   const   int   incX);\\n            void   cblas_ztpsv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransA,   const   enum   CBLAS_DIAG   Diag,\\n                                                               const   int   N,   const   void   *Ap,   void   *X,   const   int   incX);\\n\\n\\n            /*\\n               *   Routines   with   S   and   D   prefixes   only\\n               */\\n            void   cblas_ssymv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   int   N,   const   float   alpha,   const   float   *A,\\n                                                               const   int   lda,   const   float   *X,   const   int   incX,\\n                                                               const   float   beta,   float   *Y,   const   int   incY);\\n            void   cblas_ssbmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   int   N,   const   int   K,   const   float   alpha,   const   float   *A,\\n                                                               const   int   lda,   const   float   *X,   const   int   incX,\\n                                                               const   float   beta,   float   *Y,   const   int   incY);\\n            void   cblas_sspmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   int   N,   const   float   alpha,   const   float   *Ap,\\n                                                               const   float   *X,   const   int   incX,\\n                                                               const   float   beta,   float   *Y,   const   int   incY);\\n            void   cblas_sger(const   enum   CBLAS_ORDER   order,   const   int   M,   const   int   N,\\n                                                            const   float   alpha,   const   float   *X,   const   int   incX,\\n                                                            const   float   *Y,   const   int   incY,   float   *A,   const   int   lda);\\n            void   cblas_ssyr(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                            const   int   N,   const   float   alpha,   const   float   *X,\\n                                                            const   int   incX,   float   *A,   const   int   lda);\\n            void   cblas_sspr(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                            const   int   N,   const   float   alpha,   const   float   *X,\\n                                                            const   int   incX,   float   *Ap);\\n            void   cblas_ssyr2(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                            const   int   N,   const   float   alpha,   const   float   *X,\\n                                                            const   int   incX,   const   float   *Y,   const   int   incY,   float   *A,\\n                                                            const   int   lda);\\n            void   cblas_sspr2(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                            const   int   N,   const   float   alpha,   const   float   *X,\\n                                                            const   int   incX,   const   float   *Y,   const   int   incY,   float   *A);\\n\\n            void   cblas_dsymv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   int   N,   const   double   alpha,   const   double   *A,\\n                                                               const   int   lda,   const   double   *X,   const   int   incX,\\n                                                               const   double   beta,   double   *Y,   const   int   incY);\\n            void   cblas_dsbmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   int   N,   const   int   K,   const   double   alpha,   const   double   *A,\\n                                                               const   int   lda,   const   double   *X,   const   int   incX,\\n                                                               const   double   beta,   double   *Y,   const   int   incY);\\n            void   cblas_dspmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   int   N,   const   double   alpha,   const   double   *Ap,\\n                                                               const   double   *X,   const   int   incX,\\n                                                               const   double   beta,   double   *Y,   const   int   incY);\\n            void   cblas_dger(const   enum   CBLAS_ORDER   order,   const   int   M,   const   int   N,\\n                                                            const   double   alpha,   const   double   *X,   const   int   incX,\\n                                                            const   double   *Y,   const   int   incY,   double   *A,   const   int   lda);\\n            void   cblas_dsyr(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                            const   int   N,   const   double   alpha,   const   double   *X,\\n                                                            const   int   incX,   double   *A,   const   int   lda);\\n            void   cblas_dspr(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                            const   int   N,   const   double   alpha,   const   double   *X,\\n                                                            const   int   incX,   double   *Ap);\\n            void   cblas_dsyr2(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                            const   int   N,   const   double   alpha,   const   double   *X,\\n                                                            const   int   incX,   const   double   *Y,   const   int   incY,   double   *A,\\n                                                            const   int   lda);\\n            void   cblas_dspr2(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                            const   int   N,   const   double   alpha,   const   double   *X,\\n                                                            const   int   incX,   const   double   *Y,   const   int   incY,   double   *A);\\n\\n\\n            /*\\n               *   Routines   with   C   and   Z   prefixes   only\\n               */\\n            void   cblas_chemv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   int   N,   const   void   *alpha,   const   void   *A,\\n                                                               const   int   lda,   const   void   *X,   const   int   incX,\\n                                                               const   void   *beta,   void   *Y,   const   int   incY);\\n            void   cblas_chbmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   int   N,   const   int   K,   const   void   *alpha,   const   void   *A,\\n                                                               const   int   lda,   const   void   *X,   const   int   incX,\\n                                                               const   void   *beta,   void   *Y,   const   int   incY);\\n            void   cblas_chpmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   int   N,   const   void   *alpha,   const   void   *Ap,\\n                                                               const   void   *X,   const   int   incX,\\n                                                               const   void   *beta,   void   *Y,   const   int   incY);\\n            void   cblas_cgeru(const   enum   CBLAS_ORDER   order,   const   int   M,   const   int   N,\\n                                                               const   void   *alpha,   const   void   *X,   const   int   incX,\\n                                                               const   void   *Y,   const   int   incY,   void   *A,   const   int   lda);\\n            void   cblas_cgerc(const   enum   CBLAS_ORDER   order,   const   int   M,   const   int   N,\\n                                                               const   void   *alpha,   const   void   *X,   const   int   incX,\\n                                                               const   void   *Y,   const   int   incY,   void   *A,   const   int   lda);\\n            void   cblas_cher(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                            const   int   N,   const   float   alpha,   const   void   *X,   const   int   incX,\\n                                                            void   *A,   const   int   lda);\\n            void   cblas_chpr(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                            const   int   N,   const   float   alpha,   const   void   *X,\\n                                                            const   int   incX,   void   *A);\\n            void   cblas_cher2(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,   const   int   N,\\n                                                            const   void   *alpha,   const   void   *X,   const   int   incX,\\n                                                            const   void   *Y,   const   int   incY,   void   *A,   const   int   lda);\\n            void   cblas_chpr2(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,   const   int   N,\\n                                                            const   void   *alpha,   const   void   *X,   const   int   incX,\\n                                                            const   void   *Y,   const   int   incY,   void   *Ap);\\n\\n            void   cblas_zhemv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   int   N,   const   void   *alpha,   const   void   *A,\\n                                                               const   int   lda,   const   void   *X,   const   int   incX,\\n                                                               const   void   *beta,   void   *Y,   const   int   incY);\\n            void   cblas_zhbmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   int   N,   const   int   K,   const   void   *alpha,   const   void   *A,\\n                                                               const   int   lda,   const   void   *X,   const   int   incX,\\n                                                               const   void   *beta,   void   *Y,   const   int   incY);\\n            void   cblas_zhpmv(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   int   N,   const   void   *alpha,   const   void   *Ap,\\n                                                               const   void   *X,   const   int   incX,\\n                                                               const   void   *beta,   void   *Y,   const   int   incY);\\n            void   cblas_zgeru(const   enum   CBLAS_ORDER   order,   const   int   M,   const   int   N,\\n                                                               const   void   *alpha,   const   void   *X,   const   int   incX,\\n                                                               const   void   *Y,   const   int   incY,   void   *A,   const   int   lda);\\n            void   cblas_zgerc(const   enum   CBLAS_ORDER   order,   const   int   M,   const   int   N,\\n                                                               const   void   *alpha,   const   void   *X,   const   int   incX,\\n                                                               const   void   *Y,   const   int   incY,   void   *A,   const   int   lda);\\n            void   cblas_zher(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                            const   int   N,   const   double   alpha,   const   void   *X,   const   int   incX,\\n                                                            void   *A,   const   int   lda);\\n            void   cblas_zhpr(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                            const   int   N,   const   double   alpha,   const   void   *X,\\n                                                            const   int   incX,   void   *A);\\n            void   cblas_zher2(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,   const   int   N,\\n                                                            const   void   *alpha,   const   void   *X,   const   int   incX,\\n                                                            const   void   *Y,   const   int   incY,   void   *A,   const   int   lda);\\n            void   cblas_zhpr2(const   enum   CBLAS_ORDER   order,   const   enum   CBLAS_UPLO   Uplo,   const   int   N,\\n                                                            const   void   *alpha,   const   void   *X,   const   int   incX,\\n                                                            const   void   *Y,   const   int   incY,   void   *Ap);\\n\\n            /*\\n               *   ===========================================================================\\n               *   Prototypes   for   level   3   BLAS\\n               *   ===========================================================================\\n               */\\n\\n            /*\\n               *   Routines   with   standard   4   prefixes   (S,   D,   C,   Z)\\n               */\\n            void   cblas_sgemm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_TRANSPOSE   TransA,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransB,   const   int   M,   const   int   N,\\n                                                               const   int   K,   const   float   alpha,   const   float   *A,\\n                                                               const   int   lda,   const   float   *B,   const   int   ldb,\\n                                                               const   float   beta,   float   *C,   const   int   ldc);\\n            void   cblas_ssymm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_SIDE   Side,\\n                                                               const   enum   CBLAS_UPLO   Uplo,   const   int   M,   const   int   N,\\n                                                               const   float   alpha,   const   float   *A,   const   int   lda,\\n                                                               const   float   *B,   const   int   ldb,   const   float   beta,\\n                                                               float   *C,   const   int   ldc);\\n            void   cblas_ssyrk(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   Trans,   const   int   N,   const   int   K,\\n                                                               const   float   alpha,   const   float   *A,   const   int   lda,\\n                                                               const   float   beta,   float   *C,   const   int   ldc);\\n            void   cblas_ssyr2k(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                                  const   enum   CBLAS_TRANSPOSE   Trans,   const   int   N,   const   int   K,\\n                                                                  const   float   alpha,   const   float   *A,   const   int   lda,\\n                                                                  const   float   *B,   const   int   ldb,   const   float   beta,\\n                                                                  float   *C,   const   int   ldc);\\n            void   cblas_strmm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_SIDE   Side,\\n                                                               const   enum   CBLAS_UPLO   Uplo,   const   enum   CBLAS_TRANSPOSE   TransA,\\n                                                               const   enum   CBLAS_DIAG   Diag,   const   int   M,   const   int   N,\\n                                                               const   float   alpha,   const   float   *A,   const   int   lda,\\n                                                               float   *B,   const   int   ldb);\\n            void   cblas_strsm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_SIDE   Side,\\n                                                               const   enum   CBLAS_UPLO   Uplo,   const   enum   CBLAS_TRANSPOSE   TransA,\\n                                                               const   enum   CBLAS_DIAG   Diag,   const   int   M,   const   int   N,\\n                                                               const   float   alpha,   const   float   *A,   const   int   lda,\\n                                                               float   *B,   const   int   ldb);\\n\\n            void   cblas_dgemm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_TRANSPOSE   TransA,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransB,   const   int   M,   const   int   N,\\n                                                               const   int   K,   const   double   alpha,   const   double   *A,\\n                                                               const   int   lda,   const   double   *B,   const   int   ldb,\\n                                                               const   double   beta,   double   *C,   const   int   ldc);\\n            void   cblas_dsymm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_SIDE   Side,\\n                                                               const   enum   CBLAS_UPLO   Uplo,   const   int   M,   const   int   N,\\n                                                               const   double   alpha,   const   double   *A,   const   int   lda,\\n                                                               const   double   *B,   const   int   ldb,   const   double   beta,\\n                                                               double   *C,   const   int   ldc);\\n            void   cblas_dsyrk(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   Trans,   const   int   N,   const   int   K,\\n                                                               const   double   alpha,   const   double   *A,   const   int   lda,\\n                                                               const   double   beta,   double   *C,   const   int   ldc);\\n            void   cblas_dsyr2k(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                                  const   enum   CBLAS_TRANSPOSE   Trans,   const   int   N,   const   int   K,\\n                                                                  const   double   alpha,   const   double   *A,   const   int   lda,\\n                                                                  const   double   *B,   const   int   ldb,   const   double   beta,\\n                                                                  double   *C,   const   int   ldc);\\n            void   cblas_dtrmm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_SIDE   Side,\\n                                                               const   enum   CBLAS_UPLO   Uplo,   const   enum   CBLAS_TRANSPOSE   TransA,\\n                                                               const   enum   CBLAS_DIAG   Diag,   const   int   M,   const   int   N,\\n                                                               const   double   alpha,   const   double   *A,   const   int   lda,\\n                                                               double   *B,   const   int   ldb);\\n            void   cblas_dtrsm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_SIDE   Side,\\n                                                               const   enum   CBLAS_UPLO   Uplo,   const   enum   CBLAS_TRANSPOSE   TransA,\\n                                                               const   enum   CBLAS_DIAG   Diag,   const   int   M,   const   int   N,\\n                                                               const   double   alpha,   const   double   *A,   const   int   lda,\\n                                                               double   *B,   const   int   ldb);\\n\\n            void   cblas_cgemm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_TRANSPOSE   TransA,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransB,   const   int   M,   const   int   N,\\n                                                               const   int   K,   const   void   *alpha,   const   void   *A,\\n                                                               const   int   lda,   const   void   *B,   const   int   ldb,\\n                                                               const   void   *beta,   void   *C,   const   int   ldc);\\n            void   cblas_csymm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_SIDE   Side,\\n                                                               const   enum   CBLAS_UPLO   Uplo,   const   int   M,   const   int   N,\\n                                                               const   void   *alpha,   const   void   *A,   const   int   lda,\\n                                                               const   void   *B,   const   int   ldb,   const   void   *beta,\\n                                                               void   *C,   const   int   ldc);\\n            void   cblas_csyrk(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   Trans,   const   int   N,   const   int   K,\\n                                                               const   void   *alpha,   const   void   *A,   const   int   lda,\\n                                                               const   void   *beta,   void   *C,   const   int   ldc);\\n            void   cblas_csyr2k(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                                  const   enum   CBLAS_TRANSPOSE   Trans,   const   int   N,   const   int   K,\\n                                                                  const   void   *alpha,   const   void   *A,   const   int   lda,\\n                                                                  const   void   *B,   const   int   ldb,   const   void   *beta,\\n                                                                  void   *C,   const   int   ldc);\\n            void   cblas_ctrmm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_SIDE   Side,\\n                                                               const   enum   CBLAS_UPLO   Uplo,   const   enum   CBLAS_TRANSPOSE   TransA,\\n                                                               const   enum   CBLAS_DIAG   Diag,   const   int   M,   const   int   N,\\n                                                               const   void   *alpha,   const   void   *A,   const   int   lda,\\n                                                               void   *B,   const   int   ldb);\\n            void   cblas_ctrsm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_SIDE   Side,\\n                                                               const   enum   CBLAS_UPLO   Uplo,   const   enum   CBLAS_TRANSPOSE   TransA,\\n                                                               const   enum   CBLAS_DIAG   Diag,   const   int   M,   const   int   N,\\n                                                               const   void   *alpha,   const   void   *A,   const   int   lda,\\n                                                               void   *B,   const   int   ldb);\\n\\n            void   cblas_zgemm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_TRANSPOSE   TransA,\\n                                                               const   enum   CBLAS_TRANSPOSE   TransB,   const   int   M,   const   int   N,\\n                                                               const   int   K,   const   void   *alpha,   const   void   *A,\\n                                                               const   int   lda,   const   void   *B,   const   int   ldb,\\n                                                               const   void   *beta,   void   *C,   const   int   ldc);\\n            void   cblas_zsymm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_SIDE   Side,\\n                                                               const   enum   CBLAS_UPLO   Uplo,   const   int   M,   const   int   N,\\n                                                               const   void   *alpha,   const   void   *A,   const   int   lda,\\n                                                               const   void   *B,   const   int   ldb,   const   void   *beta,\\n                                                               void   *C,   const   int   ldc);\\n            void   cblas_zsyrk(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   Trans,   const   int   N,   const   int   K,\\n                                                               const   void   *alpha,   const   void   *A,   const   int   lda,\\n                                                               const   void   *beta,   void   *C,   const   int   ldc);\\n            void   cblas_zsyr2k(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                                  const   enum   CBLAS_TRANSPOSE   Trans,   const   int   N,   const   int   K,\\n                                                                  const   void   *alpha,   const   void   *A,   const   int   lda,\\n                                                                  const   void   *B,   const   int   ldb,   const   void   *beta,\\n                                                                  void   *C,   const   int   ldc);\\n            void   cblas_ztrmm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_SIDE   Side,\\n                                                               const   enum   CBLAS_UPLO   Uplo,   const   enum   CBLAS_TRANSPOSE   TransA,\\n                                                               const   enum   CBLAS_DIAG   Diag,   const   int   M,   const   int   N,\\n                                                               const   void   *alpha,   const   void   *A,   const   int   lda,\\n                                                               void   *B,   const   int   ldb);\\n            void   cblas_ztrsm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_SIDE   Side,\\n                                                               const   enum   CBLAS_UPLO   Uplo,   const   enum   CBLAS_TRANSPOSE   TransA,\\n                                                               const   enum   CBLAS_DIAG   Diag,   const   int   M,   const   int   N,\\n                                                               const   void   *alpha,   const   void   *A,   const   int   lda,\\n                                                               void   *B,   const   int   ldb);\\n\\n\\n            /*\\n               *   Routines   with   prefixes   C   and   Z   only\\n               */\\n            void   cblas_chemm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_SIDE   Side,\\n                                                               const   enum   CBLAS_UPLO   Uplo,   const   int   M,   const   int   N,\\n                                                               const   void   *alpha,   const   void   *A,   const   int   lda,\\n                                                               const   void   *B,   const   int   ldb,   const   void   *beta,\\n                                                               void   *C,   const   int   ldc);\\n            void   cblas_cherk(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   Trans,   const   int   N,   const   int   K,\\n                                                               const   float   alpha,   const   void   *A,   const   int   lda,\\n                                                               const   float   beta,   void   *C,   const   int   ldc);\\n            void   cblas_cher2k(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                                  const   enum   CBLAS_TRANSPOSE   Trans,   const   int   N,   const   int   K,\\n                                                                  const   void   *alpha,   const   void   *A,   const   int   lda,\\n                                                                  const   void   *B,   const   int   ldb,   const   float   beta,\\n                                                                  void   *C,   const   int   ldc);\\n\\n            void   cblas_zhemm(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_SIDE   Side,\\n                                                               const   enum   CBLAS_UPLO   Uplo,   const   int   M,   const   int   N,\\n                                                               const   void   *alpha,   const   void   *A,   const   int   lda,\\n                                                               const   void   *B,   const   int   ldb,   const   void   *beta,\\n                                                               void   *C,   const   int   ldc);\\n            void   cblas_zherk(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                               const   enum   CBLAS_TRANSPOSE   Trans,   const   int   N,   const   int   K,\\n                                                               const   double   alpha,   const   void   *A,   const   int   lda,\\n                                                               const   double   beta,   void   *C,   const   int   ldc);\\n            void   cblas_zher2k(const   enum   CBLAS_ORDER   Order,   const   enum   CBLAS_UPLO   Uplo,\\n                                                                  const   enum   CBLAS_TRANSPOSE   Trans,   const   int   N,   const   int   K,\\n                                                                  const   void   *alpha,   const   void   *A,   const   int   lda,\\n                                                                  const   void   *B,   const   int   ldb,   const   double   beta,\\n                                                                  void   *C,   const   int   ldc);\\n\\n            void   cblas_xerbla(int   p,   const   char   *rout,   const   char   *form,   ...);\\n\\n            __END_DECLS\\n            '",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exception(msg, *args): \n    error(*((msg,) + args), **{'exc_info': 1})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_metadata_delete(context, volume_id, key, meta_type=common.METADATA_TYPES.user): \n    return IMPL.volume_metadata_delete(context, volume_id, key, meta_type)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test2(): \n    buildPackage('/Users/dinu/Desktop/reportlab', Title='reportlab', Version='1.10', Description=\"ReportLab's   Open   Source   PDF   toolkit.\", DefaultLocation='/Applications/ReportLab', Relocatable='YES')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_choice(value, choices): \n    if ((choices is not None) and (value not in choices)): \n      names = u',   '.join((repr(c) for c in choices)) \n      raise ValueError((u'must   be   one   of   %s,   not   %s.' % (names, value)))",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def parseAvailable(available_text): \n    return [s.strip() for s in available_text.split(',')]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_protected_type(obj): \n    return isinstance(obj, _PROTECTED_TYPES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_read_trace(): \n    return copy.deepcopy(_read_trace)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_db_ips(): \n    return list(set(([get_db_master_ip()] + get_db_slave_ips())))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def incident_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_resource(ext_mgr): \n    return wsgi.Resource(AttachmentsController(ext_mgr))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def a2s(arr): \n    return ''.join((chr(b) for b in arr))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def register_view_op_c_code(type, code, version=()): \n    ViewOp.c_code_and_version[type] = (code, version)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rowwise_rank(array, mask=None): \n    return argsort(argsort(array))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def package(payload): \n    return msgpack.dumps(payload)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def virtual_interface_delete_by_instance(context, instance_id): \n    return IMPL.virtual_interface_delete_by_instance(context, instance_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index(): \n    return s3db.cms_index(module, alt_function='index_alt')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ifnotequal(parser, token): \n    return do_ifequal(parser, token, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def markers(): \n    print(('Available   markers:   \\n   -   ' + '\\n   -   '.join(_marker_types)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _resolve_aliases(bindings): \n    for (var, value) in bindings.items(): \n      while (isinstance(value, Variable) and (value in bindings)): \n         value = bindings[var] = bindings[value]",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_html_help_exe(): \n    if (os.name == 'nt'): \n      hhc_base = 'C:\\\\Program   Files%s\\\\HTML   Help   Workshop\\\\hhc.exe' \n      for hhc_exe in ((hhc_base % ''), (hhc_base % '   (x86)')): \n         if osp.isfile(hhc_exe): \n            return hhc_exe \n      else: \n         return",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def default_ssl_validate(): \n    return SSL_VALIDATE.get()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delkey(key): \n    setval(key, None, destructive=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_rocket(): \n    data.rocket()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def interactive(b): \n    rcParams[u'interactive'] = b",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def verify_username(strategy, backend, details, user=None, **kwargs): \n    if ((not user) and (u'username' in details)): \n      if User.objects.filter(username__iexact=details[u'username']).exists(): \n         raise AuthAlreadyAssociated(backend, _(u'This   username   is   already   taken.   Please   choose   another.'))",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def safepath(p): \n    return p.replace('/', os.sep)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_master(): \n    return {'master': __opts__.get('master', '')}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def warning_msg(text): \n    msg(colorize(('Warning:   ' + str(text)), 'yellow'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CreateSigningKeyset(name): \n    return _CreateKeyset(name, keyinfo.SIGN_AND_VERIFY, keyinfo.HMAC_SHA1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compose(*funcs, **kfuncs): \n    return reduce((lambda f, g: (lambda *args, **kaargs: f(g(*args, **kaargs)))), funcs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getoutput(cmd): \n    return getstatusoutput(cmd)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unjelly(sexp, taster=DummySecurityOptions(), persistentLoad=None, invoker=None): \n    return _Unjellier(taster, persistentLoad, invoker).unjellyFull(sexp)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return __virtualname__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_exchange_func(a, b): \n    raise NotImplementedError('TODO:   implement   the   function')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def msg_file(package, type_): \n    return roslib.packages.resource_file(package, 'msg', (type_ + EXT))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _usec_to_sec(t_sec): \n    return (t_sec / 1000000.0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def notify_unreplied(): \n    for email_account in frappe.get_all(u'Email   Account', u'name', filters={u'enable_incoming': 1, u'notify_if_unreplied': 1}): \n      email_account = frappe.get_doc(u'Email   Account', email_account.name) \n      if email_account.append_to: \n         for comm in frappe.get_all(u'Communication', u'name', filters={u'sent_or_received': u'Received', u'reference_doctype': email_account.append_to, u'unread_notification_sent': 0, u'email_account': email_account.name, u'creation': (u'<', (datetime.now() - timedelta(seconds=((email_account.unreplied_for_mins or 30) * 60)))), u'creation': (u'>', (datetime.now() - timedelta(seconds=(((email_account.unreplied_for_mins or 30) * 60) * 3))))}): \n            comm = frappe.get_doc(u'Communication', comm.name) \n            if (frappe.db.get_value(comm.reference_doctype, comm.reference_name, u'status') == u'Open'): \n               frappe.sendmail(recipients=email_account.get_unreplied_notification_emails(), content=comm.content, subject=comm.subject, doctype=comm.reference_doctype, name=comm.reference_name) \n            comm.db_set(u'unread_notification_sent', 1)",
        "line_count": 8,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def required_event_fields(next_value_columns, previous_value_columns): \n    return {TS_FIELD_NAME, SID_FIELD_NAME, EVENT_DATE_FIELD_NAME}.union(viewvalues(next_value_columns), viewvalues(previous_value_columns))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PartitionedReadIterator(filename_list, quiet=False, single=False): \n    for filename in filename_list: \n      for (index, read, pid) in read_partition_file(filename): \n         if (not quiet): \n            if ((index % 100000) == 0): \n               print('...x2', index, file=sys.stderr) \n         (yield (read, pid)) \n         if single: \n            break",
        "line_count": 8,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def elemwise_mul(a, b): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_document_json(document): \n    return json.dumps({u'id': document.id, u'title': document.title, u'url': document.url, u'edit_link': reverse(u'wagtaildocs:edit', args=(document.id,))})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def groups(attrs=None, where=None): \n    return _osquery_cmd(table='groups', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def manual_updates_required(request, updates, template_name=u'admin/manual_updates_required.html'): \n    return render_to_response(template_name, RequestContext(request, {u'updates': [render_to_string(update_template_name, RequestContext(request, extra_context)) for (update_template_name, extra_context) in updates]}))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def adjacency_matrix(G, nodelist=None, weight='weight'): \n    return nx.to_scipy_sparse_matrix(G, nodelist=nodelist, weight=weight)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def recommend_for_user(user): \n    return []",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_delete(context, data_dict): \n    return _group_or_org_delete(context, data_dict)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def source(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unzip(filename, directory='.', overwrite=0): \n    for i in unzipIter(filename, directory, overwrite): \n      pass",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ErrorUpdate(msg): \n    PrintUpdate(msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def output(string_): \n    ctx.output += str(string_)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reorder_to(l, order): \n    return [el[1] for el in sorted(zip(order, l), key=(lambda el: el[0]))]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _dashCapitalize(name): \n    return '-'.join([word.capitalize() for word in name.split('-')])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def value_type(value): \n    return {'METASPLOIT_PATH': True, 'METASPLOIT_DATABASE': True, 'ENCOUNT': False, 'AUTO_MIGRATE': False, 'CUSTOM_EXE': True, 'BACKDOOR_EXECUTION': False, 'METERPRETER_MULTI_SCRIPT': False, 'LINUX_METERPRETER_MULTI_SCRIPT': False, 'METERPRETER_MULTI_COMMANDS': True, 'LINUX_METERPRETER_MULTI_COMMANDS': True, 'METASPLOIT_IFRAME_PORT': False, 'ETTERCAP': False, 'ETTERCAP_PATH': True, 'ETTERCAP_DSNIFF_INTERFACE': True, 'DSNIFF': False, 'AUTO_DETECT': False, 'SENDMAIL': False, 'EMAIL_PROVIDER': True, 'WEBATTACK_EMAIL': False, 'APACHE_SERVER': False, 'APACHE_DIRECTORY': True, 'WEB_PORT': False, 'JAVA_ID_PARAM': True, 'JAVA_REPEATER': False, 'JAVA_TIME': True, 'WEBATTACK_SSL': False, 'SELF_SIGNED_CERT': False, 'PEM_CLIENT': True, 'PEM_SERVER': True, 'WEBJACKING_TIME': False, 'COMMAND_CENTER_INTERFACE': True, 'COMMAND_CENTER_PORT': False, 'SET_INTERACTIVE_SHELL': False, 'TERMINAL': True, 'DIGITAL_SIGNATURE_STEAL': False, 'UPX_ENCODE': False, 'UPX_PATH': True, 'AUTO_REDIRECT': False, 'HARVESTER_REDIRECT': False, 'HARVESTER_URL': True, 'UNC_EMBED': False, 'ACCESS_POINT_SSID': True, 'AIRBASE_NG_PATH': True, 'DNSSPOOF_PATH': True, 'AP_CHANNEL': False, 'POWERSHELL_INJECTION': False, 'POWERSHELL_VERBOSE': False, 'WEB_PROFILER': False, 'OSX_REVERSE_PORT': False, 'LINUX_REVERSE_PORT': False, 'USER_AGENT_STRING': True, 'SET_SHELL_STAGER': False, 'AUTOMATIC_LISTENER': False, 'METASPLOIT_MODE': False, 'HARVESTER_LOG': True, 'STAGE_ENCODING': False, 'TRACK_EMAIL_ADDRESSES': False, 'WGET_DEEP': True}.get(value, 'ERROR')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_schedules(profile=None, api_key=None): \n    return salt.utils.pagerduty.list_items('schedules', 'id', __salt__['config.option'](profile), api_key, opts=__opts__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rev_list(repo, commits, outstream=sys.stdout): \n    with open_repo_closing(repo) as r: \n      for entry in r.get_walker(include=[r[c].id for c in commits]): \n         outstream.write((entry.commit.id + '\\n'))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_permission_codename(action, opts): \n    return ('%s_%s' % (action, opts.model_name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_plain_int64(file_obj, count): \n    return struct.unpack('<{0}q'.format(count).encode(u'utf-8'), file_obj.read((8 * count)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resolve_references(config, definitions): \n    for (key, value) in config.items(): \n      if isinstance(value, dict): \n         if ((len(value) == 1) and (list(value.keys())[0] == '$ref')): \n            config[key] = definitions[list(value.values())[0]] \n         else: \n            resolve_references(value, definitions)",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def escape_html_characters(content): \n    return re.sub('<!--.*-->', '', re.sub('<!\\\\[CDATA\\\\[.*\\\\]\\\\]>', '', re.sub('(\\\\s|&nbsp;|//)+', '   ', html_to_text(content))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Any(other, arrexpr, operator=operators.eq): \n    return arrexpr.any(other, operator)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deactivate_all(): \n    _active[currentThread()] = gettext_module.NullTranslations()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_jid(jid): \n    with _get_serv(ret=None, commit=True) as cur: \n      sql = 'SELECT   id,   full_ret   FROM   `salt_returns`\\n                                                WHERE   `jid`   =   %s' \n      cur.execute(sql, (jid,)) \n      data = cur.fetchall() \n      ret = {} \n      if data: \n         for (minion, full_ret) in data: \n            ret[minion] = json.loads(full_ret) \n      return ret",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def warning(msg, t=None, obj=None): \n    root.log(msg, level=WARNING, t=t, obj=obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'lift', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return (__virtualname__ if HAS_WHOOSH else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _sort_candidates(candidates): \n    return sorted(candidates, key=(lambda match: match.distance))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def param_set(param, value): \n    return (_run_varnishadm('param.set', [param, str(value)])['retcode'] == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def linear(x): \n    return x",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ensure_context_attribute_exists(context, name, default_value=None): \n    if (not hasattr(context, name)): \n      setattr(context, name, default_value)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _same_filesystem(path1, path2): \n    return (os.lstat(path1).st_dev == os.lstat(path2).st_dev)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def install_as_MySQLdb(): \n    sys.modules['MySQLdb'] = sys.modules['_mysql'] = sys.modules['pymysql']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def item(): \n    return s3db.supply_item_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_hive_cmd(hivecmd, check_return_code=True): \n    return run_hive(['-e', hivecmd], check_return_code)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_folders(root='.', folders=[]): \n    for folder in folders: \n      create_folder(root, folder)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def show(server_id, profile=None): \n    return server_show(server_id, profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def proj_plane_pixel_scales(wcs): \n    return np.sqrt((wcs.pixel_scale_matrix ** 2).sum(axis=0, dtype=np.float))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_date_format(format='medium', locale=LC_TIME): \n    return Locale.parse(locale).date_formats[format]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xydist(p1=(0.0, 0.0), p2=(0.0, 0.0)): \n    return numpy.sqrt((pow((p1[0] - p2[0]), 2) + pow((p1[1] - p2[1]), 2)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_add_security_group(context, instance_id, security_group_id): \n    return IMPL.instance_add_security_group(context, instance_id, security_group_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_title_slugs(page): \n    for title in page.title_set.all(): \n      (old_slug, old_path) = (title.slug, title.path) \n      title.slug = get_available_slug(title) \n      if ((title.slug != old_slug) or (title.path != old_path)): \n         title.save()",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def escape(s): \n    return urllib.quote(s.encode('utf-8'), safe='~')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_remove(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_color(in_image, mode): \n    return in_image.convert(mode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_python_3(): \n    return (sys.version_info[0] == 3)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_netconf(**kwargs): \n    return Netconf(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeCentered(data): \n    return (data - data.mean(axis=0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices((VeraLight(device, VERA_CONTROLLER) for device in VERA_DEVICES['light']))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def target_update(target, deps, cmd): \n    if target_outdated(target, deps): \n      system(cmd)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_field_seq(p): \n    _parse_seq(p)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def name_for_scalar_relationship(base, local_cls, referred_cls, constraint): \n    return referred_cls.__name__.lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def annotate_content_models_by_youtube_id(channel='khan', language='en', youtube_ids=None): \n    annotate_content_models(channel=channel, language=language, ids=youtube_ids, iterator_content_items=iterator_content_items_by_youtube_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _node_name(node): \n    return (node.name or '{}   {}'.format(node.manufacturer_name, node.product_name))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def filter_raising_callables(it, exception, *args, **kwargs): \n    for elem in it: \n      try: \n         (yield elem(*args, **kwargs)) \n      except exception: \n         pass",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def course_starts_within(start_date, look_ahead_days): \n    return ((datetime.now(utc) + timedelta(days=look_ahead_days)) > start_date)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLHAMMER(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLHAMMER)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_current_version_name(): \n    return _split_version_id(os.environ['CURRENT_VERSION_ID'])[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def string_to_bool(string): \n    return STRING_BOOLS[string.strip().lower()]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def humanBitRate(size): \n    return ''.join((humanBitSize(size), '/sec'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _writeFlattenedData(state, write, result): \n    while True: \n      try: \n         element = next(state) \n      except StopIteration: \n         result.callback(None) \n      except: \n         result.errback() \n      else: \n         def cby(original): \n            _writeFlattenedData(state, write, result) \n            return original \n         element.addCallbacks(cby, result.errback) \n      break",
        "line_count": 13,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def internal(f): \n    return f",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def algorithm_list(): \n    return ['metagenomeSeq_fitZIG', 'DESeq2_nbinom']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def slash_esc(string): \n    return string.replace('/', '\\\\/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_get_all_by_project(context, project_id, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None): \n    return IMPL.group_get_all_by_project(context, project_id, filters=filters, marker=marker, limit=limit, offset=offset, sort_keys=sort_keys, sort_dirs=sort_dirs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_basics(): \n    import_file_to_module('basic', 'tests/resources/importer/basic.hy')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_enumerator_list_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_balance_sheet(code): \n    if code.isdigit(): \n      request = Request((ct.SINA_BALANCESHEET_URL % code)) \n      text = urlopen(request, timeout=10).read() \n      text = text.decode('GBK') \n      text = text.replace(' DCTB \\n', '\\r\\n') \n      text = text.replace(' DCTB ', ',') \n      df = pd.read_csv(StringIO(text), dtype={'code': 'object'}) \n      return df",
        "line_count": 8,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _check_preload(raw, msg): \n    if (not raw.preload): \n      raise RuntimeError((msg + '   requires   raw   data   to   be   loaded.   Use   preload=True   (or   string)   in   the   constructor   or   raw.load_data().'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def runPermutations(_): \n    raise DeprecationWarning('nupic.swarming.permutations_runner.runPermutations()   is   no   longer   implemented.   It   has   been   replaced   with   a   simpler   function   for   library   usage:   nupic.swarming.permutations_runner.runWithConfig().   See   docs   at   https://github.com/numenta/nupic/wiki/Running-Swarms#running-a-swarm-programmatically   for   details.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def camelcase(text): \n    return (text[0] + ''.join(text.title().split('_'))[1:])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_seeded_random_loader(seed, dates, sids): \n    return SeededRandomLoader(seed, TestingDataSet.columns, dates, sids)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_seqs_to_fastq(fp, seqs, write_mode='w'): \n    with open(fp, write_mode) as f: \n      for s in seqs: \n         f.write(format_fastq_record(s[0], s[1], s[3]))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def add_shortcut_to_tooltip(action, context, name): \n    action.setToolTip((action.toolTip() + ('   (%s)' % get_shortcut(context=context, name=name))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return FenceModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def use_read_replica_if_available(queryset): \n    return (queryset.using('read_replica') if ('read_replica' in settings.DATABASES) else queryset)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_file_gid(path): \n    return os.stat(path).st_gid",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_get_by_args(context, host, binary): \n    return IMPL.service_get_by_args(context, host, binary)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def preBuild(site): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_permission(user, project, permission): \n    return (has_group_perm(user, permission, project=project) or check_owner(user, project, permission) or user.has_perm(permission))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def pack(pyObject): \n    return bz2.compress(json.dumps(pyObject))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def basedir_def(*args): \n    return os.path.join('$pybasedir', *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def devname(pcap_name): \n    return ifaces.devname(pcap_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def removeIntersection(loop): \n    for (pointIndex, ahead) in enumerate(loop): \n      behind = loop[(((pointIndex + len(loop)) - 1) % len(loop))] \n      behindEnd = loop[(((pointIndex + len(loop)) - 2) % len(loop))] \n      behindMidpoint = (0.5 * (behind + behindEnd)) \n      aheadEnd = loop[((pointIndex + 1) % len(loop))] \n      aheadMidpoint = (0.5 * (ahead + aheadEnd)) \n      normalizedSegment = (behind - behindMidpoint) \n      normalizedSegmentLength = abs(normalizedSegment) \n      if (normalizedSegmentLength > 0.0): \n         normalizedSegment /= normalizedSegmentLength \n         segmentYMirror = complex(normalizedSegment.real, (- normalizedSegment.imag)) \n         behindRotated = (segmentYMirror * behind) \n         behindMidpointRotated = (segmentYMirror * behindMidpoint) \n         aheadRotated = (segmentYMirror * ahead) \n         aheadMidpointRotated = (segmentYMirror * aheadMidpoint) \n         y = behindRotated.imag \n         xIntersection = euclidean.getXIntersectionIfExists(aheadRotated, aheadMidpointRotated, y) \n         if (xIntersection != None): \n            if ((xIntersection > min(behindMidpointRotated.real, behindRotated.real)) and (xIntersection < max(behindMidpointRotated.real, behindRotated.real))): \n               intersectionPoint = (normalizedSegment * complex(xIntersection, y)) \n               loop[(((pointIndex + len(loop)) - 1) % len(loop))] = intersectionPoint \n               del loop[pointIndex] \n               return",
        "line_count": 23,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def release_in_episode(episode_id, release_id): \n    with Session() as session: \n      release = session.query(Release).filter((Release.id == release_id)).one() \n      return (release.episode_id == episode_id)",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dlls_in_dir(directory): \n    return files_in_dir(directory, ['*.so', '*.dll', '*.dylib'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_filename(fn): \n    return re.sub('[^0-9a-zA-Z]+', '-', fn)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def script(server_): \n    return salt.utils.cloud.os_script(config.get_cloud_config_value('script', server_, __opts__), server_, __opts__, salt.utils.cloud.salt_config_to_yaml(salt.utils.cloud.minion_config(__opts__, server_)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cpuid(attrs=None, where=None): \n    return _osquery_cmd(table='cpuid', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def provide_worker_fake_entries(group): \n    return _WORKER_FAKE_ENTRIES.get(group, [])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ceil(x): \n    return int(math.ceil(x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return __virtualname__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def next_char(input_iter): \n    for ch in input_iter: \n      if (ch != '\\\\'): \n         (yield (ch, False)) \n         continue \n      ch = input_iter.next() \n      representative = ESCAPE_MAPPINGS.get(ch, ch) \n      if (representative is None): \n         continue \n      (yield (representative, True))",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def find_matching_headers(name, headers): \n    return [h for h in headers if (h.lower() == name.lower())]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def connect_toggle(toggle, fn): \n    toggle.toggled.connect(fn)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clearScreen(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decode(value): \n    return value.encode('raw_unicode_escape').decode('utf-8')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def colorx(clip, factor): \n    return clip.fl_image((lambda pic: np.minimum(255, (factor * pic)).astype('uint8')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_service_manager(host_reference): \n    return host_reference.configManager.serviceSystem",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addToMenu(master, menu, repository, window): \n    settings.addPluginsParentToMenu(skeinforge_meta.getPluginsDirectoryPath(), menu, __file__, skeinforge_meta.getPluginFileNames())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processXMLElement(xmlElement): \n    group.processShape(Intersection, xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_import_fallback(): \n    return (fabs(1.0), no_such_function(1.0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_bad_path(path, base): \n    return (not resolved(joinpath(base, path)).startswith(base))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_subcollections(collection): \n    for name in collection.database.collection_names(): \n      cleaned = name[:name.rfind('.')] \n      if ((cleaned != collection.name) and cleaned.startswith(collection.name)): \n         (yield cleaned)",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def default(value, arg): \n    return (value or arg)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def localised_number(number): \n    return numbers.format_number(number, locale=i18n.get_lang())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, *args, **kwargs): \n    return BlowfishCipher(key, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backup_get_all_by_project(context, project_id, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None): \n    return IMPL.backup_get_all_by_project(context, project_id, filters=filters, marker=marker, limit=limit, offset=offset, sort_keys=sort_keys, sort_dirs=sort_dirs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lt(value, arg): \n    return (value < int(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_folder_size(path): \n    if os.path.exists(path): \n      return flt(subprocess.check_output([u'du', u'-ms', path]).split()[0], 2)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def check_file_content(path, expected_content): \n    with open(path) as input: \n      return (expected_content == input.read())",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_type_qualifier_list_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _initialise(bot): \n    BridgeInstance(bot, 'samplebridge', IncomingMessages)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random_unif(rng, dim, low=1, high=10): \n    return rng.uniform(low, high, size=dim).astype(theano.config.floatX)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MinimalQualParser(infile, value_cast_f=int, full_header=False): \n    for rec in FastaFinder(infile): \n      curr_id = rec[0][1:] \n      curr_qual = '   '.join(rec[1:]) \n      try: \n         parts = asarray(curr_qual.split(), dtype=value_cast_f) \n      except ValueError: \n         raise QiimeParseError('Invalid   qual   file.   Check   the   format   of   the   qual   files.') \n      if full_header: \n         curr_pid = curr_id \n      else: \n         curr_pid = curr_id.split()[0] \n      (yield (curr_pid, parts))",
        "line_count": 12,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def create_keyspace_simple(name, replication_factor, durable_writes=True, connections=None): \n    _create_keyspace(name, durable_writes, 'SimpleStrategy', {'replication_factor': replication_factor}, connections=connections)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def order_modified_iter(cursor, trim, sentinel): \n    for rows in iter((lambda : cursor.fetchmany(GET_ITERATOR_CHUNK_SIZE)), sentinel): \n      (yield [r[:(- trim)] for r in rows])",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def index_alt(): \n    s3_redirect_default(URL(f='post'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return AuxoptModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_enabled(): \n    return BrandingApiConfig.current().enabled",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add(mountpoint, *devices, **kwargs): \n    return _restripe(mountpoint, 'add', *devices, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_vocab_and_sums(vocab, sums, vocab_filename, sums_filename): \n    with open(os.path.join(FLAGS.output_dir, vocab_filename), 'w') as vocab_out: \n      with open(os.path.join(FLAGS.output_dir, sums_filename), 'w') as sums_out: \n         for (tok, cnt) in itertools.izip(vocab, sums): \n            print >>vocab_out, tok \n            print >>sums_out, cnt",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def mptt_result_list(cl): \n    return {u'cl': cl, u'result_hidden_fields': list(result_hidden_fields(cl)), u'result_headers': list(result_headers(cl)), u'results': list(mptt_results(cl))}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _NewFieldsFromPb(field_list): \n    return [_NewFieldFromPb(f) for f in field_list]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def register(): \n    return 'manage'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Replay(*args): \n    for mock in args: \n      mock._Replay()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def iter_resolve_and_parse_specs(rel_path, specs): \n    for spec in specs: \n      (spec_path, target_name) = parse_spec(spec, rel_path) \n      (yield SingleAddress(spec_path, target_name))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def qr(a, name=None): \n    return tsqr(a, name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flavor_extra_specs_update_or_create(context, flavor_id, extra_specs): \n    IMPL.flavor_extra_specs_update_or_create(context, flavor_id, extra_specs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validator_data_dict(): \n    return {('other   key',): 'other   value'}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floyd_warshall(G, weight='weight'): \n    return floyd_warshall_predecessor_and_distance(G, weight=weight)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_node_get_all(context): \n    return IMPL.compute_node_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cellname(rowx, colx): \n    return ('%s%d' % (colname(colx), (rowx + 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _received_message_pb_to_mapping(received_message_pb): \n    return {'ackId': received_message_pb.ack_id, 'message': _message_pb_to_mapping(received_message_pb.message)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_enumerator_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ClearUserHistory(): \n    _history.clear()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_suffixes(): \n    return [_PY_SOURCE_SUFFIX]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def overlapsForUnrelatedAreas(n, w, radius, repetitions=100, verbose=False): \n    return overlapsForRelativeAreas(n, w, np.array([0, 0]), radius, dPosition=np.array([0, (radius * 10)]), num=repetitions, verbose=verbose)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bump_product_signal_handler(sender, instance, **kwargs): \n    bump_cache_for_product(instance)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def network_get_all_by_uuids(context, network_uuids, project_only='allow_none'): \n    return IMPL.network_get_all_by_uuids(context, network_uuids, project_only=project_only)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getSheetThickness(elementNode): \n    return getCascadeFloatWithoutSelf(3.0, elementNode, 'sheetThickness')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, hashAlgo=None, mgfunc=None, label=b('')): \n    return PKCS1OAEP_Cipher(key, hashAlgo, mgfunc, label)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def seconds(s): \n    return (float(s) / SEC_PER_DAY)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def authorize_user_context(context, user_id): \n    if is_user_context(context): \n      if (not context.user_id): \n         raise exception.NotAuthorized() \n      elif (context.user_id != user_id): \n         raise exception.NotAuthorized()",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def urlparse(url): \n    return ModifiedParseResult(*stdlib_urlparse(url))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_hop_by_hop_header(header): \n    return (header.lower() in _hop_by_hop_headers)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(handle): \n    while True: \n      record = __read(handle) \n      if (not record): \n         break \n      (yield record)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def cc_library_config(append=None, **kwargs): \n    blade_config.update_config('cc_library_config', append, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def package_files(*paths): \n    _PACKAGE_DATA.extend(paths)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def identifier(s): \n    return ((u'\"' + s.replace(u'\"', u'\"\"').replace(u'\\x00', '')) + u'\"')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tostring(row): \n    return row.tobytes()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chprofile(name, profile): \n    return update(name=name, profile=profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_SAMPProxyError(): \n    SAMPProxyError('test', 'any')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hex2color(s): \n    return tuple([(int(n, 16) / 255.0) for n in (s[1:3], s[3:5], s[5:7])])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def delete(config, unused_plugins): \n    cert_manager.delete(config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def distorted_bounding_box_crop(image, bbox, min_object_covered=0.1, aspect_ratio_range=(0.75, 1.33), area_range=(0.05, 1.0), max_attempts=100, scope=None): \n    with tf.name_scope(scope, 'distorted_bounding_box_crop', [image, bbox]): \n      sample_distorted_bounding_box = tf.image.sample_distorted_bounding_box(tf.shape(image), bounding_boxes=bbox, min_object_covered=min_object_covered, aspect_ratio_range=aspect_ratio_range, area_range=area_range, max_attempts=max_attempts, use_image_if_no_bounding_boxes=True) \n      (bbox_begin, bbox_size, distort_bbox) = sample_distorted_bounding_box \n      cropped_image = tf.slice(image, bbox_begin, bbox_size) \n      return (cropped_image, distort_bbox)",
        "line_count": 5,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _split_comment(lineno, comment): \n    return [((lineno + index), line) for (index, line) in enumerate(comment.splitlines())]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def t_NEWLINE(t): \n    t.lexer.lineno += 1",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_instance(instance): \n    if ((not instance.config_drive) and required_by(instance)): \n      instance.config_drive = True",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def format_rfc3339(datetime_instance): \n    return (datetime_instance.isoformat('T') + 'Z')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_inside_lambda(): \n    return (lambda : ((yield 1), (yield 2)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_safe_search_from_pb(safe_search): \n    return SafeSearchAnnotation.from_pb(safe_search)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decode_and_decrypt(encoded_data, key): \n    return aes_decrypt(base64.urlsafe_b64decode(encoded_data), key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new_limit(): \n    ArticleCache.do.new_limit(cfg.cache_limit.get_int())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def csrf_exempt(view_func): \n    return csrf_response_exempt(csrf_view_exempt(view_func))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def HaveGoodGUI(): \n    return ('pywin.framework.startup' in sys.modules)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_users(): \n    return list_items('user')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_null_list(start, end, addr_space): \n    return null_list(read_addr_range(start, end, addr_space), (end - start))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sm_backend_conf_update(context, sm_backend_conf_id, values): \n    return IMPL.sm_backend_conf_update(context, sm_backend_conf_id, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getDiagonalSwitchedTetragrid(angleDegrees, diagonals): \n    return getDiagonalSwitchedTetragridByRadians(math.radians(angleDegrees), diagonals)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_anonymized_user(): \n    return HMAC(key=config.WEB_SECRET, msg=get_user()).digest()[:9].encode('base64').rstrip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_process(progname, sensor): \n    return subprocess.Popen((CMDLINE % {'progname': progname, 'sensor': SENSORS.get(sensor, sensor)}), shell=True, stdin=subprocess.PIPE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def renewal_filename_for_lineagename(config, lineagename): \n    return (os.path.join(config.renewal_configs_dir, lineagename) + '.conf')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connect_to_cloud_dns(region=None): \n    return _create_client(ep_name='dns', region=region)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_static_welcome_message(): \n    return '\\n<h3>Search   Help</h3>\\n<ul><li>The   display   below   the   line   is   an   example   of   the   output   the   browser\\nshows   you   when   you   enter   a   search   word.   The   search   word   was   <b>green</b>.</li>\\n<li>The   search   result   shows   for   different   parts   of   speech   the   <b>synsets</b>\\ni.e.   different   meanings   for   the   word.</li>\\n<li>All   underlined   texts   are   hypertext   links.   There   are   two   types   of   links:\\nword   links   and   others.   Clicking   a   word   link   carries   out   a   search   for   the   word\\nin   the   Wordnet   database.</li>\\n<li>Clicking   a   link   of   the   other   type   opens   a   display   section   of   data   attached\\nto   that   link.   Clicking   that   link   a   second   time   closes   the   section   again.</li>\\n<li>Clicking   <u>S:</u>   opens   a   section   showing   the   relations   for   that   synset.</li>\\n<li>Clicking   on   a   relation   name   opens   a   section   that   displays   the   associated\\nsynsets.</li>\\n<li>Type   a   search   word   in   the   <b>Next   Word</b>   field   and   start   the   search   by   the\\n<b>Enter/Return</b>   key   or   click   the   <b>Search</b>   button.</li>\\n</ul>\\n'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_args(request, arg): \n    return [v for v in request.GET.getall(arg) if v]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def tag_regex(tagname): \n    return dict(open=('(?:<\\\\s*%(t)s\\\\s+[^<>]*?>|<\\\\s*%(t)s\\\\s*>)' % dict(t=tagname)), close=('</\\\\s*%(t)s\\\\s*>' % dict(t=tagname)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_list(obj, encoder): \n    return list(obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_one(i): \n    return (i + 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixup_for_packaged(): \n    if exists(join(ROOT, 'PKG-INFOvi   ')): \n      if (('--build-js' in sys.argv) or ('--install-js' in sys.argv)): \n         print(SDIST_BUILD_WARNING) \n         if ('--build-js' in sys.argv): \n            sys.argv.remove('--build-js') \n         if ('--install-js' in sys.argv): \n            sys.argv.remove('--install-js') \n      if ('--existing-js' not in sys.argv): \n         sys.argv.append('--existing-js')",
        "line_count": 9,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def clean_savepoints(using=None): \n    get_connection(using).clean_savepoints()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return PPPModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sdm_ecart(f): \n    return (sdm_deg(f) - sdm_monomial_deg(sdm_LM(f)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prepare_bearer_body(token, body=u''): \n    return utils.add_params_to_qs(body, [(u'access_token', token)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processXMLElement(xmlElement): \n    group.processShape(Sphere, xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def summary(job): \n    return flask.render_template('datasets/generic/summary.html', dataset=job)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetTag(node): \n    return node.tag.rsplit('}', 1)[(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_glance_metadata_create(context, volume_id, key, value): \n    return IMPL.volume_glance_metadata_create(context, volume_id, key, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def security_group_get_by_name(context, project_id, group_name): \n    return IMPL.security_group_get_by_name(context, project_id, group_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLXSIDEGAP3METHODS(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLXSIDEGAP3METHODS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_human_name(problem_class): \n    return getattr(problem_class, 'human_name', problem_class.__name__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pants_version(): \n    return _VERSION",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def users(attrs=None, where=None): \n    return _osquery_cmd(table='users', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def idz_reconint(idx, proj): \n    return _id.idz_reconint(idx, proj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expanding_count(arg, freq=None): \n    return ensure_compat('expanding', 'count', arg, freq=freq)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def points_in_poly(points, verts): \n    return _points_in_poly(points, verts)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eye(size, dtype=None, name=None): \n    return variable(np.eye(size), dtype, name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def modified(*packages, **flags): \n    return __salt__['lowpkg.modified'](*packages, **flags)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unregister(fn): \n    callbacks.remove(fn)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_select_query(query): \n    return (not RE_SELECT_QUERY.match(query.upper()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filebrowser_view(view): \n    return staff_member_required(never_cache(view))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def blend_channels_screen(bottom_chan, top_chan): \n    return (1 - ((1 - bottom_chan[:, :]) * (1 - top_chan[:, :])))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('grafana4.get_org' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def s3_flatlist(nested): \n    for item in nested: \n      if (isinstance(item, collections.Iterable) and (not isinstance(item, basestring))): \n         for sub in s3_flatlist(item): \n            (yield sub) \n      else: \n         (yield item)",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def pde_separate_mul(eq, fun, sep): \n    return pde_separate(eq, fun, sep, strategy='mul')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_template_from_string(source, origin=None, name=None): \n    return Template(source, origin, name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_rheader(r, tabs=[]): \n    if (r.representation == 'html'): \n      T = current.T \n      tabs = [(T('Deployment   Details'), None), (T('Servers'), 'server'), (T('Instances'), 'instance')] \n      rheader_tabs = s3_rheader_tabs(r, tabs) \n      rheader = DIV(rheader_tabs) \n      return rheader",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def addLinesToCString(cString, lines): \n    for line in lines: \n      if (line != ''): \n         cString.write((line + '\\n'))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_driver_names(): \n    return drivers.keys()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stop(*args, **kwargs): \n    return _query('server/halt')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def missing(name): \n    return (name not in _get_svc_list(name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_projection_names(): \n    return projection_registry.get_projection_names()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_biweight_midvariance_axis(): \n    with NumpyRNGContext(12345): \n      ny = 100 \n      nx = 200 \n      data = normal(5, 2, (ny, nx)) \n      bw = funcs.biweight_midvariance(data, axis=0) \n      bwi = [] \n      for i in range(nx): \n         bwi.append(funcs.biweight_midvariance(data[:, i])) \n      bwi = np.array(bwi) \n      assert_allclose(bw, bwi) \n      bw = funcs.biweight_midvariance(data, axis=1) \n      bwi = [] \n      for i in range(ny): \n         bwi.append(funcs.biweight_midvariance(data[i, :])) \n      bwi = np.array(bwi) \n      assert_allclose(bw, bwi)",
        "line_count": 16,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _monkeypatch_unicode_mask_fill_values(): \n    if (NUMPY_LT_1_8 and six.PY2): \n      import numpy as np \n      from numpy.ma import core as ma_core \n      _check_fill_value_original = ma_core._check_fill_value \n      def _check_fill_value(fill_value, ndtype): \n         if ((not ndtype.fields) and isinstance(fill_value, six.string_types) and (ndtype.char in u'SVU')): \n            return np.array(fill_value, copy=False, dtype=ndtype) \n         return _check_fill_value_original(fill_value, ndtype) \n      ma_core._check_fill_value = _check_fill_value",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_version(package): \n    with open(os.path.join(package, '__init__.py'), 'rb') as init_py: \n      src = init_py.read().decode('utf-8') \n      return re.search('__version__   =   [\\'\"]([^\\'\"]+)[\\'\"]', src).group(1)",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _dig_sort_key(dig): \n    return ((10000 * dig['kind']) + dig['ident'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_recommendations(exp_id, new_recommendations): \n    recommendations_models.ExplorationRecommendationsModel(id=exp_id, recommended_exploration_ids=new_recommendations).put()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xhtml_escape(value): \n    return saxutils.escape(value, {'\"': '&quot;', \"'\": '&apos;'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_traceback_frames(tb): \n    while (tb and hasattr(tb, 'tb_frame')): \n      f_locals = getattr(tb.tb_frame, 'f_locals', {}) \n      if (not _getitem_from_frame(f_locals, '__traceback_hide__')): \n         (yield (tb.tb_frame, getattr(tb, 'tb_lineno', None))) \n      tb = tb.tb_next",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def window_hanning(x): \n    return (np.hanning(len(x)) * x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shell_history(attrs=None, where=None): \n    return _osquery_cmd(table='shell_history', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plotting(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onBaseAppShutDown(state): \n    INFO_MSG(('onBaseAppShutDown:   state=%i' % state))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cleaned_string(val): \n    return urllib.quote_plus(smart_str(val))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _has_dig(): \n    return (salt.utils.which('dig') is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ranks_from_sequence(seq): \n    return ((k, i) for (i, k) in enumerate(seq))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def as_flattened_list(iterable): \n    return [e for i in iterable for e in i]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def b64encode(t): \n    return base64.b64encode(t)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_installed(): \n    return (_get_convert_command() is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def path_identity(path): \n    return path",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___len__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_power_state(state): \n    utils.write_one_line('/sys/power/state', state)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_projects(request): \n    return render(request, 'projects.html', {'projects': Project.objects.all_acl(request.user), 'title': _('Projects')})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_business_segment(shop, business_segment): \n    configuration.set(shop, SAMPLE_BUSINESS_SEGMENT_KEY, business_segment)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random_name(case): \n    return u'{}-{}'.format(case.id().replace(u'.', u'_'), randrange((10 ** 6)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quantify(iterable, pred=bool): \n    return sum(imap(pred, iterable))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def provider_fw_rule_destroy(context, rule_id): \n    return IMPL.provider_fw_rule_destroy(context, rule_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _setupPath(environ): \n    if ('TRIAL_PYTHONPATH' in environ): \n      sys.path[:] = environ['TRIAL_PYTHONPATH'].split(os.pathsep)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def execl(file, *args): \n    execv(file, args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _arg_olen1(dvi, delta): \n    return dvi._arg((delta + 1), (delta == 3))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inactive_user_view(request): \n    return redirect(request.GET.get('next', 'dashboard'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode(s): \n    return (s.encode('utf8') if isinstance(s, unicode) else s)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def linereader(f): \n    while 1: \n      line = f.readline() \n      if (not line): \n         break \n      (yield line[:(-1)])",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def setup(app): \n    app.add_role('bokeh-palette', bokeh_palette)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def radio(text=u'', tooltip=u'', checked=None): \n    return _checkbox(QtWidgets.QRadioButton, text, tooltip, checked)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _rstrip_inplace(array, chars=None): \n    for item in np.nditer(array, flags=['zerosize_ok'], op_flags=['readwrite']): \n      item[...] = item.item().rstrip(chars)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def import_no_clients_in_api_and_scenario_tests(physical_line, filename): \n    if (('tempest/api' in filename) or ('tempest/scenario' in filename)): \n      res = PYTHON_CLIENT_RE.match(physical_line) \n      if res: \n         return (physical_line.find(res.group(1)), 'T102:   python   clients   import   not   allowed   in   tempest/api/*   or   tempest/scenario/*   tests')",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def page_not_found(request, page_name): \n    return page_missing(request, page_name, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    solid.processElementNodeByFunction(elementNode, manipulateElementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plot_occlusion(net, X, target, square_length=7, figsize=(9, None)): \n    return _plot_heat_map(net, X, figsize, (lambda net, X, n: occlusion_heatmap(net, X, target[n], square_length)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_bkroot(): \n    return os.path.join(__salt__['config.get']('cachedir'), 'file_backup')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_spot_config(vm_): \n    return config.get_cloud_config_value('spot_config', vm_, __opts__, search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def conv2d(x, n_filters, k_h=5, k_w=5, stride_h=2, stride_w=2, stddev=0.02, activation=(lambda x: x), bias=True, padding='SAME', name='Conv2D'): \n    with tf.variable_scope(name): \n      w = tf.get_variable('w', [k_h, k_w, x.get_shape()[(-1)], n_filters], initializer=tf.truncated_normal_initializer(stddev=stddev)) \n      conv = tf.nn.conv2d(x, w, strides=[1, stride_h, stride_w, 1], padding=padding) \n      if bias: \n         b = tf.get_variable('b', [n_filters], initializer=tf.truncated_normal_initializer(stddev=stddev)) \n         conv = (conv + b) \n      return conv",
        "line_count": 7,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _releaseLock(): \n    if _lock: \n      _lock.release()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def retval_section(retval_type, types): \n    return serialize_type(retval_type, 'this->retval', types)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def network_associate(context, project_id, network_id=None, force=False): \n    return IMPL.network_associate(context, project_id, network_id, force)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_form_on_submit(form): \n    return (is_form_submitted() and form.validate())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def parsepdf(path, *args, **kwargs): \n    return PDF(path, *args, **kwargs).content",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addFacesGivenVertexes(triangleMesh, vertexIndexTable, vertexes): \n    for vertexIndex in xrange(0, len(vertexes), 3): \n      triangleMesh.faces.append(getFaceGivenLines(triangleMesh, vertexIndex, vertexIndexTable, vertexes))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def quote(s): \n    return s.replace('\\\\', '\\\\\\\\').replace('\"', '\\\\\"')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unique_justseen(iterable, key=None): \n    return imap(next, imap(operator.itemgetter(1), groupby(iterable, key)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add(br=None): \n    return _os_dispatch('bradd', br)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_nodes_select(call=None): \n    return salt.utils.cloud.list_nodes_select(list_nodes_full('function'), __opts__['query.selection'], call)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def joined(subset=None, show_ipv4=False): \n    return list_state(subset=subset, show_ipv4=show_ipv4, state='joined')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ttylog_open(logfile, stamp): \n    with open(logfile, 'ab') as f: \n      (sec, usec) = (int(stamp), int((1000000 * (stamp - int(stamp))))) \n      f.write(struct.pack('<iLiiLL', 1, 0, 0, 0, sec, usec))",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _gpa11iterator(handle): \n    for inline in handle: \n      if (inline[0] == '!'): \n         continue \n      inrec = inline.rstrip('\\n').split(' DCTB ') \n      if (len(inrec) == 1): \n         continue \n      inrec[2] = inrec[2].split('|') \n      inrec[4] = inrec[4].split('|') \n      inrec[6] = inrec[6].split('|') \n      inrec[10] = inrec[10].split('|') \n      (yield dict(zip(GPA11FIELDS, inrec)))",
        "line_count": 11,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def assert_no_element_by_xpath_selector(context, xpath, wait_time=MAX_WAIT_FOR_UNEXPECTED_ELEMENT): \n    _assert_no_element_by(context, By.XPATH, xpath, wait_time)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def LineTextInCurrentBuffer(line_number): \n    return vim.current.buffer[(line_number - 1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fetch_image(context, target, image_id): \n    images.fetch_to_raw(context, image_id, target)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _parallel_predict_regression(estimators, estimators_features, X): \n    return sum((estimator.predict(X[:, features]) for (estimator, features) in zip(estimators, estimators_features)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def DEBUG(x): \n    LOG_LEVEL('debug')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_parameter_type_list_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def word_tokenize(text, language='english'): \n    return [token for sent in sent_tokenize(text, language) for token in _treebank_word_tokenize(sent)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def ngettext(singular, plural, number): \n    return do_ntranslate(singular, plural, number, 'ngettext')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_feature_file(features_dir, feature_name): \n    return os.path.exists(os.path.join(features_dir, (feature_name + '.feature')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shekel(individual, a, c): \n    return (sum(((1.0 / (c[i] + sum((((individual[j] - aij) ** 2) for (j, aij) in enumerate(a[i]))))) for i in range(len(c)))),)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def file_option(s): \n    return s",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_file_mismatch_nodes(): \n    return [node for node in Node.find() if (set(node.files_versions.keys()) != set(node.files_current.keys()))]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def create_instance(c_instance): \n    return GenericScript(c_instance, Live.MidiMap.MapMode.relative_smooth_binary_offset, Live.MidiMap.MapMode.absolute, DEVICE_CONTROLS, TRANSPORT_CONTROLS, VOLUME_CONTROLS, TRACKARM_CONTROLS, BANK_CONTROLS, CONTROLLER_DESCRIPTION, MIXER_OPTIONS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def running(): \n    return _status_csf()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_request_in_microsite(): \n    return BACKEND.is_request_in_microsite()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _string_concat(*strings): \n    return u''.join([force_text(s) for s in strings])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def unvouch_mozilla_alternate_emails(apps, schema_editor): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_external_declaration_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SSH(port=22, **kwargs): \n    return rule(port, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixClassImplements(klass): \n    warnings.warn(\"components.fixClassImplements   doesn't   do   anything   in   Twisted   2.3,   stop   calling   it.\", ComponentsDeprecationWarning, stacklevel=2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def conjugate(matlist, K): \n    return [conjugate_row(row, K) for row in matlist]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def construct_tmp_lun_name(lun_name): \n    return ('%(src)s-%(ts)s' % {'src': lun_name, 'ts': int(time.time())})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_modify_host(update_data): \n    if ('status' in update_data): \n      raise model_logic.ValidationError({'status': 'Host   status   can   not   be   modified   by   the   frontend.'})",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def has_request_context(): \n    return (_request_ctx_stack.top is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLTHRUSTING(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLTHRUSTING)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_single_text(field, text, **kwargs): \n    for t in field.process_text(text, mode='query', **kwargs): \n      return t",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def perm_is_defined_on(perm, obj): \n    return Permission.objects.filter(codename=perm, content_type=ContentType.objects.get_for_model(obj).pk, object_id=obj.pk, approved=True).exists()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def serviceHandle(target): \n    service.mapTarget(target)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ask(message, options): \n    while 1: \n      if os.environ.get('PIP_NO_INPUT'): \n         raise Exception(('No   input   was   expected   ($PIP_NO_INPUT   set);   question:   %s' % message)) \n      response = input(message) \n      response = response.strip().lower() \n      if (response not in options): \n         print ('Your   response   (%r)   was   not   one   of   the   expected   responses:   %s' % (response, ',   '.join(options))) \n      else: \n         return response",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_device(device_id): \n    return get_devices()[int(device_id)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def executors(opts, functions=None, context=None): \n    return LazyLoader(_module_dirs(opts, 'executors', 'executor'), opts, tag='executor', pack={'__salt__': functions, '__context__': (context or {})})",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_error_message(error): \n    return (error.args[0] if error.args else '')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def items(): \n    return dict(os.environ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _api_version(name, output, kwargs): \n    return report(output, keyword='version', data=sabnzbd.__version__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_encoding(encoding): \n    ET.XML((\"<?xml   version='1.0'   encoding='%s'?><xml   />\" % encoding))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upload_imageattachment(request, obj): \n    return upload_media(request, ImageAttachmentUploadForm, create_imageattachment, obj=obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_currency_symbol(currency, locale=LC_NUMERIC): \n    return Locale.parse(locale).currency_symbols.get(currency, currency)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _course_outline_json(request, course_module): \n    return create_xblock_info(course_module, include_child_info=True, course_outline=True, include_children_predicate=(lambda xblock: (not (xblock.category == 'vertical'))), user=request.user)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def award(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_iterable(obj): \n    return (hasattr(obj, u'__iter__') and (not isinstance(obj, str)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_module_path(module): \n    return frappe.get_module_path(module)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def supportsTeams(endpoint): \n    return endpoint.usesExtension(ns_uri)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return HelpRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _any_pandas_objects(terms): \n    return any((isinstance(term.value, pd.core.generic.PandasObject) for term in terms))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def allowed(subset=None, show_ipv4=False): \n    return list_state(subset=subset, show_ipv4=show_ipv4, state='allowed')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dict_formatter(view, value): \n    return json.dumps(value, ensure_ascii=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_get_all_active_by_window(context, begin, end=None, project_id=None): \n    return IMPL.snapshot_get_all_active_by_window(context, begin, end, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sleep(sleep_time=0.25): \n    time.sleep(sleep_time)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _getcdlistdir(): \n    return os.listdir(getcwd())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def miniEditImages(): \n    return {'Select': BitmapImage(file='/usr/include/X11/bitmaps/left_ptr'), 'Switch': PhotoImage(data='\\nR0lGODlhLgAgAPcAAB2ZxGq61imex4zH3RWWwmK41tzd3vn9/jCiyfX7/Q6SwFay0gBlmtnZ2snJ\\nyr+2tAuMu6rY6D6kyfHx8XO/2Uqszjmly6DU5uXz+JLN4uz3+kSrzlKx0ZeZm2K21BuYw67a6QB9\\nr+Xl5rW2uHW61On1+UGpzbrf6xiXwny9166vsMLCwgBdlAmHt8TFxgBwpNTs9C2hyO7t7ZnR5L/B\\nw0yv0NXV1gBimKGjpABtoQBuoqKkpiaUvqWmqHbB2/j4+Pf39729vgB/sN7w9obH3hSMugCAsonJ\\n4M/q8wBglgB6rCCaxLO0tX7C2wBqniGMuABzpuPl5f3+/v39/fr6+r7i7vP6/ABonV621LLc6zWk\\nyrq6uq6wskGlyUaszp6gohmYw8HDxKaoqn3E3LGztWGuzcnLzKmrrOnp6gB1qCaex1q001ewz+Dg\\n4QB3qrCxstHS09LR0dHR0s7Oz8zNzsfIyQaJuQB0pozL4YzI3re4uAGFtYDG3hOUwb+/wQB5rOvr\\n6wB2qdju9TWfxgBpniOcxeLj48vn8dvc3VKuzwB2qp6fos/Q0aXV6D+jxwB7rsXHyLu8vb27vCSc\\nxSGZwxyZxH3A2RuUv0+uzz+ozCedxgCDtABnnABroKutr/7+/n2/2LTd6wBvo9bX2OLo6lGv0C6d\\nxS6avjmmzLTR2uzr6m651RuXw4jF3CqfxySaxSadyAuRv9bd4cPExRiMuDKjyUWevNPS0sXl8BeY\\nxKytr8G/wABypXvC23vD3O73+3vE3cvU2PH5+7S1t7q7vCGVwO/v8JfM3zymyyyZwrWys+Hy90Ki\\nxK6qqg+TwBKXxMvMzaWtsK7U4jemzLXEygBxpW++2aCho97Z18bP0/T09fX29vb19ViuzdDR0crf\\n51qd01y00ujo6Onq6hCDs2Gpw3i71CqWv3S71nO92M/h52m207bJ0AN6rPPz9Nrh5Nvo7K/b6oTI\\n37Td7ABqneHi4yScxo/M4RiWwRqVwcro8n3B2lGoylStzszMzAAAACH5BAEAAP8ALAAAAAAuACAA\\nBwj/AP8JHEjw3wEkEY74WOjrQhUNBSNKnCjRSoYKCOwJcKWpEAACBFBRGEKxZMkDjRAg2OBlQyYL\\nWhDEcOWxDwofv0zqHIhhDYIFC2p4MYFMS62ZaiYVWlJJAYIqO00KMlEjABYOQokaRbp0CYBKffpE\\niDpxSKYC1gqswToUmYVaCFyp6QrgwwcCscaSJZhgQYBeAdRyqFBhgwWkGyct8WoXRZ8Ph/YOxMOB\\nCIUAHsBxwGQBAII1YwpMI5Brcd0PKFA4Q2ZFMgYteZqkwxyu1KQNJzQc+CdFCrxypyqdRoEPX6x7\\nki/n2TfbAxtNRHYTVCWpWTRbuRoX7yMgZ9QSFQa0/7LU/BXygjIWXVOBTR2sxp7BxGpENgKbY+PR\\nreqyIOKnOh0M445AjTjDCgrPSBNFKt9w8wMVU5g0Bg8kDAAKOutQAkNEQNBwDRAEeVEcAV6w84Ay\\nKowQSRhmzNGAASIAYow2IP6DySPk8ANKCv1wINE2cpjxCUEgOIOPAKicQMMbKnhyhhg97HDNF4vs\\nIEYkNkzwjwSP/PHIE2VIgIdEnxjAiBwNGIKGDKS8I0sw2VAzApNOQimGLlyMAIkDw2yhZTF/KKGE\\nlxCEMtEPBtDhACQurLDCLkFIsoUeZLyRpx8OmEGHN3AEcU0HkFAhUDFulDroJvOU5M44iDjgDTQO\\n1P/hzRw2IFJPGw3AAY0LI/SAwxc7jEKQI2mkEUipRoxp0g821AMIGlG0McockMzihx5c1LkDDmSg\\nUVAiafACRbGPVKDTFG3MYUYdLoThRxDE6DEMGUww8eQONGwTER9piFINFOPasaFJVIjTwC1xzOGP\\nA3HUKoIMDTwJR4QRgdBOJzq8UM0Lj5QihU5ZdGMOCSSYUwYzAwwkDhNtUKTBOZ10koMOoohihDwm\\nHZKPEDwb4fMe9An0g5Yl+SDKFTHnkMMLLQAjXUTxUCLEIyH0bIQAwuxVQhEMcEIIIUmHUEsWGCQg\\nxQEaIFGAHV0+QnUIIWwyg2T/3MPLDQwwcAUhTjiswYsQl1SAxQKmbBJCIMe6ISjVmXwsWQKJEJJE\\n3l1/TY8O4wZyh8ZQ3IF4qX9cggTdAmEwCAMs3IB311fsDfbMGv97BxSBQBAP6QMN0QUhLCSRhOp5\\ne923zDpk/EIaRdyO+0C/eHBHEiz0vjrrfMfciSKD4LJ8RBEk88IN0ff+O/CEVEPLGK1tH1ECM7Dx\\nRDWdcMLJFTpUQ44jfCyjvlShZNDE/0QAgT6ypr6AAAA7\\n                                    '), 'LegacySwitch': PhotoImage(data='\\nR0lGODlhMgAYAPcAAAEBAXmDjbe4uAE5cjF7xwFWq2Sa0S9biSlrrdTW1k2Ly02a5xUvSQFHjmep\\n6bfI2Q5SlQIYLwFfvj6M3Jaan8fHyDuFzwFp0Vah60uU3AEiRhFgrgFRogFr10N9uTFrpytHYQFM\\nmGWt9wIwX+bm5kaT4gtFgR1cnJPF9yt80CF0yAIMGHmp2c/P0AEoUb/P4Fei7qK4zgpLjgFkyQlf\\nt1mf5jKD1WWJrQ86ZwFAgBhYmVOa4MPV52uv8y+A0iR3ywFbtUyX5ECI0Q1UmwIcOUGQ3RBXoQI0\\naRJbpr3BxVeJvQUJDafH5wIlS2aq7xBmv52lr7fH12el5Wml3097ph1ru7vM3HCz91Ke6lid40KQ\\n4GSQvgQGClFnfwVJjszMzVCX3hljrdPT1AFLlBRnutPf6yd5zjeI2QE9eRBdrBNVl+3v70mV4ydf\\nlwMVKwErVlul8AFChTGB1QE3bsTFxQImTVmAp0FjiUSM1k+b6QQvWQ1SlxMgLgFixEqU3xJhsgFT\\npn2Xs5OluZ+1yz1Xb6HN+Td9wy1zuYClykV5r0x2oeDh4qmvt8LDwxhuxRlLfyRioo2124mft9bi\\n71mDr7fT79nl8Z2hpQs9b7vN4QMQIOPj5XOPrU2Jx32z6xtvwzeBywFFikFnjwcPFa29yxJjuFmP\\nxQFv3qGxwRc/Z8vb6wsRGBNqwqmpqTdvqQIbNQFPngMzZAEfP0mQ13mHlQFYsAFnznOXu2mPtQxj\\nvQ1Vn4Ot1+/x8my0/CJgnxNNh8DT5CdJaWyx+AELFWmt8QxPkxBZpwMFB015pgFduGCNuyx7zdnZ\\n2WKm6h1xyOPp8aW70QtPkUmM0LrCyr/FyztljwFPm0OJzwFny7/L1xFjswE/e12i50iR2VR8o2Gf\\n3xszS2eTvz2BxSlloQdJiwMHDzF3u7bJ3T2I1WCp8+Xt80FokQFJklef6mORw2ap7SJ1y77Q47nN\\n3wFfu1Kb5cXJyxdhrdDR0wlNkTSF11Oa4yp4yQEuW0WQ3QIDBQI7dSH5BAEAAAAALAAAAAAyABgA\\nBwj/AAEIHDjKF6SDvhImPMHwhA6HOiLqUENRDYSLEIplxBcNHz4Z5GTI8BLKS5OBA1Ply2fDhxwf\\nPlLITGFmmRkzP+DlVKHCmU9nnz45csSqKKsn9gileZKrVC4aRFACOGZu5UobNuRohRkzhc2b+36o\\nqCaqrFmzZEV1ERBg3BOmMl5JZTBhwhm7ZyycYZnvJdeuNl21qkCHTiPDhxspTtKoQgUKCJ6wehMV\\n5QctWupeo6TkjOd8e1lmdQkTGbTTMaDFiDGINeskX6YhEicUiQa5A/kUKaFFwQ0oXzjZ8Tbcm3Hj\\nirwpMtTSgg9QMJf5WEZ9375AiED19ImpSQSUB4Kw/8HFSMyiRWJaqG/xhf2X91+oCbmq1e/MFD/2\\nEcApVkWVJhp8J9AqsywQxDfAbLJJPAy+kMkL8shjxTkUnhOJZ5+JVp8cKfhwxwdf4fQLgG4MFAwW\\nKOZRAxM81EAPPQvoE0QQfrDhx4399OMBMjz2yCMVivCoCAWXKLKMTPvoUYcsKwi0RCcwYCAlFjU0\\nA6OBM4pXAhsl8FYELYWFWZhiZCbRQgIC2AGTLy408coxAoEDx5wwtGPALTVg0E4NKC7gp4FsBKoA\\nKi8U+oIVmVih6DnZPMBMAlGwIARWOLiggSYC+ZNIOulwY4AkSZCyxaikbqHMqaeaIp4+rAaxQxBg\\n2P+IozuRzvLZIS4syYVAfMAhwhSC1EPCGoskIIYY9yS7Hny75OFnEIAGyiVvWkjjRxF11fXIG3WU\\nKNA6wghDTCW88PKMJZOkm24Z7LarSjPtoIjFn1lKyyVmmBVhwRtvaDDMgFL0Eu4VhaiDwhXCXNFD\\nD8QQw7ATEDsBw8RSxotFHs7CKJ60XWrRBj91EOGPQCA48c7J7zTjSTPctOzynjVkkYU+O9S8Axg4\\nZ6BzBt30003Ps+AhNB5C4PCGC5gKJMMTZJBRytOl/CH1HxvQkMbVVxujtdZGGKGL17rsEfYQe+xR\\nzNnFcGQCv7LsKlAtp8R9Sgd0032BLXjPoPcMffTd3YcEgAMOxOBA1GJ4AYgXAMjiHDTgggveCgRI\\n3RfcnffefgcOeDKEG3444osDwgEspMNiTQhx5FoOShxcrrfff0uQjOycD+554qFzMHrpp4cwBju/\\n5+CmVNbArnntndeCO+O689777+w0IH0o1P/TRJMohRA4EJwn47nyiocOSOmkn/57COxE3wD11Mfh\\nfg45zCGyVF4Ufvvyze8ewv5jQK9++6FwXxzglwM0GPAfR8AeSo4gwAHCbxsQNCAa/kHBAVhwAHPI\\n4BE2eIRYeHAEIBwBP0Y4Qn41YWRSCQgAOw==\\n                                    '), 'LegacyRouter': PhotoImage(data='\\nR0lGODlhMgAYAPcAAAEBAXZ8gQNAgL29vQNctjl/xVSa4j1dfCF+3QFq1DmL3wJMmAMzZZW11dnZ\\n2SFrtyNdmTSO6gIZMUKa8gJVqEOHzR9Pf5W74wFjxgFx4jltn+np6Eyi+DuT6qKiohdtwwUPGWiq\\n6ymF4LHH3Rh11CV81kKT5AMoUA9dq1ap/mV0gxdXlytRdR1ptRNPjTt9vwNgvwJZsX+69gsXJQFH\\njTtjizF0tvHx8VOm9z2V736Dhz2N3QM2acPZ70qe8gFo0HS19wVRnTiR6hMpP0eP1i6J5iNlqAtg\\ntktjfQFu3TNxryx4xAMTIzOE1XqAh1uf5SWC4AcfNy1XgQJny93n8a2trRh312Gt+VGm/AQIDTmB\\nyAF37QJasydzvxM/ayF3zhdLf8zLywFdu4i56gFlyi2J4yV/1w8wUo2/8j+X8D2Q5Eee9jeR7Uia\\n7DpeggFt2QNPm97e3jRong9bpziH2DuT7aipqQoVICmG45vI9R5720eT4Q1hs1er/yVVhwJJktPh\\n70tfdbHP7Xev5xs5V7W1sz9jhz11rUVZcQ9WoCVVhQk7cRdtwWuw9QYOFyFHbSBnr0dznxtWkS18\\nzKfP9wwcLAMHCwFFiS5UeqGtuRNNiwMfPS1hlQMtWRE5XzGM5yhxusLCwCljnwMdOFWh7cve8pG/\\n7Tlxp+Tr8g9bpXF3f0lheStrrYu13QEXLS1ppTV3uUuR1RMjNTF3vU2X4TZupwRSolNne4nB+T+L\\n2YGz4zJ/zYe99YGHjRdDcT95sx09XQldsgMLEwMrVc/X3yN3yQ1JhTRbggsdMQNfu9HPz6WlpW2t\\n7RctQ0GFyeHh4dvl8SBZklCb5kOO2kWR3Vmt/zdjkQIQHi90uvPz8wIVKBp42SV5zbfT7wtXpStV\\nfwFWrBVvyTt3swFz5kGBv2+1/QlbrVFjdQM7d1+j54i67UmX51qn9i1vsy+D2TuR5zddhQsjOR1t\\nu0GV6ghbsDVZf4+76RRisent8Xd9hQFBgwFNmwJLlcPDwwFr1z2T5yH5BAEAAAAALAAAAAAyABgA\\nBwj/AAEIHEiQYJY7Qwg9UsTplRIbENuxEiXJgpcz8e5YKsixY8Essh7JcbbOBwcOa1JOmJAmTY4c\\nHeoIabJrCShI0XyB8YRso0eOjoAdWpciBZajJ1GuWcnSZY46Ed5N8hPATqEBoRB9gVJsxRlhPwHI\\n0kDkVywcRpGe9LF0adOnMpt8CxDnxg1o9lphKoEACoIvmlxxvHOKVg0n/Tzku2WoVoU2J1P6WNkS\\nrtwADuxCG/MOjwgRUEIjGG3FhaOBzaThiDSCil27G8Isc3LLjZwXsA6YYJmDjhTMmseoKQIFDx7R\\noxHo2abnwygAlUj1mV6tWjlelEpRwfd6gzI7VeJQ/2vZoVaDUqigqftXpH0R46H9Kl++zUo4JnKq\\n9dGvv09RHFhcIUMe0NiFDyql0OJUHWywMc87TXRhhCRGiHAccvNZUR8JxpDTH38p9HEUFhxgMSAv\\njbBjQge8PSXEC6uo0IsHA6gAAShmgCbffNtsQwIJifhRHX/TpUUiSijlUk8AqgQixSwdNBjCa7CF\\noVggmEgCyRf01WcFCYvYUgB104k4YlK5HONEXXfpokYdMrXRAzMhmNINNNzB9p0T57AgyZckpKKP\\nGFNgw06ZWKR10jTw6MAmFWj4AJcQQkQQwSefvFeGCemMIQggeaJywSQ/wgHOAmJskQEfWqBlFBEH\\n1P/QaGY3QOpDZXA2+A6m7hl3IRQKGDCIAj6iwE8yGKC6xbJv8IHNHgACQQybN2QiTi5NwdlBpZdi\\nisd7vyanByOJ7CMGGRhgwE+qyy47DhnBPLDLEzLIAEQjBtChRmVPNWgpr+Be+Nc9icARww9TkIEu\\nDAsQ0O7DzGIQzD2QdDEJHTsIAROc3F7qWQncyHPPHN5QQAAG/vjzw8oKp8sPPxDH3O44/kwBQzLB\\nxBCMOTzzHEMMBMBARgJvZJBBEm/4k0ACKydMBgwYoKNNEjJXbTXE42Q9jtFIp8z0Dy1jQMA1AGzi\\nz9VoW7310V0znYDTGMQgwUDXLDBO2nhvoTXbbyRk/XXL+pxWkAT8UJ331WsbnbTSK8MggDZhCTOM\\nLQkcjvXeSPedAAw0nABWWARZIgEDfyTzxt15Z53BG1PEcEknrvgEelhZMDHKCTwI8EcQFHBBAAFc\\ngGPLHwLwcMIo12Qxu0ABAQA7\\n                                    '), 'Controller': PhotoImage(data='\\n                                    R0lGODlhMAAwAPcAAAEBAWfNAYWFhcfHx+3t6/f390lJUaWlpfPz8/Hx72lpaZGRke/v77m5uc0B\\n                                    AeHh4e/v7WNjY3t7e5eXlyMjI4mJidPT0+3t7f///09PT7Ozs/X19fHx8ZWTk8HBwX9/fwAAAAAA\\n                                    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                                    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                                    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                                    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                                    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                                    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                                    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                                    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                                    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                                    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                                    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                                    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAwADAA\\n                                    Bwj/AAEIHEiwoMGDCBMqXMiwocOHECNKnEixosWLGAEIeMCxo8ePHwVkBGABg8mTKFOmtDByAIYN\\n                                    MGPCRCCzQIENNzEMGOkBAwIKQIMKpYCgKAIHCDB4GNkAA4OnUJ9++CDhQ1QGFzA0GKkBA4GvYMOK\\n                                    BYtBA1cNaNOqXcuWq8q3b81m7Cqdbk2bMMu6/Tl0qFEEAZLKxdj1KlSqVA3rnet1rOOwiwmznUzZ\\n                                    LdzLJgdfpIv3pmebN2Pm1GyRbocNp1PLNMDaAM3Im1/alQk4gO28pCt2RdCBt+/eRg8IP1AUdmmf\\n                                    f5MrL56bYlcOvaP7Xo6Ag3HdGDho3869u/YE1507t+3AgLz58ujPMwg/sTBUCAzgy49PH0LW5u0x\\n                                    XFiwvz////5dcJ9bjxVIAHsSdUXAAgs2yOCDDn6FYEQaFGDgYxNCpEFfHHKIX4IDhCjiiCSS+CGF\\n                                    FlCmogYpcnVABTDGKGOMAlRQYwUHnKjhAjX2aOOPN8LImgAL6PiQBhLMqCSNAThQgQRGOqRBBD1W\\n                                    aaOVAggnQARRNqRBBxmEKeaYZIrZQZcMKbDiigqM5OabcMYp55x01ilnQAA7\\n                                    '), 'Host': PhotoImage(data='\\n                                    R0lGODlhIAAYAPcAMf//////zP//mf//Zv//M///AP/M///MzP/M\\n                                    mf/MZv/MM//MAP+Z//+ZzP+Zmf+ZZv+ZM/+ZAP9m//9mzP9mmf9m\\n                                    Zv9mM/9mAP8z//8zzP8zmf8zZv8zM/8zAP8A//8AzP8Amf8AZv8A\\n                                    M/8AAMz//8z/zMz/mcz/Zsz/M8z/AMzM/8zMzMzMmczMZszMM8zM\\n                                    AMyZ/8yZzMyZmcyZZsyZM8yZAMxm/8xmzMxmmcxmZsxmM8xmAMwz\\n                                    /8wzzMwzmcwzZswzM8wzAMwA/8wAzMwAmcwAZswAM8wAAJn//5n/\\n                                    zJn/mZn/Zpn/M5n/AJnM/5nMzJnMmZnMZpnMM5nMAJmZ/5mZzJmZ\\n                                    mZmZZpmZM5mZAJlm/5lmzJlmmZlmZplmM5lmAJkz/5kzzJkzmZkz\\n                                    ZpkzM5kzAJkA/5kAzJkAmZkAZpkAM5kAAGb//2b/zGb/mWb/Zmb/\\n                                    M2b/AGbM/2bMzGbMmWbMZmbMM2bMAGaZ/2aZzGaZmWaZZmaZM2aZ\\n                                    AGZm/2ZmzGZmmWZmZmZmM2ZmAGYz/2YzzGYzmWYzZmYzM2YzAGYA\\n                                    /2YAzGYAmWYAZmYAM2YAADP//zP/zDP/mTP/ZjP/MzP/ADPM/zPM\\n                                    zDPMmTPMZjPMMzPMADOZ/zOZzDOZmTOZZjOZMzOZADNm/zNmzDNm\\n                                    mTNmZjNmMzNmADMz/zMzzDMzmTMzZjMzMzMzADMA/zMAzDMAmTMA\\n                                    ZjMAMzMAAAD//wD/zAD/mQD/ZgD/MwD/AADM/wDMzADMmQDMZgDM\\n                                    MwDMAACZ/wCZzACZmQCZZgCZMwCZAABm/wBmzABmmQBmZgBmMwBm\\n                                    AAAz/wAzzAAzmQAzZgAzMwAzAAAA/wAAzAAAmQAAZgAAM+4AAN0A\\n                                    ALsAAKoAAIgAAHcAAFUAAEQAACIAABEAAADuAADdAAC7AACqAACI\\n                                    AAB3AABVAABEAAAiAAARAAAA7gAA3QAAuwAAqgAAiAAAdwAAVQAA\\n                                    RAAAIgAAEe7u7t3d3bu7u6qqqoiIiHd3d1VVVURERCIiIhEREQAA\\n                                    ACH5BAEAAAAALAAAAAAgABgAAAiNAAH8G0iwoMGDCAcKTMiw4UBw\\n                                    BPXVm0ixosWLFvVBHFjPoUeC9Tb+6/jRY0iQ/8iVbHiS40CVKxG2\\n                                    HEkQZsyCM0mmvGkw50uePUV2tEnOZkyfQA8iTYpTKNOgKJ+C3AhO\\n                                    p9SWVaVOfWj1KdauTL9q5UgVbFKsEjGqXVtP40NwcBnCjXtw7tx/\\n                                    C8cSBBAQADs=\\n                        '), 'OldSwitch': PhotoImage(data='\\n                                    R0lGODlhIAAYAPcAMf//////zP//mf//Zv//M///AP/M///MzP/M\\n                                    mf/MZv/MM//MAP+Z//+ZzP+Zmf+ZZv+ZM/+ZAP9m//9mzP9mmf9m\\n                                    Zv9mM/9mAP8z//8zzP8zmf8zZv8zM/8zAP8A//8AzP8Amf8AZv8A\\n                                    M/8AAMz//8z/zMz/mcz/Zsz/M8z/AMzM/8zMzMzMmczMZszMM8zM\\n                                    AMyZ/8yZzMyZmcyZZsyZM8yZAMxm/8xmzMxmmcxmZsxmM8xmAMwz\\n                                    /8wzzMwzmcwzZswzM8wzAMwA/8wAzMwAmcwAZswAM8wAAJn//5n/\\n                                    zJn/mZn/Zpn/M5n/AJnM/5nMzJnMmZnMZpnMM5nMAJmZ/5mZzJmZ\\n                                    mZmZZpmZM5mZAJlm/5lmzJlmmZlmZplmM5lmAJkz/5kzzJkzmZkz\\n                                    ZpkzM5kzAJkA/5kAzJkAmZkAZpkAM5kAAGb//2b/zGb/mWb/Zmb/\\n                                    M2b/AGbM/2bMzGbMmWbMZmbMM2bMAGaZ/2aZzGaZmWaZZmaZM2aZ\\n                                    AGZm/2ZmzGZmmWZmZmZmM2ZmAGYz/2YzzGYzmWYzZmYzM2YzAGYA\\n                                    /2YAzGYAmWYAZmYAM2YAADP//zP/zDP/mTP/ZjP/MzP/ADPM/zPM\\n                                    zDPMmTPMZjPMMzPMADOZ/zOZzDOZmTOZZjOZMzOZADNm/zNmzDNm\\n                                    mTNmZjNmMzNmADMz/zMzzDMzmTMzZjMzMzMzADMA/zMAzDMAmTMA\\n                                    ZjMAMzMAAAD//wD/zAD/mQD/ZgD/MwD/AADM/wDMzADMmQDMZgDM\\n                                    MwDMAACZ/wCZzACZmQCZZgCZMwCZAABm/wBmzABmmQBmZgBmMwBm\\n                                    AAAz/wAzzAAzmQAzZgAzMwAzAAAA/wAAzAAAmQAAZgAAM+4AAN0A\\n                                    ALsAAKoAAIgAAHcAAFUAAEQAACIAABEAAADuAADdAAC7AACqAACI\\n                                    AAB3AABVAABEAAAiAAARAAAA7gAA3QAAuwAAqgAAiAAAdwAAVQAA\\n                                    RAAAIgAAEe7u7t3d3bu7u6qqqoiIiHd3d1VVVURERCIiIhEREQAA\\n                                    ACH5BAEAAAAALAAAAAAgABgAAAhwAAEIHEiwoMGDCBMqXMiwocOH\\n                                    ECNKnEixosWB3zJq3Mixo0eNAL7xG0mypMmTKPl9Cznyn8uWL/m5\\n                                    /AeTpsyYI1eKlBnO5r+eLYHy9Ck0J8ubPmPOrMmUpM6UUKMa/Ui1\\n                                    6saLWLNq3cq1q9evYB0GBAA7\\n                        '), 'NetLink': PhotoImage(data='\\n                                    R0lGODlhFgAWAPcAMf//////zP//mf//Zv//M///AP/M///MzP/M\\n                                    mf/MZv/MM//MAP+Z//+ZzP+Zmf+ZZv+ZM/+ZAP9m//9mzP9mmf9m\\n                                    Zv9mM/9mAP8z//8zzP8zmf8zZv8zM/8zAP8A//8AzP8Amf8AZv8A\\n                                    M/8AAMz//8z/zMz/mcz/Zsz/M8z/AMzM/8zMzMzMmczMZszMM8zM\\n                                    AMyZ/8yZzMyZmcyZZsyZM8yZAMxm/8xmzMxmmcxmZsxmM8xmAMwz\\n                                    /8wzzMwzmcwzZswzM8wzAMwA/8wAzMwAmcwAZswAM8wAAJn//5n/\\n                                    zJn/mZn/Zpn/M5n/AJnM/5nMzJnMmZnMZpnMM5nMAJmZ/5mZzJmZ\\n                                    mZmZZpmZM5mZAJlm/5lmzJlmmZlmZplmM5lmAJkz/5kzzJkzmZkz\\n                                    ZpkzM5kzAJkA/5kAzJkAmZkAZpkAM5kAAGb//2b/zGb/mWb/Zmb/\\n                                    M2b/AGbM/2bMzGbMmWbMZmbMM2bMAGaZ/2aZzGaZmWaZZmaZM2aZ\\n                                    AGZm/2ZmzGZmmWZmZmZmM2ZmAGYz/2YzzGYzmWYzZmYzM2YzAGYA\\n                                    /2YAzGYAmWYAZmYAM2YAADP//zP/zDP/mTP/ZjP/MzP/ADPM/zPM\\n                                    zDPMmTPMZjPMMzPMADOZ/zOZzDOZmTOZZjOZMzOZADNm/zNmzDNm\\n                                    mTNmZjNmMzNmADMz/zMzzDMzmTMzZjMzMzMzADMA/zMAzDMAmTMA\\n                                    ZjMAMzMAAAD//wD/zAD/mQD/ZgD/MwD/AADM/wDMzADMmQDMZgDM\\n                                    MwDMAACZ/wCZzACZmQCZZgCZMwCZAABm/wBmzABmmQBmZgBmMwBm\\n                                    AAAz/wAzzAAzmQAzZgAzMwAzAAAA/wAAzAAAmQAAZgAAM+4AAN0A\\n                                    ALsAAKoAAIgAAHcAAFUAAEQAACIAABEAAADuAADdAAC7AACqAACI\\n                                    AAB3AABVAABEAAAiAAARAAAA7gAA3QAAuwAAqgAAiAAAdwAAVQAA\\n                                    RAAAIgAAEe7u7t3d3bu7u6qqqoiIiHd3d1VVVURERCIiIhEREQAA\\n                                    ACH5BAEAAAAALAAAAAAWABYAAAhIAAEIHEiwoEGBrhIeXEgwoUKG\\n                                    Cx0+hGhQoiuKBy1irChxY0GNHgeCDAlgZEiTHlFuVImRJUWXEGEy\\n                                    lBmxI8mSNknm1Dnx5sCAADs=\\n                        ')}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DEFINE_string(name, default, help): \n    CONFIG.AddOption(type_info.String(name=name, default=(default or ''), description=help))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def main(dbfile, pidfile, mode): \n    Inspector(dbfile, pidfile).reuse_snapshot().snapshot(mode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def megacycles_to_cpu_seconds(mcycles): \n    return (mcycles / MCYCLES_PER_SECOND)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize_spaces(s): \n    return '   '.join(s.split())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_solve_rational(): \n    assert (solve(((x - (y ** 3)) / ((y ** 2) * sqrt((1 - (y ** 2))))), x) == [(y ** 3)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def backup_create(context, values): \n    return IMPL.backup_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _delete_asset(course_key, asset_key_string): \n    if asset_key_string: \n      try: \n         asset_key = AssetKey.from_string(asset_key_string) \n      except InvalidKeyError: \n         if ('/' == asset_key_string[0]): \n            asset_key_string = asset_key_string[1:] \n            try: \n               asset_key = AssetKey.from_string(asset_key_string) \n            except InvalidKeyError: \n               LOGGER.info('In   course   %r,   unable   to   parse   asset   key   %r,   not   attempting   to   delete   signatory.', course_key, asset_key_string) \n               return \n         else: \n            LOGGER.info('In   course   %r,   unable   to   parse   asset   key   %r,   not   attempting   to   delete   signatory.', course_key, asset_key_string) \n            return \n      try: \n         delete_asset(course_key, asset_key) \n      except AssetNotFoundException: \n         pass",
        "line_count": 18,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def import_module(name, deprecated=False): \n    with warnings.catch_warnings(): \n      if deprecated: \n         warnings.filterwarnings('ignore', '.+   (module|package)', DeprecationWarning) \n      try: \n         module = __import__(name, level=0) \n      except ImportError: \n         raise TestSkipped(('No   module   named   ' + name)) \n      else: \n         return module",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def bold(text): \n    return u''.join([CONTROL_BOLD, text, CONTROL_BOLD])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_logger(): \n    return LOGGER",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCubicPathByBeginEnd(begin, controlPoints, elementNode, end): \n    return svg_reader.getCubicPoints(begin, controlPoints, end, lineation.getNumberOfBezierPoints(begin, elementNode, end))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mirror_y(clip, apply_to='mask'): \n    return clip.fl_image((lambda f: f[::(-1)]), apply_to=apply_to)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getimage(photo): \n    photo.tk.call('PyImagingPhotoGet', photo)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_allknn_sk_estimator(): \n    check_estimator(AllKNN)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _stdin_ready_other(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_cnf(expr): \n    return _is_form(expr, And, Or)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def forget(func, *xs): \n    return Forget(func)(*xs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attested_labels(tokens): \n    return tuple(set((label for (tok, label) in tokens)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def disableCache(): \n    _entityCache = _NullCache()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def scale_taxa_data_matrix(coords, pct_var): \n    return (coords[:, :len(pct_var)] * (pct_var / pct_var.max()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pause_trace(): \n    return replace_trace()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_module_info(xblock, rewrite_static_links=True, include_ancestor_info=False, include_publishing_info=False): \n    with modulestore().bulk_operations(xblock.location.course_key): \n      data = getattr(xblock, 'data', '') \n      if rewrite_static_links: \n         data = replace_static_urls(data, None, course_id=xblock.location.course_key) \n      if (not isinstance(xblock.location, LibraryUsageLocator)): \n         modulestore().has_changes(modulestore().get_course(xblock.location.course_key, depth=None)) \n      xblock_info = create_xblock_info(xblock, data=data, metadata=own_metadata(xblock), include_ancestor_info=include_ancestor_info) \n      if include_publishing_info: \n         add_container_page_publishing_info(xblock, xblock_info) \n      return xblock_info",
        "line_count": 10,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def test__FileIO___reduce_ex__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mask_to_positions(maskstring): \n    return nonzero(array(map(int, maskstring)))[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shared_normal(num_rows, num_cols, scale=1): \n    return theano.shared(numpy.random.normal(scale=scale, size=(num_rows, num_cols)).astype(theano.config.floatX))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_memo(): \n    if available: \n      cupy.clear_memo()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_memory(t): \n    return (100 * (0.5 + (0.5 * np.sin(((0.5 * np.pi) * t)))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_template_register(): \n    return django.template.Library()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def static(path): \n    return StaticNode.handle_simple(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(*args, **kwargs): \n    return _UserFriendlyRNG.new(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rsentence(length=4): \n    return '   '.join((rword(random.randint(4, 9)) for i in range(length)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_permission_types(): \n    return _PERMISSION_TYPES.keys()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def IsErrorSuppressedByNolint(category, linenum): \n    return ((linenum in _error_suppressions.get(category, set())) or (linenum in _error_suppressions.get(None, set())))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def StudentT(name, nu): \n    return rv(name, StudentTDistribution, (nu,))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_colormaps(): \n    return _colormaps.copy()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(): \n    writeOutput('   '.join(sys.argv[1:]), False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_application_call(var): \n    return get_annotation(var, ApplicationCall)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_trace(frame=None): \n    Pdb().set_trace((frame or sys._getframe().f_back))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ismodule(object): \n    return isinstance(object, types.ModuleType)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewMouseTool(): \n    return ZoomIn()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decipher_affine(msg, key, symbols=None): \n    return encipher_affine(msg, key, symbols, _inverse=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_directory(dirpath): \n    if os.path.exists(dirpath): \n      shutil.rmtree(dirpath, ignore_errors=True)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def index_to_month(index): \n    return (((index // 12) + 1), ((index % 12) + 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_installed_samples(shop): \n    return bool((get_installed_products(shop) or get_installed_categories(shop) or get_installed_carousel(shop)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def vserver_sslcert_exists(v_name, sc_name, **connection_args): \n    return (_vserver_sslcert_get(v_name, sc_name, **connection_args) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_current_task(): \n    return _task_stack.top",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return OutputModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mangle_c(ident, argtys): \n    return ((PREFIX + mangle_identifier(ident)) + mangle_args_c(argtys))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fail(msg=None): \n    _report_failure(msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _test(name, msg): \n    return {'name': name, 'result': None, 'comment': msg, 'changes': {}}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_time(time=None, format=None, rebase=True): \n    return get_i18n().format_time(time, format, rebase)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def takes_args(function): \n    return bool((function.__code__.co_flags & 4))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def contains_softmax(f): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or __virtualname__), ('username', 'password', 'datacenter_id'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def convert_FloatProperty(model, prop, kwargs): \n    return f.FloatField(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _slow_construct_edges(G, radius, p): \n    for ((u, pu), (v, pv)) in combinations(G.nodes(data='pos'), 2): \n      if (sum(((abs((a - b)) ** p) for (a, b) in zip(pu, pv))) <= (radius ** p)): \n         G.add_edge(u, v)",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def resolved(rpath): \n    return realpath(abspath(rpath))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cache_from_env(env): \n    return item_from_env(env, 'swift.cache')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _item_to_metric(iterator, resource): \n    return Metric.from_api_repr(resource, iterator.client)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def empty(shape): \n    return EigenMatrix(np.zeros(shape))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___add__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove(name=None, pkgs=None, **kwargs): \n    return _uninstall(action='remove', name=name, pkgs=pkgs, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show_interfaces(resolve_mac=True): \n    return IFACES.show(resolve_mac)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_filesize(size): \n    for suffix in ('bytes', 'KB', 'MB', 'GB', 'TB'): \n      if (size < 1024.0): \n         if (suffix in ('GB', 'TB')): \n            return '{0:3.2f}   {1}'.format(size, suffix) \n         else: \n            return '{0:3.1f}   {1}'.format(size, suffix) \n      size /= 1024.0",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_notifier(publisher_id): \n    return NOTIFIER.prepare(publisher_id=publisher_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def publish(): \n    os.system('python   setup.py   sdist   upload')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def endian_int(pkt): \n    return int(''.join(pkt), 16)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _activities_at_offset(q, limit, offset): \n    return _activities_limit(q, limit, offset).all()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return (True if ('chef.client' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def block_device_mapping_destroy(context, bdm_id): \n    return IMPL.block_device_mapping_destroy(context, bdm_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def t_WS(t): \n    if (t.lexer.at_line_start and (t.lexer.paren_count == 0)): \n      return t",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def quota_get_all(context, project_id): \n    return IMPL.quota_get_all(context, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _changed(name, msg, **changes): \n    return {'name': name, 'result': True, 'comment': msg, 'changes': changes}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _sigma(values): \n    return math.sqrt(_variance(values))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_enumerator_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RelayStateHelper(manager, delay): \n    return internet.TimerService(delay, _checkState, manager)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def degree(G, nbunch=None, weight=None): \n    return G.degree(nbunch, weight)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enterprise_enabled(): \n    return ('enterprise' in settings.INSTALLED_APPS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_region(): \n    return (parse_region(getattr(_local, 'region', '')) or RESTOFWORLD)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def result_to_country(result): \n    if ('country' in result): \n      mapbox_country = result['country'] \n      codes = dict(((v, k) for (k, v) in product_details.get_regions('en-US').iteritems())) \n      code = codes.get(mapbox_country['name'], '') \n      lookup_args = {'name': mapbox_country['name']} \n      args = {'mapbox_id': mapbox_country['id'], 'code': code} \n      args.update(lookup_args) \n      query = (Q(**lookup_args) | Q(mapbox_id=mapbox_country['id'])) \n      country_qs = Country.objects.filter(query).distinct() \n      if country_qs.exists(): \n         if (country_qs.count() == 2): \n            deduplicate_countries(country_qs[0], country_qs[1]) \n         country_qs.update(**args) \n         country = country_qs[0] \n      else: \n         country = Country.objects.create(**args) \n      return country",
        "line_count": 17,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def getNewRepository(): \n    return GcodeStepRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(): \n    signals.initialized.connect(pelican_init)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_declaration_specifiers_4(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def end_block(fid, kind): \n    write_int(fid, FIFF.FIFF_BLOCK_END, kind)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip(s): \n    return s.strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _out_encoding(): \n    return _stream_encoding(sys.stdout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gamma(x): \n    return exp(gammaln(x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _RetainHorizontalSpacing(uwline): \n    for tok in uwline.tokens: \n      tok.RetainHorizontalSpacing(uwline.first.column, uwline.depth)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def report_nodes_not_run(notrun): \n    if notrun: \n      logger.info(u'***********************************') \n      for info in notrun: \n         logger.error((u'could   not   run   node:   %s' % u'.'.join((info[u'node']._hierarchy, info[u'node']._id)))) \n         logger.info((u'crashfile:   %s' % info[u'crashfile'])) \n         logger.debug(u'The   following   dependent   nodes   were   not   run') \n         for subnode in info[u'dependents']: \n            logger.debug(subnode._id) \n      logger.info(u'***********************************') \n      raise RuntimeError(u'Workflow   did   not   execute   cleanly.   Check   log   for   details')",
        "line_count": 10,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def versioned_id_field(resource_settings): \n    return (resource_settings['id_field'] + app.config['VERSION_ID_SUFFIX'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show_hidden(str, show_all=False): \n    return (show_all or str.startswith('__') or (not str.startswith('_')))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def ReserveKeys(keys): \n    datastore._GetConnection()._reserve_keys(ConvertKeys(keys))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def login_rate_limit(): \n    return '{count}/{timeout}minutes'.format(count=flaskbb_config['AUTH_REQUESTS'], timeout=flaskbb_config['AUTH_TIMEOUT'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def export_book(databook): \n    return json.dumps(databook._package(), default=date_handler)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def current_timestamp(): \n    return calendar.timegm(datetime.datetime.utcnow().utctimetuple())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getTokenByNumber(number): \n    return ('_%s_' % number)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addFacesByLoopReversed(faces, indexedLoop): \n    addFacesByLoop(faces, indexedLoop[::(-1)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pythonexecutable(): \n    return {'pythonexecutable': sys.executable}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_key(*args, **kwargs): \n    return ':'.join([('%s=%s' % (k, v)) for (k, v) in sorted(kwargs.iteritems())])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def file_list(*packages): \n    return __salt__['lowpkg.file_list'](*packages)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def utcnow(): \n    return datetime.datetime.now(pytz.utc)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _AddAccumulatedActionsToMSVS(p, spec, actions_dict): \n    for primary_input in actions_dict: \n      inputs = OrderedSet() \n      outputs = OrderedSet() \n      descriptions = [] \n      commands = [] \n      for action in actions_dict[primary_input]: \n         inputs.update(OrderedSet(action['inputs'])) \n         outputs.update(OrderedSet(action['outputs'])) \n         descriptions.append(action['description']) \n         commands.append(action['command']) \n      description = ',   and   also   '.join(descriptions) \n      command = '\\r\\n'.join(commands) \n      _AddCustomBuildToolForMSVS(p, spec, primary_input=primary_input, inputs=inputs, outputs=outputs, description=description, cmd=command)",
        "line_count": 13,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def run_stderr(name, cmd, exec_driver=None, stdin=None, python_shell=True, output_loglevel='debug', use_vt=False, ignore_retcode=False, keep_env=None): \n    return _run(name, cmd, exec_driver=exec_driver, output='stderr', stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, use_vt=use_vt, ignore_retcode=ignore_retcode, keep_env=keep_env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def autoflush(): \n    logs_buffer().autoflush()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def audit(): \n    return s3_rest_controller('s3', 'audit')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def all_bit_strings(bits, dtype='uint8'): \n    return np.array([[int(x) for x in np.binary_repr(i, width=bits)] for i in xrange(0, (2 ** bits))], dtype=dtype)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def installed(version=tomcat.DEFAULT_VERSION): \n    if (tomcat.version(tomcat.DEFAULT_INSTALLATION_PATH) != version): \n      tomcat.install_from_source(version=version, overwrite=True)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def mmread(source): \n    return MMFile().read(source)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load(stream): \n    return yaml.load(stream, Loader=AstropyLoader)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_secret_id(id): \n    return parse_object_id('secrets', id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def media(request): \n    return {u'MEDIA_URL': settings.MEDIA_URL}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RaisedCosine(name, mu, s): \n    return rv(name, RaisedCosineDistribution, (mu, s))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def security_group_exists(context, project_id, group_name): \n    return IMPL.security_group_exists(context, project_id, group_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sid(): \n    return ('id-' + rndstr(17))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def createTables(tables, ifNotExists=True): \n    for table in tables: \n      _dbschema_logger.info('creating   table   %s', table._imdbpyName) \n      table.createTable(ifNotExists) \n      if table._imdbpySchema.values: \n         _dbschema_logger.info('inserting   values   into   table   %s', table._imdbpyName) \n         for key in table._imdbpySchema.values: \n            for value in table._imdbpySchema.values[key]: \n               table(**{key: unicode(value)})",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_year(book): \n    return int(book['date'].split()[1])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_signed_purchase_params(cart, callback_url=None, extra_data=None): \n    return sign(get_purchase_params(cart, callback_url=callback_url, extra_data=extra_data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_pkiz(token_text): \n    return token_text.startswith(PKIZ_PREFIX)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def indexing_is_enabled(): \n    return settings.FEATURES.get('ENABLE_COURSEWARE_INDEX', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_type_get_all(context, inactive=False, filters=None): \n    return IMPL.instance_type_get_all(context, inactive=inactive, filters=filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _clear_dict(endpoint_props): \n    return dict(((prop_name, prop_val) for (prop_name, prop_val) in six.iteritems(endpoint_props) if (prop_val is not None)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def p_statements(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_encoding(encoding): \n    ET.XML((\"<?xml   version='1.0'   encoding='%s'?><xml   />\" % encoding))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_cls(name, fallback_cls=conf.raw_layer): \n    return globals().get(name, fallback_cls)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_trash_interval(): \n    return get_conf().get(_CNF_TRASH_INTERVAL)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init_manager(): \n    signal.signal(signal.SIGINT, signal.SIG_IGN)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def status(ctid_or_name): \n    with settings(warn_only=True): \n      return _vzctl('status', ctid_or_name)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def html_page_context(app, pagename, templatename, context, doctree): \n    if (doctree and doctree.get('bokeh_plot_include_bokehjs')): \n      context['bokeh_css_files'] = resources.css_files \n      context['bokeh_js_files'] = resources.js_files",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def swapaxes(a, axis1, axis2): \n    return a.swapaxes(axis1, axis2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _SetOutputFormat(output_format): \n    _cpplint_state.SetOutputFormat(output_format)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def header_check(octet): \n    return (chr(octet) != _QUOPRI_HEADER_MAP[octet])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exit(): \n    raise SystemExit",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rarfile_set_path_sep(separator): \n    if rarfile: \n      rarfile.PATH_SEP = separator",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def unused(): \n    tkMessageBox.showinfo(u'')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def numericise_all(input, empty2zero=False, default_blank=''): \n    return [numericise(s, empty2zero, default_blank) for s in input]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def vm_state_from_status(status): \n    for (state, task_map) in _STATE_MAP.iteritems(): \n      status_string = task_map.get('default') \n      if (status.lower() == status_string.lower()): \n         return state",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def __virtual__(): \n    return ('nagios.list_plugins' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def basic_auth_header(username, password): \n    return (b('Basic   %s') % base64.b64encode(to_bytes(('%s:%s' % (username, password)), errors='surrogate_or_strict')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_parameter_by_name(device, name): \n    for i in device.parameters: \n      if (i.original_name == name): \n         return i",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_correct_pip_version(): \n    assert (Path(pip.__file__).folder.folder.abspath == SRC_DIR)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def to_hgrid(node, auth, **data): \n    return NodeFileCollector(node, auth, **data).to_hgrid()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _std_string(s): \n    return str(s.decode('US-ASCII'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_iterable_but_not_string(obj): \n    return (is_iterable(obj) and (not hasattr(obj, 'strip')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def escape(string): \n    return ('\"%s\"' % string.replace('\\\\', '\\\\\\\\').replace(' DCTB ', '\\\\t').replace('\\r', '\\\\r').replace('\\n', '\\\\n').replace('\"', '\\\\\"'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TruncDelta(delta): \n    return datetime.timedelta(days=delta.days, seconds=delta.seconds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_language_list(site_id=None): \n    return ([lang['code'] for lang in get_languages(site_id)] if settings.USE_I18N else [settings.LANGUAGE_CODE])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def del_marker(path): \n    if (path and os.path.exists(path)): \n      logging.debug('Removing   marker   file   %s', path) \n      try: \n         os.remove(path) \n      except: \n         logging.info('Cannot   remove   marker   file   %s', path) \n         logging.info('Traceback:   ', exc_info=True)",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def assert_server_running(server): \n    if (server.poll() is not None): \n      raise RuntimeError('Server   died   unexpectedly!')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_installed_pythons_pkgname(): \n    return [d for d in sorted(os.listdir(PATH_PYTHONS))]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _ips_get_pkgversion(line): \n    return line.split()[0].split('@')[1].strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_channel(string): \n    return (string and (string[0] in '#&+!'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_direct_abstract_declarator_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _UTC(): \n    return utc",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def network_disassociate(context, network_id, disassociate_host=True, disassociate_project=True): \n    return IMPL.network_disassociate(context, network_id, disassociate_host, disassociate_project)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_tags(value): \n    return re.sub('<[^>]*?>', '', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_no_rewrite(func, arg): \n    return (func(arg).args[0] == arg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_ec2_client_for_test(config): \n    return ec2_client(region=config['region'], zone=config['zone'], access_key_id=config['access_key_id'], secret_access_key=config['secret_access_key'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_wait_timeout(vm_): \n    return config.get_cloud_config_value('wait_for_timeout', vm_, __opts__, default=(15 * 60), search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def AccountListEntryFromString(xml_string): \n    return atom.CreateClassFromXMLString(AccountListEntry, xml_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def callback_method(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validator_errors_dict(): \n    return {('other   key',): ['other   error']}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skip_leading_wsp(f): \n    return StringIO('\\n'.join(map(string.strip, f.readlines())))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_long_description(): \n    return 'Infrastructure   plugins   use   different   techniques   to   identify   the\\n            remote   operating   system,   HTTP   daemon,   Web   Application   Firewalls,   remote   users\\n            and   any   other   information   that   is   related   to   the   target   web   application   but\\n            is   not   in   its   source   code.\\n            '",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def time_(attrs=None): \n    return _osquery_cmd(table='time', attrs=attrs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_volumes(): \n    return [dmdev for dmdev in os.listdir('/dev/mapper') if dmdev.endswith('-dmcrypt')]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getNewRepository(): \n    return ExtrusionRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_scale_change_value(label): \n    return _get_array_element('scale   change', label, (0.78, 1.0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def issequence(item): \n    return (type(item) in (ListType, StringType, TupleType))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_on_appengine(gdata_service): \n    gdata_service.http_client = AppEngineHttpClient()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _propagate_root_output(graph, node, field, connections): \n    for (destnode, inport, src) in connections: \n      value = getattr(node.inputs, field) \n      if isinstance(src, tuple): \n         value = evaluate_connect_function(src[1], src[2], value) \n      destnode.set_input(inport, value)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def describe_cache_clusters(name=None, conn=None, region=None, key=None, keyid=None, profile=None, **args): \n    return _describe_resource(name=name, name_param='CacheClusterId', res_type='cache_cluster', info_node='CacheClusters', conn=conn, region=region, key=key, keyid=keyid, profile=profile, **args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_IntegerProperty(model, prop, kwargs): \n    return get_IntegerField(kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_create(context, values): \n    return IMPL.fixed_ip_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getGAEObjects(context): \n    return context.extra.setdefault('gae_objects', GAEReferenceCollection())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def striphtml(text): \n    return Markup(text).striptags()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sphere(individual): \n    return (sum(((gene * gene) for gene in individual)),)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def startDebugMode(): \n    Failure.__init__ = _debuginit",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mds_create(**kwargs): \n    return ceph_cfg.mds_create(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ParameterAsNumpy(param): \n    return np.fromstring(param.mat, dtype='float32').reshape(*tuple(param.dimensions))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def collect_exception(t, v, tb, limit=None): \n    return col.collectException(t, v, tb, limit=limit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def with_tempdir(func): \n    return func",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return HILModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pytest_namespace(): \n    return {'placeholders': placeholders}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_from_import(fromname, names): \n    return From(fromname, [(name, None) for name in names])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_scalar(obj): \n    return ((not is_string_like(obj)) and (not iterable(obj)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def norm_corr(x, y, mode='valid'): \n    return (np.correlate(x, y, mode) / ((np.std(x) * np.std(y)) * x.shape[(-1)]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assign_default_role(course_id, user): \n    assign_role(course_id, user, FORUM_ROLE_STUDENT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize_name(name): \n    return re.sub('[-_.]+', '-', name).lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pop(image, selem, out=None, mask=None, shift_x=False, shift_y=False): \n    return _apply_scalar_per_pixel(generic_cy._pop, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deploy(): \n    local('appcfg.py   --oauth2   update   .')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def auth(username, password, **kwargs): \n    return authenticate(username, password)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _RunningInThread(thread): \n    return (threading.currentThread().getName() == thread.getName())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('rdp' if ('rdp.enable' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def suggest(w): \n    return spelling.suggest(w)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def match(pattern, sentence, *args, **kwargs): \n    return compile(pattern, *args, **kwargs).match(sentence)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vs_to_tup(vs): \n    return re.findall('\\\\d+', vs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FormatISOTime(t): \n    return time.strftime('%Y-%m-%d   %H:%M:%S', time.gmtime((t / 1000000.0)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def server_poweroff(): \n    return __execute_cmd('serveraction   powerdown')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def used_memory(): \n    return (psutil.virtual_memory().used / (2 ** 20))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def energy(W, V, H): \n    return (- (T.dot(V, W) * H).sum(axis=1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return SensorsModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_path_of_temp_url(url): \n    return '{}/static/{}'.format(app.config['BASE_DIR'], url[len('/serve_static/'):])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_fromfile(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user_list(**kwargs): \n    return [row[0] for row in tsql_query('SELECT   name   FROM   sysusers   where   issqluser=1   or   isntuser=1', as_dict=False, **kwargs)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewRepository(): \n    return OozebaneRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def moments_central(image, cr, cc, order=3): \n    return _moments_cy.moments_central(image, cr, cc, order)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_first_child_data(node): \n    return node.childNodes[0].data",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hexencode(value): \n    return utf8encode(value).encode('hex')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unpack_cli_arg(cli_argument, value): \n    return _unpack_cli_arg(cli_argument.argument_model, value, cli_argument.cli_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def undo_patch(): \n    Request.send = _original_request_send",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_softly(context, obj): \n    update_and_save(context, obj, {'deleted_at': timeutils.utcnow()})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gen_auth_resp(chall_list): \n    return [('%s%s' % (chall.__class__.__name__, chall.domain)) for chall in chall_list]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _footer_static_url(request, name): \n    return request.build_absolute_uri(staticfiles_storage.url(name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _use_appnope(): \n    return ((sys.platform == 'darwin') and (V(platform.mac_ver()[0]) >= V('10.9')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def pack(structure, data): \n    return binascii.hexlify(struct.pack(('<' + structure), *data)).upper()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _warn_if_string(iterable): \n    if isinstance(iterable, string_types): \n      from warnings import warn \n      warn(Warning('response   iterable   was   set   to   a   string.      This   appears   to   work   but   means   that   the   server   will   send   the   data   to   the   client   char,   by   char.      This   is   almost   never   intended   behavior,   use   response.data   to   assign   strings   to   the   response   object.'), stacklevel=2)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_pixel(x, y): \n    return _sensehat.get_pixel(x, y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index(it, ind): \n    return type(it)([it[i] for i in ind])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def DistEntry(): \n    flags.StartMain(main)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_installed_packages(): \n    return [x.key for x in filter((lambda y: (where_am_i not in y.location)), pkg_resources.working_set)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def add(a, b): \n    return (a + b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _create_scheduled_actions(conn, as_name, scheduled_actions): \n    if scheduled_actions: \n      for (name, action) in six.iteritems(scheduled_actions): \n         if (('start_time' in action) and isinstance(action['start_time'], six.string_types)): \n            action['start_time'] = datetime.datetime.strptime(action['start_time'], DATE_FORMAT) \n         if (('end_time' in action) and isinstance(action['end_time'], six.string_types)): \n            action['end_time'] = datetime.datetime.strptime(action['end_time'], DATE_FORMAT) \n         conn.create_scheduled_group_action(as_name, name, desired_capacity=action.get('desired_capacity'), min_size=action.get('min_size'), max_size=action.get('max_size'), start_time=action.get('start_time'), end_time=action.get('end_time'), recurrence=action.get('recurrence'))",
        "line_count": 7,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def onCellAppData(key, value): \n    DEBUG_MSG(('onCellAppData:   %s' % key))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_db_master_ip(): \n    return file_io.read(constants.MASTERS_FILE_LOC).rstrip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def changes_on_update(model): \n    return any(((column.onupdate is not None) for column in sqlalchemy_inspect(model).columns))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def rgb2hex(rgb): \n    return ('#%02x%02x%02x' % tuple([round((val * 255)) for val in rgb]))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_executable(path): \n    return (((stat.S_IXUSR | stat.S_IXGRP) | stat.S_IXOTH) & os.stat(path)[stat.ST_MODE])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_extended_length(flags): \n    return ((flags & _BGP_PA_EXTENDED_LENGTH) == _BGP_PA_EXTENDED_LENGTH)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Pmfs(pmfs, **options): \n    for pmf in pmfs: \n      Pmf(pmf, **options)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def shortcode_role(name, rawtext, text, lineno, inliner, options={}, content=[]): \n    return ([docutils.nodes.raw(u'', text, format=u'html')], [])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_tmux_configs(version): \n    for (fname, matcher, priority, file_version) in list_all_tmux_configs(): \n      if matcher(file_version, version): \n         (yield (fname, ((priority + (file_version.minor * 10)) + (file_version.major * 10000))))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getDivmod(x, y): \n    return divmod(x, y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def typed_dict(key_type, value_type, default): \n    return (lambda setting: {key_type(StringConverter(key)): (value_type(StringConverter(value)) if (value != '') else default) for (key, value) in dict(setting).items()})",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def fake_execute_default_reply_handler(*ignore_args, **ignore_kwargs): \n    return ('', '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLSTICKSANDWICH(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLSTICKSANDWICH)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_flat_specs(data_specs): \n    return (is_flat_space(data_specs[0]) and is_flat_source(data_specs[1]))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def interpret_sents(inputs, grammar, semkey=u'SEM', trace=0): \n    return [[(syn, root_semrep(syn, semkey)) for syn in syntrees] for syntrees in parse_sents(inputs, grammar, trace=trace)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def info(request, message): \n    add_message(get_request(request), constants.INFO, message)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_navigator_audit_log_dir(): \n    return get_conf().get(_CONF_NAVIGATOR_AUDIT_LOG_DIR, '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def empty_asset_finder(): \n    return tmp_asset_finder(equities=None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resetlocale(category=LC_ALL): \n    _setlocale(category, _build_localename(getdefaultlocale()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_random_bytes(n): \n    return _UserFriendlyRNG.get_random_bytes(n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_average(): \n    return _load_average()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prepare_realm_pattern(source): \n    return (('(?<![^\\\\s\\'\"\\\\(,:<])(?P<name>' + source) + ')(?!\\\\w)')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_block(tokens, context): \n    for token in tokens: \n      type_ = token.type \n      if (type_ == u'{'): \n         validate_block(token.content, context) \n      elif (type_ not in (u';', u'ATKEYWORD')): \n         validate_any(token, context)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def dup_abs(f, K): \n    return [K.abs(coeff) for coeff in f]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read_actions(): \n    while True: \n      key = get_key() \n      if (key in (const.KEY_UP, 'k')): \n         (yield const.ACTION_PREVIOUS) \n      elif (key in (const.KEY_DOWN, 'j')): \n         (yield const.ACTION_NEXT) \n      elif (key in (const.KEY_CTRL_C, 'q')): \n         (yield const.ACTION_ABORT) \n      elif (key in ('\\n', '\\r')): \n         (yield const.ACTION_SELECT)",
        "line_count": 10,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def __virtual__(): \n    return ('at.at' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _require_crypto_or_die(): \n    if (not HAS_CRYPTO): \n      raise CryptoUnavailableError('No   crypto   library   available')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def not_(clause): \n    return operators.inv(_literal_as_binds(clause))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pushValue(value): \n    getCurrentThreadData().valueStack.append(copy.deepcopy(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cvxopt2dense(value): \n    return np.array(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_commerce_config(enabled=False, checkout_page='/test_basket/', receipt_page='/checkout/receipt/'): \n    CommerceConfiguration.objects.create(checkout_on_ecommerce_service=enabled, receipt_page=receipt_page, single_course_checkout_page=checkout_page)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _media_file_to_dict(mf, d): \n    for fld in mf.readable_fields(): \n      if ('art' == fld): \n         continue \n      val = getattr(mf, fld) \n      if (val is None): \n         val = '' \n      if _verify_var_type(val): \n         d[('$' + fld)] = _as_str(val)",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def getsid(name): \n    return info(name)['sid']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_labels(dataset_dir, filename=LABELS_FILENAME): \n    return tf.gfile.Exists(os.path.join(dataset_dir, filename))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def key(keyid, filename=None, url=None, keyserver='subkeys.pgp.net', update=False): \n    if (not apt_key_exists(keyid)): \n      add_apt_key(keyid=keyid, filename=filename, url=url, keyserver=keyserver, update=update)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def resolve_encoding(alias, _aliases=_ENCODING_ALIASES): \n    return _aliases.get(alias.lower(), alias)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def time_utcnow(): \n    return datetime.now(UTC)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def debug(request, message, extra_tags='', fail_silently=False): \n    add_message(request, constants.DEBUG, message, extra_tags=extra_tags, fail_silently=fail_silently)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def avail_sizes(conn=None): \n    return _query('plans/list')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_AlignIO_protein(): \n    assert (1 == AlignIO.convert('Clustalw/hedgehog.aln', 'clustal', 'Phylip/hedgehog.phy', 'phylip'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def load_comparable_cert(*names): \n    return jose.ComparableX509(load_cert(*names))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_a(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_scanner(hass, config): \n    return SCANNER",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rsqrt(x): \n    return (1.0 / sqrt(x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def footer_context_processor(request): \n    return dict([('IS_REQUEST_IN_MICROSITE', is_request_in_themed_site())])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_text_serializer(serializer): \n    return isinstance(serializer.dumps({}), text_type)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def organization_follower_count(context, data_dict): \n    return group_follower_count(context, data_dict)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _read_int2(fid): \n    return np.fromfile(fid, '>i2', 1)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def host_os_is(osname): \n    return (os.name == osname)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _validate_namespace(name): \n    if (name.find('.', 1, (len(name) - 1)) < 0): \n      raise errors.InvalidConfiguration((\"Invalid   MongoDB   namespace   '%s'!\" % (name,)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def enter_star_ratings(context, val=3): \n    for id_ in STAR_CONTAINER_IDS: \n      rate_id(context, id_, val=val)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def some_calculation(x, y, z=1): \n    return ((x * y) / z)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK): \n    return Differ(linejunk, charjunk).compare(a, b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_nonce(): \n    return unicode_type((unicode_type(random.getrandbits(64)) + generate_timestamp()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chelsea(): \n    return load('chelsea.png')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quarantine_session(request, locations): \n    request.session['third_party_auth_quarantined_modules'] = locations",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def capwords(s, sep=None): \n    return join(map(capitalize, s.split(sep)), (sep or '   '))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def checkItemsEqual(L1, L2): \n    return ((len(L1) == len(L2)) and (sorted(L1) == sorted(L2)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fix_script(path): \n    if os.path.isfile(path): \n      with open(path, 'rb') as script: \n         firstline = script.readline() \n         if (not firstline.startswith('#!python')): \n            return False \n         exename = sys.executable.encode(sys.getfilesystemencoding()) \n         firstline = (('#!' + exename) + os.linesep.encode('ascii')) \n         rest = script.read() \n      with open(path, 'wb') as script: \n         script.write(firstline) \n         script.write(rest) \n      return True",
        "line_count": 12,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def bases_mro(bases): \n    for base in bases: \n      for class_ in base.__mro__: \n         (yield class_)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def success(request, message): \n    add_message(get_request(request), constants.SUCCESS, message)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dist_from_args(ctx, args): \n    return Distribution.get_distribution(ctx, name=args.dist_name, recipes=split_argument_list(args.requirements), extra_dist_dirs=split_argument_list(args.extra_dist_dirs), require_perfect_match=args.require_perfect_match)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lower_dict(input_dict): \n    return {k.lower(): v for (k, v) in input_dict.iteritems()}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def assert_almost_equal(first, second, places=7, msg=None, values=True): \n    if (round((second - first), places) != 0): \n      extra = ('within   %r   places' % places) \n      _report_inequality_failure(first, second, msg, values, '!=', extra)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cell_get(context, cell_name): \n    return IMPL.cell_get(context, cell_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_endian_independence(): \n    for endian in [u'<', u'>']: \n      for ntype in [u'i', u'f']: \n         for byte in [u'4', u'8']: \n            x = np.array([1, 2, 3], dtype=((endian + ntype) + byte)) \n            u.m.to(u.cm, x)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def public_key_to_bc_address(public_key): \n    return public_key_to_pubkey_address(public_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_session_log(): \n    return get_log_for_pid(static.PID)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def step(x): \n    return [(x + 3), (2 * x)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def take(n, iterable): \n    return list(islice(iterable, n))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def identity(x, name=None): \n    return x",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def module_path(local_function): \n    return os.path.abspath(inspect.getsourcefile(local_function))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_current_version_name(): \n    return os.environ['CURRENT_VERSION_ID'].split('.')[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_platform_little_endian(): \n    return (sys.byteorder == 'little')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_dssp_dict(filename): \n    with open(filename, 'r') as handle: \n      return _make_dssp_dict(handle)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return ModeModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _root_linearmixing_doc(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _create_extn_pattern(single_extn_symbols): \n    return (((((((((((((_RFC3966_EXTN_PREFIX + _CAPTURING_EXTN_DIGITS) + u('|')) + u('[   \\\\u00A0\\\\t,]*(?:e?xt(?:ensi(?:o\\\\u0301?|\\\\u00F3))?n?|')) + u('\\\\uFF45?\\\\uFF58\\\\uFF54\\\\uFF4E?|')) + u('[')) + single_extn_symbols) + u(']|int|anexo|\\\\uFF49\\\\uFF4E\\\\uFF54)')) + u('[:\\\\.\\\\uFF0E]?[   \\\\u00A0\\\\t,-]*')) + _CAPTURING_EXTN_DIGITS) + u('#?|')) + u('[-   ]+(')) + _DIGITS) + u('{1,5})#'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return SkeinlayerRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def byte(num): \n    return pack('B', num)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_block_crawl(payload): \n    return pack(crawl_response_format, *(payload.up, payload.down, payload.total_up_requester, payload.total_down_requester, payload.sequence_number_requester, payload.previous_hash_requester, payload.total_up_responder, payload.total_down_responder, payload.sequence_number_responder, payload.previous_hash_responder, payload.public_key_requester, payload.signature_requester, payload.public_key_responder, payload.signature_responder))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uncheck(value, *checkboxes): \n    if value: \n      for checkbox in checkboxes: \n         checkbox.setChecked(False)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def parseSqliteTableSchema(value): \n    if value: \n      table = {} \n      columns = {} \n      for match in re.finditer('(\\\\w+)[\\\\\"\\'`]?\\\\s+(INT|INTEGER|TINYINT|SMALLINT|MEDIUMINT|BIGINT|UNSIGNED   BIG   INT|INT2|INT8|INTEGER|CHARACTER|VARCHAR|VARYING   CHARACTER|NCHAR|NATIVE   CHARACTER|NVARCHAR|TEXT|CLOB|LONGTEXT|BLOB|NONE|REAL|DOUBLE|DOUBLE   PRECISION|FLOAT|REAL|NUMERIC|DECIMAL|BOOLEAN|DATE|DATETIME|NUMERIC)\\\\b', value, re.I): \n         columns[match.group(1)] = match.group(2) \n      table[conf.tbl] = columns \n      kb.data.cachedColumns[conf.db] = table",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def connect_to_images(region=None, public=True): \n    return _create_client(ep_name='image', region=region, public=public)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getSidesMinimumThreeBasedOnPrecision(elementNode, radius): \n    return max(getSidesBasedOnPrecision(elementNode, radius), 3)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable_css_animations(page): \n    page.browser.execute_script(\"\\n                        var   styles   =   document.getElementById('no-transitions'),\\n                                    head   =   document.head   ||   document.getElementsByTagName('head')[0];\\n\\n                        head.removeChild(styles)\\n            \")",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_points(G): \n    return [n for n in G if (G.out_degree(n) == 0)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def volume_list(**kwargs): \n    return describe_volumes(kwargs, 'function')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def object_download_fileobj(self, Fileobj, ExtraArgs=None, Callback=None, Config=None): \n    return self.meta.client.download_fileobj(Bucket=self.bucket_name, Key=self.key, Fileobj=Fileobj, ExtraArgs=ExtraArgs, Callback=Callback, Config=Config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apns_fetch_inactive_ids(certfile=None): \n    with closing(_apns_create_socket_to_feedback(certfile)) as socket: \n      inactive_ids = [] \n      for (ts, registration_id) in _apns_receive_feedback(socket): \n         inactive_ids.append(codecs.encode(registration_id, 'hex_codec')) \n      return inactive_ids",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _variance(values): \n    return (_mean([(v ** 2) for v in values]) - (_mean(values) ** 2))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __virtual__(): \n    return ('iptables.version' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def saferepr(o, maxlen=None, maxlevels=3, seen=None): \n    return u''.join(_saferepr(o, maxlen=maxlen, maxlevels=maxlevels, seen=seen))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DateFromTicks(ticks): \n    return date(*localtime(ticks)[:3])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_mute(hass): \n    hass.services.call(DOMAIN, SERVICE_VOLUME_MUTE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def html_escape(string): \n    return string.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('\"', '&quot;').replace(\"'\", '&#039;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_sorted_ascending(a): \n    return (np.fmax.accumulate(a) <= a).all()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_function(function): \n    function.snapshot = slogging.get_configuration()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ignore_nanwarnings(): \n    return WarningContext((('ignore',), {'category': RuntimeWarning, 'module': 'numpy.lib.nanfunctions'}))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def output_adjacent_tmpdir(output_path): \n    return os.path.dirname(output_path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def warn(message): \n    print(message, file=sys.stderr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def canon_path(nativepath): \n    return nativepath.replace(path.sep, SEP)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_dict(l): \n    return dict([(i, None) for i in l])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def standardize_name(name): \n    return (name.replace('/', '_') if name else 'no_name.json')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_hop_by_hop(header_name): \n    return (header_name.lower() in _hop_headers)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tree_details(text): \n    return leading_whitespace_re.sub(u'', text.rstrip())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_allocate_iscsi_target(context, volume_id, host): \n    return IMPL.volume_allocate_iscsi_target(context, volume_id, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_smote_sk_estimator(): \n    check_estimator(SMOTETomek)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _uninstall_flocker_ubuntu(): \n    return run_from_args(['apt-get', 'remove', '-y', '--purge', 'clusterhq-python-flocker'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ReorderHandlers(handler_list): \n    for (i, j) in itertools.combinations(xrange(len(handler_list)), 2): \n      if handler_list[i].MatchesAll(handler_list[j]): \n         (handler_list[i], handler_list[j]) = (handler_list[j], handler_list[i])",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def norollback(*pats, **opts): \n    raise hg_util.Abort('codereview   extension   enabled;   use   undo   instead   of   rollback')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_ntp_servers(servers): \n    return __salt__['ntp.set_servers'](commit=False, *servers)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _msg_type_to_str(mod, type_): \n    return ('%s(%d)' % (_get_value_name(mod, type_, 'OFPT_'), type_))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def count_nonzero(x): \n    return int(_count_nonzero(x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sort_objects(objects): \n    return sort_unicode(objects, force_text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def del_temp_file_copies(file_paths): \n    for file_path in file_paths: \n      temp_file_path = get_temp_file_path(file_path) \n      os.remove(temp_file_path)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_SAMPIntegratedClient(): \n    SAMPIntegratedClient()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(time_str): \n    return parse_iso(time_str)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_sameas(value, other): \n    return (value is other)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def epoch2datetime(epoch): \n    if (epoch is not None): \n      return datetime.datetime.fromtimestamp(epoch, tz=UTC)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def connection_pool(account_id, pool_size=3, pool_map=dict()): \n    return _get_connection_pool(account_id, pool_size, pool_map, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def One(dtype=None): \n    return Constant(1.0, dtype=dtype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mailchimp_get_endpoint(**kwargs): \n    return ({}, http.OK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_struct_or_union(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ellipse(x, y, width, height, fill=(0, 0, 0, 1), stroke=None, strokewidth=1): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_html_subsection(name): \n    return '<h2>{}</h2>'.format(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return HopRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_sys_or_user_meta(server_type, key): \n    return (is_user_meta(server_type, key) or is_sys_meta(server_type, key))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_interactive(): \n    return rcParams[u'interactive']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def urlquote(url, safe=u'/'): \n    return force_text(urllib_parse.quote(force_str(url), force_str(safe)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dictOf(key, value): \n    return Dict(ZeroOrMore(Group((key + value))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_group_create(context, values, policies=None, members=None): \n    return IMPL.instance_group_create(context, values, policies, members)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lcd(path): \n    return _change_cwd('lcwd', path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getsebool(boolean): \n    return list_sebool().get(boolean, {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resolve_all(anno, task): \n    return (x for x in (_first_match(anno, task), _first_match_any(anno)) if x)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def delete_multi(keys, **ctx_options): \n    return [future.get_result() for future in delete_multi_async(keys, **ctx_options)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def gettempprefix(): \n    return template",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def notifier_program(): \n    return wf().datafile(u'Notify.app/Contents/MacOS/applet')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getTransformedVector3Blindly(tetragrid, vector3): \n    return Vector3(getTransformedByList(tetragrid[0], vector3), getTransformedByList(tetragrid[1], vector3), getTransformedByList(tetragrid[2], vector3))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mminfo(source): \n    return MMFile.info(source)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('selinux' if ('selinux.getenforce' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def default_data_selector(connection): \n    return []",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xpath_lower_case(arg): \n    return (\"translate(%s,   'ABCDEFGHIJKLMNOPQRSTUVWXYZ',   'abcdefghijklmnopqrstuvwxyz')\" % arg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _collect_delete_commands(base_mapper, uowtransaction, table, states_to_delete): \n    for (state, state_dict, mapper, connection, update_version_id) in states_to_delete: \n      if (table not in mapper._pks_by_table): \n         continue \n      params = {} \n      for col in mapper._pks_by_table[table]: \n         params[col.key] = value = mapper._get_committed_state_attr_by_column(state, state_dict, col) \n         if (value is None): \n            raise orm_exc.FlushError((\"Can't   delete   from   table   %s   using   NULL   for   primary   key   value   on   column   %s\" % (table, col))) \n      if ((update_version_id is not None) and (mapper.version_id_col in mapper._cols_by_table[table])): \n         params[mapper.version_id_col.key] = update_version_id \n      (yield (params, connection))",
        "line_count": 11,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def index(s, *args): \n    return _apply(s.index, args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_webshells(extension, force_extension=False): \n    return _get_file_list('webshell', extension, force_extension)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def survey_series_rheader(r): \n    if (r.representation == 'html'): \n      db = current.db \n      s3db = current.s3db \n      (tablename, record) = s3_rheader_resource(r) \n      if (not record): \n         series_id = current.request.vars.series \n         table = s3db.survey_series \n         record = db((table.id == series_id)).select(table.id, table.template_id, table.name, table.status, limitby=(0, 1)).first() \n      if (record != None): \n         T = current.T \n         tabs = [(T('Details'), None), (T('Completed   Assessments'), 'complete'), (T('Summary'), 'summary'), (T('Chart'), 'graph'), (T('Map'), 'map')] \n         if current.auth.s3_has_permission('create', 'survey_complete'): \n            tabs.insert(1, (T('Enter   Completed   Assessment'), 'new_assessment/')) \n         rheader_tabs = s3_rheader_tabs(r, tabs) \n         ctable = s3db.survey_complete \n         qty = db((ctable.series_id == record.id)).count() \n         tsection = TABLE(_class='survey-complete-list') \n         label_section = T('Number   of   Completed   Assessment   Forms') \n         rsection = TR(TH(label_section), TD(qty)) \n         tsection.append(rsection) \n         urlexport = URL(c='survey', f='series_export_formatted', args=[record.id]) \n         translate_form = FORM(_action=urlexport) \n         translation_list = survey_getAllTranslationsForSeries(record.id) \n         if (len(translation_list) > 0): \n            translation_table = TABLE() \n            tr = TR(INPUT(_type='radio', _name='translation_language', _value='Default', _checked=True), LABEL('Default')) \n            column_count = 1 \n            for translation in translation_list: \n               if (column_count == 4): \n                  translation_table.append(tr) \n                  tr = TR() \n                  column_count = 0 \n               tr.append(INPUT(_type='radio', _name='translation_language', _value=translation['code'])) \n               tr.append(LABEL(translation['language'])) \n               column_count += 1 \n            if (column_count != 0): \n               translation_table.append(tr) \n            translate_form.append(translation_table) \n         export_xls_btn = INPUT(_type='submit', _id='export_xls_btn', _name='Export_Spreadsheet', _value=T('Download   Assessment   Form   Spreadsheet'), _class='action-btn') \n         translate_form.append(export_xls_btn) \n         export_rtf_btn = INPUT(_type='submit', _id='export_rtf_btn', _name='Export_Word', _value=T('Download   Assessment   Form   Document'), _class='action-btn') \n         translate_form.append(export_rtf_btn) \n         urlimport = URL(c='survey', f='series', args=[record.id, 'export_responses'], extension='xls') \n         buttons = DIV(A(T('Export   all   Completed   Assessment   Data'), _href=urlimport, _id='All_resposnes', _class='action-btn')) \n         rheader = DIV(TABLE(TR(TH(('%s:   ' % T('Template'))), s3db.survey_template_represent(record.template_id), TH(('%s:   ' % T('Name'))), record.name, TH(('%s:   ' % T('Status'))), s3db.survey_series_status[record.status])), tsection, translate_form, buttons, rheader_tabs) \n         return rheader",
        "line_count": 46,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def instantiate(name, *args, **kwargs): \n    return get_cls_by_name(name)(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(linter): \n    linter.register_reporter(JSONReporter)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_email(obj): \n    return obj.user.email",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Gompertz(name, b, eta): \n    return rv(name, GompertzDistribution, (b, eta))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parallel_helper(obj, methodname, *args, **kwargs): \n    return getattr(obj, methodname)(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_get_all_by_host_and_node(context, host, node): \n    return IMPL.instance_get_all_by_host_and_node(context, host, node)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run(): \n    for rqt in RereviewQueueTheme.objects.all(): \n      try: \n         rqt.theme.addon \n      except Addon.DoesNotExist: \n         log.info(('[Theme   %s]   Deleting   rereview_queue_theme,   add-on   does   not   exist.' % rqt.theme.id)) \n         rqt.delete()",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def delete(mountpoint, *devices, **kwargs): \n    return _restripe(mountpoint, 'delete', *devices, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable_microsites_pre_startup(log): \n    if is_feature_enabled(): \n      BACKEND.enable_microsites_pre_startup(log)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_unary_expression_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_no_element_by_css_selector(context, css_value, wait_time=MAX_WAIT_FOR_UNEXPECTED_ELEMENT): \n    _assert_no_element_by(context, By.CSS_SELECTOR, css_value, wait_time)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_public_extension(url_prefix, extension_data): \n    PUBLIC_EXTENSIONS[url_prefix] = extension_data",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def url_prefix(mat): \n    return ('/' + mat.string[:mat.start()].strip('/'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_train_cmd(): \n    train(os.path.join(pylearn2.__path__[0], 'scripts/autoencoder_example/dae.yaml'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text, wipeRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), wipeRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=HTMLLexer(), buf_class=HTMLBuffer, langintel_class=HTMLLangIntel, cile_driver_class=HTMLCILEDriver, is_cpln_lang=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_types_get_by_name_or_id(context, volume_type_list): \n    return IMPL.volume_types_get_by_name_or_id(context, volume_type_list)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ClosePreviewWindow(): \n    vim.command(u'silent!   pclose!')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return CoilRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def codename(): \n    return _distro.codename()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upload_stable(user='pandas'): \n    if os.system('cd   build/html;   rsync   -avz   .   {0}@pandas.pydata.org:/usr/share/nginx/pandas/pandas-docs/stable/   -essh'.format(user)): \n      raise SystemExit('Upload   to   stable   failed')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def network_update(context, network_id, values): \n    return IMPL.network_update(context, network_id, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def walkModules(importPackages=False): \n    return theSystemPath.walkModules(importPackages=importPackages)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sanitize_url(url, mask=u'**'): \n    return as_url(sanitize=True, mask=mask, *_parse_url(url))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_dicts(dict_path1, dict_path2): \n    return (eval(open(dict_path1).read()), eval(open(dict_path2).read()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_exploration_summaries_matching_ids(exp_ids): \n    return [(get_exploration_summary_from_model(model) if model else None) for model in exp_models.ExpSummaryModel.get_multi(exp_ids)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def blueprint_is_module(bp): \n    return isinstance(bp, Module)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def patch_ssl(): \n    patch_module('ssl')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pow(a, b): \n    return (a ** b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_construction(): \n    gs_deleter.Deleter()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_metadata_get(context, snapshot_id): \n    return IMPL.snapshot_metadata_get(context, snapshot_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_generic_item(path_obj, **kwargs): \n    return {'sort': kwargs.get('sort'), 'href': path_obj.get_absolute_url(), 'href_translate': path_obj.get_translate_url(), 'title': path_obj.name, 'code': path_obj.code, 'is_disabled': getattr(path_obj, 'disabled', False)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resize_url(url, maxwidth): \n    return '{0}?{1}'.format(PROXY_URL, urlencode({'url': url.replace('http://', ''), 'w': maxwidth}))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mod(v): \n    return np.sqrt((((v[0] ** 2) + (v[1] ** 2)) + (v[2] ** 2)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quaternion_real(quaternion): \n    return float(quaternion[0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Beta(name, alpha, beta): \n    return rv(name, BetaDistribution, (alpha, beta))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_tree(node): \n    print(tree(node))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def search(): \n    return search_commits(qtutils.active_window())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _resolve_name(val): \n    return (val if isinstance(val, six.string_types) else val.name)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_max_denom(tup): \n    return max((Fraction(f).denominator for f in tup))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def GzipDecode(s): \n    with closing(StringIO(s)) as sio: \n      with gzip.GzipFile(fileobj=sio, mode='rb') as gzfile: \n         return gzfile.read()",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def support(request): \n    return render(request, 'ecosystem/support.html', {'page': 'support', 'category': 'build'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _passthrough_scorer(estimator, *args, **kwargs): \n    return estimator.score(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addPathToPixelTable(path, pixelDictionary, value, width): \n    for pointIndex in xrange((len(path) - 1)): \n      pointBegin = path[pointIndex] \n      pointEnd = path[(pointIndex + 1)] \n      addValueSegmentToPixelTable(pointBegin, pointEnd, pixelDictionary, value, width)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def iter_good_values(): \n    for (ctype, values) in sorted(GOOD_VALUES.items()): \n      for value in values: \n         (yield (ctype, value))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def blockquote_text(text): \n    return '\\n'.join((('>   ' + line) for line in text.splitlines()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def center(value, arg): \n    return value.center(int(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO___repr__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def query_columns(dbinfo, srid, subquery, bounds): \n    with Connection(dbinfo) as db: \n      while ((abs((bounds[2] - bounds[0])) * abs((bounds[2] - bounds[0]))) < 1610000000000000.0): \n         bbox = ('ST_MakeBox2D(ST_MakePoint(%f,   %f),   ST_MakePoint(%f,   %f))' % bounds) \n         bbox = ('ST_SetSRID(%s,   %d)' % (bbox, srid)) \n         query = subquery.replace('!bbox!', bbox) \n         db.execute((query + '\\n   LIMIT   1')) \n         row = db.fetchone() \n         if (row is None): \n            bounds = ((bounds[0] - ((bounds[2] - bounds[0]) * 3.5)), (bounds[1] - ((bounds[3] - bounds[1]) * 3.5)), (bounds[2] + ((bounds[2] - bounds[0]) * 3.5)), (bounds[3] + ((bounds[3] - bounds[1]) * 3.5))) \n            continue \n         column_names = set(row.keys()) \n         return column_names",
        "line_count": 12,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def run(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_trial_environment(cluster, package_source): \n    return {'FLOCKER_ACCEPTANCE_CONTROL_NODE': cluster.control_node.address, 'FLOCKER_ACCEPTANCE_NUM_AGENT_NODES': str(len(cluster.agent_nodes)), 'FLOCKER_ACCEPTANCE_VOLUME_BACKEND': cluster.dataset_backend.name, 'FLOCKER_ACCEPTANCE_API_CERTIFICATES_PATH': cluster.certificates_path.path, 'FLOCKER_ACCEPTANCE_HOSTNAME_TO_PUBLIC_ADDRESS': json.dumps({node.private_address: node.address for node in cluster.agent_nodes if (node.private_address is not None)}), 'FLOCKER_ACCEPTANCE_DEFAULT_VOLUME_SIZE': bytes(cluster.default_volume_size), 'FLOCKER_ACCEPTANCE_TEST_VOLUME_BACKEND_CONFIG': cluster.dataset_backend_config_file.path, 'FLOCKER_ACCEPTANCE_DISTRIBUTION': cluster.control_node.distribution, 'FLOCKER_ACCEPTANCE_PACKAGE_BRANCH': (package_source.branch or ''), 'FLOCKER_ACCEPTANCE_PACKAGE_VERSION': (package_source.version or ''), 'FLOCKER_ACCEPTANCE_PACKAGE_BUILD_SERVER': package_source.build_server}",
        "line_count": 1,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def quota_class_destroy(context, class_name, resource): \n    return IMPL.quota_class_destroy(context, class_name, resource)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return MapModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def append_cflags(value): \n    return append_var('CFLAGS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getTruncatedRotatedBoundaryLayers(repository, rotatedBoundaryLayers): \n    return rotatedBoundaryLayers[repository.layersFrom.value:repository.layersTo.value]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ImportSymbols(protobuf, symbols, prefix='SOCKET_'): \n    for sym in symbols: \n      globals()[sym] = getattr(protobuf, (prefix + sym))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def update_generators(): \n    for generator in _GENERATOR_DB.keys(): \n      install_templates_translations(generator) \n      add_variables_to_context(generator) \n      interlink_static_files(generator) \n      interlink_removed_content(generator) \n      interlink_translated_content(generator)",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def previous_key(tuple_of_tuples, key): \n    for (i, t) in enumerate(tuple_of_tuples): \n      if (t[0] == key): \n         try: \n            return tuple_of_tuples[(i - 1)][0] \n         except IndexError: \n            return None",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def getNewRepository(): \n    return WipeRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_precision_positivity(precision, covariance_type): \n    if np.any(np.less_equal(precision, 0.0)): \n      raise ValueError((\"'%s   precision'   should   be   positive\" % covariance_type))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def number_format(value, decimal_pos=None): \n    return numberformat.format(value, get_format('DECIMAL_SEPARATOR'), decimal_pos, get_format('NUMBER_GROUPING'), get_format('THOUSAND_SEPARATOR'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'widen', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_none(dic): \n    return dict([(k, v) for (k, v) in dic.iteritems() if (v is not None)])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def service_get_minimum_version(context, binary): \n    return IMPL.service_get_minimum_version(context, binary)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_status(): \n    return (salt.utils.http.query('http://github.com', status=True)['status'] == 200)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chars_surround(chars, match): \n    return (chars_before(chars, match) and chars_after(chars, match))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ProfileEntryFromString(xml_string): \n    return atom.CreateClassFromXMLString(ProfileEntry, xml_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p(*args): \n    return os.path.join(temp_dir, *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SILENT(x): \n    LOG_LEVEL('error')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def task_uninstall_flocker(distribution): \n    return _flocker_uninstallers[distribution]()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetTypeUrl(proto): \n    return (TYPE_URL_PREFIX + proto.DESCRIPTOR.full_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten(xss): \n    return chain.from_iterable(xss)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def aicc(llf, nobs, df_modelwc): \n    return (((-2.0) * llf) + (((2.0 * df_modelwc) * nobs) / ((nobs - df_modelwc) - 1.0)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def task_id_in(ids, body, message): \n    return (body[u'id'] in ids)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def EvalPoissonPmf(k, lam): \n    return (((lam ** k) * math.exp((- lam))) / special.gamma((k + 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rfind(s, *args): \n    return _apply(s.rfind, args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def foldr(f, seq, default=_no_default): \n    return reduce(flip(f), reversed(seq), *((default,) if (default is not _no_default) else ()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_portgroups(service_instance): \n    return list_objects(service_instance, vim.dvs.DistributedVirtualPortgroup)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return __salt__['cmd.has_exec']('sysrc')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strategy_connected_sequential_bfs(G, colors): \n    return strategy_connected_sequential(G, colors, 'bfs')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def all_repositories(number=(-1), etag=None): \n    return gh.all_repositories(number, etag)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(data=None): \n    return SHA384Hash().new(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_cache_opts(): \n    return [(g, copy.deepcopy(o)) for (g, o) in _cache_opts]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def defer_to_events_queue(fn, *args, **kwargs): \n    deferred.defer(fn, _queue=QUEUE_NAME_EVENTS, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def corner_moravec(image, window_size=1): \n    return _corner_moravec(image, window_size)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def weak_date(date): \n    return ((datetime.strptime(date, RFC1123_DATE_FORMAT) + timedelta(seconds=1)) if date else None)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def check_available(mod): \n    return (mod in available())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def multiply_by_two(number): \n    return (float(number) * 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def copy_recursively(source_dir, target_dir): \n    shutil.copytree(source_dir, target_dir)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flattenValue(value): \n    for i in iter(value): \n      if isListLike(i): \n         for j in flattenValue(i): \n            (yield j) \n      else: \n         (yield i)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def dictfetchmany(cursor, number): \n    return cursor.dictfetchmany(number)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _makeAccept(key): \n    return sha1(('%s%s' % (key, _WS_GUID))).digest().encode('base64').strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_file_list(results): \n    return {code.file for result in results for code in result.affected_code}",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _clear_ignore(endpoint_props): \n    return dict(((prop_name, prop_val) for (prop_name, prop_val) in six.iteritems(endpoint_props) if ((prop_name not in _DO_NOT_COMPARE_FIELDS) and (prop_val is not None))))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def fake_loads_json_error(content, *args, **kwargs): \n    raise json.JSONDecodeError('Using   simplejson   &   you   gave   me   bad   JSON.', '', 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def arglist_to_dict(arglist): \n    return dict((x.split('=', 1) for x in arglist))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def Mean(xs): \n    return np.mean(xs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lat2hemi(lat): \n    return (((lat >= 0) and 'N') or 'S')",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _get_next_vmid(): \n    return int(query('get', 'cluster/nextid'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _identity_nodes(graph, include_iterables): \n    return [node for node in nx.topological_sort(graph) if (isinstance(node._interface, IdentityInterface) and (include_iterables or (getattr(node, u'iterables') is None)))]",
        "line_count": 1,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def p_compound_stmt(p): \n    p[0] = p[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_json_object(obj): \n    return oslo_serialization.jsonutils.dumps(obj, sort_keys=True, indent=3)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def utf8decode(value): \n    return value.decode('utf-8')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def takewhile_inclusive(pred, seq): \n    for e in seq: \n      (yield e) \n      if (not pred(e)): \n         return",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def encode_cert(cert): \n    return encode_b64jose(OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_ASN1, cert.wrapped))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ebtables_rules(fixed_ip, network): \n    return ([('PREROUTING   --logical-in   %s   -p   ipv4   --ip-src   %s   !   --ip-dst   %s   -j   redirect   --redirect-target   ACCEPT' % (network['bridge'], fixed_ip, network['cidr']))], 'nat')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shutdown(handlerList=_handlerList): \n    for wr in reversed(handlerList[:]): \n      try: \n         h = wr() \n         if h: \n            try: \n               h.acquire() \n               h.flush() \n               h.close() \n            except (IOError, ValueError): \n               pass \n            finally: \n               h.release() \n      except: \n         if raiseExceptions: \n            raise",
        "line_count": 15,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def test_array___le__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timeit(stmt='pass', setup='pass', timer=default_timer, number=default_number): \n    return Timer(stmt, setup, timer).timeit(number)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sigmoid_cross_entropy(x, t, use_cudnn=True, normalize=True): \n    return SigmoidCrossEntropy(use_cudnn, normalize)(x, t)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cublas_shutdown(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sm_flavor_get(context, sm_flavor): \n    return IMPL.sm_flavor_get(context, sm_flavor)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attr_ge(accessing_obj, accessed_obj, *args, **kwargs): \n    return attr(accessing_obj, accessed_obj, *args, **{'compare': 'ge'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def constraint(**conditions): \n    return IMPL.constraint(**conditions)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_current_request(): \n    return RequestCache.get_current_request()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dotted_getattr(obj, name): \n    return reduce(getattr, name.split('.'), obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cleaner(env_path): \n    if os.path.exists(env_path): \n      shutil.rmtree(env_path)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def min(x, axis=None, keepdims=False): \n    return Min(axis, keepdims)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rgb2luv(rgb): \n    return xyz2luv(rgb2xyz(rgb))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exception_view(request): \n    return Response('supressed')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('xmpp' if ('xmpp.send_msg' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def iterencode(iter): \n    return ','.join((as_unicode(v).replace(CHAR_ESCAPE, (CHAR_ESCAPE + CHAR_ESCAPE)).replace(CHAR_SEPARATOR, (CHAR_ESCAPE + CHAR_SEPARATOR)) for v in iter))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def eval_master_func(opts): \n    if ('__master_func_evaluated' not in opts): \n      mod_fun = opts['master'] \n      (mod, fun) = mod_fun.split('.') \n      try: \n         master_mod = salt.loader.raw_mod(opts, mod, fun) \n         if (not master_mod): \n            raise KeyError \n         opts['master'] = master_mod[mod_fun]() \n         if ((not isinstance(opts['master'], str)) and (not isinstance(opts['master'], list))): \n            raise TypeError \n         opts['__master_func_evaluated'] = True \n      except KeyError: \n         log.error('Failed   to   load   module   {0}'.format(mod_fun)) \n         sys.exit(salt.defaults.exitcodes.EX_GENERIC) \n      except TypeError: \n         log.error('{0}   returned   from   {1}   is   not   a   string   or   a   list'.format(opts['master'], mod_fun)) \n         sys.exit(salt.defaults.exitcodes.EX_GENERIC) \n      log.info('Evaluated   master   from   module:   {0}'.format(mod_fun))",
        "line_count": 18,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def plan_server(action, parms, interval): \n    __SCHED.add_single_task(action, '', (interval * 60), kronos.method.sequential, parms, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xonsh_help(x, lineno=None, col=None): \n    return xonsh_call('__xonsh_help__', [x], lineno=lineno, col=col)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prepare_bearer_uri(token, uri): \n    return add_params_to_uri(uri, [(u'access_token', token)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def multicall(conf, *args, **kwargs): \n    return _multi_send(_call, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_volume_summary_all(context): \n    return IMPL.get_volume_summary_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isinteractive(): \n    return matplotlib.is_interactive()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tensorsolve(a, b, axes=None): \n    return TensorSolve(axes)(a, b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fd(f): \n    return ((hasattr(f, 'fileno') and f.fileno()) or f)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def show_refs(objs, max_depth=3, extra_ignore=(), filter=None, too_many=10, highlight=None, filename=None, extra_info=None, refcounts=False, shortnames=True, output=None): \n    _show_graph(objs, max_depth=max_depth, extra_ignore=extra_ignore, filter=filter, too_many=too_many, highlight=highlight, edge_func=gc.get_referents, swap_source_target=True, filename=filename, extra_info=extra_info, refcounts=refcounts, shortnames=shortnames, output=output)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processXMLElement(xmlElement): \n    evaluate.processArchivable(Path, xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def widget_settings_dir(): \n    return os.path.join(data_dir(), 'widgets')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_node_get(context, compute_id): \n    return IMPL.compute_node_get(context, compute_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def autoassign(self, locals): \n    for (key, value) in iteritems(locals): \n      if (key == 'self'): \n         continue \n      setattr(self, key, value)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_base_modules_regex(pyi_builder): \n    pyi_builder.test_source(\"\\n                        import   resources_testmod\\n                        print('OK')\\n                        \")",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def truth(a): \n    return (True if a else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_catalogs(service_type, cache=True, verbose=True, **kwargs): \n    return get_remote_catalog_db(service_type, cache=cache, verbose=verbose).list_catalogs(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sysctl(oid): \n    return popen(('sysctl   -n   %s' % (oid,)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ascii_lower(string): \n    return string.translate((utab if isinstance(string, _unicode) else tab))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def makeImageAuto(inarray): \n    return image2array(float_uint8(inarray))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new_subreddit(sr): \n    amqp.add_item('new_subreddit', sr._fullname)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_next(p): \n    p[0] = ('NEXT', p[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDL3BLACKCROWS(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDL3BLACKCROWS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pyeapi_result(output): \n    return output[0]['result']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_redirection(status): \n    return (300 <= status <= 399)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _poll_while(predicate, steps, sleep=None): \n    return poll_until((lambda : (not predicate())), steps, sleep)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _LookupTargets(names, mapping): \n    return [mapping[name] for name in names if (name in mapping)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_table_groups_mask_index(T1): \n    for masked in (False, True): \n      t1 = Table(T1, masked=masked).group_by('a') \n      t2 = t1.groups[np.array([True, False, True])] \n      assert (len(t2.groups) == 2) \n      assert (t2.groups[0].pformat() == t1.groups[0].pformat()) \n      assert (t2.groups[1].pformat() == t1.groups[2].pformat()) \n      assert np.all((t2.groups.keys['a'] == np.array([0, 2])))",
        "line_count": 7,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def strip_object_transient_sysmeta_prefix(key): \n    return key[len(OBJECT_TRANSIENT_SYSMETA_PREFIX):]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _parse_log_statement(options): \n    for i in options: \n      if _is_reference(i): \n         _add_reference(i, _current_statement) \n      elif _is_junction(i): \n         _add_junction(i) \n      elif _is_inline_definition(i): \n         _add_inline_definition(i, _current_statement)",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def getsize(filename): \n    return os.stat(filename).st_size",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_file(*args): \n    return os.path.join(os.path.abspath(os.path.dirname(__file__)), *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def name_error_deleted(): \n    class X(object, ): \n      C = C",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reservation_commit(context, reservations, project_id=None, user_id=None): \n    return IMPL.reservation_commit(context, reservations, project_id=project_id, user_id=user_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def VAR(ds, count, timeperiod=(- (2 ** 31)), nbdev=(-4e+37)): \n    return call_talib_with_ds(ds, count, talib.VAR, timeperiod, nbdev)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def argmax_random_tie(seq, func): \n    return random.choice(argmax_list(seq, func))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def out_of_date(original, derived): \n    return ((not os.path.exists(derived)) or (os.stat(derived).st_mtime < os.stat(original).st_mtime))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def encode_bin(v): \n    return v",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _missing_raise(): \n    raise ClusterError('One   of   the   clusters   is   empty.   Re-run   kmean   with   a   different   initialization.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dejsonize(data): \n    return json.loads(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prettify_name(name): \n    return name.replace('_', '   ').title()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def digit(n, k, base): \n    return ((n // (base ** k)) % base)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def atfork(): \n    _UserFriendlyRNG.reinit()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_source_files(*args, **kwargs): \n    for source in source_files: \n      _copy_from_to(source['copy_raw_from'], source['copy_raw_to'])",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def setup_platform(hass, config, add_devices_callback, discovery_info=None): \n    add_devices_callback([DemoRemote('Remote   One', False, None), DemoRemote('Remote   Two', True, 'mdi:remote')])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize_path(filename): \n    return os.path.normcase(os.path.realpath(filename))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plotting_pos(nobs, a): \n    return ((np.arange(1.0, (nobs + 1)) - a) / ((nobs - (2 * a)) + 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shell(): \n    return {'shell': os.environ.get('SHELL', '/bin/sh')}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def env(request): \n    return render_to_response('kadmin/env_view.html', {'request': request, 'pythonver': sys.version, 'djangover': VERSION})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, use_decimal=False, namedtuple_as_object=True, tuple_as_array=True, **kw): \n    return loads(fp.read(), encoding=encoding, cls=cls, object_hook=object_hook, parse_float=parse_float, parse_int=parse_int, parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, use_decimal=use_decimal, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def grad_expected_energy(W, V, H): \n    return T.grad(energy(W, V, H).mean(), W, consider_constant=[V, H])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rosenbrock(individual): \n    return (sum((((100 * (((x * x) - y) ** 2)) + ((1.0 - x) ** 2)) for (x, y) in zip(individual[:(-1)], individual[1:]))),)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def expand_trig(expr, deep=True): \n    return sympify(expr).expand(deep=deep, trig=True, basic=False, log=False, mul=False, power_exp=False, power_base=False, multinomial=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _read_long(f): \n    return np.int32(struct.unpack('>l', f.read(4))[0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def binary_propagation(input, structure=None, mask=None, output=None, border_value=0, origin=0): \n    return binary_dilation(input, structure, (-1), mask, output, border_value, origin)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def incoming(): \n    return s3db.inv_incoming()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shutdown(at_time=None): \n    return halt(at_time)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _do_mb_delete(path): \n    return _mb_request(path, 'DELETE', AUTH_YES, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([DemoYoutubePlayer('Living   Room', 'eyU3bRy2x44', '\\xe2\\x99\\xa5\\xe2\\x99\\xa5   The   Best   Fireplace   Video   (3   hours)', 300), DemoYoutubePlayer('Bedroom', 'kxopViU98Xo', 'Epic   sax   guy   10   hours', 360000), DemoMusicPlayer(), DemoTVShowPlayer()])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_set_auto_assigned(context, address): \n    return IMPL.floating_ip_set_auto_assigned(context, address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _cmp_perm_lists(first, second): \n    return ({tuple(a) for a in first} == {tuple(a) for a in second})",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def make_style(opts=(), **kwargs): \n    return (lambda text: colorize(text, opts, **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def farness(user): \n    return sum((len(paths[0]) for paths in user['shortest_paths'].values()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def now(): \n    return datetime.datetime.now(TimeZoneInfo.local())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or __virtualname__), ('apikey', 'sharedsecret'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _project_cert_subject(project_id): \n    return (CONF.crypto.project_cert_subject % (project_id, utils.isotime()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_sanity(): \n    timer_helper(num_handlers=1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_disassociate(context, address): \n    return IMPL.fixed_ip_disassociate(context, address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user_follower_count(context, data_dict): \n    return _follower_count(context, data_dict, ckan.logic.schema.default_follow_user_schema(), context['model'].UserFollowingUser)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def namespace(namespace=None): \n    Register._default_namespace = (namespace or '')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_instrumented(instance, key): \n    return manager_of_class(instance.__class__).is_instrumented(key, search=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mode(name, num, minimum=0, maximum=0, ref=None): \n    return calc(name, num, 'mode', ref)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_url(text): \n    return bool(re.findall(URL_REGEXP, text))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reverse_text_len(width, fs): \n    return int((width / (0.6 * fs)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def emotional_jenkins(registry, xml_parent, data): \n    XML.SubElement(xml_parent, 'org.jenkinsci.plugins.emotional__jenkins.EmotionalJenkinsPublisher')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def constraint_present(name, constraint_id, constraint_type, constraint_options=None, cibname=None): \n    return _item_present(name=name, item='constraint', item_id=constraint_id, item_type=constraint_type, create=None, extra_args=constraint_options, cibname=cibname)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connect_to_cloud_blockstorage(region=None): \n    return _create_client(ep_name='volume', region=region)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_daily(name, user, command, environment=None): \n    add_task(name, '@daily', user, command, environment)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def join(l, sep=u'\\n'): \n    return sep.join((v for v in l if v))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def dictfind(dictionary, element): \n    for (k, v) in dictionary.iteritems(): \n      if (element is v): \n         return k",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def safe(value): \n    return mark_safe(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_diff_renderer_class(): \n    return _diff_renderer_class",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def startsWith(str, prefix): \n    return (str[:len(prefix)] == prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PatchOsEnviron(os_module=os): \n    os_module.environ = RequestLocalEnviron(current_request)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_suggestion_from_model(suggestion_model): \n    return feedback_domain.Suggestion(suggestion_model.id, suggestion_model.author_id, suggestion_model.exploration_id, suggestion_model.exploration_version, suggestion_model.state_name, suggestion_model.description, suggestion_model.state_content)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sync_states(saltenv='base'): \n    return salt.utils.extmods.sync(__opts__, 'states', saltenv=saltenv)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_wdg_validate_middleware(app, global_conf, wdg_path='validate'): \n    return WDGValidateMiddleware(app, global_conf, wdg_path=wdg_path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _root_excitingmixing_doc(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def missing_action(request, action): \n    return Response(generate_template('missing_action.html', action=action), status=404)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_course(request, course_key): \n    return get_course_with_access(request.user, 'load', course_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def textindent(t, indent=0): \n    return '\\n'.join(((('   ' * indent) + p) for p in t.split('\\n')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_get_config_does_not_exist(): \n    with pytest.raises(ConfigDoesNotExistException): \n      config.get_config('tests/test-config/this-does-not-exist.yaml')",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_live_refs(*a, **kw): \n    print(format_live_refs(*a, **kw))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def utcnow(): \n    return utcstr()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trim_fasta(fasta_lines, output_length): \n    for (seq_id, seq) in parse_fasta(fasta_lines): \n      (yield ('>%s\\n%s\\n' % (seq_id, seq[:output_length])))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_misc_conversions(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _alembic(*args): \n    with _temp_alembic_ini('sqlite:///jupyterhub.sqlite') as alembic_ini: \n      check_call((['alembic', '-c', alembic_ini] + list(args)))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def open_error_resource(): \n    need('Estr', 1, filename='errors.rsrc', modname=__name__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unescape_encoded_uri_component(escaped_string): \n    return urllib.unquote(escaped_string).decode('utf-8')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_enabled(): \n    return _get_svc_list(status='ENABLED')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addLoopToPointTable(loop, pointTable): \n    for point in loop: \n      pointTable[point] = None",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __execute_cmd(name, cmd): \n    return __salt__['cmd.run_all']('{0}   {1}'.format(salt.utils.which(name), cmd))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def school_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def repr_readers(h): \n    return [u'({0}){1}->{2}'.format(fd, _rcb(cb), repr_flag((READ | ERR))) for (fd, cb) in items(h.readers)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def normalize_key_for_search(library_key): \n    return library_key.replace(version_guid=None, branch=None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lsb_release_info(): \n    return _distro.lsb_release_info()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def security_group_rule_destroy(context, security_group_rule_id): \n    return IMPL.security_group_rule_destroy(context, security_group_rule_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def real_path(path): \n    return ek.ek(os.path.normpath, ek.ek(os.path.normcase, ek.ek(os.path.realpath, path)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_from_persistent_store(): \n    return 'a   persistent   value'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def symptom_LDAP_user_enabled_emulation_use_group_config_ignored(): \n    return ((not CONF.ldap.user_enabled_emulation) and CONF.ldap.user_enabled_emulation_use_group_config)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ensure_unquoted(cookie_str): \n    for _ in range(3): \n      new_str = unquote(cookie_str) \n      if (new_str == cookie_str): \n         return new_str \n      cookie_str = new_str",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def himmelblau(individual): \n    return ((((((individual[0] * individual[0]) + individual[1]) - 11) ** 2) + (((individual[0] + (individual[1] * individual[1])) - 7) ** 2)),)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in_(a, b, msg=None): \n    assert (a in b), (msg or ('%r   not   in   %r' % (a, b)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def t_code_lbrace(t): \n    t.lexer.level += 1",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bitstonats(X): \n    return (logbasechange(2, np.e) * X)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _purgeOutput(): \n    if conf.purgeOutput: \n      purge(paths.SQLMAP_OUTPUT_PATH)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def precision(classify=(lambda document: False), documents=[], average=None): \n    return test(classify, documents, average)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def withSentence(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _hydrate(params, container, cli_type, key, value): \n    params['bag'] = {'ArgumentBaz': {'SomeValueAbc': (value / 100.0)}}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _failhard(): \n    raise FileserverConfigError('Failed   to   load   hg   fileserver   backend')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eglTerminate(display): \n    _lib.eglTerminate(display)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mean_squared_error(output, target): \n    with tf.name_scope('mean_squared_error_loss'): \n      mse = tf.reduce_mean(tf.reduce_sum(tf.squared_difference(output, target), reduction_indices=1)) \n      return mse",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_python_ok(*args, **env_vars): \n    return _assert_python(True, *args, **env_vars)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_jids(): \n    with _get_serv(ret=None, commit=True) as cur: \n      sql = 'SELECT   DISTINCT   `jid`,   `load`\\n                                                FROM   `jids`' \n      cur.execute(sql) \n      data = cur.fetchall() \n      ret = {} \n      for jid in data: \n         ret[jid[0]] = salt.utils.jid.format_jid_instance(jid[0], json.loads(jid[1])) \n      return ret",
        "line_count": 8,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def gen_extractor_classes(): \n    return _ALL_CLASSES",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ips_by_virtual_interface(context, vif_id): \n    return IMPL.fixed_ips_by_virtual_interface(context, vif_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def submit_albums(collection_id, release_ids): \n    for i in range(0, len(release_ids), SUBMISSION_CHUNK_SIZE): \n      chunk = release_ids[i:(i + SUBMISSION_CHUNK_SIZE)] \n      mb_call(musicbrainzngs.add_releases_to_collection, collection_id, chunk)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_prefixless_processnode(test_case): \n    return ProcessNode(initial_command_arguments=[])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_root(root, paths): \n    return [pth.replace((root + '/'), '') for pth in paths]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return LineationDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetAvailableReportPlugins(): \n    return sorted(REGISTRY.GetRegisteredPlugins().itervalues(), key=(lambda cls: cls.__name__))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start_hass_instance(hass): \n    hass.start()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(*locale_codes): \n    return Locale.get_closest(*locale_codes)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def migration_get(context, migration_id): \n    return IMPL.migration_get(context, migration_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getGeometryPath(subName=''): \n    return getJoinedPath(getFabmetheusUtilitiesPath('geometry'), subName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_user_meta_prefix(server_type): \n    return ('x-%s-%s-' % (server_type.lower(), 'meta'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normal_lower_bound(probability, mu=0, sigma=1): \n    return inverse_normal_cdf((1 - probability), mu, sigma)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_region(name): \n    for (tag, (language, region, iso639, iso3166)) in LANGUAGE_REGION.items(): \n      if (region == name.capitalize()): \n         return iso3166",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _track_event(event_name, bookmark): \n    tracker.emit(event_name, {'course_id': unicode(bookmark.course_key), 'bookmark_id': bookmark.resource_id, 'component_type': bookmark.usage_key.block_type, 'component_usage_id': unicode(bookmark.usage_key)})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def checkSessionType(assoc_type, session_type): \n    if (session_type not in getSessionTypes(assoc_type)): \n      raise ValueError(('Session   type   %r   not   valid   for   assocation   type   %r' % (session_type, assoc_type)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_autocommit(autocommit, using=None): \n    return get_connection(using).set_autocommit(autocommit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_proto(d, parent=(), indent=0): \n    for (m, sd) in sorted(d.items(), cmp=(lambda x, y: cmp(x[0], y[0]))): \n      full_name_l = (parent + (m,)) \n      full_name = '$'.join(full_name_l) \n      is_message_or_group = (full_name in messages_info) \n      if is_message_or_group: \n         print_message(m, sd, parent, indent) \n      else: \n         print_proto(sd, full_name_l, indent)",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _dotrig(a, b): \n    return ((a.func == b.func) and ((a.has(TrigonometricFunction) and b.has(TrigonometricFunction)) or (a.has(HyperbolicFunction) and b.has(HyperbolicFunction))))",
        "line_count": 1,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def mon_quorum(**kwargs): \n    return ceph_cfg.mon_quorum(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_bundle_properties(bundle, root, namespace): \n    bundle.name = root.get('name')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_octave_code(expr, **settings): \n    print(octave_code(expr, **settings))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attrprint(d, delimiter=',   '): \n    return delimiter.join((('\"%s\"=\"%s\"' % item) for item in sorted(d.items())))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _populate_security_checks(): \n    if (not _security_checks): \n      _security_checks[u'executable_check'] = ExecutableCodeCheck \n      _security_checks[u'hosts_check'] = AllowedHostsCheck",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def literal_compile(s): \n    return str(s.compile(compile_kwargs={'literal_binds': True}))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_namespace_choices(): \n    return NAMESPACE_CHOICES",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def whichall(command, path=None, verbose=0, exts=None): \n    return list(whichgen(command, path, verbose, exts))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_bulk_create(context, ips): \n    return IMPL.fixed_ip_bulk_create(context, ips)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_model_tables(models, **create_table_kwargs): \n    for m in sort_models_topologically(models): \n      m.create_table(**create_table_kwargs)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_query_from_filter(sample_filter, require_meter=True): \n    return make_query(sample_filter.user, sample_filter.project, sample_filter.meter, sample_filter.resource, sample_filter.source, sample_filter.start, sample_filter.end, require_meter)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_config_file(path, final=True): \n    return options.parse_config_file(path, final=final)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_file(path): \n    if path: \n      if (u'..' in path.split(u'/')): \n         frappe.msgprint(_(u'It   is   risky   to   delete   this   file:   {0}.   Please   contact   your   System   Manager.').format(path)) \n      parts = os.path.split(path.strip(u'/')) \n      if (parts[0] == u'files'): \n         path = frappe.utils.get_site_path(u'public', u'files', parts[(-1)]) \n      else: \n         path = frappe.utils.get_site_path(u'private', u'files', parts[(-1)]) \n      path = encode(path) \n      if os.path.exists(path): \n         os.remove(path)",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def secure_cookie(): \n    return (request.environ['wsgi.url_scheme'] == 'https')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_dev(device_name): \n    return (_dev.sub('', device_name) if device_name else device_name)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def mae(actual, predicted): \n    return np.mean(ae(actual, predicted))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def path_split(pathname_spec, separator=os.path.sep): \n    return list(pathname_spec.split(separator))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_language(name): \n    for (tag, (language, region, iso639, iso3166)) in LANGUAGE_REGION.items(): \n      if (language == name.capitalize()): \n         return iso639",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_decimal(string): \n    return all(((ch in DIGITS) for ch in string))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def pkgfiles(opts): \n    return LazyLoader(_module_dirs(opts, 'pkgfiles', base_path=os.path.join(SALT_BASE_PATH, 'spm')), opts, tag='pkgfiles')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_fromstring(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def kruskal_wallis(data): \n    return kruskal(*data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_lwta_yaml(): \n    limited_epoch_train(os.path.join(pylearn2.__path__[0], 'models/tests/lwta.yaml'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def argmin_random_tie(seq, func): \n    return random.choice(argmin_list(seq, func))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_uri_prefix(path): \n    return re.sub('^(/v\\\\d+)?', '', six.text_type(path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cloudnetwork(vm_): \n    return config.get_cloud_config_value('cloudnetwork', vm_, __opts__, default=False, search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cifarnet_arg_scope(weight_decay=0.004): \n    with slim.arg_scope([slim.conv2d], weights_initializer=tf.truncated_normal_initializer(stddev=0.05), activation_fn=tf.nn.relu): \n      with slim.arg_scope([slim.fully_connected], biases_initializer=tf.constant_initializer(0.1), weights_initializer=trunc_normal(0.04), weights_regularizer=slim.l2_regularizer(weight_decay), activation_fn=tf.nn.relu) as sc: \n         return sc",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chown(path, owner): \n    execute('chown', owner, path, run_as_root=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def two_step_backprop(mlp): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def comment_requirement(req): \n    return any(((ign in req) for ign in COMMENT_REQUIREMENTS))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test__FileIO_close(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plane(individual): \n    return (individual[0],)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_prerequisite(course_key, prereq_content_key): \n    return (get_gating_milestone(course_key, prereq_content_key, 'fulfills') is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tabulate(func, start=0): \n    return imap(func, count(start))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subnets(interfaces=None): \n    return _subnets('inet', interfaces_=interfaces)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pportInp(): \n    return port.DlPortReadPortUchar(baseAddress)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_grouped_item_access(T1): \n    for masked in (False, True): \n      t1 = Table(T1, masked=masked) \n      tg = t1.group_by('a') \n      tgs = tg[('a', 'c', 'd')] \n      assert np.all((tgs.groups.keys == tg.groups.keys)) \n      assert np.all((tgs.groups.indices == tg.groups.indices)) \n      tgsa = tgs.groups.aggregate(np.sum) \n      assert (tgsa.pformat() == ['   a         c            d   ', '---   ----   ---', '      0      0.0         4', '      1      6.0      18', '      2   22.0         6']) \n      tgs = tg[('c', 'd')] \n      assert np.all((tgs.groups.keys == tg.groups.keys)) \n      assert np.all((tgs.groups.indices == tg.groups.indices)) \n      tgsa = tgs.groups.aggregate(np.sum) \n      assert (tgsa.pformat() == ['   c            d   ', '----   ---', '   0.0         4', '   6.0      18', '22.0         6'])",
        "line_count": 13,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def _cmp_by_igp_cost(path1, path2): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hex_array(data): \n    return '   '.join((('0x%02x' % byte) for byte in bytearray(data)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _unhandled_mock_read(filename): \n    raise CommandExecutionError('Unhandled   mock   read   for   {0}'.format(filename))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def theano_norms(W): \n    return T.sqrt((as_floatX(1e-08) + T.sqr(W).sum(axis=0)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inspect_response(response, spider): \n    Shell(spider.crawler).start(response=response)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gf_normal(f, p, K): \n    return gf_trunc(list(map(K, f)), p)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def status(): \n    return _lib.RAND_status()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cgconfig_stop(): \n    return service_cgconfig_control('stop')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SSLeay_version(type): \n    return _ffi.string(_lib.SSLeay_version(type))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pad(iterable, value=None): \n    return chain(iterable, repeat(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def office(): \n    return s3db.org_office_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_order_source_modifier_modules(): \n    return load_module_instances(u'SHUUP_ORDER_SOURCE_MODIFIER_MODULES', u'order_source_modifier_module')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def divisible(a, b): \n    return (not (a % b))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mock_render_template(*args, **kwargs): \n    return pprint.pformat((args, kwargs)).decode()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_single_arg(a): \n    return a",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_or_create_anonymous_cart_from_token(token, cart_queryset=Cart.objects.all()): \n    return cart_queryset.open().filter(token=token, user=None).get_or_create(defaults={u'user': None})[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def out_of_date(original, derived): \n    return (not os.path.exists(derived))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _DefaultAppId(): \n    return os.getenv('APPLICATION_ID', '_')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_server_error(status): \n    return (500 <= status <= 599)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shell_escape(string): \n    return re.sub('([^A-Za-z0-9_])', '\\\\\\\\\\\\1', string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pad_string(string): \n    return string.ljust(512)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _find_elem_with_wait(context, by, wait_time=MAX_WAIT_TIME): \n    return WebDriverWait(context.browser, wait_time).until(EC.presence_of_element_located(by))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _lanscan_getnode(): \n    return _find_mac('lanscan', '-ai', ['lan0'], (lambda i: 0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'outset', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_python_source(filename): \n    return (os.path.splitext(filename)[1][1:] in PY_SOURCE_EXTS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start(name): \n    return __salt__['service.run'](name, 'start')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def security_group_rule_get_by_security_group(context, security_group_id, columns_to_join=None): \n    return IMPL.security_group_rule_get_by_security_group(context, security_group_id, columns_to_join=columns_to_join)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random_lower(t): \n    return ''.join(((c.lower() if (random.random() > 0.5) else c) for c in t))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def modulePath(): \n    return getUnicode(os.path.dirname(os.path.realpath(__file__)), sys.getfilesystemencoding())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getIfExists(node, nodeId): \n    return _get(node, nodeId)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def organizations_enabled(): \n    return settings.FEATURES.get('ORGANIZATIONS_APP', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def logout(source, sock_info): \n    sock_info.command(source, {'logout': 1})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disable_signal(module, signal): \n    return patch.object(module, signal, new=Signal())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mean_squared_error(y_true, y_pred): \n    return tf.reduce_mean(tf.square((y_pred - y_true)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upgrade(active_plugin=None, options=None): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _verify_run(out, cmd=None): \n    if (out.get('retcode', 0) and out['stderr']): \n      if cmd: \n         log.debug('Command:   \"{0}\"'.format(cmd)) \n      log.debug('Return   code:   {0}'.format(out.get('retcode'))) \n      log.debug('Error   output:\\n{0}'.format(out.get('stderr', 'N/A'))) \n      raise CommandExecutionError(out['stderr'])",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def database_setup(context): \n    KALiteTestCase.setUpDatabase()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def equateX(point, returnValue): \n    point.x = returnValue",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _expiry_range_all(session, upper_bound_func): \n    (yield upper_bound_func())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tag_list(repo, outstream=sys.stdout): \n    with open_repo_closing(repo) as r: \n      tags = list(r.refs.as_dict('refs/tags')) \n      tags.sort() \n      return tags",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, *args, **kwargs): \n    return RC2Cipher(key, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user_agent(): \n    return ('python-social-auth-' + social.__version__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def halt(timeout=5, in_seconds=False): \n    return shutdown(timeout=timeout, in_seconds=in_seconds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sortkey(item): \n    return (type(item).__name__, item)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_descriptor_styles(output_root): \n    return _write_styles('.xmodule_edit', output_root, _list_descriptors())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_cache_subnet_groups(region=None, key=None, keyid=None, profile=None): \n    return [g['CacheSubnetGroupName'] for g in describe_cache_subnet_groups(None, region, key, keyid, profile)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def rackconnect(vm_): \n    return config.get_cloud_config_value('rackconnect', vm_, __opts__, default=False, search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setAttributesToMultipliedTetragrid(elementNode, tetragrid): \n    setElementNodeDictionaryMatrix(elementNode, getBranchMatrix(elementNode).getOtherTimesSelf(tetragrid))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def policy(task_instance): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _private_doc(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_tag_get_by_instance_uuid(context, instance_uuid): \n    return IMPL.instance_tag_get_by_instance_uuid(context, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fileopen(file): \n    return _posixfile_().fileopen(file)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def next_key(tuple_of_tuples, key): \n    for (i, t) in enumerate(tuple_of_tuples): \n      if (t[0] == key): \n         try: \n            return tuple_of_tuples[(i + 1)][0] \n         except IndexError: \n            return None",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def gettext(message): \n    return do_translate(message, 'gettext')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_rect_xmax(data): \n    return max(data[0][0], data[1][0], data[2][0], data[3][0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def underline(text): \n    return u''.join([CONTROL_UNDERLINE, text, CONTROL_UNDERLINE])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def transpose_image(request, fileobjects, operation): \n    for fileobject in fileobjects: \n      (root, ext) = os.path.splitext(fileobject.filename) \n      f = fileobject.site.storage.open(fileobject.path) \n      im = Image.open(f) \n      new_image = im.transpose(operation) \n      tmpfile = File(tempfile.NamedTemporaryFile()) \n      try: \n         new_image.save(tmpfile, format=Image.EXTENSION[ext], quality=VERSION_QUALITY, optimize=(os.path.splitext(fileobject.path)[1].lower() != '.gif')) \n      except IOError: \n         new_image.save(tmpfile, format=Image.EXTENSION[ext], quality=VERSION_QUALITY) \n      try: \n         saved_under = fileobject.site.storage.save(fileobject.path, tmpfile) \n         if (saved_under != fileobject.path): \n            fileobject.site.storage.move(saved_under, fileobject.path, allow_overwrite=True) \n         fileobject.delete_versions() \n      finally: \n         tmpfile.close() \n         f.close() \n      messages.add_message(request, messages.SUCCESS, _((\"Action   applied   successfully   to   '%s'\" % fileobject.filename)))",
        "line_count": 19,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def title(s, *args, **kwargs): \n    return gca().set_title(s, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def norm(p): \n    return (p / np.sqrt(np.einsum(u'...i,...i', p, p))[..., np.newaxis])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _user_can_edit(user, locale): \n    return (user.has_perm('wiki.change_locale') or (user in locale.leaders.all()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def allow(ip, port=None): \n    if (port is None): \n      return __apf_cmd('-a   {0}'.format(ip))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def console_pool_create(context, values): \n    return IMPL.console_pool_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dup_rem(f, g, K): \n    return dup_div(f, g, K)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def debug_logger(name='test'): \n    return DebugLogAdapter(DebugLogger(), name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def julia_code(expr, assign_to=None, **settings): \n    return JuliaCodePrinter(settings).doprint(expr, assign_to)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_def_line(line): \n    return (line.endswith(':') and (not ('class' in line.split())) and (line.startswith('def   ') or line.startswith('cdef   ') or line.startswith('cpdef   ') or ('   def   ' in line) or ('   cdef   ' in line) or ('   cpdef   ' in line)))",
        "line_count": 1,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def zulip(registry, xml_parent, data): \n    XML.SubElement(xml_parent, 'hudson.plugins.humbug.HumbugNotifier')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _sort_by_recency(ds): \n    return sorted(ds, key=_time_sort_key, reverse=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isdatadescriptor(object): \n    return (hasattr(object, '__set__') and hasattr(object, '__get__'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def add_nonblank_xml_subelement(parent, tag, value): \n    if ((value is not None) and (value != '')): \n      XML.SubElement(parent, tag).text = value",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def at_webserver_root_creation(web_root): \n    return web_root",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_multipart_boundary(boundary): \n    return (_multipart_boundary_re.match(boundary) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'lash', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetChild(node, tag): \n    for child in node.getchildren(): \n      if (GetTag(child) == tag): \n         return child",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def MergeStandardOptions(options, params): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def recursive_rm(*patterns): \n    for (root, subdirs, subfiles) in os.walk('.'): \n      root = os.path.normpath(root) \n      if root.startswith('.git/'): \n         continue \n      for file in subfiles: \n         for pattern in patterns: \n            if fnmatch.fnmatch(file, pattern): \n               safe_remove(os.path.join(root, file)) \n      for dir in subdirs: \n         for pattern in patterns: \n            if fnmatch.fnmatch(dir, pattern): \n               safe_rmtree(os.path.join(root, dir))",
        "line_count": 12,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def getGeometryOutputByArguments(arguments, xmlElement): \n    return getGeometryOutput(None, xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _SkipGroup(buffer, pos, end): \n    while 1: \n      (tag_bytes, pos) = ReadTag(buffer, pos) \n      new_pos = SkipField(buffer, pos, end, tag_bytes) \n      if (new_pos == (-1)): \n         return pos \n      pos = new_pos",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def makeXMLTags(tagStr): \n    return _makeTags(tagStr, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def path(sheet): \n    return sheets.get()[sheet]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([MqttAlarm(hass, config.get(CONF_NAME), config.get(CONF_STATE_TOPIC), config.get(CONF_COMMAND_TOPIC), config.get(CONF_QOS), config.get(CONF_PAYLOAD_DISARM), config.get(CONF_PAYLOAD_ARM_HOME), config.get(CONF_PAYLOAD_ARM_AWAY), config.get(CONF_CODE))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_tag_add(context, instance_uuid, tag): \n    return IMPL.instance_tag_add(context, instance_uuid, tag)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_scalar(): \n    return T.scalar()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def manual_seed(seed): \n    return default_generator.manual_seed(seed)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _build_poll_environ(token): \n    return _build_environ('/_ah/channel/dev', {'command': 'poll', 'channel': token})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def found(location): \n    to(location, falcon.HTTP_302)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def line(x1, y1, x2, y2, stroke=(0, 0, 0, 1), strokewidth=1): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_hostname(hostname): \n    return (re.match('^[a-zA-Z0-9-]+$', hostname) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _onenormest_product(operator_seq, t=2, itmax=5, compute_v=False, compute_w=False, structure=None): \n    return scipy.sparse.linalg.onenormest(ProductOperator(structure=structure, *operator_seq))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_deprecated(validator, message, instance, schema): \n    log.warning(message)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def yiq2rgb(yiq): \n    return _convert(rgb_from_yiq, yiq)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_constant_type(x): \n    return (x in PRIMITIVE_TYPES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def idz_frm(n, w, x): \n    return _id.idz_frm(n, w, x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unpickle_backend(cls, args, kwargs): \n    return cls(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sanitize_path(raw_path): \n    return raw_path.replace('   ', '\\\\   ')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _handleBulletWidth(bulletText, style, maxWidths): \n    if bulletText: \n      if isinstance(bulletText, basestring): \n         bulletWidth = stringWidth(bulletText, style.bulletFontName, style.bulletFontSize) \n      else: \n         bulletWidth = 0 \n         for f in bulletText: \n            bulletWidth = (bulletWidth + stringWidth(f.text, f.fontName, f.fontSize)) \n      bulletRight = ((style.bulletIndent + bulletWidth) + (0.6 * style.bulletFontSize)) \n      indent = (style.leftIndent + style.firstLineIndent) \n      if (bulletRight > indent): \n         maxWidths[0] -= (bulletRight - indent)",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def showUnicodeWarning(): \n    showWarning(_('Selected   file   was   not   in   UTF-8   format.   Please   see   the   importing   section   of   the   manual.'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('apache_site' if ('apache.a2ensite' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def mock_object(**params): \n    return type('Mock', (), params)()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_default_proxy(proxy_type=None, addr=None, port=None, rdns=True, username=None, password=None): \n    socksocket.default_proxy = (proxy_type, addr.encode(), port, rdns, (username.encode() if username else None), (password.encode() if password else None))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_default_fscluster_config(): \n    return conf.HDFS_CLUSTERS[FS_DEFAULT_NAME]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _AppendFiltersForMSBuild(parent_filter_name, sources, rule_dependencies, extension_to_rule_name, filter_group, source_group): \n    for source in sources: \n      if isinstance(source, MSVSProject.Filter): \n         if (not parent_filter_name): \n            filter_name = source.name \n         else: \n            filter_name = ('%s\\\\%s' % (parent_filter_name, source.name)) \n         filter_group.append(['Filter', {'Include': filter_name}, ['UniqueIdentifier', MSVSNew.MakeGuid(source.name)]]) \n         _AppendFiltersForMSBuild(filter_name, source.contents, rule_dependencies, extension_to_rule_name, filter_group, source_group) \n      else: \n         (_, element) = _MapFileToMsBuildSourceType(source, rule_dependencies, extension_to_rule_name) \n         source_entry = [element, {'Include': source}] \n         if parent_filter_name: \n            source_entry.append(['Filter', parent_filter_name]) \n         source_group.append(source_entry)",
        "line_count": 14,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def lpmerge(L, R): \n    return dict(L, **dict(((k, v) for (k, v) in R.iteritems() if (v is not None))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def in6_or(a1, a2): \n    return _in6_bitops(a1, a2, 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def requirejs_xmodule(request): \n    return render_to_response('xmodule.js', {'urls': get_xmodule_urls()}, content_type='text/javascript')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def append_makeopts(value): \n    return append_var('MAKEOPTS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_figure_patch(f): \n    print('\\n            def   __init__(self,   *args,   **kwargs):\\n                        super(Figure,   self).__init__(*args,   **kwargs)\\n                        if   \\'data\\'   not   in   self:\\n                                    self.data   =   Data(_parent=self,   _parent_key=\\'data\\')\\n\\n            def   get_data(self,   flatten=False):\\n                        \"\"\"\\n                        Returns   the   JSON   for   the   plot   with   non-data   elements   stripped.\\n\\n                        Flattening   may   increase   the   utility   of   the   result.\\n\\n                        :param   (bool)   flatten:   {\\'a\\':   {\\'b\\':   \\'\\'}}   -->   {\\'a.b\\':   \\'\\'}\\n                        :returns:   (dict|list)   Depending   on   (flat|unflat)\\n\\n                        \"\"\"\\n                        return   self.data.get_data(flatten=flatten)\\n\\n            def   to_dataframe(self):\\n                        \"\"\"\\n                        Create   a   dataframe   with   trace   names   and   keys   as   column   names.\\n\\n                        :return:   (DataFrame)\\n\\n                        \"\"\"\\n                        data   =   self.get_data(flatten=True)\\n                        from   pandas   import   DataFrame,   Series\\n                        return   DataFrame(\\n                                    dict([(k,   Series(v))   for   k,   v   in   data.items()]))\\n\\n            def   print_grid(self):\\n                        \"\"\"\\n                        Print   a   visual   layout   of   the   figure\\'s   axes   arrangement.\\n\\n                        This   is   only   valid   for   figures   that   are   created\\n                        with   plotly.tools.make_subplots.\\n\\n                        \"\"\"\\n                        try:\\n                                    grid_str   =   self.__dict__[\\'_grid_str\\']\\n                        except   AttributeError:\\n                                    raise   Exception(\"Use   plotly.tools.make_subplots   \"\\n                                                                                    \"to   create   a   subplot   grid.\")\\n                        print(grid_str)\\n\\n            def   append_trace(self,   trace,   row,   col):\\n                        \"\"\"\\n                        Add   a   trace   to   your   figure   bound   to   axes   at   the   row,   col   index.\\n\\n                        The   row,   col   index   is   generated   from   figures   created   with\\n                        plotly.tools.make_subplots   and   can   be   viewed   with\\n                        Figure.print_grid.\\n\\n                        :param   (dict)   trace:   The   data   trace   to   be   bound.\\n                        :param   (int)   row:   Subplot   row   index   (see   Figure.print_grid).\\n                        :param   (int)   col:   Subplot   column   index   (see   Figure.print_grid).\\n\\n                        Example:\\n                        #   stack   two   subplots   vertically\\n                        fig   =   tools.make_subplots(rows=2)\\n\\n                        This   is   the   format   of   your   plot   grid:\\n                        [   (1,1)   x1,y1   ]\\n                        [   (2,1)   x2,y2   ]\\n\\n                        fig.append_trace(Scatter(x=[1,2,3],   y=[2,1,2]),   1,   1)\\n                        fig.append_trace(Scatter(x=[1,2,3],   y=[2,1,2]),   2,   1)\\n\\n                        \"\"\"\\n                        try:\\n                                    grid_ref   =   self._grid_ref\\n                        except   AttributeError:\\n                                    raise   Exception(\"In   order   to   use   Figure.append_trace,   \"\\n                                                                                    \"you   must   first   use   \"\\n                                                                                    \"plotly.tools.make_subplots   \"\\n                                                                                    \"to   create   a   subplot   grid.\")\\n                        if   row   <=   0:\\n                                    raise   Exception(\"Row   value   is   out   of   range.   \"\\n                                                                                    \"Note:   the   starting   cell   is   (1,   1)\")\\n                        if   col   <=   0:\\n                                    raise   Exception(\"Col   value   is   out   of   range.   \"\\n                                                                                    \"Note:   the   starting   cell   is   (1,   1)\")\\n                        try:\\n                                    ref   =   grid_ref[row-1][col-1]\\n                        except   IndexError:\\n                                    raise   Exception(\"The   (row,   col)   pair   sent   is   out   of   \"\\n                                                                                    \"range.   Use   Figure.print_grid   to   view   the   \"\\n                                                                                    \"subplot   grid.   \")\\n                        if   \\'scene\\'   in   ref[0]:\\n                                    trace[\\'scene\\']   =   ref[0]\\n                                    if   ref[0]   not   in   self[\\'layout\\']:\\n                                                raise   Exception(\"Something   went   wrong.   \"\\n                                                                                                \"The   scene   object   for   ({r},{c})   \"\\n                                                                                                \"subplot   cell   \"\\n                                                                                                \"got   deleted.\".format(r=row,   c=col))\\n                        else:\\n                                    xaxis_key   =   \"xaxis{ref}\".format(ref=ref[0][1:])\\n                                    yaxis_key   =   \"yaxis{ref}\".format(ref=ref[1][1:])\\n                                    if   (xaxis_key   not   in   self[\\'layout\\']\\n                                                            or   yaxis_key   not   in   self[\\'layout\\']):\\n                                                raise   Exception(\"Something   went   wrong.   \"\\n                                                                                                \"An   axis   object   for   ({r},{c})   subplot   \"\\n                                                                                                \"cell   got   deleted.\"\\n                                                                                                .format(r=row,   c=col))\\n                                    trace[\\'xaxis\\']   =   ref[0]\\n                                    trace[\\'yaxis\\']   =   ref[1]\\n                        self[\\'data\\']   +=   [trace]\\n', file=f, end='')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def testMyClass(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def java_binary_config(append=None, **kwargs): \n    blade_config.update_config('java_binary_config', append, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text='', repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def html_escape(string, options): \n    return (escape(string) if ((not options) or options.get('html-escape', True)) else string)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _get_deterministic_value_for_table_name(table_name, max_value): \n    return (hash(table_name) % max_value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_param(value, size): \n    return lo.LinOp(lo.PARAM, size, [], value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shim_xmodule_js(block, fragment): \n    if (not fragment.js_init_fn): \n      fragment.initialize_js('XBlockToXModuleShim') \n      fragment.json_init_args = {'xmodule-type': block.js_module_name}",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def unix_time_from_uuid1(uuid_arg): \n    return ((uuid_arg.time - 122192928000000000) / 10000000.0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getarray_nofancy(a, b, lock=None): \n    return getarray(a, b, lock=lock)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_not_recurse(value): \n    return value",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_url_prefixer(): \n    return getattr(_locals, 'prefixer', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def demographic_data(): \n    return s3db.stats_demographic_data_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_html_tags(html): \n    return bleach.clean(html, tags=[], attributes={}, strip=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def choose_boundary(): \n    return uuid4().hex",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Chi(name, k): \n    return rv(name, ChiDistribution, (k,))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ipython_embed(): \n    with NamedFileInTemporaryDirectory('file_with_embed.py') as f: \n      f.write(_sample_embed) \n      f.flush() \n      f.close() \n      cmd = [sys.executable, f.name] \n      env = os.environ.copy() \n      env['IPY_TEST_SIMPLE_PROMPT'] = '1' \n      p = subprocess.Popen(cmd, env=env, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) \n      (out, err) = p.communicate(_exit) \n      std = out.decode('UTF-8') \n      nt.assert_equal(p.returncode, 0) \n      nt.assert_in('3   .   14', std) \n      if (os.name != 'nt'): \n         nt.assert_in('IPython', std) \n      nt.assert_in('bye!', std)",
        "line_count": 15,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def equatePolarDotRadius(point, returnValue): \n    equateCylindricalDotRadius(point, returnValue)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getLoggerClass(): \n    return _loggerClass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_torrent(info_hash, torrent_list): \n    for t in torrent_list: \n      if (t.info_hash == info_hash): \n         return t",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def store_response(resp, response_dict): \n    if (response_dict is not None): \n      response_dict['status'] = resp.status \n      response_dict['reason'] = resp.reason \n      response_dict['headers'] = resp_header_dict(resp)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def Merge(text, message): \n    _ParseOrMerge(text, message, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dumpconf(): \n    return __salt__['ps.pkill']('znc', signal=signal.SIGUSR1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _has_unexpected_italian_leading_zero(numobj): \n    return (numobj.italian_leading_zero and (not _is_leading_zero_possible(numobj.country_code)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_send_reset_token_to_user(default_settings, user): \n    with current_app.test_request_context(): \n      with mail.record_messages() as outbox: \n         send_reset_token(user) \n         assert (len(outbox) == 1) \n         assert ('/auth/reset-password' in outbox[0].body) \n         assert ('/auth/reset-password' in outbox[0].html)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def cluster_status(**kwargs): \n    return _query('admin/collections?action=CLUSTERSTATUS&wt=json', **kwargs)['cluster']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_unique_items(sequence, reference): \n    return tuple([item for item in sequence if (item not in reference)])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _repr_column_dict(dumper, data): \n    return dumper.represent_mapping(u'tag:yaml.org,2002:map', data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete(file_, delete_file=True): \n    return default.backend.delete(file_, delete_file)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _decision_relationships(workflow, parent, child_el): \n    for switch in child_el: \n      if (not isinstance(switch.tag, basestring)): \n         continue \n      for case in switch: \n         if (not isinstance(case.tag, basestring)): \n            continue \n         if ('to' not in case.attrib): \n            raise RuntimeError((_(\"Node   %s   has   a   link   that   is   missing   'to'   attribute.\") % parent.name)) \n         to = case.attrib['to'] \n         try: \n            child = Node.objects.get(workflow=workflow, name=to) \n         except Node.DoesNotExist as e: \n            raise RuntimeError((_('Node   %s   has   not   been   defined.') % to)) \n         if (etree.QName(case).localname == 'default'): \n            name = 'default' \n            obj = Link.objects.create(name=name, parent=parent, child=child) \n         else: \n            name = 'start' \n            comment = case.text.strip() \n            obj = Link.objects.create(name=name, parent=parent, child=child, comment=comment) \n         obj.save()",
        "line_count": 21,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def _not_null(value, field): \n    return ((value is not None) or (field.mode != 'NULLABLE'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_sentence(start_with_lorem=False): \n    return _GENERATOR.generate_sentence(start_with_lorem)[(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return DescriptionRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def os_release_attr(attribute): \n    return _distro.os_release_attr(attribute)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def failure_code_init(sub): \n    return ('{\\n                        if   (!PyErr_Occurred())   {\\n                                    PyErr_SetString(PyExc_RuntimeError,\\n                                                \"Unexpected   error   in   an   Op\\'s   C   code.   \"\\n                                                \"No   Python   exception   was   set.\");\\n                                    }\\n                        return   %(id)d;\\n}' % sub)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def count(s, *args): \n    return _apply(s.count, args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_destroy(context, project_id, resource): \n    return IMPL.quota_destroy(context, project_id, resource)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_task_user(): \n    return UserProfile.objects.get(pk=settings.TASK_USER_ID)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def publicize_exploration(committer_id, exploration_id): \n    _publicize_activity(committer_id, exploration_id, feconf.ACTIVITY_TYPE_EXPLORATION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_type_qos_specs_get(context, type_id): \n    return IMPL.volume_type_qos_specs_get(context, type_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def walksymlinks(top, topdown=True, onerror=None): \n    for (dirpath, dirnames, filenames) in os.walk(top, topdown, onerror): \n      if topdown: \n         (yield (dirpath, dirnames, filenames)) \n      symlinks = filter((lambda dirname: os.path.islink(os.path.join(dirpath, dirname))), dirnames) \n      for s in symlinks: \n         for x in walksymlinks(os.path.join(dirpath, s), topdown, onerror): \n            (yield x) \n      if (not topdown): \n         (yield (dirpath, dirnames, filenames))",
        "line_count": 9,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def permute_dimensions(x, pattern): \n    return tf.transpose(x, perm=pattern)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def screen(): \n    _lib.RAND_screen()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def http_content_security_policy(http_server): \n    return \"default-src   'self'   'unsafe-inline'   'unsafe-eval';   img-src   'self'   data:\"",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_actions(actions): \n    sys.stdout.write((_dumps(actions).encode('utf-8') + '\\n'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def table(shape, fill=None): \n    return [[fill for j in range(shape[1])] for i in range(shape[0])]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _duplicate_hits_generator(timestamps, **kwargs): \n    while True: \n      (yield generate_hits(timestamps, **kwargs))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def new_token(*args, **kwargs): \n    return uuid.uuid4().hex",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCurrentThreadName(): \n    return threading.current_thread().getName()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewMouseTool(): \n    return ViewpointMove()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def glob_list(obj, *args, **kwargs): \n    return obj.__glob_list__(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def noop(*args, **kwargs): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_verification_partitions(course_key): \n    with modulestore().bulk_operations(course_key, emit_signals=False): \n      icrv_blocks = get_course_blocks(course_key, VERIFICATION_BLOCK_CATEGORY) \n      _set_verification_partitions(course_key, icrv_blocks)",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def erroneous_view(request): \n    raise RuntimeError()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ip2int(ipstr): \n    return struct.unpack('!I', socket.inet_aton(ipstr))[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, *args, **kwargs): \n    return CAST128Cipher(key, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pid_exists(pid): \n    return _psposix.pid_exists(pid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_nova_v2_client(session, region): \n    return NovaClient(session=session, region_name=region, version=2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_magic(): \n    return MAGIC",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bad_request(req, resp, **kwargs): \n    raise HTTPBadRequest('Bad   request', 'Invalid   HTTP   method')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_writable(sheet): \n    return ((sheet in sheets.get()) and os.access(path(sheet), os.W_OK))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def checkout(path, use_sudo=False, user=None): \n    with cd(path): \n      _run('bzr   checkout   --quiet', use_sudo=use_sudo, user=user)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ensure_directory_containing(path): \n    ensure_directory(os.path.dirname(path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def LINEARREG_ANGLE(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.LINEARREG_ANGLE, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fntbl37(): \n    return [Template(Word([0]), Word([1]), Word([2])), Template(Word([(-1)]), Word([0]), Word([1])), Template(Word([0]), Word([(-1)])), Template(Word([0]), Word([1])), Template(Word([0]), Word([2])), Template(Word([0]), Word([(-2)])), Template(Word([1, 2])), Template(Word([(-2), (-1)])), Template(Word([1, 2, 3])), Template(Word([(-3), (-2), (-1)])), Template(Word([0]), Pos([2])), Template(Word([0]), Pos([(-2)])), Template(Word([0]), Pos([1])), Template(Word([0]), Pos([(-1)])), Template(Word([0])), Template(Word([(-2)])), Template(Word([2])), Template(Word([1])), Template(Word([(-1)])), Template(Pos([(-1)]), Pos([1])), Template(Pos([1]), Pos([2])), Template(Pos([(-1)]), Pos([(-2)])), Template(Pos([1])), Template(Pos([(-1)])), Template(Pos([(-2)])), Template(Pos([2])), Template(Pos([1, 2, 3])), Template(Pos([1, 2])), Template(Pos([(-3), (-2), (-1)])), Template(Pos([(-2), (-1)])), Template(Pos([1]), Word([0]), Word([1])), Template(Pos([1]), Word([0]), Word([(-1)])), Template(Pos([(-1)]), Word([(-1)]), Word([0])), Template(Pos([(-1)]), Word([0]), Word([1])), Template(Pos([(-2)]), Pos([(-1)])), Template(Pos([1]), Pos([2])), Template(Pos([1]), Pos([2]), Word([1]))]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_include_path(paths): \n    for path in paths: \n      if (not os.path.isdir(path)): \n         continue \n      if (path not in sys.path): \n         sys.path.insert(1, path) \n      for f in os.listdir(path): \n         fpath = os.path.join(path, f) \n         if os.path.isdir(fpath): \n            load_include_path([fpath])",
        "line_count": 9,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def test_unknown(enum): \n    with pytest.raises(AttributeError): \n      _ = enum.three",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enabled(name, **kwargs): \n    return (info(name)['StartType'] == 'Auto')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_tool_sources_from_path(path, load_exception_handler=load_exception_handler, recursive=False, register_load_errors=False): \n    return _load_tools_from_path(path, load_exception_handler=load_exception_handler, recursive=recursive, register_load_errors=register_load_errors, loader_func=get_tool_source, enable_beta_formats=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_to_id_fields(data, table, field_name): \n    for item in data[table]: \n      item[(field_name + '_id')] = item[field_name] \n      del item[field_name]",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def serializePath(pathObj, options): \n    return ''.join([(cmd + scourCoordinates(data, options, (cmd == 'a'))) for (cmd, data) in pathObj])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def build_logger(): \n    return log",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def aggregate_update(context, aggregate_id, values): \n    return IMPL.aggregate_update(context, aggregate_id, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exchange_shared(a, b): \n    raise NotImplementedError('TODO:   implement   the   function')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dupAssemblies(num): \n    for i in xrange(num): \n      createAssembly(('DUP' + str(i)), '', i)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _get_pool_key(conf): \n    return (conf.klass, conf.host, conf.port)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_sharing_strategy(): \n    return _sharing_strategy",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def consistencygroup_get(context, consistencygroup_id): \n    return IMPL.consistencygroup_get(context, consistencygroup_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def E1(z): \n    return expint(1, z)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _reset_http_connections(http): \n    if getattr(http, 'connections', None): \n      for conn_key in list(http.connections.keys()): \n         if (':' in conn_key): \n            del http.connections[conn_key]",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def pkcs_os2ip(x): \n    return int(x.encode('hex'), 16)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_mne_c(): \n    return ('MNE_ROOT' in os.environ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _on_walk_error(err): \n    log.error('%s:   %s', err.filename, err.strerror)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_list(l, scalars=(Mapping, string_t), iters=(Iterable,)): \n    return (isinstance(l, iters) and (not isinstance(l, (scalars or ()))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def copy_func(f, name=None): \n    return types.FunctionType(six.get_function_code(f), six.get_function_globals(f), (name or f.__name__), six.get_function_defaults(f), six.get_function_closure(f))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def upper_keys(dictionary): \n    return dict(((k.upper(), v) for (k, v) in dictionary.items()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_image_opacity(img, alpha=0.5): \n    return imageops.set_opacity(image_from_data(img), alpha)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_instance(obj, class_, label): \n    if (not isinstance(obj, class_)): \n      raise ModelInconsistencyError(('%s   should   be   sublcass   of   %s,   provided:   %s' % (label, class_.__name__, type(obj).__name__)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def CustomConfigDefault(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('sysctl.show' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unixTime(): \n    return systime.time()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gcs_put_request(url, local_path): \n    return requests.request('PUT', url, data=open(local_path, 'rb'), headers={'content-type': 'application/x-gzip'}, timeout=REQUEST_TIMEOUT, verify=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_array_flat_cls(flatiterty): \n    return _make_flattening_iter_cls(flatiterty, 'flat')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_to_curl(context, method=None): \n    raise NotImplementedError('curl   format   is   not   supported   yet')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def open(file, flag='r', mode=438): \n    return _DATABASES[file]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _nbytes_full(fmt, nlines): \n    return (((fmt.repeat * fmt.width) + 1) * (nlines - 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_unnecessary_semicolons(css): \n    return re.sub(';+\\\\}', '}', css)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def s_render(): \n    return blocks.CURRENT.render()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def std_cdf(x): \n    return (0.5 + (0.5 * tt.erf((x / tt.sqrt(2.0)))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_related_models_tuples(model): \n    return {(rel_mod._meta.app_label, rel_mod._meta.model_name) for rel_mod in _get_related_models(model)}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_url_prefixer(prefixer): \n    _locals.prefixer = prefixer",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pde_separate_add(eq, fun, sep): \n    return pde_separate(eq, fun, sep, strategy='add')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_relexpr(p): \n    p[0] = ('RELOP', p[2], p[1], p[3])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reload_config(): \n    run_as_root('supervisorctl   reload')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def config_changes(config, unused_plugins): \n    client.view_config_changes(config, num=config.num)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _parse_scram_response(response): \n    return dict((item.split('=', 1) for item in response.split(',')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def keywords(s, top=10, **kwargs): \n    return parser.find_keywords(s, **dict({'frequency': parser.frequency, 'top': top, 'pos': ('NN',), 'ignore': ('rt', 'mensen')}, **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qos_specs_get_all(context, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None): \n    return IMPL.qos_specs_get_all(context, filters=filters, marker=marker, limit=limit, offset=offset, sort_keys=sort_keys, sort_dirs=sort_dirs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(linter): \n    linter.register_checker(StdlibChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_ref_chain(obj, predicate, max_depth=20, extra_ignore=()): \n    return _find_chain(obj, predicate, gc.get_referents, max_depth=max_depth, extra_ignore=extra_ignore)[::(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_isoinfo(): \n    return has_userland_tool('isoinfo')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update(repo_uri): \n    with Repo(repo_uri) as repo: \n      repo.pull()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _process_worker(call_queue, result_queue, shutdown): \n    while True: \n      try: \n         call_item = call_queue.get(block=True, timeout=0.1) \n      except queue.Empty: \n         if shutdown.is_set(): \n            return \n      else: \n         try: \n            r = call_item.fn(*call_item.args, **call_item.kwargs) \n         except BaseException: \n            e = sys.exc_info()[1] \n            result_queue.put(_ResultItem(call_item.work_id, exception=e)) \n         else: \n            result_queue.put(_ResultItem(call_item.work_id, result=r))",
        "line_count": 14,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def CMO(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.CMO, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def standard_b64decode(s): \n    return b64decode(s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_specifier_qualifier_list_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ast_good_take(): \n    can_compile(u'(take   1   [2   3])')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_string(path, value, base=win32con.HKEY_CLASSES_ROOT): \n    win32api.RegSetValue(base, path, win32con.REG_SZ, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def numpy_norms(W): \n    return np.sqrt((1e-08 + np.square(W).sum(axis=0)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_summary(commit): \n    return commit.message.splitlines()[0].replace('   ', '-')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def arcsech(val): \n    return numpy.arccosh((1.0 / val))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def login(client, username, password): \n    return client.post('/login', data={'username': username, 'password': password}, follow_redirects=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def final_status(statuses): \n    return sorted(statuses, key=itemgetter('updated_at'))[(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_assignment_and_copy(): \n    for name in ('quantity', 'arraywrap'): \n      m = MIXIN_COLS[name] \n      t0 = QTable([m], names=['m']) \n      for (i0, i1) in ((1, 2), (slice(0, 2), slice(1, 3)), (np.array([1, 2]), np.array([2, 3]))): \n         t = t0.copy() \n         t['m'][i0] = m[i1] \n         if (name == 'arraywrap'): \n            assert np.all((t['m'].data[i0] == m.data[i1])) \n            assert np.all((t0['m'].data[i0] == m.data[i0])) \n            assert np.all((t0['m'].data[i0] != t['m'].data[i0])) \n         else: \n            assert np.all((t['m'][i0] == m[i1])) \n            assert np.all((t0['m'][i0] == m[i0])) \n            assert np.all((t0['m'][i0] != t['m'][i0]))",
        "line_count": 14,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return SVGDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_attached(context, volume_id, instance_id, host_name, mountpoint, attach_mode='rw'): \n    return IMPL.volume_attached(context, volume_id, instance_id, host_name, mountpoint, attach_mode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def response(controller, arg): \n    return _response(controller, _normalize(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def doc_url(request=None): \n    return common_doc_url(request, CONFIG)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def json_encode(value): \n    return _json_encode(recursive_unicode(value)).replace('</', '<\\\\/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onInit(isReload): \n    DEBUG_MSG(('onInit::isReload:%s' % isReload))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_create(context, values): \n    return IMPL.floating_ip_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deprecated_module(removal_version, hint_message=None): \n    warn_or_error(removal_version, u'module', hint_message)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def UniformSum(name, n): \n    return rv(name, UniformSumDistribution, (n,))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_endpoint_region(endpoint): \n    return (endpoint.get('region_id') or endpoint.get('region'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _get_host_ssds(host_reference): \n    return _get_host_disks(host_reference).get('SSDs')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _nmeaFloat(degrees, minutes): \n    return ('%i%0.3f' % (degrees, minutes))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def esp8266_function_only(func): \n    return check_supported_function(func, (lambda o: (o.CHIP_NAME == 'ESP8266')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addNegativesPositives(derivation, negatives, paths, positives): \n    for path in paths: \n      endMultiplier = None \n      normal = euclidean.getNormalByPath(path) \n      if (normal.dot(derivation.normal) < 0.0): \n         endMultiplier = 1.000001 \n      loopListsByPath = getLoopListsByPath(derivation, endMultiplier, path) \n      geometryOutput = trianglemesh.getPillarsOutput(loopListsByPath) \n      if (endMultiplier == None): \n         positives.append(geometryOutput) \n      else: \n         negatives.append(geometryOutput)",
        "line_count": 11,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _extract_action_num_and_node_id(m): \n    return dict(action_num=(int(m.group('action_num')) - 1), node_id=m.group('node_id'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inception_resnet_v2_arg_scope(weight_decay=4e-05, batch_norm_decay=0.9997, batch_norm_epsilon=0.001): \n    with slim.arg_scope([slim.conv2d, slim.fully_connected], weights_regularizer=slim.l2_regularizer(weight_decay), biases_regularizer=slim.l2_regularizer(weight_decay)): \n      batch_norm_params = {'decay': batch_norm_decay, 'epsilon': batch_norm_epsilon} \n      with slim.arg_scope([slim.conv2d], activation_fn=tf.nn.relu, normalizer_fn=slim.batch_norm, normalizer_params=batch_norm_params) as scope: \n         return scope",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_representatives(mapping, seqs): \n    for (label, seq) in seqs: \n      if (label in mapping): \n         seq = BiologicalSequence(seq, id=('%s:   %d' % (label, (len(mapping[label]) + 1)))) \n         (yield seq.upper())",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def basename(path): \n    return os.path.basename(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_extra_headers(): \n    browser._browser.addheaders = []",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _has_staff_access_to_descriptor(user, descriptor, course_key): \n    return _has_staff_access_to_location(user, descriptor.location, course_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return HelpRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_cohort_by_name(course_key, name): \n    return CourseUserGroup.objects.get(course_id=course_key, group_type=CourseUserGroup.COHORT, name=name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CreateFileVersion(path, content, timestamp, token=None): \n    with test_lib.FakeTime(timestamp): \n      with aff4.FACTORY.Create(path, aff4_type=aff4_grr.VFSFile, mode='w', token=token) as fd: \n         fd.Write(content) \n         fd.Set(fd.Schema.CONTENT_LAST, rdfvalue.RDFDatetime.Now())",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_floating_address_get_all(context, instance_uuid): \n    return IMPL.instance_floating_address_get_all(context, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_forward(handle): \n    while True: \n      line = handle.readline() \n      if ((not line) or (line and line.strip())): \n         return line",
        "line_count": 4,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def find_users(email): \n    return UserProfile.objects.filter((Q(email=email) | Q(history__email=email))).distinct()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_string(io_or_string): \n    return XmlPropertyListParser().parse(io_or_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PLUS_DM(barDs, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_hl(barDs, count, talib.PLUS_DM, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def error(msg, t=None, obj=None): \n    root.log(msg, level=ERROR, t=t, obj=obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flattened_order_key(key): \n    return tuple(([len(key)] + list(key)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_expression_uminus(p): \n    p[0] = (- p[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render_purchase_form_html(cart, **kwargs): \n    return render_to_string('shoppingcart/cybersource_form.html', {'action': get_purchase_endpoint(), 'params': get_signed_purchase_params(cart)})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('boto_apigateway' if ('boto_apigateway.describe_apis' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sle(actual, predicted): \n    return np.power((np.log((np.array(actual) + 1)) - np.log((np.array(predicted) + 1))), 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sort_nicely(l): \n    l.sort(key=alphanum_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wire_encode(obj): \n    return dumps(_cached_dfs_serialize(obj))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_zonecode(): \n    return salt.utils.mac_utils.execute_return_result('date   +%Z')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disable(name, **kwargs): \n    return _switch(name, False, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _schedule_probes(probes): \n    return __salt__['probes.schedule_probes'](_ordered_dict_to_dict(probes), commit=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_diff_chunk_generator_class(): \n    return _generator",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fromstring(html_string): \n    return BeautifulSoup.BeautifulSoup(html_string, convertEntities=BeautifulSoup.BeautifulSoup.HTML_ENTITIES).findChild(True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ccode(expr, assign_to=None, **settings): \n    return CCodePrinter(settings).doprint(expr, assign_to)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_get_all_for_volume(context, volume_id): \n    return IMPL.snapshot_get_all_for_volume(context, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _update_datacenter_cache_from_objects(session, dcs): \n    while dcs: \n      for dco in dcs.objects: \n         dc_ref = dco.obj \n         ds_refs = [] \n         prop_dict = vm_util.propset_dict(dco.propSet) \n         name = prop_dict.get('name') \n         vmFolder = prop_dict.get('vmFolder') \n         datastore_refs = prop_dict.get('datastore') \n         if datastore_refs: \n            datastore_refs = datastore_refs.ManagedObjectReference \n            for ds in datastore_refs: \n               ds_refs.append(ds.value) \n         else: \n            LOG.debug(\"Datacenter   %s   doesn't   have   any   datastore   associated   with   it,   ignoring   it\", name) \n         for ds_ref in ds_refs: \n            _DS_DC_MAPPING[ds_ref] = DcInfo(ref=dc_ref, name=name, vmFolder=vmFolder) \n      dcs = session._call_method(vutil, 'continue_retrieval', dcs)",
        "line_count": 17,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def no_log_warn(logical_line): \n    if logical_line.startswith('LOG.warn('): \n      (yield (0, 'C301   Use   LOG.warning()   rather   than   LOG.warn()'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _read_dict(configparser, dictionary): \n    for (section, keys) in dictionary.items(): \n      section = str(section) \n      configparser.add_section(section) \n      for (key, value) in keys.items(): \n         key = configparser.optionxform(str(key)) \n         if (value is not None): \n            value = str(value) \n         configparser.set(section, key, value)",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def inside_gamut(r, g, b): \n    return ((r >= 0) and (g >= 0) and (b >= 0))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def facility_geojson(): \n    s3db.org_facility_geojson()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eigvals_banded(a_band, lower=False, overwrite_a_band=False, select='a', select_range=None, check_finite=True): \n    return eig_banded(a_band, lower=lower, eigvals_only=1, overwrite_a_band=overwrite_a_band, select=select, select_range=select_range, check_finite=check_finite)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bench_expand_32(): \n    e.expand()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def message_question(text, title, informative_text=None, details=None, buttons=None, default_button=None, exc_info=False, parent=None): \n    return message(QMessageBox.Question, text, title, informative_text, details, buttons, default_button, exc_info, parent)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unwrapped_ball(data): \n    return (10.0 / (5.0 + sum((((d - 3) ** 2) for d in data))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def GetCommandLineFiles(command_line_file_list, recursive, exclude): \n    return _FindPythonFiles(command_line_file_list, recursive, exclude)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten(seq): \n    for x in seq: \n      if isinstance(x, (types.GeneratorType, list, tuple)): \n         for y in flatten(x): \n            (yield smart_str(y)) \n      else: \n         (yield smart_str(x))",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def is_null_slice(obj): \n    return (isinstance(obj, slice) and (obj.start is None) and (obj.stop is None) and (obj.step is None))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def add_token_to_response(response, csrf_token=None): \n    if csrf_token: \n      response.set_cookie('csrf_token', csrf_token, expires=CSRF_TIMEOUT, httponly=False)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def toBase64(s): \n    return binascii.b2a_base64(s)[:(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reshape(x, shape): \n    return Reshape(shape)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_reverse_o2o(field): \n    return ((not hasattr(field, 'rel')) and field.field.unique)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _dict_to_json_pretty(d, sort_keys=True): \n    return json.dumps(d, indent=4, separators=(',', ':   '), sort_keys=sort_keys)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _list_new_metadata(repository_path): \n    return {'/'.join(path.segmentsFrom(repository_path)) for path in repository_path.child('repodata').walk()}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fakeCallbackCanceller(deferred): \n    deferred.callback('Callback   Result')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def F1(classify=(lambda document: False), documents=[], average=None): \n    return test(classify, documents, average)[3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mentions(string): \n    return [b for (a, b) in TWITTER_MENTION.findall(string)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def rotate(color, percent): \n    return adjust(color, 0, percent)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    evaluate.processArchivable(Cube, elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_str_equal(reference_str, test_str, format_str=u'String   {str1}   and   {str2}   do   not   match:\\n{differences}'): \n    if (reference_str != test_str): \n      diff = difflib.unified_diff(reference_str.splitlines(1), test_str.splitlines(1), u'Reference', u'Test   result', u'', u'', 0) \n      raise ValueError(format_str.format(str1=reference_str, str2=test_str, differences=u''.join(diff)))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_sys_meta_prefix(server_type): \n    return ('x-%s-%s-' % (server_type.lower(), 'sysmeta'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_sysprefix(): \n    return run(\"conda   info   -s   |   grep   -e   'sys.prefix'   |   awk   '{print   $2}'\")",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_worse_than(lhs, rhs): \n    return (statuses.index(lhs) < statuses.index(rhs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bessel(N, Wn, btype='low', analog=False, output='ba', norm='phase'): \n    return iirfilter(N, Wn, btype=btype, analog=analog, output=output, ftype=('bessel_' + norm))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def huber_loss(x, t, delta): \n    return HuberLoss(delta=delta)(x, t)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remote_docker_compose(client_ip, docker_host, compose_file_path, *args): \n    return remote_command(client_ip, (('COMPOSE_HTTP_TIMEOUT=360', 'DOCKER_TLS_VERIFY=1', 'DOCKER_HOST={}'.format(docker_host), 'docker-compose', '--file', compose_file_path) + args))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processXMLElement(xmlElement): \n    lineation.processXMLElementByFunction(getManipulatedPaths, xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getOverhangAngle(elementNode): \n    return getCascadeFloatWithoutSelf(45.0, elementNode, 'overhangAngle')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getIsRadianClose(firstRadian, secondRadian): \n    return (abs((math.pi - abs((math.pi - ((firstRadian - secondRadian) % (math.pi + math.pi)))))) < 1e-06)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_pref_mode_from_name(name): \n    return _MONGOS_MODES.index(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_latest_commit(path=W3AF_LOCAL_PATH): \n    return git.Repo(path).head.commit.hexsha",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def html_doctype_matches(text): \n    return doctype_matches(text, 'html\\\\s+PUBLIC\\\\s+\"-//W3C//DTD   X?HTML.*')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def call_split_lines(x, lineno=None, col=None): \n    return ast.Call(func=ast.Attribute(value=x, attr='splitlines', ctx=ast.Load(), lineno=lineno, col_offset=col), args=[], keywords=[], starargs=None, kwargs=None, lineno=lineno, col_offset=col)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unlock_account(name): \n    return __salt__['user.update'](name, unlock_account=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def losetup_detach_all(root_path): \n    for (device_file, backing_file) in _losetup_list(): \n      try: \n         backing_file.segmentsFrom(root_path) \n      except ValueError: \n         pass \n      else: \n         losetup_detach(device_file)",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def group_create(groupname, user=None, host=None, port=None, maintenance_db=None, password=None, createdb=None, createuser=None, createroles=None, encrypted=None, login=None, inherit=None, superuser=None, replication=None, rolepassword=None, groups=None, runas=None): \n    return _role_create(groupname, user=user, typ_='group', host=host, port=port, maintenance_db=maintenance_db, password=password, createdb=createdb, createroles=createroles, createuser=createuser, encrypted=encrypted, login=login, inherit=inherit, superuser=superuser, replication=replication, rolepassword=rolepassword, groups=groups, runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_sql_reset(app): \n    return (get_sql_delete(app) + get_sql_all(app))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cast(typ, val): \n    return val",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Dagum(name, p, a, b): \n    return rv(name, DagumDistribution, (p, a, b))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_permission_for_course_about(): \n    return configuration_helpers.get_value('COURSE_ABOUT_VISIBILITY_PERMISSION', settings.COURSE_ABOUT_VISIBILITY_PERMISSION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_net_dev(dev): \n    if device_exists(dev): \n      try: \n         utils.execute('ip', 'link', 'delete', dev, run_as_root=True, check_exit_code=[0, 2, 254]) \n         LOG.debug(\"Net   device   removed:   '%s'\", dev) \n      except processutils.ProcessExecutionError: \n         with excutils.save_and_reraise_exception(): \n            LOG.error(_LE(\"Failed   removing   net   device:   '%s'\"), dev)",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def abort(code=500, text='Unknown   Error.'): \n    raise HTTPError(code, text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def process_message(data): \n    if (u'print   users' in data[u'text']): \n      for user in sc.api_call(u'users.list')[u'members']: \n         print (user[u'name'], user[u'id'])",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def download_and_untar_files(source_url, target_parent_dir, tar_root_name, target_root_name): \n    if (not os.path.exists(os.path.join(target_parent_dir, target_root_name))): \n      print ('Downloading   and   untarring   file   %s   to   %s' % (tar_root_name, target_parent_dir)) \n      common.ensure_directory_exists(target_parent_dir) \n      urllib.urlretrieve(source_url, TMP_UNZIP_PATH) \n      with contextlib.closing(tarfile.open(TMP_UNZIP_PATH, 'r:gz')) as tfile: \n         tfile.extractall(target_parent_dir) \n      os.remove(TMP_UNZIP_PATH) \n      os.rename(os.path.join(target_parent_dir, tar_root_name), os.path.join(target_parent_dir, target_root_name))",
        "line_count": 8,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def teardown_function(function): \n    slogging.configure(**function.snapshot)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nullDebugAction(*args): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _unjoin_service(service): \n    _apply_service(service, SonosDevice.unjoin)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trunk_by_port_provider(resource, port_id, context, **kwargs): \n    return trunk_objects.Trunk.get_object(context, port_id=port_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def source_from_cache(path): \n    return util.source_from_cache(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def equateCylindricalDotZ(point, returnValue): \n    point.z = returnValue",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_queue_name_prefix(name): \n    return (_get_queue_name_prefix() + name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sigmoid(x): \n    return tf.nn.sigmoid(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_sffinfo(): \n    if (not which('sffinfo')): \n      raise ApplicationNotFoundError((_MISSING_APP_MESSAGE % 'sffinfo'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def lambdarepr(expr, **settings): \n    return LambdaPrinter(settings).doprint(expr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PackPlacemark(placemark): \n    return ','.join([base64hex.B64HexEncode(x.encode('utf-8'), padding=False) for x in placemark])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def random(): \n    return randommod.choice(list(_load()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enter_transaction_management(managed=True, using=None, forced=False): \n    get_connection(using).enter_transaction_management(managed, forced)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getctime(filename): \n    return os.stat(filename).st_ctime",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_task_object(a): \n    return (isinstance(a, Task) and a.use_task_objects)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def islink(path): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getDotProductPlusOne(firstComplex, secondComplex): \n    return (1.0 + getDotProduct(firstComplex, secondComplex))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rollback(using=None): \n    get_connection(using).rollback()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def median(input, labels=None, index=None): \n    return _select(input, labels, index, find_median=True)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_definition(params, language): \n    return ((not exclude_bracket(params.get('enabled', BH_ENABLED), params.get('language_filter', BH_LANG_FILTER), params.get('language_list', BH_LANG_LIST), language)) and (params.get('open', None) is not None) and (params.get('close', None) is not None))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def apply_(obj, data): \n    for (key, value) in data.items(): \n      if _safe_value(obj, key, value): \n         obj[key] = value \n      else: \n         obj.set_parse(key, six.text_type(value))",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def set_monitor_timeout(timeout, power='ac', scheme=None): \n    return _set_powercfg_value(scheme, 'SUB_VIDEO', 'VIDEOIDLE', power, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_middleware_defaults(): \n    cors.set_defaults(allow_headers=['X-Auth-Token', 'X-Openstack-Request-Id', 'X-Identity-Status', 'X-Roles', 'X-Service-Catalog', 'X-User-Id', 'X-Tenant-Id'], expose_headers=['X-Auth-Token', 'X-Openstack-Request-Id', 'X-Subject-Token', 'X-Service-Token'], allow_methods=['GET', 'PUT', 'POST', 'DELETE', 'PATCH'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writable_preferred_server_selector(selection): \n    return (writable_server_selector(selection) or secondary_server_selector(selection))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def hook_response(response='Update   triggered', status='success'): \n    return JsonResponse(data={'status': status, 'message': response})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def no_quote(s): \n    return s",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_event_loop(): \n    return _current_loop",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_tab_sep(out_file, *args): \n    print(' DCTB '.join((str(f) for f in args)), file=out_file)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def saferepr(object): \n    return _safe_repr(object, {}, None, 0)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jelly(object, taster=DummySecurityOptions(), persistentStore=None, invoker=None): \n    return _Jellier(taster, persistentStore, invoker).jelly(object)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def coerce_dtypes(df, dtypes): \n    for c in df.columns: \n      if ((c in dtypes) and (df.dtypes[c] != dtypes[c])): \n         if (np.issubdtype(df.dtypes[c], np.floating) and np.issubdtype(dtypes[c], np.integer)): \n            if (df[c] % 1).any(): \n               msg = \"Runtime   type   mismatch.   Add   {'%s':   float}   to   dtype=   keyword   in   read_csv/read_table\" \n               raise TypeError((msg % c)) \n         df[c] = df[c].astype(dtypes[c])",
        "line_count": 7,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def test_disregard_wrong_payload(): \n    with assert_setup_component(1): \n      setup_component(HASS, sensor.DOMAIN, {sensor.DOMAIN: {'platform': 'pilight', 'name': 'test_2', 'variable': 'test', 'payload': {'uuid': '1-2-3-4', 'protocol': 'test-protocol_2'}}}) \n      fire_pilight_message(protocol='test-protocol_2', data={'test': 'data', 'uuid': '0-0-0-0'}) \n      HASS.block_till_done() \n      state = HASS.states.get('sensor.test_2') \n      assert (state.state == 'unknown') \n      fire_pilight_message(protocol='wrong-protocol', data={'test': 'data', 'uuid': '1-2-3-4'}) \n      HASS.block_till_done() \n      state = HASS.states.get('sensor.test_2') \n      assert (state.state == 'unknown') \n      fire_pilight_message(protocol='test-protocol_2', data={'test': 'data', 'uuid': '1-2-3-4', 'other_payload': 3.141}) \n      HASS.block_till_done() \n      state = HASS.states.get('sensor.test_2') \n      assert (state.state == 'data')",
        "line_count": 14,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def set_mindays(name, days): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rootserviceHandle(target): \n    GlobalObject().root.service.mapTarget(target)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ensure_list_from_str_or_list(x, lineno=None, col=None): \n    return ast.IfExp(test=ast.Call(func=ast.Name(id='isinstance', ctx=ast.Load(), lineno=lineno, col_offset=col), args=[x, ast.Name(id='str', ctx=ast.Load(), lineno=lineno, col_offset=col)], keywords=[], starargs=None, kwargs=None, lineno=lineno, col_offset=col), body=ast.List(elts=[x], ctx=ast.Load(), lineno=lineno, col_offset=col), orelse=x, lineno=lineno, col_offset=col)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_metadata(headers): \n    return dict(((k, v) for (k, v) in headers.iteritems() if k.startswith('x-goog-meta-')))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def clean_old_jobs(): \n    for returner_ in __opts__[CONFIG_KEY]: \n      fstr = '{0}.clean_old_jobs'.format(returner_) \n      if (fstr in _mminion().returners): \n         _mminion().returners[fstr]()",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def random_upper(t): \n    return ''.join(((c.upper() if (random.random() > 0.5) else c) for c in t))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def version_clean(version): \n    return re.match('^~?[<>]?=?([^<>=:\\\\[]+).*$', version)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _listOpenFDs(): \n    return detector._listOpenFDs()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def migrate_data(): \n    _sync_repo(repo_name=DATA_MIGRATION_REPO)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def checkCRC(data, check): \n    return (computeCRC(data) == check)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def can_talk_to_agent(): \n    return bool(_get_pageant_window_object())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_datastores(service_instance): \n    return list_objects(service_instance, vim.Datastore)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def concatv(*seqs): \n    return concat(seqs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def synchronous_switch_listener(dbapi_conn, connection_rec): \n    dbapi_conn.execute('PRAGMA   synchronous   =   OFF')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _clean_to_gce_name(identifier): \n    return unicode(identifier.lower().replace(u'+', u'-').replace(u'/', u'-'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hash_data(data): \n    return base64.b64encode(hashlib.sha1(data).digest())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def detach_usage_plan_from_apis(plan_id, apis, region=None, key=None, keyid=None, profile=None): \n    return _update_usage_plan_apis(plan_id, apis, 'remove', region=region, key=key, keyid=keyid, profile=profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reset_profile(): \n    with _profile_lock: \n      sys.getdxp() \n      global _cumulative_profile \n      _cumulative_profile = sys.getdxp()",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def path2mod(path): \n    return path[:(-3)].replace(os.sep, '.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lbp_mul_term(f, cx): \n    return lbp(sig_mult(Sign(f), cx[0]), Polyn(f).mul_term(cx), Num(f))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ctrl_direction(bmRequestType): \n    return (bmRequestType & _CTRL_DIR_MASK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start_block(fid, kind): \n    write_int(fid, FIFF.FIFF_BLOCK_START, kind)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def worker_get_all(context, until=None, db_filters=None, **filters): \n    return IMPL.worker_get_all(context, until=until, db_filters=db_filters, **filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_equality_expression_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_filename_with_new_ext(original_file_path, new_ext, output_directory): \n    return path.join(output_directory, (path.splitext(path.split(original_file_path)[1])[0] + new_ext))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _filter_apis(name, apis): \n    return [api for api in apis if (api['name'] == name)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def prompt_normalized(q): \n    return prompt(q, _normalized_coerce_fn)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def copy_dedent(source): \n    return (lambda target: dedent(copy(source)(target)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_options(opts, warn=False): \n    return get_validated_options(opts, warn)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return WhittleRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_frontpage_pngs(only_if_needed=True): \n    for (fn_png, fn_py) in FRONTPAGE_PNGS.items(): \n      pn_png = os.path.join(FRONTPAGE_PNG_PATH, fn_png) \n      pn_py = os.path.join(FRONTPAGE_PY_PATH, fn_py) \n      mtime_py = os.path.getmtime(pn_py) \n      mtime_png = (os.path.getmtime(pn_png) if os.path.exists(pn_png) else (mtime_py - 1)) \n      if (only_if_needed and (mtime_py <= mtime_png)): \n         continue \n      subprocess.check_call(['python', pn_py]) \n      os.rename(fn_png, pn_png)",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_service_by_id_or_name(consul_api, service_id_or_name): \n    for (name, service) in consul_api.agent.services().iteritems(): \n      if ((service['ID'] == service_id_or_name) or (service['Service'] == service_id_or_name)): \n         return ConsulService(loaded=service)",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def addElementToPixelListFromPoint(element, pixelDictionary, point): \n    addElementToPixelList(element, pixelDictionary, int(round(point.real)), int(round(point.imag)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _pad_bytes(name, length): \n    return (name + ('\\x00' * (length - len(name))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable_source(name): \n    return _change_source_state(name, 'enable')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _log_failure(parameter, exc): \n    log.debug(('proc   call   failed   (%s):   %s' % (parameter, exc)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def length_gte(value, arg): \n    return (len(value) >= int(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dictsort(value, arg): \n    return sorted(value, key=Variable(arg).resolve)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vulnerability_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_rotating_equity_info(num_assets, first_start, frequency, periods_between_starts, asset_lifetime): \n    return pd.DataFrame({'symbol': [chr((ord('A') + i)) for i in range(num_assets)], 'start_date': pd.date_range(first_start, freq=(periods_between_starts * frequency), periods=num_assets), 'end_date': pd.date_range((first_start + (asset_lifetime * frequency)), freq=(periods_between_starts * frequency), periods=num_assets), 'exchange': 'TEST', 'exchange_full': 'TEST   FULL'}, index=range(num_assets))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_connected_xrandr_outputs(pl): \n    return (match.groupdict() for match in XRANDR_OUTPUT_RE.finditer(run_cmd(pl, [u'xrandr', u'-q'])))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_failed_queue(connection=None): \n    return FailedQueue(connection=connection)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return CuttingRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cxESTwoPoints(ind1, ind2): \n    return cxESTwoPoints(ind1, ind2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def partition_nodes(nodes): \n    return [partition_node(node) for node in nodes]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def tan(x): \n    return Tan()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_value_error_if_key_missing_in_context(mocker, replay_test_dir): \n    with pytest.raises(ValueError): \n      replay.load(replay_test_dir, 'invalid_replay')",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in6_issladdr(str): \n    return in6_isincluded(str, 'fec0::', 10)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DEFINE_list(name, default, help): \n    CONFIG.AddOption(type_info.List(name=name, default=default, description=help, validator=type_info.String()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_platform_files(dst): \n    for (root, dirs, files) in os.walk(dst): \n      for fn in files: \n         fn = os.path.join(root, fn) \n         if is_platform_file(fn): \n            (yield fn)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def to_json(a, *args, **kw): \n    return json.dumps(a, cls=AnsibleJSONEncoder, *args, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _clear_datastore_storage(datastore_path): \n    if os.path.lexists(datastore_path): \n      try: \n         os.remove(datastore_path) \n      except OSError as e: \n         logging.warning('Failed   to   remove   datastore   file   %r:   %s', datastore_path, e)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def parse_remainder(arguments): \n    return '   '.join(arguments)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def raiser(*args, **kwargs): \n    raise RaisedArguments(args, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_count_by_project(context, project_id, session=None): \n    return IMPL.floating_ip_count_by_project(context, project_id, session=session)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_thumbnail(file_, geometry_string, **options): \n    return default.backend.get_thumbnail(file_, geometry_string, **options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _fake_run_horcmstart2(*args): \n    return (0 if (not run_horcmstart_returns_error2) else 3)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def infer_getattr(self, context=None): \n    for owner in self.expr.infer(context): \n      if (owner is YES): \n         (yield owner) \n         continue \n      try: \n         context.boundnode = owner \n         for obj in owner.igetattr(self.attrname, context): \n            (yield obj) \n         context.boundnode = None \n      except (NotFoundError, InferenceError): \n         context.boundnode = None \n      except AttributeError: \n         context.boundnode = None",
        "line_count": 13,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def local_home_directory(name=''): \n    with settings(hide('running', 'stdout')): \n      return local(('echo   ~' + name), capture=True)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show_by_id(show_id, session=None): \n    return session.query(Series).filter((Series.id == show_id)).one()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def with_metaclass(meta, *bases): \n    return meta('NewBase', bases, {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def after_scenario(context, _): \n    if (hasattr(context, u'cli') and (not context.exit_sent)): \n      context.cli.terminate()",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def p_pointer_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def combine_max_stats(games): \n    return reduce((lambda a, b: (a + b)), [g.max_player_stats() for g in games if (g is not None)])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def dblog(msg, module): \n    return insert('INSERT   INTO   log   VALUES   (?,?,?)', (module, _timestamp(), msg.rstrip()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_android(): \n    return (sys.platform.startswith('linux') and ('ANDROID_PRIVATE' in os.environ))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_final(name, mro): \n    return any((isinstance(getattr(c, '__dict__', {}).get(name), final) for c in bases_mro(mro)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def allow_connection_pickling(): \n    from multiprocessing import reduction",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tup_to_vs(tup): \n    return '.'.join(tup)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def degrees_to_angle(value): \n    return int(round((value * 60000)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dlimport_workdir(basedir): \n    return tempfile.mkdtemp(dir=basedir)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fill_queue(queue_fill, any_list): \n    for elem in any_list: \n      queue_fill.put(elem)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def Msg(msg): \n    print ((((((color.B_YELLOW + '[') + color.B_GREEN) + '!') + color.B_YELLOW) + (']   %s' % msg)) + color.END)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_old_data(): \n    for directory in CASSANDRA_DATA_SUBDIRS: \n      data_dir = '{0}/{1}/{2}'.format(APPSCALE_DATA_DIR, 'cassandra', directory) \n      logging.warning('Removing   data   from   {0}'.format(data_dir)) \n      try: \n         subprocess.Popen('find   /opt/appscale/cassandra   -name   \"*\"   |   grep   \".db\\\\|.txt\\\\|.log\"   |   grep   -v   snapshot   |   xargs   rm', shell=True) \n         logging.info('Done   removing   data!') \n      except CalledProcessError as error: \n         logging.error('Error   while   removing   old   data   from   db.   Overwriting...   Error:   {0}'.format(str(error)))",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def sublist_swap(lst, a, b, m): \n    for i in xrange(m): \n      (lst[(a + i)], lst[(b + i)]) = (lst[(b + i)], lst[(a + i)])",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ndim(expr): \n    return len(shape(expr))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def config_true_value(value): \n    return ((value is True) or (isinstance(value, six.string_types) and (value.lower() in TRUE_VALUES)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def lookupNull(name, timeout=None): \n    return getResolver().lookupNull(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_targets(): \n    return User.find(QUERY)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_bootdev(bootdev='default', persist=False, uefiboot=False, **kwargs): \n    with _IpmiCommand(**kwargs) as s: \n      return s.set_bootdev(bootdev)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_app_path(app_id): \n    return ((constants.APPS_PATH + app_id) + '/app/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_raw_ansi(string, parser=ANSI_PARSER): \n    return parser.strip_raw_codes(string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _strip_listing_to_done(output_list): \n    return [line for line in output_list if _safe_output(line)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def patch_os(): \n    patch_module('os')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(linter): \n    linter.register_checker(SimilarChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_warnings(fn, warning_msgs, regex=False): \n    with assertions._expect_warnings(sa_exc.SAWarning, warning_msgs, regex=regex): \n      return fn()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cgsnapshot_creating_from_src(): \n    return IMPL.cgsnapshot_creating_from_src()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fmt_ex(ex): \n    return traceback.format_exception_only(ex.__class__, ex)[(-1)].strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _inverse_tester(norm_instance, vals): \n    assert_array_almost_equal(norm_instance.inverse(norm_instance(vals)), vals)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_enrollment_attributes(user_id, course_id): \n    return _data_api().get_enrollment_attributes(user_id, course_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_get_all(context, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None): \n    return IMPL.group_get_all(context, filters=filters, marker=marker, limit=limit, offset=offset, sort_keys=sort_keys, sort_dirs=sort_dirs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tokenize_grouped(css_source, ignore_comments=True): \n    return regroup(tokenize_flat(css_source, ignore_comments))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subn(pattern, repl, string, count=0): \n    return _compile(pattern, 0).subn(repl, string, count)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def install_dependencies(npm='npm'): \n    run(('%(npm)s   install' % locals()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def execute_concurrent_with_args(session, statement, parameters, *args, **kwargs): \n    return execute_concurrent(session, zip(cycle((statement,)), parameters), *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getAreaVector3LoopAbsolute(loop): \n    return getAreaLoopAbsolute(getComplexPath(loop))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize_timestamp(timestamp): \n    return ('%016.05f' % float(timestamp))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def override_pylons_about_with_core_template(): \n    return render_template(u'home/about.html')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_string(obj): \n    return (is_text_string(obj) or is_binary_string(obj))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def generateElementsQNamed(list, name, uri): \n    for n in list: \n      if (IElement.providedBy(n) and (n.name == name) and (n.uri == uri)): \n         (yield n)",
        "line_count": 3,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def getNewRepository(): \n    return OozebaneRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def interpret(marker, execution_context=None): \n    return Evaluator(execution_context).evaluate(marker.strip())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    evaluate.processArchivable(Path, elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def db_list(**kwargs): \n    return [row[0] for row in tsql_query('SELECT   name   FROM   sys.databases', as_dict=False, **kwargs)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _api_key_patchops(op, pvlist): \n    return [{'op': op, 'path': p, 'value': v} for (p, v) in pvlist]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_hook(name): \n    return _HOOKS.setdefault(name, Hook())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def link_pantsrefs(soups, precomputed): \n    for (page, soup) in soups.items(): \n      for a in soup.find_all(u'a'): \n         if a.has_attr(u'pantsref'): \n            pantsref = a[u'pantsref'] \n            if (not (pantsref in precomputed.pantsref)): \n               raise TaskError(u'Page   {0}   has   pantsref   \"{1}\"   and   I   cannot   find   pantsmark   for   it'.format(page, pantsref)) \n            a[u'href'] = rel_href(page, precomputed.pantsref[pantsref])",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def setup(hass, config): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_NOT_PROVIDED(x, encoder): \n    return pyamf.Undefined",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPluginsDirectoryPath(): \n    return archive.getAbsoluteFolderPath(os.path.dirname(__file__), os.path.join('skeinforge_plugins', 'profile_plugins'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def amax(a, axis=None, out=None, keepdims=False, dtype=None): \n    return a.max(axis=axis, dtype=dtype, out=out, keepdims=keepdims)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def swapcase(s): \n    return s.swapcase()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_regex(pem_type): \n    return re.compile('\\\\s*(?P<pem_header>-----BEGIN   {0}-----)\\\\s+(?:(?P<proc_type>Proc-Type:   4,ENCRYPTED)\\\\s*)?(?:(?P<dek_info>DEK-Info:   (?:DES-[3A-Z\\\\-]+,[0-9A-F]{{16}}|[0-9A-Z\\\\-]+,[0-9A-F]{{32}}))\\\\s*)?(?P<pem_body>.+?)\\\\s+(?P<pem_footer>-----END   {1}-----)\\\\s*'.format(pem_type, pem_type), re.DOTALL)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_blob_storage(): \n    return apiproxy_stub_map.apiproxy.GetStub('blobstore').storage",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _between_impl(expr, op, cleft, cright, **kw): \n    return BinaryExpression(expr, ClauseList(_check_literal(expr, operators.and_, cleft), _check_literal(expr, operators.and_, cright), operator=operators.and_, group=False, group_contents=False), op, negate=(operators.notbetween_op if (op is operators.between_op) else operators.between_op), modifiers=kw)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def bigrams(sequence, **kwargs): \n    for item in ngrams(sequence, 2, **kwargs): \n      (yield item)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def run_post_add_script(component, translation, filename): \n    run_hook(component, translation, component.post_add_script, None, filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unpack(structure, data): \n    return struct.unpack(('<' + structure), binascii.unhexlify(data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO_readinto(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_nonterminal(item): \n    return isinstance(item, Nonterminal)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_filename(path): \n    return os.path.join(test_dirname(), path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_version_info(conn, version_table, version_value): \n    conn.execute(sa.insert(version_table, values={'version': version_value}))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def customer_gateway_exists(customer_gateway_id=None, customer_gateway_name=None, region=None, key=None, keyid=None, profile=None): \n    return resource_exists('customer_gateway', name=customer_gateway_name, resource_id=customer_gateway_id, region=region, key=key, keyid=keyid, profile=profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_header_start_exception(): \n    for readerclass in [ascii.NoHeader, ascii.SExtractor, ascii.Ipac, ascii.BaseReader, ascii.FixedWidthNoHeader, ascii.Cds, ascii.Daophot]: \n      with pytest.raises(ValueError): \n         reader = ascii.core._get_reader(readerclass, header_start=5)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def checkSystemEncoding(): \n    if (sys.getdefaultencoding() == 'cp720'): \n      try: \n         codecs.lookup('cp720') \n      except LookupError: \n         errMsg = 'there   is   a   known   Python   issue   (#1616979)   related   ' \n         errMsg += \"to   support   for   charset   'cp720'.   Please   visit   \" \n         errMsg += \"'http://blog.oneortheother.info/tip/python-fix-cp720-encoding/index.html'   \" \n         errMsg += 'and   follow   the   instructions   to   be   able   to   fix   it' \n         logger.critical(errMsg) \n         warnMsg = \"temporary   switching   to   charset   'cp1256'\" \n         logger.warn(warnMsg) \n         reload(sys) \n         sys.setdefaultencoding('cp1256')",
        "line_count": 13,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def pci_device_destroy(context, node_id, address): \n    return IMPL.pci_device_destroy(context, node_id, address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_struct_declarator_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def atoi(s, base=10): \n    return _int(s, base)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _run_quiet(cmd, cwd=None, stdin=None, runas=None, shell=DEFAULT_SHELL, python_shell=False, env=None, template=None, umask=None, timeout=None, reset_system_locale=True, saltenv='base', pillarenv=None, pillar_override=None): \n    return _run(cmd, runas=runas, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, output_loglevel='quiet', log_callback=None, shell=shell, python_shell=python_shell, env=env, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, pillarenv=pillarenv, pillar_override=pillar_override)['stdout']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_entities(value): \n    return re.sub('&(?:\\\\w+|#\\\\d);', '', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rpad_ipv4_network(ip): \n    return '.'.join(itertools.islice(itertools.chain(ip.split('.'), '0000'), 0, 4))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_item_string(p): \n    p[0] = (p[1][1:(-1)], None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName): \n    return skeinforge_craft.writeOutput(fileName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assertIsNotNone(expr, msg=''): \n    return assertIsNot(expr, None, msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quality_parsed(mime_type, parsed_ranges): \n    return fitness_and_quality_parsed(mime_type, parsed_ranges)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def STDDEV(ds, count, timeperiod=(- (2 ** 31)), nbdev=(-4e+37)): \n    return call_talib_with_ds(ds, count, talib.STDDEV, timeperiod, nbdev)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def type_description(name, types): \n    return types[dereference_type(name)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _checkDependencies(): \n    if conf.dependencies: \n      checkDependencies()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def Nakagami(name, mu, omega): \n    return rv(name, NakagamiDistribution, (mu, omega))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def roots_laguerre(n, mu=False): \n    return roots_genlaguerre(n, 0.0, mu=mu)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rush(value=False, realtime=False): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def legacy_html_escape(string): \n    return re.sub('([&<\"\\\\\\'>])', (lambda m: xml_escapes[m.group()]), string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tmean(a, limits=None, inclusive=(True, True), axis=None): \n    return trima(a, limits=limits, inclusive=inclusive).mean(axis=axis)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def path(path, behavior='append'): \n    return _setenv({'path': path, 'path_behavior': behavior})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deny(ip, port=None, proto='tcp', direction='in', port_origin='d', ip_origin='d', ttl=None, comment=''): \n    return _access_rule('deny', ip, port, proto, direction, port_origin, ip_origin, comment)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read(filename, size=(-1), encoding=None, errors=u'strict'): \n    with xopen(filename, u'rb') as fh: \n      return xread(fh, size=size, encoding=encoding, errors=errors)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def local_run(): \n    return (('SERVER_SOFTWARE' not in os.environ) or os.environ['SERVER_SOFTWARE'].startswith('Development'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_context(devnum=0): \n    return _get_device(devnum=devnum).associate_context()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def identity(n, dtype='d', format=None): \n    return eye(n, n, dtype=dtype, format=format)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return DisjoinDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_public_subnet(ip): \n    return (not is_private_subnet(ip=ip))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pardir(): \n    return os.path.pardir",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dup_sub_ground(f, c, K): \n    return dup_sub_term(f, c, 0, K)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_logical_and_expression_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dictfetchall(cursor): \n    return cursor.dictfetchall()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _abbc(txt): \n    return _center(_bold((((((('<br>' * 10) + ('*' * 10)) + '   ') + txt) + '   ') + ('*' * 10))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def configure_zfs(node, variants): \n    return sequence([run_remotely(username='root', address=node.address, commands=task_upgrade_kernel(distribution=node.distribution)), node.reboot(), run_remotely(username='root', address=node.address, commands=sequence([task_install_zfs(distribution=node.distribution, variants=variants), task_create_flocker_pool_file()])), Effect(Func((lambda : configure_ssh(node.address, 22))))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_volume_summary_by_project(context, project_id): \n    return IMPL.get_volume_summary_by_project(context, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def t_NEWLINE(t): \n    t.lexer.lineno += t.value.count('\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normal(logging=logging): \n    return _set_priority('Normal', logging=logging)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_picks(raw): \n    return pick_types(raw.info, meg=True, eeg=False, stim=False, ecg=False, eog=False, exclude='bads')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _wedge(): \n    return Image()._new(core.wedge('L'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dot(a, b, out=None): \n    return a.dot(b, out)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_create(**kwargs): \n    return create_volume(kwargs, 'function')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_resource_enabled(resource): \n    return ((use_resources is not None) and (resource in use_resources))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def isWiddershins(polygonComplex): \n    return (getAreaLoop(polygonComplex) > 0.0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RegisterCLSIDsFromDict(dict): \n    mapCLSIDToClass.update(dict)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_oss_sk_estimator(): \n    check_estimator(OneSidedSelection)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def restart(service): \n    action('restart', service)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([DemoLock('Front   Door', STATE_LOCKED), DemoLock('Kitchen   Door', STATE_UNLOCKED)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def amp_server_context_factory(ca_certificate, control_credential): \n    return _ControlServiceContextFactory(ca_certificate, control_credential, 'node-')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _SharedSuffix(pattern1, pattern2): \n    return _SharedPrefix(pattern1[::(-1)], pattern2[::(-1)])[::(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def force_exit(event): \n    sys.exit('Quit')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rc_file(fname): \n    rcParams.update(rc_params_from_file(fname))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reap_children(): \n    if hasattr(os, 'waitpid'): \n      any_process = (-1) \n      while True: \n         try: \n            (pid, status) = os.waitpid(any_process, os.WNOHANG) \n            if (pid == 0): \n               break \n         except: \n            break",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def hg_revision(): \n    return local('hg   identify   -i', capture=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_vapps(service_instance): \n    return list_objects(service_instance, vim.VirtualApp)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _models_generator(): \n    for model in get_models(): \n      (yield (unicode(model._meta.verbose_name), model)) \n      (yield (unicode(model._meta.verbose_name_plural), model))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def update_source_unit_index(writer, unit): \n    writer.update_document(pk=unit.pk, source=force_text(unit.source), context=force_text(unit.context), location=force_text(unit.location))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vstack(xs): \n    return Vstack()(*xs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _timestamp(): \n    return util.timestamp()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def NgramAnalyzer(minsize, maxsize=None): \n    return (NgramTokenizer(minsize, maxsize=maxsize) | LowercaseFilter())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start_plugin_services(portal): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_directive(name, directive): \n    _directives[name] = directive",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MS_elements(predicate, expr, assumptions): \n    return ask(predicate(expr.parent), assumptions)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convertXMLElement(geometryOutput, xmlElement): \n    vertex.addGeometryList(geometryOutput, xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_validator(optdict, name, value): \n    return optik_ext.check_file(None, name, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_candidate_pos(version): \n    return [i for (i, part) in enumerate(version) if (part in CANDIDATE_MARKERS)][0]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def sysctl_int(oid): \n    return int(sysctl(oid))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def db_initial_version(database='main'): \n    return IMPL.db_initial_version(database=database)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def am_following_group(context, data_dict): \n    return _am_following(context, data_dict, ckan.logic.schema.default_follow_group_schema(), context['model'].UserFollowingGroup)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def renewal_conf_files(config): \n    return glob.glob(os.path.join(config.renewal_configs_dir, '*.conf'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def popular_urls(): \n    with open(POPULAR_URLS) as f: \n      urls = [('http://' + u.strip()) for u in f.readlines()] \n      return urls",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def remove_empty_rules(css): \n    return re.sub('[^\\\\}\\\\{]+\\\\{\\\\}', '', css)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getConfigOption(opt): \n    return CONFIG_OPTIONS[opt]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_folder(folder): \n    if os.path.exists(folder): \n      try: \n         shutil.rmtree(folder) \n      except OSError: \n         raise CuckooOperationalError('Unable   to   delete   folder:   {0}'.format(folder))",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def Weibull(name, alpha, beta): \n    return rv(name, WeibullDistribution, (alpha, beta))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addLoopLoopsIntersections(loop, loopsLoopsIntersections, otherLoops): \n    for pointIndex in xrange(len(loop)): \n      pointBegin = loop[pointIndex] \n      pointEnd = loop[((pointIndex + 1) % len(loop))] \n      addLineLoopsIntersections(loopsLoopsIntersections, otherLoops, pointBegin, pointEnd)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def skipIfCustomUser(test_func): \n    return skipIf((settings.AUTH_USER_MODEL != 'auth.User'), 'Custom   user   model   in   use')(test_func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def earliest_possible_date(): \n    return pd.Timestamp('1980', tz='UTC')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _default_revctrl(dirname=''): \n    for finder in finders: \n      for item in finder(dirname): \n         (yield item)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_growth_data(year, quarter): \n    if (ct._check_input(year, quarter) is True): \n      ct._write_head() \n      data = _get_growth_data(year, quarter, 1, pd.DataFrame()) \n      if (data is not None): \n         data['code'] = data['code'].map((lambda x: str(x).zfill(6))) \n      return data",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _remove_dead_thread_references(): \n    for thread_reference in set(_thread_references): \n      if (thread_reference() is None): \n         _thread_references.discard(thread_reference)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def populate_option_groups_with_options(assignments, indexed_options): \n    for (opt_group, opt_dest_list) in assignments.items(): \n      new_options = [] \n      for option_dest in assignments[opt_group]: \n         for option in indexed_options[option_dest]: \n            new_options.append(option) \n      opt_group.add_options(new_options) \n      opt_group.option_list = sorted(opt_group.option_list, key=(lambda item: item.get_opt_string()))",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def weAreFrozen(): \n    return hasattr(sys, 'frozen')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_client_error(status): \n    return (400 <= status <= 499)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def t_NUMBER(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def idd_sfrm(l, n, w, x): \n    return _id.idd_sfrm(l, n, w, x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _bytes_feature(value): \n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[str(value)]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_contains(haystack, needle): \n    if (needle not in haystack): \n      raise AssertionError(('item   %r   not   found   in   collection   %r' % (needle, haystack)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _animate_evoked_topomap(evoked, ch_type='mag', times=None, frame_rate=None, butterfly=False, blit=True, show=True): \n    return _topomap_animation(evoked, ch_type=ch_type, times=times, frame_rate=frame_rate, butterfly=butterfly, blit=blit, show=show)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hostname(name): \n    if (get_hostname() != name): \n      set_hostname(name)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def wsgi_xmlrpc(environ, start_response): \n    if ((environ['REQUEST_METHOD'] == 'POST') and environ['PATH_INFO'].startswith('/xmlrpc/')): \n      length = int(environ['CONTENT_LENGTH']) \n      data = environ['wsgi.input'].read(length) \n      string_faultcode = True \n      if environ['PATH_INFO'].startswith('/xmlrpc/2/'): \n         service = environ['PATH_INFO'][len('/xmlrpc/2/'):] \n         string_faultcode = False \n      else: \n         service = environ['PATH_INFO'][len('/xmlrpc/'):] \n      (params, method) = xmlrpclib.loads(data) \n      return xmlrpc_return(start_response, service, method, params, string_faultcode)",
        "line_count": 11,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def safe_str(o): \n    return _safeFormat(str, o)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_from_c_and_cpp_files(extensions): \n    for extension in extensions: \n      sources = [] \n      for sfile in extension.sources: \n         (path, ext) = os.path.splitext(sfile) \n         if (ext in ('.pyx', '.py')): \n            if (extension.language == 'c++'): \n               ext = '.cpp' \n            else: \n               ext = '.c' \n            sfile = (path + ext) \n         sources.append(sfile) \n      extension.sources = sources",
        "line_count": 12,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def init(mpstate): \n    return KmlReadModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _remove_tag_url(question_id): \n    return reverse('questions.remove_tag', kwargs={'question_id': question_id})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_uuid(): \n    return uuid.uuid4().hex",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return HopRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_course_cohorted(course_key): \n    return get_course_cohort_settings(course_key).is_cohorted",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _source_urls(album, sources=SOURCES_ALL): \n    for s in sources: \n      urls = ART_FUNCS[s](album) \n      for url in urls: \n         (yield url)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getNewDerivation(elementNode, prefix, sideLength): \n    return BottomDerivation(elementNode, '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gradient1(f, v): \n    return tt.flatten(tt.grad(f, v, disconnected_inputs='warn'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def showerror(title=None, message=None, **options): \n    return _show(title, message, ERROR, OK, **options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def NoCallback(*args, **kwargs): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_request_header(key, default=None): \n    return request.headers.get(key, default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ALL_REGIONS_WITH_CONTENT_RATINGS(): \n    return [x for x in ALL_REGIONS if x.ratingsbody]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def search_dict_list(l, key, value): \n    for i in l: \n      if (i.get(key) == value): \n         return i",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_builtin_object(node): \n    return (node and (node.root().name == BUILTINS_NAME))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_b(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def warn(msg, html=False): \n    write(msg, 'WARN', html)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ScoreRequested(params): \n    return (params.has_scorer_spec() and params.scorer_spec().has_scorer())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_quarter_names(width='wide', context='format', locale=LC_TIME): \n    return Locale.parse(locale).quarters[context][width]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def demographic(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return JitterRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Semaphore(*args, **kwargs): \n    return _Semaphore(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expand_dims(x, axis): \n    return ExpandDims(axis)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def items_equal(left, right): \n    return (sorted(left) == sorted(right))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flavor_get_by_name(context, name): \n    return IMPL.flavor_get_by_name(context, name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def linear_interpolate(p, x, y): \n    return LinearInterpolate()(p, x, y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dumps(blocks): \n    return str(RawNginxDumper(blocks.spaced))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_global(name): \n    return (name and (name[0] == SEP))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([ZigBeeBinarySensor(hass, ZigBeeDigitalInConfig(config))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_contributions_calendar(contributions_calendar): \n    for line in contributions_calendar.splitlines(): \n      for day in line.split(): \n         if ('data-count=' in day): \n            commit = day.split('=')[1] \n            commit = commit.strip('\"') \n            (yield int(commit))",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def whitelist(*field_list): \n    return Role(Role.whitelist, field_list)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mail_admins(subject, message, fail_silently=False): \n    send_mail((settings.EMAIL_SUBJECT_PREFIX + subject), message, settings.SERVER_EMAIL, [a[1] for a in settings.ADMINS], fail_silently)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def group_snapshot_creating_from_src(): \n    return IMPL.group_snapshot_creating_from_src()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _subject_from_forward(forward): \n    return forward['src'][0].get('subject_his_id', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_picks(raw): \n    return [0, 1, 2, 6, 7, 8, 12, 13, 14]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cube(width, dtype=np.uint8): \n    return np.ones((width, width, width), dtype=dtype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_script_prefix(): \n    return getattr(_prefixes, 'value', u'/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_wake_alarm(alarm_time): \n    utils.write_one_line('/sys/class/rtc/rtc0/wakealarm', str(alarm_time))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save(output, filename): \n    with open(filename, 'w') as f: \n      f.write(output)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _genericHTTPChannelProtocolFactory(self): \n    return _GenericHTTPChannelProtocol(HTTPChannel())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MOM(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.MOM, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def BoundedSemaphore(*args, **kwargs): \n    return _BoundedSemaphore(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upgrade_available(name, **kwargs): \n    return (not (not latest_version(name, **kwargs)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inverse_fisher_z_transform(z): \n    return (((e ** (2 * z)) - 1.0) / ((e ** (2 * z)) + 1.0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def AddErrors(counts1, counts2): \n    return ErrorCounts((counts1.fn + counts2.fn), (counts1.fp + counts2.fp), (counts1.truth_count + counts2.truth_count), (counts1.test_count + counts2.test_count))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_formatters(): \n    _registry.register_formats(_BUILTIN_FORMATS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_url_prefixes(): \n    if hasattr(_local, 'prefix'): \n      delattr(_local, 'prefix')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def shutdown(opts): \n    DETAILS['server'].close_connection()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _describe_node(node): \n    return {'id': node.id, 'name': node.name, 'provider': node.driver.name, 'creation_time': _format_time(_get_node_creation_time(node))}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def div_ceil(n, d): \n    return int(((n // d) + ((n % d) != 0)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_txt(journal): \n    return journal.pprint()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cmp_version(ver1, ver2): \n    return cmp([int(v) for v in ver1.split('.')], [int(v) for v in ver2.split('.')])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def list_master_symlinks(saltenv='base', prefix=''): \n    return _client().symlink_list(saltenv, prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_win32(): \n    return ((sys.platform == u'win32') or (sys.platform == u'cygwin'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def bucket_download_file(self, Key, Filename, ExtraArgs=None, Callback=None, Config=None): \n    return self.meta.client.download_file(Bucket=self.name, Key=Key, Filename=Filename, ExtraArgs=ExtraArgs, Callback=Callback, Config=Config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getAbsTime(): \n    return int(time.mktime(time.localtime()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_log_filtering(policy): \n    if policy: \n      global_redaction_engine.add_policy(policy) \n      logfilter.add_log_redaction_filter_to_logger(global_redaction_engine, logging.root)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _hammingDistance(s1, s2): \n    return sum(abs((s1 - s2)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _find_hypervisor(cs, hypervisor): \n    return utils.find_resource(cs.hypervisors, hypervisor)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return PrefaceRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def overload(func): \n    return _overload_dummy",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_get_all(context): \n    return IMPL.floating_ip_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pop_local_dict(): \n    _local_dict_stack.pop()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dup_pquo(f, g, K): \n    return dup_pdiv(f, g, K)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def IS_CHARACTER_JUNK(ch, ws='    DCTB '): \n    return (ch in ws)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_destroy(context, instance_id): \n    return IMPL.service_destroy(context, instance_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _onenormest_matrix_power(A, p, t=2, itmax=5, compute_v=False, compute_w=False): \n    return scipy.sparse.linalg.onenormest((aslinearoperator(A) ** p))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return TextDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('boto_elasticsearch_domain' if ('boto_elasticsearch_domain.exists' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _utc_timestamp(datetime_obj): \n    return datetime_obj.strftime(UTC_TIMESTAMP_FORMAT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_associate_pool(context, network_id, instance_uuid=None, host=None): \n    return IMPL.fixed_ip_associate_pool(context, network_id, instance_uuid, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def savepoint_commit(sid, using=None): \n    get_connection(using).savepoint_commit(sid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onDBMgrShutDown(): \n    INFO_MSG('onDBMgrShutDown()')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Binomial(name, n, p, succ=1, fail=0): \n    return rv(name, BinomialDistribution, n, p, succ, fail)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def softsign(x): \n    return tf.nn.softsign(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_group_symbol(locale=LC_NUMERIC): \n    return Locale.parse(locale).number_symbols.get('group', u',')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def guard_quota_size(): \n    BPSMeter.do.change_quota()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_utc(dt): \n    return make_aware(dt, timezone.utc)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_sample_size(format): \n    return pa.get_sample_size(format)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLKICKING(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLKICKING)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def installation(request): \n    return render(request, 'ecosystem/installation.html', {'page': 'installation', 'category': 'publish'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_module(name): \n    if (name not in _not_importable): \n      try: \n         return import_module(name) \n      except ImportError: \n         _not_importable.add(name)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_prove(arguments): \n    for (goal, assumptions) in arguments: \n      g = Expression.fromstring(goal) \n      alist = [Expression.fromstring(a) for a in assumptions] \n      p = Prover9Command(g, assumptions=alist).prove() \n      for a in alist: \n         print(('         %s' % a)) \n      print(('|-   %s:   %s\\n' % (g, p)))",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _stop_timers(canvas): \n    for attr in dir(canvas): \n      try: \n         attr_obj = getattr(canvas, attr) \n      except NotImplementedError: \n         attr_obj = None \n      if isinstance(attr_obj, Timer): \n         attr_obj.stop()",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def create_instance(c_instance): \n    return GenericScript(c_instance, Live.MidiMap.MapMode.absolute, Live.MidiMap.MapMode.absolute, DEVICE_CONTROLS, TRANSPORT_CONTROLS, VOLUME_CONTROLS, TRACKARM_CONTROLS, BANK_CONTROLS, CONTROLLER_DESCRIPTIONS, MIXER_OPTIONS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backwardsCompatImplements(klass): \n    warnings.warn(\"components.backwardsCompatImplements   doesn't   do   anything   in   Twisted   2.3,   stop   calling   it.\", ComponentsDeprecationWarning, stacklevel=2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_conditional_expression_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear(): \n    get_cache().clear()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encoded_url(url): \n    return bytes(url.toEncoded()).decode('ascii')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _compute_cost_div_m(m, p, norm_info): \n    return int(np.ceil((norm_info.alpha(p) / _theta[m])))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_chunks(file, size=io.DEFAULT_BUFFER_SIZE): \n    while True: \n      chunk = file.read(size) \n      if (not chunk): \n         break \n      (yield chunk)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_errant_log(log): \n    return (((log.should_hide is not True) and ((log.action in mdl.NodeLog.PROJECT_REGISTERED) and (log.user is None) and (log.date.hour == 4) and (log.date.minute == 0))) or ((log.action in mdl.NodeLog.REGISTRATION_APPROVAL_APPROVED) and (log.date.hour == 4) and (log.date.minute == 0)))",
        "line_count": 1,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def get_file_info_map(file_infos): \n    return dict(((file_info[0], file_info[1:]) for file_info in file_infos))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ensure_cache_root(environ=None): \n    ensure_directory(cache_root(environ=environ))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def size(string): \n    return Utf8(string).__size__()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_init_declarator_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_declaration_specifiers_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def output_storage_cli_info(name, version): \n    LOG.info(_LI(' DCTB %(name)-35s%(version)s'), {'name': (name + '   version:   '), 'version': version})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vm_state(vm_=None): \n    with _get_xapi_session() as xapi: \n      info = {} \n      if vm_: \n         info[vm_] = _get_record_by_label(xapi, 'VM', vm_)['power_state'] \n         return info \n      for vm_ in list_domains(): \n         info[vm_] = _get_record_by_label(xapi, 'VM', vm_)['power_state'] \n      return info",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_long_description(): \n    return 'Auth   plugins   make   possible   to   scan   authorization   protected   web   applications.\\n            They   make   login   action   in   the   beginning   of   the   scan,   logout   -   in   the   end\\n            and   check   current   session   action   regularly.'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _prepare_create_request(cluster): \n    return messages_v2_pb2.CreateClusterRequest(parent=cluster._instance.name, cluster_id=cluster.cluster_id, cluster=data_v2_pb2.Cluster(serve_nodes=cluster.serve_nodes))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def example_helper(): \n    return 'This   is   some   example   text.'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_other_props(all_props, reserved_props): \n    if (hasattr(all_props, 'items') and callable(all_props.items)): \n      return dict([(k, v) for (k, v) in all_props.items() if (k not in reserved_props)])",
        "line_count": 2,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def downscale_local_mean(image, factors, cval=0, clip=True): \n    return block_reduce(image, factors, np.mean, cval)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def release_local(local): \n    local.__release_local__()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _list_descriptors(): \n    return [desc for desc in [desc for (_, desc) in XModuleDescriptor.load_classes()]]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def simple_matrix_print(matrix): \n    return ('[%s]' % '\\n   '.join((('[%s]' % '   '.join((('%   1.4f' % v) for v in row))) for row in matrix)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def default_filter(src, dst): \n    return dst",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qnwsimp(n, a, b): \n    return _make_multidim_func(_qnwsimp1, n, a, b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def path_to_songname(path): \n    return os.path.splitext(os.path.basename(path))[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLPIERCING(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLPIERCING)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def state_path_rel(*args): \n    return os.path.join(CONF.state_path, *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getVector3Index(index=0, x=0.0, y=0.0, z=0.0): \n    return Vector3Index(index, x, y, z)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def NOTERM(v): \n    if asbool(v): \n      global term_mode \n      term_mode = False",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fp_field_name(name): \n    return name.replace(u':', u'_').lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _setHTTPHost(): \n    if conf.host: \n      debugMsg = 'setting   the   HTTP   Host   header' \n      logger.debug(debugMsg) \n      conf.httpHeaders.append((HTTP_HEADER.HOST, conf.host))",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def default_headers(): \n    return CaseInsensitiveDict({'User-Agent': default_user_agent(), 'Accept-Encoding': ',   '.join(('gzip', 'deflate')), 'Accept': '*/*', 'Connection': 'keep-alive'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stop(service): \n    _service(service, 'stop')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return skeinforge_polyfile.PolyfileRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_format_control(values, option): \n    return getattr(values, option.dest)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_scalar_or_string(val): \n    return (is_string_like(val) or (not iterable(val)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _recurmatch(path, aug): \n    if path: \n      clean_path = path.rstrip('/*') \n      (yield (clean_path, aug.get(path))) \n      for i in aug.match((clean_path + '/*')): \n         i = i.replace('!', '\\\\!') \n         for _match in _recurmatch(i, aug): \n            (yield _match)",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def getClippedSimplifiedLoopPath(clip, loopPath, radius): \n    return getSimplifiedPath(getClippedLoopPath(clip, loopPath), radius)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def foldmarker(): \n    return vim.eval('&foldmarker').split(',')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def storage_directory(datadir, partition, hash): \n    return os.path.join(datadir, str(partition), hash[(-3):], hash)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iqilu_download(url, output_dir='.', merge=False, info_only=False, **kwargs): \n    if re.match('http://v.iqilu.com/\\\\w+', url): \n      html = get_content(url) \n      url = match1(html, \"<input   type='hidden'   id='playerId'   url='(.+)'\") \n      title = match1(html, '<meta   name=\"description\"   content=\"(.*?)\\\\\"\\\\W') \n      (type_, ext, size) = url_info(url) \n      print_info(site_info, title, type_, size) \n      if (not info_only): \n         download_urls([url], title, ext, total_size=None, output_dir=output_dir, merge=merge)",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def list_nodes_select(call=None): \n    return salt.utils.cloud.list_nodes_select(list_nodes_full(), __opts__['query.selection'], call)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _computeOverlap(x, y): \n    return ((x + y) == 2).sum()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def autoassign(self, locals): \n    for (key, value) in locals.iteritems(): \n      if (key == 'self'): \n         continue \n      setattr(self, key, value)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def foldl(fn, sequences, outputs_info, non_sequences=None, mode=None, name=None): \n    return reduce(fn=fn, sequences=sequences, outputs_info=outputs_info, non_sequences=non_sequences, go_backwards=False, mode=mode, name=name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def describe_replication_groups(name=None, conn=None, region=None, key=None, keyid=None, profile=None): \n    return _describe_resource(name=name, name_param='ReplicationGroupId', res_type='replication_group', info_node='ReplicationGroups', conn=conn, region=region, key=key, keyid=keyid, profile=profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_http_line(header_lines, http_methods): \n    for header in header_lines: \n      for method in http_methods: \n         if header.startswith(method): \n            http_line = header \n            return http_line",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def relativize_path(path, rootdir): \n    return os.path.relpath(path, rootdir)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_ppui_logintime(): \n    return str(random.randint(52000, 58535))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decode_network_string(msgtype, plen, buf): \n    return buf[header.size:(plen - 1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def person(): \n    return s3db.hrm_person_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attributive(adjective): \n    return adjective",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def take(a, indices, axis=None, out=None): \n    return a.take(indices, axis, out)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def endpoint_direction(address): \n    return (address & _ENDPOINT_DIR_MASK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hook(watcher, hook_name): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode, prefix, sideLength): \n    return FlipDerivation(elementNode, prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _reverse_intervals(intervals): \n    return [((b, a), indices, f) for ((a, b), indices, f) in reversed(intervals)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def axes_ticklabels_overlap(ax): \n    return (axis_ticklabels_overlap(ax.get_xticklabels()), axis_ticklabels_overlap(ax.get_yticklabels()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('boto_iot' if ('boto_iot.policy_exists' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def framework(): \n    return s3_rest_controller(dtargs={'dt_text_maximum_len': 160}, hide_filter=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def LogBinomialCoef(n, k): \n    return (((n * math.log(n)) - (k * math.log(k))) - ((n - k) * math.log((n - k))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPluginFileNames(): \n    return archive.getPluginFileNamesFromDirectoryPath(getPluginsDirectoryPath())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_parse_callback(callback): \n    options.add_parse_callback(callback)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def provider_id(): \n    return _counter.count()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_constant(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attachment_destroy(context, attachment_id): \n    return IMPL.attachment_destroy(context, attachment_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_root_of(doctype): \n    return frappe.db.sql(u'select   t1.name   from   `tab{0}`   t1   where\\n DCTB  DCTB (select   count(*)   from   `tab{1}`   t2   where\\n DCTB  DCTB  DCTB t2.lft   <   t1.lft   and   t2.rgt   >   t1.rgt)   =   0'.format(doctype, doctype))[0][0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def literal(value, type_=None): \n    return BindParameter(None, value, type_=type_, unique=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def truncate_minute(dt, measure): \n    return asminute(truncate_second(dt, (measure * 60)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def del_pid(pidfile): \n    if os.path.exists(pidfile): \n      os.remove(pidfile)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def group(): \n    redirect(URL(c='admin', args=request.args, vars=request.vars))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def support_redirect(request, **kwargs): \n    return HttpResponseRedirect(get_support_url(request))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cosh(x): \n    return Cosh()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _to_json(unencoded): \n    return jsonutils.dumps(list(unencoded))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def alias(attr_name): \n    return classproperty(flip(getattr, attr_name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def driver_initiator_data_get(context, initiator, namespace): \n    return IMPL.driver_initiator_data_get(context, initiator, namespace)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unconvert_coords(col, row): \n    return (((col - row) / 2), ((col + row) / 2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _strftime(d): \n    return d.strftime('%Y-%m-%dT%H:%M:%SZ%z')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_doc(func, doc): \n    func.__doc__ = doc",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def name_for_collection_relationship(base, local_cls, referred_cls, constraint): \n    return (referred_cls.__name__.lower() + '_collection')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def search_channel_tag(key=None, category=None): \n    return Channel.objects.get_by_tag(key=key, category=category)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_step_running(step): \n    return ((getattr(step.status, 'state', None) not in ('CANCELLED', 'INTERRUPTED')) and hasattr(step.status.timeline, 'startdatetime') and (not hasattr(step.status.timeline, 'enddatetime')))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def processElementNode(elementNode): \n    evaluate.processArchivable(Sphere, elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def system_controls(attrs=None, where=None): \n    return _osquery_cmd(table='system_controls', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def taggedsents_to_conll(sentences): \n    for sentence in sentences: \n      for input_str in taggedsent_to_conll(sentence): \n         (yield input_str) \n      (yield '\\n\\n')",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_pgroup(path, follow_symlinks=True): \n    return uid_to_user(get_pgid(path, follow_symlinks))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def next_char(input_iter): \n    for ch in input_iter: \n      if (ch != u'\\\\'): \n         (yield (ch, False)) \n         continue \n      ch = next(input_iter) \n      representative = ESCAPE_MAPPINGS.get(ch, ch) \n      if (representative is None): \n         continue \n      (yield (representative, True))",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def randomRotation(dim): \n    return orth(random.random((dim, dim)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fetch_raw_image(context, target, image_id): \n    images.fetch(context, image_id, target)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_is_document_type(option, value): \n    if (not isinstance(value, (collections.MutableMapping, RawBSONDocument))): \n      raise TypeError(('%s   must   be   an   instance   of   dict,   bson.son.SON,   bson.raw_bson.RawBSONDocument,   or   a   type   that   inherits   from   collections.MutableMapping' % (option,)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def has_write_permission(fileName): \n    return os.access(fileName, os.W_OK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_exception_handler(path, exc_info): \n    log.warning((LOAD_FAILURE_ERROR % path), exc_info=exc_info)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_patched_ast(source, sorted_children=False): \n    return patch_ast(ast.parse(source), source, sorted_children)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([MqttJson(hass, config.get(CONF_NAME), {key: config.get(key) for key in (CONF_STATE_TOPIC, CONF_COMMAND_TOPIC)}, config.get(CONF_QOS), config.get(CONF_RETAIN), config.get(CONF_OPTIMISTIC), config.get(CONF_BRIGHTNESS), config.get(CONF_RGB), {key: config.get(key) for key in (CONF_FLASH_TIME_SHORT, CONF_FLASH_TIME_LONG)})])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _write_methods(method_descriptors, out): \n    for method in method_descriptors: \n      (out << '') \n      (out << (\"@remote.method('%s',   '%s')\" % (method.request_type, method.response_type))) \n      (out << ('def   %s(self,   request):' % (method.name,))) \n      with out.indent(): \n         (out << (\"raise   NotImplementedError('Method   %s   is   not   implemented')\" % method.name))",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def verify_SSL_key_and_cert(keyfile, certfile): \n    if (not (os.path.exists(keyfile) and os.path.exists(certfile))): \n      import subprocess \n      from Crypto.PublicKey import RSA \n      from twisted.conch.ssh.keys import Key \n      print('      Creating   SSL   key   and   certificate   ...   ', end='   ') \n      try: \n         KEY_LENGTH = 1024 \n         rsaKey = Key(RSA.generate(KEY_LENGTH)) \n         keyString = rsaKey.toString(type='OPENSSH') \n         file(keyfile, 'w+b').write(keyString) \n      except Exception as err: \n         print(NO_AUTOGEN.format(err=err, keyfile=keyfile)) \n         sys.exit(5) \n      CERT_EXPIRE = (365 * 20) \n      exestring = ('openssl   req   -new   -x509   -key   %s   -out   %s   -days   %s' % (keyfile, certfile, CERT_EXPIRE)) \n      try: \n         subprocess.call(exestring) \n      except OSError as err: \n         raise OSError(NO_AUTOCERT.format(err=err, certfile=certfile, keyfile=keyfile, exestring=exestring)) \n      print('done.')",
        "line_count": 20,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def authenticated_userid(request): \n    return request.authenticated_userid",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def L(rv): \n    return S(rv.count(TrigonometricFunction))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _user_cert_subject(user_id, project_id): \n    return (CONF.user_cert_subject % (project_id, user_id, timeutils.isotime()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def keyname(vm_): \n    return config.get_cloud_config_value('keyname', vm_, __opts__, search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_SelfReferenceProperty(model, prop, kwargs): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_secret_key(): \n    return environ.get('HTTP_SECRETKEY', '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_node_delete(context, compute_id): \n    return IMPL.compute_node_delete(context, compute_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start_statsd(path): \n    if django_statsd: \n      django_statsd.start(path)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def registered_tasks(request): \n    return JsonResponse({u'regular': list(keys(tasks)), u'periodic': u''})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def from_7L7777M(data): \n    return ((((data[0] + (data[1] << 7)) + (data[2] << 14)) + (data[3] << 21)) + (data[4] << 28))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_json(json_string): \n    return _convert_to_jsonc(simplejson.loads(json_string))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def utf8_encoding(t): \n    return ''.join(((('%%%X' % ord(x)) if (ord(x) > 127) else x) for x in t))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def dmp_positive_p(f, u, K): \n    return K.is_positive(dmp_ground_LC(f, u, K))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unique_id(name): \n    return '{0}-{1}-{2}'.format(name, int(time.time()), random.randint(0, 10000))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def IsEC2Instance(instance): \n    return (re.match(kEC2InstanceRe, instance) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gammaincc(a, x, dps=50, maxterms=(10 ** 8)): \n    with mp.workdps(dps): \n      (z, a) = (a, x) \n      if mp.isint(z): \n         try: \n            return mpf2float(mp.gammainc(z, a=a, regularized=True)) \n         except mp.libmp.NoConvergence: \n            pass \n      nega = mp.fneg(a, exact=True) \n      G = [z] \n      try: \n         def h(z): \n            r = (z - 1) \n            return [([mp.exp(nega), a], [1, r], [], G, [1, (- r)], [], (1 / nega))] \n         return mpf2float(mp.hypercomb(h, [z], force_series=True)) \n      except mp.libmp.NoConvergence: \n         def h(z): \n            T1 = ([], [1, (z - 1)], [z], G, [], [], 0) \n            T2 = ([(- mp.exp(nega)), a, z], [1, z, (-1)], [], G, [1], [(1 + z)], a) \n            return (T1, T2) \n         return mpf2float(mp.hypercomb(h, [z], maxterms=maxterms))",
        "line_count": 20,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def generate_nonce(length=8): \n    return ''.join([str(random.SystemRandom().randint(0, 9)) for i in range(length)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def delete_customer_gateway(customer_gateway_id=None, customer_gateway_name=None, region=None, key=None, keyid=None, profile=None): \n    return _delete_resource(resource='customer_gateway', name=customer_gateway_name, resource_id=customer_gateway_id, region=region, key=key, keyid=keyid, profile=profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_flags(required_flags, configuration): \n    for flag in required_flags: \n      if (not getattr(configuration, flag, None)): \n         msg = (_('Configuration   value   %s   is   not   set.') % flag) \n         raise exception.InvalidInput(reason=msg)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _check_vlim(vlim): \n    return ((not np.isscalar(vlim)) and (vlim is not None))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read_file(filename): \n    with open(filename, u'rb') as f: \n      return f.read()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def empty_formatter(view, value): \n    return ''",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_cluster_status_fsm(convergence_loop_fsm): \n    return constructFiniteStateMachine(inputs=ClusterStatusInputs, outputs=ClusterStatusOutputs, states=ClusterStatusStates, initial=ClusterStatusStates.DISCONNECTED, table=_CLUSTER_STATUS_FSM_TABLE, richInputs=[_ConnectedToControlService, _StatusUpdate], inputContext={}, world=MethodSuffixOutputer(ClusterStatus(convergence_loop_fsm)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cd(path): \n    return _change_cwd('cwd', path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def topic_name_to_id(course, name): \n    return '{course}_{run}_{name}'.format(course=course.location.course, run=course.url_name, name=name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_br_service_url(node): \n    return 'http://{0}:{1}{2}'.format(node, hermes_constants.BR_SERVICE_PORT, hermes_constants.BR_SERVICE_PATH)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_magic(): \n    return util.MAGIC_NUMBER",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def modClearTitleRefs(s, titlesRefs, namesRefs, charactersRefs): \n    return re_titleRef.sub('\\\\1', s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assertReadFrom(testcase, client, member, *args, **kwargs): \n    for _ in range(10): \n      testcase.assertEqual(member, read_from_which_host(client, *args, **kwargs))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def negative_sampling(x, t, W, sampler, sample_size): \n    return NegativeSamplingFunction(sampler, sample_size)(x, t, W)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def formatWithCall(formatString, mapping): \n    return unicode(aFormatter.vformat(formatString, (), CallMapping(mapping)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_closed_group(expr, assumptions, key): \n    return _fuzzy_group((ask(key(a), assumptions) for a in expr.args), quick_exit=True)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def path(): \n    return {'path': os.environ.get('PATH', '').strip()}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def count_set_bits(n): \n    return ((1 + count_set_bits((n & (n - 1)))) if n else 0)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def extract_scenario_data(scenario_result): \n    return {'name': scenario_result.scenario.name, 'duration': _get_duration(scenario_result.scenario), 'outline': scenario_result.outline, 'meta': {'total': scenario_result.total_steps, 'success': len(scenario_result.steps_passed), 'failures': len(scenario_result.steps_failed), 'skipped': len(scenario_result.steps_skipped), 'undefined': len(scenario_result.steps_undefined)}, 'steps': [extract_step_data(step) for step in scenario_result.all_steps]}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getCraftedText(fileName, svgText='', repository=None): \n    return getCraftedTextFromText(fileName, archive.getTextIfEmpty(fileName, svgText), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_file(fname, overwrite): \n    if (op.isfile(fname) and (not overwrite)): \n      raise IOError(('File   %s   exists,   use   --overwrite   to   overwrite   it' % fname))",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def disabled(name): \n    return (not enabled(name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parsehtml(path, *args, **kwargs): \n    return plaintext(DOM(path, *args, **kwargs).body)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_tree_watcher(pl, watcher_type=u'auto', expire_time=10): \n    return TreeWatcher(pl, watcher_type, expire_time)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_biweight_location_axis_3d(): \n    with NumpyRNGContext(12345): \n      nz = 3 \n      ny = 4 \n      nx = 5 \n      data = normal(5, 2, (nz, ny, nx)) \n      bw = funcs.biweight_location(data, axis=0) \n      assert (bw.shape == (ny, nx)) \n      y = 0 \n      bwi = [] \n      for i in range(nx): \n         bwi.append(funcs.biweight_location(data[:, y, i])) \n      bwi = np.array(bwi) \n      assert_allclose(bw[y], bwi)",
        "line_count": 13,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def ping(**kwargs): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_odd_rewrite(func, arg): \n    return func(arg).func.is_Mul",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wait_for_write(socks, timeout=None): \n    return _wait_for_io_events(socks, EVENT_WRITE, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable(service): \n    action('enable', service)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def a2b_hex(s): \n    return binascii.a2b_hex(strip_whitespace(s))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_timezone_location(dt_or_tzinfo): \n    return get_i18n().get_timezone_location(dt_or_tzinfo)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_total_open_threads(feedback_thread_analytics): \n    return sum((feedback.num_open_threads for feedback in feedback_thread_analytics))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _get_fake_enrollment(student_id, course_id): \n    for enrollment in _ENROLLMENTS: \n      if ((student_id == enrollment['student']) and (course_id == enrollment['course']['course_id'])): \n         return enrollment",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def floating_ip_deallocate(context, address): \n    return IMPL.floating_ip_deallocate(context, address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tuple_factory(colnames, rows): \n    return rows",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def release_lock(lock_file): \n    os.remove(lock_file)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def logo(): \n    return get_file(u'celery_128.png')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def last_modified_time(path): \n    return pd.Timestamp(os.path.getmtime(path), unit='s', tz='UTC')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return NSHModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _read_dig_point_struct(fid, tag, shape, rlims): \n    return dict(kind=int(np.fromstring(fid.read(4), dtype='>i4')), ident=int(np.fromstring(fid.read(4), dtype='>i4')), r=np.fromstring(fid.read(12), dtype='>f4'), coord_frame=FIFF.FIFFV_COORD_UNKNOWN)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __init__(opts): \n    if __virtual__(): \n      os.environ.update(DPKG_ENV_VARS)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getBoundedLatitude(latitude): \n    return round(min(179.9, max(0.1, latitude)), 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ignore_comments(lines_enum): \n    for (line_number, line) in lines_enum: \n      line = COMMENT_RE.sub('', line) \n      line = line.strip() \n      if line: \n         (yield (line_number, line))",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def LHOST(): \n    return commands.getoutput('/sbin/ifconfig').split('\\n')[1].split()[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _CheckCursor(cursor): \n    return _ValidateString(cursor, 'cursor', _MAXIMUM_CURSOR_LENGTH, empty_ok=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def returners(opts, functions, whitelist=None, context=None): \n    return LazyLoader(_module_dirs(opts, 'returners', 'returner'), opts, tag='returner', whitelist=whitelist, pack={'__salt__': functions, '__context__': context})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_failure_view(): \n    return get_callable(settings.CSRF_FAILURE_VIEW)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_accept_header(value): \n    for match in ACCEPT_RE.finditer(value): \n      name = match.group(1) \n      extra = match.group(2) \n      quality = (max(min(float(extra), 1), 0) if extra else None) \n      (yield (name, quality))",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def run(): \n    AddonExcludedRegion.objects.exclude(addon__premium_type=amo.ADDON_FREE).filter(region=mkt.regions.US.id).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fileserver(opts, backends): \n    return LazyLoader(_module_dirs(opts, 'fileserver'), opts, tag='fileserver', whitelist=backends, pack={'__utils__': utils(opts)})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def as_published(location): \n    return location.replace(revision=MongoRevisionKey.published)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CanonicalPathToLocalPath(path): \n    return utils.SmartStr(utils.NormalizePath(path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def byte2int(b): \n    return (ord(b) if PY2 else b)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _flush_logs_buffer(): \n    logservice.logs_buffer().flush()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iso8601format(dt): \n    return (dt.strftime('%Y-%m-%dT%H:%M:%SZ') if dt else '')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_init_declarator_list_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_parameter_list_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_bad_repr(): \n    with nt.assert_raises(ZeroDivisionError): \n      pretty.pretty(BadRepr())",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gen_random_usernames(): \n    while 1: \n      (yield hex(int((random.random() * (16 ** 12))))[2:].zfill(12).decode('ASCII'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_environments(): \n    return settings.environments",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_cleanup_test(data): \n    data[2] = True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def relevant_values(all_values): \n    return dict(((option, value) for (option, value) in six.iteritems(all_values) if (_relevant(option) and cli.option_was_set(option, value))))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def name_from_basename(basename): \n    return (u'icons:' + basename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gaussian(h, Xi, x): \n    return ((1.0 / np.sqrt((2 * np.pi))) * np.exp(((- ((Xi - x) ** 2)) / ((h ** 2) * 2.0))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def post_call_hook(service, call, request, response, rpc=None, error=None): \n    if recorder_proxy.has_recorder_for_current_request(): \n      if config.DEBUG: \n         logging.debug('post_call_hook:   recording   %s.%s', service, call) \n      recorder_proxy.record_rpc_response(service, call, request, response, rpc)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _simple_init(self, *args, **kw): \n    type(self).__base__.__init__(self, *args, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_customer_gateway(vpn_connection_type, ip_address, bgp_asn, customer_gateway_name=None, tags=None, region=None, key=None, keyid=None, profile=None): \n    return _create_resource('customer_gateway', customer_gateway_name, type=vpn_connection_type, ip_address=ip_address, bgp_asn=bgp_asn, tags=tags, region=region, key=key, keyid=keyid, profile=profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def server_hardreset(): \n    return __execute_cmd('serveraction   hardreset')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape_cdata(cdata): \n    return xml_safe(cdata).replace(']]>', ']]>]]&gt;<![CDATA[')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_exe(path): \n    return (os.path.exists(path) and os.access(path, os.X_OK))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def alived(subset=None, show_ipv4=False): \n    return list_state(subset=subset, show_ipv4=show_ipv4, state='alived')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in_for_else_branch(parent, stmt): \n    return (isinstance(parent, astroid.For) and any((else_stmt.parent_of(stmt) for else_stmt in parent.orelse)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def quota_reserve(context, resources, quotas, deltas, expire, until_refresh, max_age, project_id=None): \n    return IMPL.quota_reserve(context, resources, quotas, deltas, expire, until_refresh, max_age, project_id=project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, mode, *args, **kwargs): \n    return _create_cipher(sys.modules[__name__], key, mode, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _soft_update(a, b): \n    a.update({k: v for (k, v) in b.items() if (k not in a)})",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_store(path, **kwargs): \n    return HDFStore(path, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _GetWinLinkRuleNameSuffix(embed_manifest): \n    return ('_embed' if embed_manifest else '')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def copy_tcltk(src, dest, symlink): \n    for libversion in ('8.5', '8.6'): \n      for libname in ('tcl', 'tk'): \n         srcdir = join(src, 'tcl', (libname + libversion)) \n         destdir = join(dest, 'tcl', (libname + libversion)) \n         if (os.path.exists(srcdir) and (not os.path.exists(destdir))): \n            copyfileordir(srcdir, destdir, symlink)",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def addPyListings(document, dir): \n    for node in domhelpers.findElementsWithAttribute(document, 'class', 'py-listing'): \n      filename = node.getAttribute('href') \n      outfile = cStringIO.StringIO() \n      lines = map(string.rstrip, open(os.path.join(dir, filename)).readlines()) \n      skip = (node.getAttribute('skipLines') or 0) \n      lines = lines[int(skip):] \n      howManyLines = len(lines) \n      data = '\\n'.join(lines) \n      data = cStringIO.StringIO(text.removeLeadingTrailingBlanks(data)) \n      htmlizer.filter(data, outfile, writer=htmlizer.SmallerHTMLWriter) \n      sourceNode = dom.parseString(outfile.getvalue()).documentElement \n      sourceNode.insertBefore(_makeLineNumbers(howManyLines), sourceNode.firstChild) \n      _replaceWithListing(node, sourceNode.toxml(), filename, 'py-listing')",
        "line_count": 13,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def cluster(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def require_context(func): \n    return func",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def process_rst_and_summaries(content_generators): \n    for generator in content_generators: \n      if isinstance(generator, generators.ArticlesGenerator): \n         for article in ((generator.articles + generator.translations) + generator.drafts): \n            rst_add_mathjax(article) \n            if (process_summary.mathjax_script is not None): \n               process_summary(article) \n      elif isinstance(generator, generators.PagesGenerator): \n         for page in generator.pages: \n            rst_add_mathjax(page)",
        "line_count": 9,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def inject_enable(output): \n    if ('form' in output): \n      id = 'layer_enable' \n      label = LABEL(('%s:' % T('Enable   in   Default   Config?')), _for='enable') \n      widget = INPUT(_name='enable', _type='checkbox', _value='on', _id='layer_enable', _class='boolean') \n      comment = '' \n      if (s3_formstyle == 'bootstrap'): \n         _controls = DIV(widget, comment, _class='controls') \n         row = DIV(label, _controls, _class='control-group', _id=('%s__row' % id)) \n      elif callable(s3_formstyle): \n         row = s3_formstyle(id, label, widget, comment) \n      else: \n         raise \n      output['form'][0][(-2)].append(row)",
        "line_count": 13,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def ror(n, k, word_size=None): \n    return rol(n, (- k), word_size)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_enabled_all(objects, enable): \n    for obj in objects: \n      obj.setEnabled(enable)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def register(prefix, mapping): \n    return _default_registry.register(prefix, mapping)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_full_cls_name(cls): \n    return '.'.join([cls.__module__, cls.__name__])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def scroll_half_page_up(event): \n    scroll_backward(event, half=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_loaded(mod): \n    return (mod in mod_list())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def distcc_config(append=None, **kwargs): \n    blade_config.update_config('distcc_config', append, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_image_member_notification(image_member): \n    return {'image_id': image_member.image_id, 'member_id': image_member.member_id, 'status': image_member.status, 'created_at': timeutils.isotime(image_member.created_at), 'updated_at': timeutils.isotime(image_member.updated_at), 'deleted': False, 'deleted_at': None}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def manualintegrate(f, var): \n    return _manualintegrate(integral_steps(f, var))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def saltmem(human_readable=False): \n    with salt.utils.winapi.Com(): \n      wmi_obj = wmi.WMI() \n      result = wmi_obj.query('SELECT   WorkingSet   FROM   Win32_PerfRawData_PerfProc_Process   WHERE   IDProcess={0}'.format(os.getpid())) \n      mem = int(result[0].wmi_property('WorkingSet').value) \n      if human_readable: \n         return _byte_calc(mem) \n      return mem",
        "line_count": 7,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def starstararg_func(**kwargs): \n    return kwargs['a']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_root(uri): \n    return (uri.lower() == S3A_ROOT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iscsi_target_count_by_host(context, host): \n    return IMPL.iscsi_target_count_by_host(context, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_connection(config=None, default_model=None, _api_version=datastore_rpc._DATASTORE_V3, _id_resolver=None): \n    return datastore_rpc.Connection(adapter=ModelAdapter(default_model, id_resolver=_id_resolver), config=config, _api_version=_api_version)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group(): \n    return s3db.hrm_group_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_auth_info_available(): \n    return (((_ENV_AUTH_EMAIL in os.environ) and (_ENV_AUTH_DOMAIN in os.environ)) or (_ENV_USE_OAUTH_SCOPE in os.environ))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def abort(using=None): \n    get_connection(using).abort()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_definition_literal(p): \n    print_code(p[1], 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def output_opt_info(conf, names): \n    for name in names: \n      LOG.info(_LI(' DCTB %(name)-35s%(attr)s'), {'name': (name + ':   '), 'attr': getattr(conf, name)})",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_hosts(service_instance): \n    return list_objects(service_instance, vim.HostSystem)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gettempprefixb(): \n    return _os.fsencode(gettempprefix())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def degap_fasta_aln(seqs): \n    for (label, seq) in seqs: \n      (yield DNASequence(seq, id=label).degap())",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewRepository(): \n    return WindingRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def identityPumpPolicy(queue, target): \n    while queue: \n      bytes = queue.get() \n      if (bytes is None): \n         break \n      target.dataReceived(bytes)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _is_hidden_dot(path): \n    return os.path.basename(path).startswith('.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def single_selection(): \n    return selection_model().single_selection()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _yield_all_clusters(emr_conn, *args, **kwargs): \n    for resp in _repeat(emr_conn.list_clusters, *args, **kwargs): \n      for cluster in getattr(resp, 'clusters', []): \n         (yield cluster)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_collection_summary_from_model(collection_summary_model): \n    return collection_domain.CollectionSummary(collection_summary_model.id, collection_summary_model.title, collection_summary_model.category, collection_summary_model.objective, collection_summary_model.language_code, collection_summary_model.tags, collection_summary_model.status, collection_summary_model.community_owned, collection_summary_model.owner_ids, collection_summary_model.editor_ids, collection_summary_model.viewer_ids, collection_summary_model.contributor_ids, collection_summary_model.contributors_summary, collection_summary_model.version, collection_summary_model.node_count, collection_summary_model.collection_model_created_on, collection_summary_model.collection_model_last_updated)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unlink_older_than(path, mtime): \n    if os.path.exists(path): \n      for fname in listdir(path): \n         fpath = os.path.join(path, fname) \n         try: \n            if (os.path.getmtime(fpath) < mtime): \n               os.unlink(fpath) \n         except OSError: \n            pass",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'limit', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_entities, discovery_info=None): \n    add_entities((OnlineStatus(config, apcupsd.DATA),))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ros_sk_estimator(): \n    check_estimator(RandomOverSampler)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_xqueue_callback_url_prefix(xmodule_instance_args): \n    return (xmodule_instance_args.get('xqueue_callback_url_prefix', '') if (xmodule_instance_args is not None) else '')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ascii_lower(string): \n    return string.encode('utf8').lower().decode('utf8')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _AddRateToSummary(tag, rate, step, sw): \n    sw.add_summary(summary_pb2.Summary(value=[summary_pb2.Summary.Value(tag=tag, simple_value=rate)]), step)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return StretchRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def StandardNormalCdf(x): \n    return ((math.erf((x / ROOT2)) + 1) / 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def readmodule_ex(module, path=None): \n    return _readmodule(module, (path or []))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def bw_usage_get(context, uuid, start_period, mac): \n    return IMPL.bw_usage_get(context, uuid, start_period, mac)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_versions_list(): \n    return (([('Weblate', '', GIT_VERSION)] + get_versions()) + get_optional_versions())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_get_by_address_detailed(context, address): \n    return IMPL.fixed_ip_get_by_address_detailed(context, address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_css_with_wait(context, id_str, **kwargs): \n    return _find_elem_with_wait(context, (By.CSS_SELECTOR, id_str), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_system_runners_base_path(): \n    return cfg.CONF.content.system_runners_base_path",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _group_name_from_id(project, group_id): \n    return 'projects/{project}/groups/{group_id}'.format(project=project, group_id=group_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addAbridgedSettings(abridgedSettings, repositoryWriter): \n    for abridgedSetting in abridgedSettings: \n      repositoryWriter.write(('%s\\n' % abridgedSetting.__repr__()))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_statement_assign(p): \n    print ('%s=%s' % (p[2], p[4]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start(config_): \n    return __salt__['cmd.run']('{0}   create   {1}'.format(_get_xtool(), config_), python_shell=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safeExp(x): \n    return exp(clip(x, (-500), 500))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def client_start(request, socket, context): \n    CLIENTS[socket.session.session_id] = (request, socket, context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_name_reuse(enable=True): \n    set_keep['name_reuse'] = enable",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return __virtualname__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rgb2ypbpr(rgb): \n    return _convert(ypbpr_from_rgb, rgb)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_notifications(email_notification_ids=None): \n    for email_id in email_notification_ids: \n      NotificationDigest.remove(Q('_id', 'eq', email_id))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_task_module(a): \n    if (isinstance(a, types.ModuleType) and (a not in _seen)): \n      _seen.add(a) \n      return True",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def metadef_object_delete_namespace_content(context, namespace_name, session=None): \n    return _metadef_delete_namespace_content(metadef_object_get_all, 'metadef_objects', context, namespace_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text='', repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def maximum(x1, x2): \n    return Maximum()(x1, x2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('pagerduty_escalation_policy' if ('pagerduty_util.get_resource' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def about(): \n    return dict()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(data=None): \n    return SHAKE256_XOF(data=data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_image_id(image_ref): \n    return image_ref.rsplit('/')[(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _bytes_feature_list(values): \n    return tf.train.FeatureList(feature=[_bytes_feature(v) for v in values])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _ecmaCodeTableCoordinate(column, row): \n    return bytes(bytearray([((column << 4) | row)]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def requires_version(library, min_version): \n    return np.testing.dec.skipif((not check_version(library, min_version)), ('Requires   %s   version   >=   %s' % (library, min_version)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flavor_extra_specs_get(context, flavor_id): \n    return IMPL.flavor_extra_specs_get(context, flavor_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disable_destructive_action_challenge(): \n    YamlBindings.update_yml_source('/opt/spinnaker/config/clouddriver.yml', {'credentials': {'challengeDestructiveActionsEnvironments': ''}})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trained_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return Binary16ByteRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_ability(course_id, content, user): \n    return {'editable': check_permissions_by_view(user, course_id, content, ('update_thread' if (content['type'] == 'thread') else 'update_comment')), 'can_reply': check_permissions_by_view(user, course_id, content, ('create_comment' if (content['type'] == 'thread') else 'create_sub_comment')), 'can_delete': check_permissions_by_view(user, course_id, content, ('delete_thread' if (content['type'] == 'thread') else 'delete_comment')), 'can_openclose': (check_permissions_by_view(user, course_id, content, 'openclose_thread') if (content['type'] == 'thread') else False), 'can_vote': ((not is_content_authored_by(content, user)) and check_permissions_by_view(user, course_id, content, ('vote_for_thread' if (content['type'] == 'thread') else 'vote_for_comment'))), 'can_report': ((not is_content_authored_by(content, user)) and check_permissions_by_view(user, course_id, content, ('flag_abuse_for_thread' if (content['type'] == 'thread') else 'flag_abuse_for_comment')))}",
        "line_count": 1,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def _default_model(klass): \n    return (None, set())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def present(profile='pagerduty', subdomain=None, api_key=None, **kwargs): \n    return __salt__['pagerduty_util.resource_present']('users', ['email', 'name', 'id'], None, profile, subdomain, api_key, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_const_map_seq(p): \n    _parse_seq(p)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName=''): \n    skeinforge_craft.writeOutput(fileName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_password_reset_notice(user): \n    if config_value('SEND_PASSWORD_RESET_NOTICE_EMAIL'): \n      send_mail(config_value('EMAIL_SUBJECT_PASSWORD_NOTICE'), user.email, 'reset_notice', user=user)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def input_loop(): \n    while (mpstate.status.exit != True): \n      try: \n         if (mpstate.status.exit != True): \n            line = raw_input(mpstate.rl.prompt) \n      except EOFError: \n         mpstate.status.exit = True \n         sys.exit(1) \n      mpstate.input_queue.put(line)",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def send_email_for_after_purchase_organizers(email, buyer_email, invoice_id, order_url, event_name, event_organiser): \n    send_email(to=email, action=TICKET_PURCHASED_ORGANIZER, subject=MAILS[TICKET_PURCHASED_ORGANIZER]['subject'].format(invoice_id=invoice_id, event_name=event_name, buyer_email=buyer_email), html=MAILS[TICKET_PURCHASED_ORGANIZER]['message'].format(order_url=order_url, buyer_email=buyer_email, event_name=event_name, event_organiser=event_organiser))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def special_rss_site(url): \n    return (cfg.rss_filenames() or match_str(url, cfg.rss_odd_titles()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def setMemoryLimit(max_mem): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def position_of_ngram(ngram, sentence): \n    for (i, sublist) in enumerate(ngrams(sentence, len(ngram))): \n      if (ngram == sublist): \n         return i",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def __mac(value): \n    return (salt.utils.validate.net.mac(value), value, 'MAC   address')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_datastore_clusters(service_instance): \n    return list_objects(service_instance, vim.StoragePod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def captured_stdout(): \n    return captured_output('stdout')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isValid(text): \n    return bool(re.search('birthday', text, re.IGNORECASE))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def date_format(value, format=None, use_l10n=None): \n    return dateformat.format(value, get_format((format or 'DATE_FORMAT'), use_l10n=use_l10n))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def valid_post_signature(request, signature_header=SIGNATURE_BODY_HEADER): \n    return valid_signature('Body:{}'.format(request.body), request.headers.get(signature_header), field='body')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_UserProperty(model, prop, kwargs): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def database(name, **kwargs): \n    if (not database_exists(name, **kwargs)): \n      create_database(name, **kwargs)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_HDN(text): \n    return (not (IPV4_RE.search(text) or (text == '') or (text[0] == '.') or (text[(-1)] == '.')))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def merge_profile(): \n    with _profile_lock: \n      new_profile = sys.getdxp() \n      if has_pairs(new_profile): \n         for first_inst in range(len(_cumulative_profile)): \n            for second_inst in range(len(_cumulative_profile[first_inst])): \n               _cumulative_profile[first_inst][second_inst] += new_profile[first_inst][second_inst] \n      else: \n         for inst in range(len(_cumulative_profile)): \n            _cumulative_profile[inst] += new_profile[inst]",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def p_direct_abstract_declarator_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookup_group_controller(group_type=None): \n    return _group_controllers.get(group_type)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_invalid_xml_chars(s): \n    return _invalid_char_re.sub('', s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rotate_180(request, fileobjects): \n    transpose_image(request, fileobjects, 3)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def module_to_dict(module, omittable=(lambda k: k.startswith('_'))): \n    return {k: repr(v) for (k, v) in module.__dict__.items() if (not omittable(k))}",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def role(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _upgrade_from_distribute(python_cmd, use_sudo): \n    _easy_install(['-U', 'distribute'], python_cmd, use_sudo)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def arccsch(val): \n    return numpy.arcsinh((1.0 / val))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _find_match(ele, lst): \n    for _ele in lst: \n      for match_key in _MATCH_KEYS: \n         if (_ele.get(match_key) == ele.get(match_key)): \n            return _ele",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def subjectivity(s, **kwargs): \n    return sentiment(s, **kwargs)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def module_to_dict(module, omittable=(lambda k: k.startswith('_'))): \n    return dict([(k, repr(v)) for (k, v) in module.__dict__.items() if (not omittable(k))])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_user_id(): \n    return ('%s@%s' % (getpass.getuser(), platform.node()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def logo(): \n    return load('logo.png')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getmodetype(mode): \n    return ImageMode.getmode(mode).basetype",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def en_percent(num, ndigits=u'not-given'): \n    with translation.override(u'en-US'): \n      if (ndigits == u'not-given'): \n         return percent(Decimal(num)) \n      else: \n         return percent(Decimal(num), ndigits)",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def which_bin(cmds): \n    return salt.utils.which_bin(cmds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return CommentRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_sql_flush(sql_styler, full_table_list): \n    sql_list = [('%s   %s;' % (sql_styler.SQL_KEYWORD('TRUNCATE'), sql_styler.SQL_FIELD(quote_name(table)))) for table in full_table_list]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def run_benchmark(): \n    with tf.Graph().as_default(): \n      image_size = 224 \n      images = tf.Variable(tf.random_normal([FLAGS.batch_size, image_size, image_size, 3], dtype=tf.float32, stddev=0.1)) \n      (pool5, parameters) = inference(images) \n      init = tf.global_variables_initializer() \n      config = tf.ConfigProto() \n      config.gpu_options.allocator_type = 'BFC' \n      sess = tf.Session(config=config) \n      sess.run(init) \n      time_tensorflow_run(sess, pool5, 'Forward') \n      objective = tf.nn.l2_loss(pool5) \n      grad = tf.gradients(objective, parameters) \n      time_tensorflow_run(sess, grad, 'Forward-backward')",
        "line_count": 13,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shutdown(handlerList=_handlerList): \n    for wr in reversed(handlerList[:]): \n      try: \n         h = wr() \n         if h: \n            try: \n               h.acquire() \n               h.flush() \n               h.close() \n            except (OSError, ValueError): \n               pass \n            finally: \n               h.release() \n      except: \n         if raiseExceptions: \n            raise",
        "line_count": 15,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def wrap(parent, overwrites): \n    return ContextWrapper(parent, overwrites)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def weeks(w): \n    return (w * DAYS_PER_WEEK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return ArrayDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_signal(signum): \n    os.kill(os.getpid(), signum)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add(repo='.', paths=None): \n    with open_repo_closing(repo) as r: \n      if (not paths): \n         paths = [] \n         for (dirpath, dirnames, filenames) in os.walk(r.path): \n            if ('.git' in dirnames): \n               dirnames.remove('.git') \n            for filename in filenames: \n               paths.append(os.path.join(dirpath[(len(r.path) + 1):], filename)) \n      r.stage(paths)",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def translated(k, gui=False): \n    return strings[k]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text, jitterRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), jitterRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def t_ignore_DOCTEXT(t): \n    t.lexer.lineno += t.value.count('\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cgconfig_restart(): \n    return service_cgconfig_control('restart')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def b16encode(s): \n    return binascii.hexlify(s).upper()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def monomial_gcd(A, B): \n    return tuple([min(a, b) for (a, b) in zip(A, B)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def parameter(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_string(value): \n    return isinstance(value, basestring)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_projection_from_vector(v, w): \n    return vector_subtract(v, project(v, w))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timings(reps, func, *args, **kw): \n    return timings_out(reps, func, *args, **kw)[0:2]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DEFINE_bool(name, default, help): \n    CONFIG.AddOption(type_info.Bool(name=name, default=default, description=help))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resolve_duplicates(session, task): \n    if (task.choice_flag in (action.ASIS, action.APPLY, action.RETAG)): \n      found_duplicates = task.find_duplicates(session.lib) \n      if found_duplicates: \n         log.debug(u'found   duplicates:   {}'.format([o.id for o in found_duplicates])) \n         duplicate_action = config['import']['duplicate_action'].as_choice({u'skip': u's', u'keep': u'k', u'remove': u'r', u'ask': u'a'}) \n         log.debug(u'default   action   for   duplicates:   {0}', duplicate_action) \n         if (duplicate_action == u's'): \n            task.set_choice(action.SKIP) \n         elif (duplicate_action == u'k'): \n            pass \n         elif (duplicate_action == u'r'): \n            task.should_remove_duplicates = True \n         else: \n            session.resolve_duplicate(task, found_duplicates) \n         session.log_choice(task, True)",
        "line_count": 15,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def _do_eval(match, exp): \n    return eval(exp, globals(), {'m': match})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_join_cache(sender, **kwargs): \n    sender._meta._join_cache = {}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in_top_k(predictions, targets, k): \n    return tf.nn.in_top_k(predictions, targets, k)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def func(x, y=1, z=PyClass): \n    return (x, y, z.a)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _BackupFilters(): \n    _cpplint_state.BackupFilters()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_protected_type(obj): \n    return isinstance(obj, (types.NoneType, int, long, datetime.datetime, datetime.date, datetime.time, float, Decimal, basestring))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def paramstopot(thresh, shape, scale): \n    return (shape, (scale - (shape * thresh)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flavor_get(context, id): \n    return IMPL.flavor_get(context, id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def natsort_case_insensitive(seq): \n    return natsort(seq, case_sensitive=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ex_lvalue(name): \n    return ast.Name(name, ast.Store())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cancel_wait(watcher, error=cancel_wait_ex): \n    get_hub().cancel_wait(watcher, error)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subquery(alias, *args, **kwargs): \n    return Select(*args, **kwargs).alias(alias)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_component(): \n    return {'host': '192.168.0.1', 'port': 8090, 'name': 'soundtouch'}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _in_encoding(): \n    return _stream_encoding(sys.stdin)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def can_validate_certs(): \n    return _CAN_VALIDATE_CERTS",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def no_action(): \n    return ControllableAction(result=succeed(None))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_update_montage(info, montage, path=None, update_ch_names=False): \n    if (montage is not None): \n      if (not isinstance(montage, (string_types, Montage))): \n         err = ('Montage   must   be   str,   None,   or   instance   of   Montage.   %s   was   provided' % type(montage)) \n         raise TypeError(err) \n      if (montage is not None): \n         if isinstance(montage, string_types): \n            montage = read_montage(montage, path=path) \n         _set_montage(info, montage, update_ch_names=update_ch_names) \n         missing_positions = [] \n         exclude = (FIFF.FIFFV_EOG_CH, FIFF.FIFFV_MISC_CH, FIFF.FIFFV_STIM_CH) \n         for ch in info['chs']: \n            if (not (ch['kind'] in exclude)): \n               if (np.unique(ch['loc']).size == 1): \n                  missing_positions.append(ch['ch_name']) \n         if missing_positions: \n            raise KeyError(('The   following   positions   are   missing   from   the   montage   definitions:   %s.   If   those   channels   lack   positions   because   they   are   EOG   channels   use   the   eog   parameter.' % str(missing_positions)))",
        "line_count": 16,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def get_date_from_file(filepath, sep): \n    with open(filepath) as f: \n      line = f.readline() \n      try: \n         return line.split(sep)[0] \n      except IndexError: \n         return None",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_permissions(path, recursive=True): \n    if (not sabnzbd.WIN32): \n      umask = cfg.umask() \n      try: \n         umask = (int(umask, 8) | int('0700', 8)) \n         report = True \n      except ValueError: \n         umask = (int('0777', 8) & (sabnzbd.ORG_UMASK ^ int('0777', 8))) \n         report = False \n      umask_file = (umask & int('7666', 8)) \n      if os.path.isdir(path): \n         if recursive: \n            for (root, _dirs, files) in os.walk(path): \n               set_chmod(root, umask, report) \n               for name in files: \n                  set_chmod(os.path.join(root, name), umask_file, report) \n         else: \n            set_chmod(path, umask, report) \n      else: \n         set_chmod(path, umask_file, report)",
        "line_count": 19,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def getPhotometerByName(name): \n    for photom in getAllPhotometers(): \n      if ((name.lower() in photom.driverFor) or (name == photom.longName)): \n         return photom",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def list_inactive_vms(): \n    return __salt__['vmadm.list'](search=\"state='stopped'\", order='uuid')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def same_name(f, g): \n    return ((f == g) or (getattr(f, '__name__', 0) == getattr(g, '__name__', 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def datetime_from_timestamp(timestamp, content): \n    return set_date_tzinfo(datetime.fromtimestamp(timestamp), tz_name=content.settings.get('TIMEZONE', None))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _sanity_check(): \n    _verify_default_drone_set_exists()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_course_in_cache(course_key): \n    return get_block_structure_manager(course_key).update_collected()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_additive_expression_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def security_group_rule_get_by_security_group_grantee(context, security_group_id): \n    return IMPL.security_group_rule_get_by_security_group_grantee(context, security_group_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def release_local(local): \n    local.__release_local__()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def replaceWith(replStr): \n    return (lambda s, l, t: [replStr])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def relu(x): \n    return tf.nn.relu(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isValid(text): \n    return bool(re.search('\\\\btime\\\\b', text, re.IGNORECASE))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iriencode(value): \n    return force_unicode(iri_to_uri(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def csm_data(csm): \n    return csm_properties(csm)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_path_to_url(path): \n    return urljoin('file:', pathname2url(path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_protocol_modules(): \n    from . import audio_output, channels, command_list, connection, current_playlist, mount, music_db, playback, reflection, status, stickers, stored_playlists",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def toChunk(data): \n    return (('%x\\r\\n' % len(data)), data, '\\r\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mail_managers(subject, message, fail_silently=False): \n    send_mail((settings.EMAIL_SUBJECT_PREFIX + subject), message, settings.SERVER_EMAIL, [a[1] for a in settings.MANAGERS], fail_silently)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def CDLHOMINGPIGEON(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLHOMINGPIGEON)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_cache(key, data, ttl=300): \n    _channel_repository_cache[key] = {'data': data, 'expires': (time.time() + ttl)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def puts_err(s='', newline=True, stream=STDERR): \n    puts(s, newline, stream)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def s3_auth_on_logout(user): \n    s3_clear_session()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ensure_list(obj): \n    return (obj if is_nonstring_iterable(obj) else [obj])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def uri_to_path(uri): \n    return unquote_to_bytes(urlsplit(uri).path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_pip_installed(version=None, python_cmd='python', pip_cmd='pip'): \n    with settings(hide('running', 'warnings', 'stderr', 'stdout'), warn_only=True): \n      res = run(('%(python_cmd)s   %(pip_cmd)s   --version   2>/dev/null' % locals())) \n      if res.failed: \n         return False \n      if (version is None): \n         return res.succeeded \n      else: \n         m = re.search('pip   (?P<version>.*)   from', res) \n         if (m is None): \n            return False \n         installed = m.group('version') \n         if (V(installed) < V(version)): \n            puts(('pip   %s   found   (version   >=   %s   required)' % (installed, version))) \n            return False \n         else: \n            return True",
        "line_count": 16,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def create_image(disk_format, path, size): \n    execute('qemu-img', 'create', '-f', disk_format, path, size)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def split_and_strip_non_empty_lines(text): \n    return [line.strip() for line in text.splitlines() if line.strip()]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def freemem(): \n    return node_info()['free_memory']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def status(url='http://localhost:8080/manager', timeout=180): \n    return _wget('list', {}, url, timeout=timeout)['res']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def askopenfilename(**options): \n    return Open(**options).show()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def consistencygroup_include_in_cluster(context, cluster, partial_rename=True, **filters): \n    return IMPL.consistencygroup_include_in_cluster(context, cluster, partial_rename, **filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_get_all_by_project(context, project_id, marker, limit, sort_key, sort_dir): \n    return IMPL.volume_get_all_by_project(context, project_id, marker, limit, sort_key, sort_dir)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sync_pillar(saltenv='base'): \n    return salt.utils.extmods.sync(__opts__, 'pillar', saltenv=saltenv)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pci_device_get_by_id(context, id): \n    return IMPL.pci_device_get_by_id(context, id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mask_not_alphanumeric(data): \n    return mask_not_printable(data, NON_FANCY_PRINTABLE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log10(x): \n    return Log10()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def campaign_message(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _valid(m, id_=NOTSET, comment=VALID_RESPONSE, out=None): \n    return _set_status(m, status=True, id_=id_, comment=comment, out=out)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def literal(value, type_=None): \n    return BindParameter(None, value, type_=type_, unique=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_regex_bad_pattern(): \n    assert_raises(re.error, inputs.regex, '[')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CommaSeparatedTokenizer(): \n    return (RegexTokenizer('[^,]+') | StripFilter())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index_alt(): \n    s3_redirect_default(URL(f='warehouse', args='summary'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_atom_name(p): \n    p[0] = ast.Name(p[1])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stacksize(since=0.0): \n    return (_VmB('VmStk:') - since)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def virtual_interface_delete(context, id): \n    return IMPL.virtual_interface_delete(context, id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def extract_nothing(fileobj, keywords, comment_tags, options): \n    return []",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def links(dev): \n    return info(dev).get('S', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def runtime_rewriter_middleware(application): \n    return functools.partial(_rewriter_middleware, _REQUEST_REWRITER_CHAIN, _RUNTIME_RESPONSE_REWRITER_CHAIN, application)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def camera(): \n    return load('camera.png')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cluster_create(context, values): \n    return IMPL.cluster_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Binary(aString): \n    return makeByteBuffer(aString)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def revoke_access(course, user, level, send_email=True): \n    _change_access(course, user, level, 'revoke', send_email)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_base(paths): \n    return [os.path.join(BASEDIR, x) for x in paths]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewRepository(): \n    return VectorwriteRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def access(request_token, request_token_secret, verifier): \n    return get_oauth_service().get_access_token(request_token, request_token_secret, data={'oauth_verifier': verifier})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mmap_readwrite_private(f, sz=0, close=True): \n    return _mmap_do(f, sz, mmap.MAP_PRIVATE, (mmap.PROT_READ | mmap.PROT_WRITE), close)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_create(context, project_id, resource, limit): \n    return IMPL.quota_create(context, project_id, resource, limit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_tag(data): \n    return escape_html(data).replace('\"', '&quot;').replace(\"'\", '&#39')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MakeHistFromList(t, label=None): \n    return Hist(t, label=label)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_never_cache_headers(response): \n    patch_response_headers(response, cache_timeout=(-1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def country_mobile_token(country_code): \n    return _MOBILE_TOKEN_MAPPINGS.get(country_code, U_EMPTY_STRING)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MakePmfFromList(t, label=None): \n    return Pmf(t, label=label)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _copy_headers(src, dest): \n    for (k, v) in src.items(): \n      if (is_sys_or_user_meta('object', k) or is_object_transient_sysmeta(k) or (k.lower() == 'x-delete-at')): \n         dest[k] = v",
        "line_count": 3,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def test_mapping_task_classes(): \n    list_output('mapping', 'normal', (COMMANDS_HEADER + ':\\n\\n            mapping_task'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def repaired(fmri): \n    return _fmadm_action_fmri('repaired', fmri)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_dev2_url(backend, instance=None): \n    return ('http://%s' % _get_dev2_hostname(backend, instance))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unpublicize_collection(committer_id, collection_id): \n    _unpublicize_activity(committer_id, collection_id, feconf.ACTIVITY_TYPE_COLLECTION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_to_jquery_autocompletion_format(list): \n    return '\\n'.join(list)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mon_status(**kwargs): \n    return ceph_cfg.status(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_timeline_data(doctype, name): \n    return dict(frappe.db.sql(u\"select   unix_timestamp(attendance_date),   count(*)\\n DCTB  DCTB from   `tabAttendance`   where   employee=%s\\n DCTB  DCTB  DCTB and   attendance_date   >   date_sub(curdate(),   interval   1   year)\\n DCTB  DCTB  DCTB and   status   in   ('Present',   'Half   Day')\\n DCTB  DCTB  DCTB group   by   attendance_date\", name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def report(): \n    return s3_rest_controller(module, 'activity')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def batch(list_to_batch, batch_size=BATCH_SIZE): \n    for i in range(0, len(list_to_batch), batch_size): \n      (yield tuple(list_to_batch[i:(i + batch_size)]))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def floating_ip_update(context, address, values): \n    return IMPL.floating_ip_update(context, address, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def each_setup_in_pkg(top_dir): \n    for (dir_path, dir_names, filenames) in os.walk(top_dir): \n      for fname in filenames: \n         if (fname == 'setup.py'): \n            with open(os.path.join(dir_path, 'setup.py')) as f: \n               (yield (dir_path, f))",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def test_default_task_listings(): \n    for (format_, expected) in (('short', 'mymodule\\nmymodule.long_task_name'), ('normal', (COMMANDS_HEADER + ':\\n\\n            mymodule\\n            mymodule.long_task_name')), ('nested', ((COMMANDS_HEADER + NESTED_REMINDER) + ':\\n\\n            mymodule:\\n                        long_task_name'))): \n      list_output.description = ('Default   task   --list   output:   %s' % format_) \n      (yield (list_output, 'default_tasks', format_, expected)) \n      del list_output.description",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def safe_rm_oldest_items_in_dir(root_dir, num_of_items_to_keep, excludes=frozenset()): \n    if os.path.isdir(root_dir): \n      found_files = [] \n      for old_file in os.listdir(root_dir): \n         full_path = os.path.join(root_dir, old_file) \n         if (full_path not in excludes): \n            found_files.append((full_path, os.path.getmtime(full_path))) \n      found_files = sorted(found_files, key=(lambda x: x[1]), reverse=True) \n      for (cur_file, _) in found_files[num_of_items_to_keep:]: \n         rm_rf(cur_file)",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def dmp_quo(f, g, u, K): \n    return dmp_div(f, g, u, K)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_return_text(): \n    assert ('foo' in color('foo', 11))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def import_file_to_ast(fpath, module_name): \n    return hy_compile(import_file_to_hst(fpath), module_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_a_spanquery(obj): \n    return isinstance(obj, (SpanTermQuery, SpanFirstQuery, SpanOrQuery, SpanMultiQuery))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_translation_unit_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upgrade_available(name): \n    return (latest_version(name) != '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isValid(text): \n    return bool(re.search('\\\\bjoke\\\\b', text, re.IGNORECASE))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def action_event_finish(context, values): \n    return IMPL.action_event_finish(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_script(): \n    main([])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cpython_only(test): \n    return impl_detail(cpython=True)(test)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def login_token_status(token): \n    return get_token_status(token, 'login', 'LOGIN')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or __virtualname__), ('apikey',))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def lookupHostInfo(name, timeout=None): \n    return getResolver().lookupHostInfo(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sh(cmd): \n    return check_call(cmd, shell=True, env=sub_environment())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def classmethod2display(class_, method_, descriptor_): \n    return ('%s   ->   %s   (   %s   )' % (class_, method_, descriptor_))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _clean_pkglist(pkgs): \n    for (name, versions) in six.iteritems(pkgs): \n      stripped = [v for v in versions if (v != '1')] \n      if (not stripped): \n         pkgs[name] = ['1'] \n      elif (versions != stripped): \n         pkgs[name] = stripped",
        "line_count": 6,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def get_current_instance_id(): \n    return os.environ.get('INSTANCE_ID', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _response(code): \n    return ('HTTP/1.1   %i   %s' % (code, client.responses[code]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vsepr_parse_user_answer(user_input): \n    return json.loads(user_input)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_user_access_to_subscribers(user_profile, stream): \n    validate_user_access_to_subscribers_helper(user_profile, {'realm__domain': stream.realm.domain, 'realm_id': stream.realm_id, 'invite_only': stream.invite_only}, (lambda : subscribed_to_stream(user_profile, stream)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def local_git_branch(repo_url, branch_name): \n    with lcd(LOGDIR): \n      local('if   [   -d   letsencrypt   ];   then   rm   -rf   letsencrypt;   fi') \n      local(('git   clone   %s   letsencrypt   --branch   %s   --single-branch' % (repo_url, branch_name))) \n      local('tar   czf   le.tar.gz   letsencrypt')",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_theme_names(): \n    return get_themes().keys()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def str2bool(value): \n    return (value.lower() in (u'yes', u'1', u'true', u't', u'y'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_all(name, cmd, no_start=False, preserve_state=True, stdin=None, python_shell=True, output_loglevel='debug', use_vt=False, path=None, ignore_retcode=False, chroot_fallback=False, keep_env='http_proxy,https_proxy,no_proxy'): \n    return _run(name, cmd, output='all', no_start=no_start, preserve_state=preserve_state, stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, use_vt=use_vt, path=path, ignore_retcode=ignore_retcode, chroot_fallback=chroot_fallback, keep_env=keep_env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def window_specialization(typename): \n    return Extension('zipline.lib._{name}window'.format(name=typename), ['zipline/lib/_{name}window.pyx'.format(name=typename)], depends=['zipline/lib/_windowtemplate.pxi'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_close(): \n    while True: \n      (yield)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def processXMLElement(xmlElement): \n    evaluate.processArchivable(_Comment, xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index_alt(): \n    s3_redirect_default(URL(f='event'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def display_name_with_default_escaped(block): \n    return display_name_with_default(block).replace('<', '&lt;').replace('>', '&gt;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dump(filename, options, out=sys.stdout): \n    with open(filename, u'rb') as file_obj: \n      return _dump(file_obj, options=options, out=out)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_get_all_volume_sorted(context): \n    return IMPL.service_get_all_volume_sorted(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _has_explicit_scheme(url): \n    return (url.isValid() and url.scheme() and (url.host() or url.path()) and ('   ' not in url.path()) and (not url.path().startswith(':')))",
        "line_count": 1,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def vbox(margin, spacing, *items): \n    return box(QtWidgets.QVBoxLayout, margin, spacing, *items)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def python_branch(): \n    return _sys_version()[2]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parseXML(readable): \n    return parse(readable, caseInsensitive=0, preserveCase=1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def length_lt(value, arg): \n    return (len(value) < int(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fix_sys_path(extra_extra_paths=()): \n    sys.path[1:1] = EXTRA_PATHS",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def restart(name, runas=None): \n    return prlctl('restart', _sdecode(name), runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_absolute_url(path): \n    return path.startswith('http')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def describe_cache_security_groups(name=None, conn=None, region=None, key=None, keyid=None, profile=None): \n    return _describe_resource(name=name, name_param='CacheSecurityGroupName', res_type='cache_security_group', info_node='CacheSecurityGroups', conn=conn, region=region, key=key, keyid=keyid, profile=profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pick_configurator(config, default, plugins, question='How   would   you   like   to   authenticate   and   install   certificates?'): \n    return pick_plugin(config, default, plugins, question, (interfaces.IAuthenticator, interfaces.IInstaller))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _to_hass_color(color): \n    return list([int(c) for c in color])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def trackpoint(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _item_to_topic(iterator, resource): \n    return Topic.from_api_repr(resource, iterator.client)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def educateDashesOldSchool(s): \n    return s.replace('---', '&#8212;').replace('--', '&#8211;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _checkCPython(sys=sys, platform=platform): \n    return (platform.python_implementation() == 'CPython')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deregister(class_): \n    if hasattr(class_, '_compiler_dispatcher'): \n      visitors._generate_dispatch(class_) \n      del class_._compiler_dispatcher",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getCraftedText(fileName, text='', multiplyRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), multiplyRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_log(text, *colors): \n    sys.stderr.write((sprint('{}:   {}'.format(script_name, text), *colors) + '\\n'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iprand(): \n    return 'iprand'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCrossProduct(firstComplex, secondComplex): \n    return ((firstComplex.real * secondComplex.imag) - (firstComplex.imag * secondComplex.real))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_fault_create(context, values): \n    return IMPL.instance_fault_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ip_num_to_string(ip): \n    return '.'.join(map((lambda n: str(((ip >> n) & 255))), [24, 16, 8, 0]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compare_media_types(actual, expected): \n    return compare_tree_to_dict(actual, expected, ('base', 'type'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def htonl(integer): \n    return ntohl(integer)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _rebuild_reduction(cls, *args): \n    return cls._rebuild(*args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def episode_in_show(series_id, episode_id): \n    with Session() as session: \n      episode = session.query(Episode).filter((Episode.id == episode_id)).one() \n      return (episode.series_id == series_id)",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bindir_rel(*args): \n    return os.path.join(CONF.bindir, *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def proxy_functions(proxy): \n    return {'proxy_functions': proxy['ssh_sample.fns']()}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_image_equals_mask(): \n    assert_close(reconstruction(np.ones((7, 5)), np.ones((7, 5))), 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def infinite_sleeps(sleep_for): \n    for i in count(): \n      (yield i) \n      time.sleep(sleep_for)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def first_key(obj): \n    return six.next(six.iterkeys(obj))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shutdown(opts): \n    DETAILS[_worker_name()].close_connection()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def consul_fetch(client, path): \n    return client.kv.get(path, recurse=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def all(x, axis=None, keepdims=False): \n    return T.all(x, axis=axis, keepdims=keepdims)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mulmatscaler(matlist, scaler, K): \n    return [mulrowscaler(row, scaler, K) for row in matlist]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def path_to_file_uri(abspath): \n    return path.path_to_uri(abspath)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return ArmModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def passthru(arg): \n    return arg",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookupIPV6Address(name, timeout=None): \n    return getResolver().lookupIPV6Address(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _s(word, seq, suffix='s'): \n    return (word + (suffix if (len(seq) != 1) else ''))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def with_metaclass(meta, base=object): \n    return meta('NewBase', (base,), {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def printProgress(layerIndex, procedureName): \n    printProgressByString(('%s   layer   count   %s...' % (procedureName.capitalize(), (layerIndex + 1))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_request_stats(): \n    return {'ip': get_real_ip(), 'platform': request.user_agent.platform, 'browser': request.user_agent.browser, 'version': request.user_agent.version, 'language': request.user_agent.language}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cleanup(): \n    return _get_impl().cleanup()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Bernoulli(name, p, succ=1, fail=0): \n    return rv(name, BernoulliDistribution, p, succ, fail)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_platform(): \n    return platform.system()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def literals(choices, prefix='', suffix=''): \n    return '|'.join((((prefix + re.escape(c)) + suffix) for c in choices.split()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _slurp(filename): \n    with open(filename) as f: \n      return f.read()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def name(pid): \n    return psutil.Process(pid).name()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_class_redef(x): \n    return set([x])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_remotely(username, address, commands, port=22, log_command_filter=identity): \n    return Effect(RunRemotely(username=username, address=address, commands=commands, port=port, log_command_filter=log_command_filter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def site_location(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return HAS_STATS",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup(app): \n    app.add_directive('task', TaskDirective)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def address(obj): \n    return ('<%s   @   %s>' % (obj.__class__.__name__, hex(id(obj)).upper().replace('X', 'x')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def masterwebHandle(cls): \n    root.putChild(cls.__name__, cls())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def install_windowsfeatures(name): \n    return install(name, source='windowsfeatures')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_systemd_distribution(distribution): \n    return (is_centos_or_rhel(distribution) or (distribution == 'ubuntu-16.04'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __virtual__(): \n    return (__salt__['config.get']('grafana_version', 1) == 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def theme_project(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _volume_admin_metadata_get(context, volume_id): \n    return {'fake_key': 'fake_value'}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def accuracy(y, t, ignore_label=None): \n    return Accuracy(ignore_label=ignore_label)(y, t)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_synset(synset_key): \n    return wn.synset(synset_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def patharg(path): \n    return path.replace('\\\\', '\\\\\\\\\\\\')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gettext_noop(message): \n    return message",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_permission_config_key(view): \n    return 'api_permission_{}'.format(view.__class__.__name__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_user_author_or_privileged(cc_content, context): \n    return (context['is_requester_privileged'] or (context['cc_requester']['id'] == cc_content['user_id']))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getTranslateTetragridByTranslation(translation): \n    return [[1.0, 0.0, 0.0, translation.x], [0.0, 1.0, 0.0, translation.y], [0.0, 0.0, 1.0, translation.z], [0.0, 0.0, 0.0, 1.0]]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _normparse(text): \n    return _normexpr(functemplate._parse(text))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sdm_LM(f): \n    return f[0][0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def for_in_pyiter_pass(it): \n    for item in it: \n      pass",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_middleware_defaults(): \n    cfg.set_defaults(cors.CORS_OPTS, allow_headers=['X-Auth-Token', 'X-Identity-Status', 'X-Roles', 'X-Service-Catalog', 'X-User-Id', 'X-Tenant-Id', 'X-OpenStack-Request-ID', 'X-Trace-Info', 'X-Trace-HMAC', 'OpenStack-API-Version'], expose_headers=['X-Auth-Token', 'X-Subject-Token', 'X-Service-Token', 'X-OpenStack-Request-ID', 'OpenStack-API-Version'], allow_methods=['GET', 'PUT', 'POST', 'DELETE', 'PATCH', 'HEAD'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_profile_create_ipython_dir(): \n    with TemporaryDirectory() as td: \n      getoutput([sys.executable, '-m', 'IPython', 'profile', 'create', 'foo', ('--ipython-dir=%s' % td)]) \n      profile_dir = os.path.join(td, 'profile_foo') \n      assert os.path.exists(profile_dir) \n      ipython_config = os.path.join(profile_dir, 'ipython_config.py') \n      assert os.path.exists(ipython_config)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def __virtual__(): \n    return ('win_firewall' if ('firewall.get_config' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def show(): \n    for manager in Gcf.get_all_fig_managers(): \n      pass",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_provide_specs_and_objects(category): \n    return _load_provide_objects(category).copy()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _float_to_json(value): \n    return value",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___rmul__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_privacy_url(): \n    return get_url('PRIVACY')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ImportStateMessage(state): \n    return {STATE_READ: 'Batch   read   from   file.', STATE_SENDING: 'Sending   batch   to   server.', STATE_SENT: 'Batch   successfully   sent.', STATE_NOT_SENT: 'Error   while   sending   batch.'}[state]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def alarm(bot, job): \n    bot.sendMessage(job.context, text='Beep!')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def restart(name): \n    return reboot(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_chassis_name(name, host=None, admin_username=None, admin_password=None): \n    return __execute_cmd('setsysinfo   -c   chassisname   {0}'.format(name), host=host, admin_username=admin_username, admin_password=admin_password)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPluginsDirectoryPath(): \n    return archive.getCraftPluginsDirectoryPath()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_settings(mod, settings): \n    for setting in dir(mod): \n      if (not setting.isupper()): \n         continue \n      setting_value = getattr(mod, setting) \n      if ((setting in ('INSTALLED_APPS', 'TEMPLATE_DIRS')) and isinstance(setting_value, six.string_types)): \n         setting_value = (setting_value,) \n      if (setting[:6] == 'EXTRA_'): \n         base_setting = setting[6:] \n         if isinstance(getattr(settings, base_setting), (list, tuple)): \n            curval = getattr(settings, base_setting) \n            setattr(settings, base_setting, (curval + type(curval)(setting_value))) \n            continue \n      setattr(settings, setting, setting_value)",
        "line_count": 13,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def remove(name=None, pkgs=None, **kwargs): \n    return _uninstall(action='remove', name=name, pkgs=pkgs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user_followee_count(context, data_dict): \n    return _followee_count(context, data_dict, context['model'].UserFollowingUser)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_admin_metadata_get(context, volume_id): \n    return IMPL.volume_admin_metadata_get(context, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def server_poweroff(host=None, admin_username=None, admin_password=None, module=None): \n    return __execute_cmd('serveraction   powerdown', host=host, admin_username=admin_username, admin_password=admin_password, module=module)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PRE(k, n): \n    return _XXX(k, n, _PRE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def should_ignore_paypal(): \n    return (settings.DEBUG and ('sandbox' not in settings.PAYPAL_PERMISSIONS_URL))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def pslist(addr_space): \n    for p in get_kdbg(addr_space).processes(): \n      (yield p)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def add_test(name, test_type, path, author=None, dependencies=None, experimental=True, run_verify=None, test_class=None, test_time=None, test_category=None, description=None, sync_count=1): \n    return models.Test.add_object(name=name, test_type=test_type, path=path, author=author, dependencies=dependencies, experimental=experimental, run_verify=run_verify, test_time=test_time, test_category=test_category, sync_count=sync_count, test_class=test_class, description=description).id",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Pdfs(pdfs, **options): \n    for pdf in pdfs: \n      Pdf(pdf, **options)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def volume_glance_metadata_copy_from_volume_to_volume(context, src_volume_id, volume_id): \n    return IMPL.volume_glance_metadata_copy_from_volume_to_volume(context, src_volume_id, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('nftables' if ('nftables.version' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def randu(nchars): \n    return ''.join(np.random.choice(RANDU_CHARS, nchars))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _tgrep_node_literal_value(node): \n    return (node.label() if _istree(node) else text_type(node))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def overfeat(inputs, num_classes=1000, is_training=True, dropout_keep_prob=0.5, spatial_squeeze=True, scope='overfeat'): \n    with tf.variable_scope(scope, 'overfeat', [inputs]) as sc: \n      end_points_collection = (sc.name + '_end_points') \n      with slim.arg_scope([slim.conv2d, slim.fully_connected, slim.max_pool2d], outputs_collections=end_points_collection): \n         net = slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1') \n         net = slim.max_pool2d(net, [2, 2], scope='pool1') \n         net = slim.conv2d(net, 256, [5, 5], padding='VALID', scope='conv2') \n         net = slim.max_pool2d(net, [2, 2], scope='pool2') \n         net = slim.conv2d(net, 512, [3, 3], scope='conv3') \n         net = slim.conv2d(net, 1024, [3, 3], scope='conv4') \n         net = slim.conv2d(net, 1024, [3, 3], scope='conv5') \n         net = slim.max_pool2d(net, [2, 2], scope='pool5') \n         with slim.arg_scope([slim.conv2d], weights_initializer=trunc_normal(0.005), biases_initializer=tf.constant_initializer(0.1)): \n            net = slim.conv2d(net, 3072, [6, 6], padding='VALID', scope='fc6') \n            net = slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6') \n            net = slim.conv2d(net, 4096, [1, 1], scope='fc7') \n            net = slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7') \n            net = slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer, scope='fc8') \n         end_points = slim.utils.convert_collection_to_dict(end_points_collection) \n         if spatial_squeeze: \n            net = tf.squeeze(net, [1, 2], name='fc8/squeezed') \n            end_points[(sc.name + '/fc8')] = net \n         return (net, end_points)",
        "line_count": 22,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def index(): \n    return settings.customise_home(module, alt_function='index_alt')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def no_translate_debug_logs(logical_line, filename): \n    if logical_line.startswith('LOG.debug(_('): \n      (yield (0, \"N319   Don't   translate   debug   level   logs\"))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def register_shape_i_c_code(typ, code, check_input, version=()): \n    Shape_i.c_code_and_version[typ] = (code, check_input, version)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SAREXT(barDs, count, startvalue=(-4e+37), offsetonreverse=(-4e+37), accelerationinitlong=(-4e+37), accelerationlong=(-4e+37), accelerationmaxlong=(-4e+37), accelerationinitshort=(-4e+37), accelerationshort=(-4e+37), accelerationmaxshort=(-4e+37)): \n    return call_talib_with_hl(barDs, count, talib.SAREXT, startvalue, offsetonreverse, accelerationinitlong, accelerationlong, accelerationmaxlong, accelerationinitshort, accelerationshort, accelerationmaxshort)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_unsafe_url(): \n    eq_('All   your{\"<a   href=\"http://xx.yy.com/grover.png\"   rel=\"nofollow\">xx.yy.com/grover.png</a>\"}base   are', linkify('All   your{\"xx.yy.com/grover.png\"}base   are'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def maxabs(x): \n    return np.abs(x).max()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _removeHook(hook): \n    interface.adapter_hooks.remove(hook)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sm_backend_conf_get_all(context): \n    return IMPL.sm_backend_conf_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _default_stim_chs(info): \n    return pick_types(info, meg=False, ref_meg=False, misc=True, exclude=[])[:8]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def forwards_problems(pending, done, verbosity): \n    return inner_problem_check(problems(reversed(pending), done), done, verbosity)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ward(y): \n    return linkage(y, method='ward', metric='euclidean')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_row_nnz(mat, row): \n    return (mat.indptr[(row + 1)] - mat.indptr[row])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatatt(attrs): \n    return u''.join([(u'   %s=\"%s\"' % (k, conditional_escape(v))) for (k, v) in attrs.items()])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def check_fiff_length(fid, close=True): \n    if (fid.tell() > 2147483648): \n      if close: \n         fid.close() \n      raise IOError('FIFF   file   exceeded   2GB   limit,   please   split   file   or   save   to   a   different   format')",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def CDLSPINNINGTOP(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLSPINNINGTOP)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def humanbytes(s): \n    return next((u'{0}{1}'.format(hfloat(((s / div) if div else s)), unit) for (div, unit) in UNITS if (s >= div)))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_system_packs_base_path(): \n    return cfg.CONF.content.system_packs_base_path",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_value(key): \n    return (True if salt.utils.traverse_dict_and_list(__grains__, key, False) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_ans1_token(token): \n    return (token[:3] == PKI_ANS1_PREFIX)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def callRemote(obj, funcName, *args, **kw): \n    return obj.callRemote(funcName, *args, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xlabel(s, *args, **kwargs): \n    return gca().set_xlabel(s, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_moon(time, location=None, ephemeris=None): \n    return get_body(u'moon', time, location=location, ephemeris=ephemeris)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_direct_declarator_5(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeExtension(configs=None): \n    return PodcastExtension(configs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user_documents(user): \n    return Document.objects.filter(revisions__creator=user).exclude(html__startswith='<p>REDIRECT   <a').distinct()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_flask_context(request): \n    return HTTPContext(url=request.url, method=request.method, user_agent=request.user_agent.string, referrer=request.referrer, remote_ip=request.remote_addr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_expired_sessions(): \n    for sid in get_expired_sessions(): \n      delete_session(sid, reason=u'Session   Expired')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _run_inactive(games): \n    return (len(games) == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _parseTCPSSL(factory, domain, port): \n    return ((domain, int(port), factory), {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(linter): \n    linter.register_checker(SpellingChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def interfaces(): \n    return __proxy__['napalm.call']('get_interfaces', **{})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _fake_run_horcmstart(*args): \n    return (0 if (not run_horcmstart_returns_error) else 3)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def clean_db(scenario): \n    call_command('flush', interactive=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_authorized(requesting_user, username, allow_staff=False): \n    if (requesting_user.username != username): \n      if ((not requesting_user.is_staff) or (not allow_staff)): \n         raise UserNotAuthorized()",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def GlobalProcess(): \n    return _dev_process",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def zunpickle(zdata): \n    return pickle.loads(zlib.decompress(zdata))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_parent_unit(xblock): \n    while xblock: \n      xblock = xblock.get_parent() \n      if (xblock is None): \n         return None \n      parent = xblock.get_parent() \n      if (parent is None): \n         return None \n      if (parent.category == 'sequential'): \n         return xblock",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def expandvars(path): \n    return path",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isabs(s): \n    return ((':' in s) and (s[0] != ':'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def mangle_args(argtys): \n    return ''.join([mangle_type(t) for t in argtys])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __virtual__(): \n    return ('boto_secgroup' if ('boto_secgroup.exists' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def savepoint(using=None): \n    return get_connection(using).savepoint()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def token_sort_ratio(s1, s2, force_ascii=True, full_process=True): \n    return _token_sort(s1, s2, partial=False, force_ascii=force_ascii, full_process=full_process)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _create_change_list_from_suggestion(suggestion): \n    return [{'cmd': exp_domain.CMD_EDIT_STATE_PROPERTY, 'state_name': suggestion.state_name, 'property_name': exp_domain.STATE_PROPERTY_CONTENT, 'new_value': [suggestion.state_content]}]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_email_for_after_purchase(email, invoice_id, order_url, event_name, event_organiser): \n    send_email(to=email, action=TICKET_PURCHASED, subject=MAILS[TICKET_PURCHASED]['subject'].format(invoice_id=invoice_id, event_name=event_name), html=MAILS[TICKET_PURCHASED]['message'].format(order_url=order_url, event_name=event_name, event_organiser=event_organiser))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def repr_writers(h): \n    return [u'({0}){1}->{2}'.format(fd, _rcb(cb), repr_flag(WRITE)) for (fd, cb) in items(h.writers)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def tamper(payload, **kwargs): \n    return (payload.replace(\"'\", '%EF%BC%87') if payload else payload)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def gettext(el): \n    return ''.join(_get_chunks(el))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_multipart(): \n    with open(os.path.join(BASE_DIRECTORY, 'artwork', 'koala.png'), 'rb') as koala: \n      prepared_request = requests.Request('POST', 'http://localhost/', files={'koala': koala}).prepare() \n      koala.seek(0) \n      file_content = hug.input_format.multipart(BytesIO(prepared_request.body), **parse_header(prepared_request.headers['Content-Type'])[1])['koala'] \n      assert (file_content == koala.read())",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _process_to_string(to_string): \n    return [x for x in re.split('\\\\s|,|;|:', to_string) if x]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def cnv_formula(attribute, arg, element): \n    return __save_prefix(attribute, arg, element)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_jids(): \n    with _get_serv(ret=None, commit=True) as cur: \n      sql = 'SELECT   jid,   load\\n                                                FROM   jids' \n      cur.execute(sql) \n      data = cur.fetchall() \n      ret = {} \n      for (jid, load) in data: \n         ret[jid] = salt.utils.jid.format_jid_instance(jid, load) \n      return ret",
        "line_count": 8,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def TabIterator(handle, alphabet=single_letter_alphabet): \n    for line in handle: \n      try: \n         (title, seq) = line.split(' DCTB ') \n      except: \n         if (line.strip() == ''): \n            continue \n         raise ValueError(('Each   line   should   have   one   tab   separating   the' + ('   title   and   sequence,   this   line   has   %i   tabs:   %r' % (line.count(' DCTB '), line)))) \n      title = title.strip() \n      seq = seq.strip() \n      (yield SeqRecord(Seq(seq, alphabet), id=title, name=title, description=''))",
        "line_count": 10,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def set_chost(value): \n    return set_var('CHOST', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_equal_type(logical_line): \n    if asse_equal_type_re.match(logical_line): \n      (yield (0, 'N317:   assertEqual(type(A),   B)   sentences   not   allowed'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getMaximum(firstComplex, secondComplex): \n    return complex(max(firstComplex.real, secondComplex.real), max(firstComplex.imag, secondComplex.imag))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def config_show(cibfile=None): \n    return item_show(item='config', item_id=None, extra_args=None, cibfile=cibfile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_schedules(profile=None, api_key=None): \n    return salt.utils.pagerduty.list_items('schedules', 'id', __salt__['config.option'](profile), api_key, opts=__opts__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def verify_date_or_time(css, date_or_time): \n    assert_true(world.css_has_value(css, date_or_time))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getIfExists(node, nodeId): \n    return _get(node, nodeId)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_decimal_symbol(locale=LC_NUMERIC): \n    return Locale.parse(locale).number_symbols.get('decimal', u'.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add(a, b): \n    return (a + b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def splitstrip(string, sep=','): \n    return [word.strip() for word in string.split(sep) if word.strip()]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getRequestType(packet): \n    return ord(packet[7])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def paragraph(): \n    return '   '.join((sentence() for i in range(random.randint(1, 4))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_function_definition_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_declaration_specifiers_6(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cert_get_not_before(cert): \n    return cert.not_valid_before",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_local_file(file_location): \n    return (not re.match('[a-z]+://', file_location))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def whitespace_around_operator(logical_line): \n    for match in OPERATOR_REGEX.finditer(logical_line): \n      (before, after) = match.groups() \n      if (' DCTB ' in before): \n         (yield (match.start(1), 'E223   tab   before   operator')) \n      elif (len(before) > 1): \n         (yield (match.start(1), 'E221   multiple   spaces   before   operator')) \n      if (' DCTB ' in after): \n         (yield (match.start(2), 'E224   tab   after   operator')) \n      elif (len(after) > 1): \n         (yield (match.start(2), 'E222   multiple   spaces   after   operator'))",
        "line_count": 10,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False): \n    return a.var(axis=axis, dtype=dtype, out=out, keepdims=keepdims)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unregister_unpack_format(name): \n    del _UNPACK_FORMATS[name]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _activation_even_odd(W_list, b_list, samples, beta, odd=True): \n    for i in xrange(odd, len(samples), 2): \n      samples[i] = hi_given(samples, i, W_list, b_list, beta, apply_sigmoid=False)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def true_(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mkXRDSTag(t): \n    return nsTag(XRDS_NS, t)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disabled(name): \n    return (not enabled(name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_time(time, result_format='number', exclude_millis=False): \n    return Time(time).convert(result_format, millis=is_falsy(exclude_millis))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def haystack_load_apps(): \n    return [i.label for i in apps.get_app_configs() if (i.models_module is not None)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def equal(x, y): \n    return tf.equal(x, y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def db_exists(database_name, **kwargs): \n    return (len(tsql_query(\"SELECT   database_id   FROM   sys.databases   WHERE   NAME='{0}'\".format(database_name), **kwargs)) == 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _parse_statement(options): \n    for option in options: \n      _create_and_add_option(option)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_directed(G): \n    return G.is_directed()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disable_paging(remote_conn, paging_cmd='terminal   length   0'): \n    return send_command(remote_conn, paging_cmd)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def aggregate_get_by_uuid(context, uuid): \n    return IMPL.aggregate_get_by_uuid(context, uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def elu(x): \n    return tf.nn.elu(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _default_controls(ncolors): \n    return np.linspace(0.0, 1.0, ncolors)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def n_subplots(ax_im): \n    return len(ax_im.get_figure().get_axes())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def developing(): \n    return wechat.response_text('\\xe8\\xaf\\xa5\\xe5\\x8a\\x9f\\xe8\\x83\\xbd\\xe7\\xbb\\xb4\\xe6\\x8a\\xa4\\xe4\\xb8\\xad')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_servers(): \n    return [('localhost', 9200)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decrypt_password(encrypted_password): \n    return decrypt(base64.b64decode(encrypted_password))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_zeros(): \n    AreEqual(binascii.b2a_hex('\\x00\\x00\\x10\\x00'), '00001000')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def distort_color(image, thread_id=0, scope=None): \n    with tf.op_scope([image], scope, 'distort_color'): \n      color_ordering = (thread_id % 2) \n      if (color_ordering == 0): \n         image = tf.image.random_brightness(image, max_delta=(32.0 / 255.0)) \n         image = tf.image.random_saturation(image, lower=0.5, upper=1.5) \n         image = tf.image.random_hue(image, max_delta=0.2) \n         image = tf.image.random_contrast(image, lower=0.5, upper=1.5) \n      elif (color_ordering == 1): \n         image = tf.image.random_brightness(image, max_delta=(32.0 / 255.0)) \n         image = tf.image.random_contrast(image, lower=0.5, upper=1.5) \n         image = tf.image.random_saturation(image, lower=0.5, upper=1.5) \n         image = tf.image.random_hue(image, max_delta=0.2) \n      image = tf.clip_by_value(image, 0.0, 1.0) \n      return image",
        "line_count": 14,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def rotate2D(pts, origin, ang=(pi / 4)): \n    return (dot((pts - origin), ar([[cos(ang), sin(ang)], [(- sin(ang)), cos(ang)]])) + origin)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def HT_TRENDLINE(ds, count): \n    return call_talib_with_ds(ds, count, talib.HT_TRENDLINE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def py_slice2(obj, a, b): \n    return obj[a:b]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def json_pretty(func): \n    return json(func, pretty=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _datetime_from_json(value, field): \n    if _not_null(value, field): \n      return datetime.datetime.strptime(value, _RFC3339_NO_FRACTION)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __virtual__(): \n    return ('boto_iam_role' if ('boto_iam.role_exists' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cgsnapshot_get_all(context, filters=None): \n    return IMPL.cgsnapshot_get_all(context, filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_labeled_statement_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def process_status(name): \n    with settings(hide('running', 'stdout', 'stderr', 'warnings'), warn_only=True): \n      res = run_as_root(('supervisorctl   status   %(name)s' % locals())) \n      if res.startswith('No   such   process'): \n         return None \n      else: \n         return res.split()[1]",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_course_enrollment(student_id, course_id): \n    return _get_fake_enrollment(student_id, course_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def datetime_to_microseconds(dt): \n    return (int((time.mktime(dt.timetuple()) * 1000000)) + dt.microsecond)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _create_execution_log_entry(status): \n    return {'timestamp': date_utils.get_datetime_utc_now(), 'status': status}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_SAMPHubProxy(): \n    SAMPHubProxy()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cleanUpScreens(): \n    errRun('pkill   -9   -f   mnexec.*socat')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def merge_boundary(graph, src, dst): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_repository_in_tool_shed(app, id): \n    return get_repository_query(app).get(app.security.decode_id(id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _convert_minutes_seconds(timeout, in_seconds=False): \n    return (timeout if in_seconds else (timeout * 60))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def isfunction(object): \n    return isinstance(object, types.FunctionType)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_variables_in_module(module, collection=tf.GraphKeys.TRAINABLE_VARIABLES): \n    return get_variables_in_scope(module.var_scope, collection=collection)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dump(data, stream=None, Dumper=Dumper, **kwds): \n    return dump_all([data], stream, Dumper=Dumper, **kwds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def function_variable(*a, **kw): \n    return (a, kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _cluster_has_pending_steps(steps): \n    return any(((step.status.state == 'PENDING') for step in steps))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def verify(condition, reason='test   failed'): \n    if (not condition): \n      raise TestFailed(reason)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def preseed_package(pkg_name, preseed): \n    for (q_name, _) in preseed.items(): \n      (q_type, q_answer) = _ \n      run_as_root(('echo   \"%(pkg_name)s   %(q_name)s   %(q_type)s   %(q_answer)s\"   |   debconf-set-selections' % locals()))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def merge_dicts(a, b): \n    for (k, v) in b.items(): \n      if isinstance(v, dict): \n         merge_dicts(a.setdefault(k, {}), v) \n      else: \n         a.setdefault(k, v)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def minutes(m): \n    return (float(m) / MINUTES_PER_DAY)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_null_event_date_events(all_sids, timestamp): \n    return pd.DataFrame({'sid': all_sids, 'timestamp': timestamp, 'event_date': pd.Timestamp('NaT'), 'float': (-9999.0), 'int': (-9999), 'datetime': pd.Timestamp('1980'), 'string': 'should   be   ignored'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_operators(): \n    for op in Operator.inheritors(): \n      check_export.description = 'Assert   that   the   TPOT   {}   operator   exports   as   expected'.format(op.__name__) \n      (yield (check_export, op))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def update_email_marketing_config(enabled=True, key='badkey', secret='badsecret', new_user_list='new   list', template='Activation', enroll_cost=100, lms_url_override='http://testserver'): \n    return EmailMarketingConfiguration.objects.create(enabled=enabled, sailthru_key=key, sailthru_secret=secret, sailthru_new_user_list=new_user_list, sailthru_activation_template=template, sailthru_enroll_template='enroll_template', sailthru_lms_url_override=lms_url_override, sailthru_get_tags_from_sailthru=False, sailthru_enroll_cost=enroll_cost, sailthru_max_retries=0, welcome_email_send_delay=600)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_column_aggregate(T1): \n    for masked in (False, True): \n      tg = Table(T1, masked=masked).group_by('a') \n      tga = tg['c'].groups.aggregate(np.sum) \n      assert (tga.pformat() == ['   c      ', '----', '   0.0', '   6.0', '22.0'])",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def mc_compute_stationary(P): \n    return MarkovChain(P).stationary_distributions",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def socket(*args, **kwargs): \n    return _SocketDecorator()(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render_comment_form(parser, token): \n    return RenderCommentFormNode.handle_token(parser, token)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rparam(a, b): \n    return a",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_refactor(refactor_case): \n    if 0: \n      refactor_case.run() \n      assert_case_equal(refactor_case, refactor_case.result, refactor_case.desired)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def format_percent(number, format=None): \n    return get_i18n().format_percent(number, format)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def example_number(region_code): \n    return example_number_for_type(region_code, PhoneNumberType.FIXED_LINE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_tool_shed_repository_by_id(app, repository_id): \n    return app.install_model.context.query(app.install_model.ToolShedRepository).filter((app.install_model.ToolShedRepository.table.c.id == app.security.decode_id(repository_id))).first()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_jpeg(h, f): \n    if (h[6:10] == 'JFIF'): \n      return 'jpeg'",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def default_navigator_config_dir(): \n    return get_config_root()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_api_opts(): \n    return [(g, copy.deepcopy(o)) for (g, o) in _api_opts]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_zoom_parameter(parameter): \n    return hasattr(parameter, 'zoom')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skipIfDBFeature(*features): \n    return _deferredSkip((lambda : any((getattr(connection.features, feature, False) for feature in features))), ('Database   has   feature(s)   %s' % ',   '.join(features)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_cache_line_split_issues(): \n    assert (jedi.Script('int(\\n').call_signatures()[0].name == 'int')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_debian(): \n    return os.path.exists(u'/usr/bin/apt-get')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_cwidth(string): \n    return _CHAR_SIZES_CACHE[string]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_script_prefix(): \n    return _prefixes.get(currentThread(), u'/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def languages(): \n    print_available_languages()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def spdiags(data, diags, m, n, format=None): \n    return dia_matrix((data, diags), shape=(m, n)).asformat(format)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stop(vm_): \n    with _get_xapi_session() as xapi: \n      vm_uuid = _get_label_uuid(xapi, 'VM', vm_) \n      if (vm_uuid is False): \n         return False \n      try: \n         xapi.VM.hard_shutdown(vm_uuid) \n         return True \n      except Exception: \n         return False",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def validate_reserved_names(value): \n    if (value in settings.DEIS_RESERVED_NAMES): \n      raise ValidationError(u'{}   is   a   reserved   name.'.format(value))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def volume_include_in_cluster(context, cluster, partial_rename=True, **filters): \n    return IMPL.volume_include_in_cluster(context, cluster, partial_rename, **filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rule(port, action='ACCEPT', source='net', dest='$FW', proto='tcp'): \n    return {'action': action, 'source': source, 'dest': dest, 'proto': proto, 'dest_port': port}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dotproduct(x, y): \n    return sum(imap(operator.mul, x, y))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_iter(iterable): \n    return hasattr(iterable, '__iter__')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vector_from_matrix(v_as_matrix): \n    return [row[0] for row in v_as_matrix]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def to_iso8601(when): \n    return when.strftime(boto.utils.ISO8601_MS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_run_root(*append): \n    return __get_root(*append)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def security_group_get_all(context): \n    return IMPL.security_group_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def with_metaclasses(metaclasses, *bases): \n    return six.with_metaclass(compose_types(*metaclasses), *bases)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cc(arg): \n    return mcolors.to_rgba(arg, alpha=0.6)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_unique(): \n    with pytest.raises(TypeError): \n      usertypes.enum('Enum', ['item', 'item'])",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def image_volume_cache_include_in_cluster(context, cluster, partial_rename=True, **filters): \n    return IMPL.image_volume_cache_include_in_cluster(context, cluster, partial_rename, **filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def keep_lease_alive(lease): \n    while True: \n      sleep(5) \n      try: \n         lease.HttpNfcLeaseProgress(50) \n         if (lease.state == vim.HttpNfcLease.State.done): \n            return \n      except: \n         return",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def symptom_caching_disabled(): \n    return (not CONF.cache.enabled)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_pyrsistent(obj): \n    return isinstance(obj, (PRecord, PClass, PMap, PSet, PVector))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uri_to_pk(uri): \n    return uri.rstrip('/').split('/')[(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_nodes_full(): \n    return list_items('vms', True, 'Name')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trace(msg, html=False): \n    write(msg, 'TRACE', html)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sync_grains(saltenv='base'): \n    return salt.utils.extmods.sync(__opts__, 'grains', saltenv=saltenv)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_b64jose(data): \n    return b64.b64encode(data).decode('ascii')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def simple_separated_format(separator): \n    return TableFormat(None, None, None, None, headerrow=DataRow(u'', separator, u''), datarow=DataRow(u'', separator, u''), padding=0, with_header_hide=None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_additive_expression_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_latex(expr, **settings): \n    print(latex(expr, **settings))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def use_solver(**kwargs): \n    if ('useUmfpack' in kwargs): \n      globals()['useUmfpack'] = kwargs['useUmfpack']",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def feature_enabled(feature, config): \n    return utils.grep(('^%s=y' % feature), config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def profile_stop(): \n    driver.cuProfilerStop()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_certificates_for_user(username): \n    return [format_certificate_for_user(username, cert) for cert in GeneratedCertificate.eligible_certificates.filter(user__username=username).order_by('course_id')]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def matvec(x): \n    return np.zeros(3)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def require_context(ctxt): \n    if ((not ctxt.is_admin) and (not is_user_context(ctxt))): \n      raise exception.NotAuthorized()",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _sqkey(sq_operator): \n    return sq_operator._sortkey()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_initializable_comment_fields(data, context): \n    _check_fields(get_initializable_comment_fields(context), data, 'This   field   is   not   initializable.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ensure_not_null(obj): \n    if obj.isNull(): \n      raise QtValueError(obj, null=True)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def blend(image1, image2, alpha): \n    return Image.blend(image1, image2, alpha)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CancelApiCalls(): \n    _apphosting_runtime___python__apiproxy.CancelApiCalls()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _find_adapter(registry, ob): \n    for t in _get_mro(getattr(ob, '__class__', type(ob))): \n      if (t in registry): \n         return registry[t]",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _write_file_network(data, filename): \n    with salt.utils.fopen(filename, 'w') as fp_: \n      fp_.write(data)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sql_reset(app, style, connection): \n    return (sql_delete(app, style, connection) + sql_all(app, style, connection))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_associate(context, address, instance_uuid, network_id=None, reserved=False): \n    return IMPL.fixed_ip_associate(context, address, instance_uuid, network_id, reserved)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_clique(graph): \n    return (graph.density == 1.0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_auth(username, password): \n    return ((username == 'admin') and (password == 'secret'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_cased(info, char): \n    return (len(_regex.get_all_cases(info.flags, char)) > 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_get_by_floating_address(context, floating_address): \n    return IMPL.fixed_ip_get_by_floating_address(context, floating_address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_strict_exeggcute(session, media_root): \n    with pytest.raises(ValueError): \n      exeggcute = session.query(tables.PokemonSpecies).filter_by(identifier=u'exeggcute').one() \n      accessor = media.PokemonSpeciesMedia(media_root, exeggcute) \n      accessor.sprite(female=True, strict=True)",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def version(*names, **kwargs): \n    return __salt__['pkg_resource.version'](*names, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_representer(dumper, data): \n    return dumper.represent_str(str(data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def commit(using=None): \n    get_connection(using).commit()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_properties(cls, new_attrs): \n    for (name, value) in new_attrs.items(): \n      if (name.endswith('__get') or name.endswith('__set') or name.endswith('__del')): \n         base = name[:(-5)] \n         if hasattr(cls, base): \n            old_prop = getattr(cls, base) \n            if (not isinstance(old_prop, property)): \n               raise ValueError(('Attribute   %s   is   a   %s,   not   a   property;   function   %s   is   named   like   a   property' % (base, type(old_prop), name))) \n            attrs = {'fget': old_prop.fget, 'fset': old_prop.fset, 'fdel': old_prop.fdel, 'doc': old_prop.__doc__} \n         else: \n            attrs = {} \n         attrs[('f' + name[(-3):])] = value \n         if (name.endswith('__get') and value.__doc__): \n            attrs['doc'] = value.__doc__ \n         new_prop = property(**attrs) \n         setattr(cls, base, new_prop)",
        "line_count": 15,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def assert_has_element_with_path(output, path): \n    if (xml_find(output, path) is None): \n      errmsg = ('Expected   to   find   XML   element   matching   expression   %s,   not   such   match   was   found.' % path) \n      raise AssertionError(errmsg)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_secret(): \n    return file_io.read(constants.SECRET_LOC).rstrip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _options_file_exists(name): \n    return os.path.isfile(os.path.join(_options_dir(name), 'options'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_buffer_changed(default_buffer): \n    buffers[u'RESULT'].text = buffers[DEFAULT_BUFFER].text[::(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_allprop(values, target): \n    for value in values: \n      assert_equal(value, target)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_period_names(locale=LC_TIME): \n    return Locale.parse(locale).periods",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_dist_url(dist): \n    return get_meta_entry(dist, 'Home-page')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def global_settings(request): \n    return {'settings': settings}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def error(msg): \n    sys.stderr.write((('\\nERROR:   ' + msg) + '\\n'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connect_to_cloud_cdn(region=None): \n    return _create_client(ep_name='cdn', region=region)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dedent(): \n    INDENT_STRINGS.pop()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def process_failed(dirName, nzbName, result): \n    if sickrage.srCore.srConfig.USE_FAILED_DOWNLOADS: \n      processor = None \n      try: \n         processor = failed_processor.FailedProcessor(dirName, nzbName) \n         result.result = processor.process() \n         process_fail_message = u'' \n      except FailedPostProcessingFailedException as e: \n         result.result = False \n         process_fail_message = e \n      if processor: \n         result.output += processor.log \n      if (sickrage.srCore.srConfig.DELETE_FAILED and result.result): \n         if delete_folder(dirName, check_empty=False): \n            result.output += logHelper((u'Deleted   folder:   ' + dirName), sickrage.srCore.srLogger.DEBUG) \n      if result.result: \n         result.output += logHelper(((((u'Failed   Download   Processing   succeeded:   (' + str(nzbName)) + u',   ') + dirName) + u')')) \n      else: \n         result.output += logHelper(u'Failed   Download   Processing   failed:   ({},   {}):   {}'.format(nzbName, dirName, process_fail_message), sickrage.srCore.srLogger.WARNING)",
        "line_count": 18,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def beta_from_design(design, min_var=1e-06, max_var=1000000.0): \n    return (1.0 / np.clip(design.var(axis=0), min_var, max_var))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show_tree(repo, tree, decode, outstream=sys.stdout): \n    for n in tree: \n      outstream.write((decode(n) + '\\n'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def hash_file(filename): \n    return (u'ed2k://|file|%s|%d|%s|/' % (os.path.basename(filename), os.path.getsize(filename), hash_filehash(filename).upper()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _from_hass_temperature(temperature): \n    return ((temperature - 154) / 346)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shell_quote(text): \n    return u\"\\\\'\".join(((u\"'%s'\" % p) for p in text.split(u\"'\")))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def checkCell0(tp): \n    for c in range(tp.numberOfCols): \n      assert (tp.getNumSegmentsInCell(c, 0) == 0)",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_edit_mode(request): \n    return bool((could_edit(request) and request.session.get(EDIT_FLAG_NAME)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_command_gosub_bad(p): \n    p[0] = 'INVALID   LINE   NUMBER   IN   GOSUB'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dumps(s, _dumps=json.dumps, cls=None, default_kwargs=_json_extra_kwargs, **kwargs): \n    return _dumps(s, cls=(cls or _default_encoder), **dict(default_kwargs, **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def image_to_scratch(im, scratch_image_name): \n    im.save(scratch_image_name, dpi=(200, 200))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vector_subtract(v, w): \n    return [(v_i - w_i) for (v_i, w_i) in zip(v, w)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_sample(datatype): \n    return SAMPLE_DATA[datatype]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render_markdown_from_file(f): \n    return djblets_markdown.render_markdown_from_file(f, **MARKDOWN_KWARGS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_toktype(p): \n    p[0] = p[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_profilers(**filter_data): \n    return rpc_utils.prepare_for_serialization(models.Profiler.list_objects(filter_data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _parseTCP(factory, port, interface='', backlog=50): \n    return ((int(port), factory), {'interface': interface, 'backlog': int(backlog)})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def urlparse(uri, encoding='utf-8'): \n    return ParseResult.from_string(uri, encoding, strict=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def with_metaclass(meta, *bases): \n    return meta('_NewBase', bases, {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pop_context(): \n    _local.stack.pop()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_marker_param(params): \n    return params.pop('marker', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addPixelTableToPixelTable(fromPixelTable, intoPixelTable): \n    for fromPixelTableKey in fromPixelTable.keys(): \n      intoPixelTable[fromPixelTableKey] = fromPixelTable[fromPixelTableKey]",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_array_pop(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_type_qos_disassociate_all(context, qos_specs_id): \n    return IMPL.volume_type_qos_disassociate_all(context, qos_specs_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete(filename): \n    OggFLAC(filename).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_seeds(): \n    return (rand_number(5, exclude_numbers=(0,)), rand_number(5, exclude_numbers=(0,)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _identity(X): \n    return X",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices((VeraLock(device, VERA_CONTROLLER) for device in VERA_DEVICES['lock']))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_services(profile=None, api_key=None): \n    return salt.utils.pagerduty.list_items('services', 'name', __salt__['config.option'](profile), api_key, opts=__opts__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assertResponseFailed(self, deferred, reasonTypes): \n    return assertWrapperExceptionTypes(self, deferred, ResponseFailed, reasonTypes)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sudo_from_args(command, log_command_filter=identity): \n    return Effect(Sudo.from_args(command, log_command_filter=log_command_filter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def optional(args, key): \n    return (((key in args) and args[key]) or None)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def delete_neutron_ports(ports): \n    for port in ports: \n      device = ip_lib.IPDevice(port) \n      if device.exists(): \n         device.link.delete() \n         LOG.info(_LI('Deleting   port:   %s'), port)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def p_rule(p): \n    p[0] = (p[1], [p[3]])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def linebreaksbr(value): \n    return value.replace('\\n', '<br   />')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_enum_specifier_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _serialize_allocations_for_consumer(allocations): \n    return _allocations_dict(allocations, (lambda x: x.resource_provider.uuid))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MarkFlagAsRequired(flag_name, flag_values=FLAGS): \n    RegisterValidator(flag_name, (lambda value: (value is not None)), message=('Flag   --%s   must   be   specified.' % flag_name), flag_values=flag_values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_profile(): \n    with _profile_lock: \n      merge_profile() \n      return copy.deepcopy(_cumulative_profile)",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hashes_data(step): \n    return [hash_data(hash_) for hash_ in step.hashes]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def function(): \n    return 0",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_public_methods(obj): \n    return [member for member in dir(obj) if ((not member.startswith('_')) and callable(getattr(obj, member)))]",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def solve_lyapunov(a, q): \n    return solve_sylvester(a, a.conj().transpose(), q)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def naive_to_utc(ts): \n    return pd.Timestamp(ts.to_pydatetime(warn=False), tz='UTC')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def islink(p): \n    return _false",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filterControlChars(value): \n    return filterStringValue(value, PRINTABLE_CHAR_REGEX, '   ')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_item(item): \n    for i in range(item.rowCount()): \n      (yield item.child(i))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def echo(session, *args, **kwargs): \n    session.data_out(text=('Echo   returns:   %s' % args))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rcode(expr, assign_to=None, **settings): \n    return RCodePrinter(settings).doprint(expr, assign_to)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def transferPathsToSurroundingLoops(paths, surroundingLoops): \n    for surroundingLoop in surroundingLoops: \n      surroundingLoop.transferPaths(paths)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def reboot(search, one=True, force=False): \n    return _action('reboot', search, one, force)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_classmethod(instancemethod, klass): \n    return (inspect.ismethod(instancemethod) and (instancemethod.__self__ is klass))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def log(x): \n    return T.log(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_mapping(value): \n    return isinstance(value, MappingType)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_groups_markdown(): \n    for (group, group_docs) in get_groups_markdown().items(): \n      file_path = os.path.join(FUNCTION_GROUPS_DIR, ('%s.md' % group)) \n      with open(file_path, 'w') as f: \n         f.write(group_docs)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def gemset_empty(ruby, gemset, runas=None): \n    return _rvm_do(ruby, ['rvm', '--force', 'gemset', 'empty', gemset], runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def poweroff(timeout=5, in_seconds=False): \n    return shutdown(timeout=timeout, in_seconds=in_seconds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def versionFromCommitNo(commitNo): \n    return ('0.0.0-dev%d' % commitNo)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dynamic_string_param(registry, xml_parent, data): \n    dynamic_param_common(registry, xml_parent, data, 'StringParameterDefinition')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def salustowicz_2d(data): \n    return (((((exp((- data[0])) * (data[0] ** 3)) * cos(data[0])) * sin(data[0])) * ((cos(data[0]) * (sin(data[0]) ** 2)) - 1)) * (data[1] - 5))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pretty_choice_dict(d): \n    return pretty_choice_list([('%s=%s' % (k, d[k])) for k in sorted(d.keys())])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def export_course_to_xml(modulestore, contentstore, course_key, root_dir, course_dir): \n    CourseExportManager(modulestore, contentstore, course_key, root_dir, course_dir).export()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def appendAttributes(fromElementNode, toElementNode): \n    for childNode in fromElementNode.childNodes: \n      toElementNode.attributes.update(evaluate.removeIdentifiersFromDictionary(childNode.attributes.copy()))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def osx_hibernate(): \n    osx_standby()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pdf(x, mu, sigma): \n    return ((1 / (sigma * sy.sqrt((2 * sy.pi)))) * sy.exp(((- ((x - mu) ** 2)) / (2 * (sigma ** 2)))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assertIsNotSubdomainOf(testCase, descendant, ancestor): \n    testCase.assertFalse(dns._isSubdomainOf(descendant, ancestor), ('%r   is   a   subdomain   of   %r' % (descendant, ancestor)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mofile(mofile, **kwargs): \n    return _pofile_or_mofile(mofile, 'mofile', **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _has_detached_class_tag(descriptor): \n    return (ACCESS_GRANTED if ('detached' in descriptor._class_tags) else ACCESS_DENIED)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _copy_if_lds(item): \n    return (copy.deepcopy(item) if isinstance(item, (list, dict, set)) else item)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dnsdomain_get_all(context): \n    return IMPL.dnsdomain_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def EscapeShellArgument(s): \n    return ((\"'\" + s.replace(\"'\", \"'\\\\''\")) + \"'\")",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def imfft(X): \n    return fftshift(fft2(X))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def db_version(engine): \n    return migration.db_version(engine)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eq_msg(a, b, msg=None): \n    assert (a == b), ((str(msg) or '') + ('   (%r   !=   %r)' % (a, b)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def substitute(request, node, subs): \n    for child in node.childNodes: \n      if (hasattr(child, 'nodeValue') and child.nodeValue): \n         child.replaceData(0, len(child.nodeValue), (child.nodeValue % subs)) \n      substitute(request, child, subs)",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def attr_lt(accessing_obj, accessed_obj, *args, **kwargs): \n    return attr(accessing_obj, accessed_obj, *args, **{'compare': 'lt'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_index_settings(index): \n    return get_es().indices.get_settings(index=index).get(index, {}).get('settings', {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def block_reduction_b(inputs, scope=None, reuse=None): \n    with slim.arg_scope([slim.conv2d, slim.avg_pool2d, slim.max_pool2d], stride=1, padding='SAME'): \n      with tf.variable_scope(scope, 'BlockReductionB', [inputs], reuse=reuse): \n         with tf.variable_scope('Branch_0'): \n            branch_0 = slim.conv2d(inputs, 192, [1, 1], scope='Conv2d_0a_1x1') \n            branch_0 = slim.conv2d(branch_0, 192, [3, 3], stride=2, padding='VALID', scope='Conv2d_1a_3x3') \n         with tf.variable_scope('Branch_1'): \n            branch_1 = slim.conv2d(inputs, 256, [1, 1], scope='Conv2d_0a_1x1') \n            branch_1 = slim.conv2d(branch_1, 256, [1, 7], scope='Conv2d_0b_1x7') \n            branch_1 = slim.conv2d(branch_1, 320, [7, 1], scope='Conv2d_0c_7x1') \n            branch_1 = slim.conv2d(branch_1, 320, [3, 3], stride=2, padding='VALID', scope='Conv2d_1a_3x3') \n         with tf.variable_scope('Branch_2'): \n            branch_2 = slim.max_pool2d(inputs, [3, 3], stride=2, padding='VALID', scope='MaxPool_1a_3x3') \n         return tf.concat(3, [branch_0, branch_1, branch_2])",
        "line_count": 13,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_versions(consumer, resource_versions): \n    _get_cached_tracker().update_versions(consumer, resource_versions)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mismatch(mismatched, description, details): \n    return _Mismatch(mismatched=mismatched, _description=description, _details=details)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_null_refct_call(bb): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stats_data(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_group_member_delete(context, group_uuid, instance_id): \n    return IMPL.instance_group_member_delete(context, group_uuid, instance_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def body_length(bytearray): \n    return sum((len(_QUOPRI_BODY_MAP[octet]) for octet in bytearray))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def endsInNewline(s): \n    return (s[(- len('\\n')):] == '\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('makeconf' if ('makeconf.get_var' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _api_config(name, output, kwargs): \n    return _api_config_table.get(name, (_api_config_undefined, 2))[0](output, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flat_unique(ls): \n    return list(unique(chain.from_iterable(ls), key=id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def repr_active(h): \n    return u',   '.join((repr_readers(h) + repr_writers(h)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Join(*parts): \n    return '/'.join(parts)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_ansi(string, parser=ANSI_PARSER): \n    return parser.parse_ansi(string, strip_ansi=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sdm_strip(f): \n    return [(monom, coeff) for (monom, coeff) in f if coeff]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def count_newlines(value): \n    return len(newline_re.findall(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def acpi_tables(attrs=None, where=None): \n    return _osquery_cmd(table='acpi_tables', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(): \n    return 'authn'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def config(name, config, write=True): \n    return __salt__['syslog_ng.config'](name, config, write)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def grade(user_input, correct_answer): \n    return DragAndDrop(correct_answer=correct_answer, user_answer=user_input).grade()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def demo_multifeature_template(): \n    postag(templates=[Template(Word([0]), Pos([(-2), (-1)]))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_fitness(genome): \n    return 1",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLMARUBOZU(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLMARUBOZU)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expected(decorator, func): \n    return (decorator(func) if (not hasattr(func, '_api')) else func)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def add_view_permissions(sender, **kwargs): \n    for content_type in ContentType.objects.all(): \n      codename = ('view_%s' % content_type.model) \n      if (not Permission.objects.filter(content_type=content_type, codename=codename)): \n         Permission.objects.create(content_type=content_type, codename=codename, name=('Can   view   %s' % content_type.name))",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_terminal(item): \n    return (hasattr(item, u'__hash__') and (not isinstance(item, Nonterminal)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_relational_expression_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_number(number): \n    return get_i18n().format_number(number)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_multiplicative_expression_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tree(s, token=[WORD, POS, CHUNK, PNP, REL, LEMMA]): \n    return Text(s, token)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode(input, output): \n    while True: \n      s = input.read(MAXBINSIZE) \n      if (not s): \n         break \n      while (len(s) < MAXBINSIZE): \n         ns = input.read((MAXBINSIZE - len(s))) \n         if (not ns): \n            break \n         s += ns \n      line = binascii.b2a_base64(s) \n      output.write(line)",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def pdb_invoke(method, arg): \n    getattr(pdb.Pdb(nosigint=True, readrc=False), method)(arg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_bulk_create(context, ips, want_result=True): \n    return IMPL.floating_ip_bulk_create(context, ips, want_result=want_result)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SequenceToConjunction(node): \n    return ConvertNodes(node, QueryParser.SEQUENCE, QueryParser.CONJUNCTION, 'CONJUNCTION')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_buggy_ua(agent): \n    return ((('Humbug   Desktop/' in agent) or ('Zulip   Desktop/' in agent) or ('ZulipDesktop/' in agent)) and ('Mac' not in agent))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def meet(a, b, pointerType=HYPERNYM): \n    return (intersection(closure(a, pointerType), closure(b, pointerType)) + [None])[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_editable_fields(cc_content, data, context): \n    _check_fields(get_editable_fields(cc_content, context), data, 'This   field   is   not   editable.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def divisibleby(value, arg): \n    return ((int(value) % int(arg)) == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nsdecls(*prefixes): \n    return u'   '.join([(u'xmlns:%s=\"%s\"' % (pfx, nsmap[pfx])) for pfx in prefixes])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def add_codec(charset, codecname): \n    CODEC_MAP[charset] = codecname",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load(*args, **kwargs): \n    return ELF(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_by_domain(domain): \n    BACKEND.set_config_by_domain(domain)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backends(user): \n    return user_backends_data(user, get_helper('AUTHENTICATION_BACKENDS'), get_helper('STORAGE', do_import=True))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getLogger(name): \n    return SphinxLoggerAdapter(logging.getLogger(name), {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def copy_files_matching_pattern(file_path_pattern, dest): \n    for file in glob.glob(file_path_pattern): \n      shutil.copy(file, dest)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_cached_content(location): \n    return CONTENT_CACHE.get(unicode(location).encode('utf-8'), version=STATIC_CONTENT_VERSION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return WhittleRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_clusters(service_instance): \n    return list_objects(service_instance, vim.ClusterComputeResource)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_direct_abstract_declarator_5(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def urldecode(s): \n    return cgi.parse_qsl(s, keep_blank_values=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_allocate_address(context, project_id, pool, auto_assigned=False): \n    return IMPL.floating_ip_allocate_address(context, project_id, pool, auto_assigned)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_update(context, data_dict): \n    return _group_or_org_update(context, data_dict)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_text_or_none(string): \n    return ((string is None) or isinstance(string, string_types))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def generate_aes_iv(key): \n    return md5((key + md5(key).hexdigest())).hexdigest()[:AES.block_size]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPluginsDirectoryPath(): \n    return archive.getSkeinforgePluginsPath('meta_plugins')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _AddEnumValues(descriptor, cls): \n    for enum_type in descriptor.enum_types: \n      setattr(cls, enum_type.name, enum_type_wrapper.EnumTypeWrapper(enum_type)) \n      for enum_value in enum_type.values: \n         setattr(cls, enum_value.name, enum_value.number)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def volume_type_access_get_all(context, type_id): \n    return IMPL.volume_type_access_get_all(context, type_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def curstate(): \n    return _state",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return DrillDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FisherZ(name, d1, d2): \n    return rv(name, FisherZDistribution, (d1, d2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_test(id): \n    models.Test.smart_get(id).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_unpacked_egg(path): \n    return path.lower().endswith('.egg')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove(predicate, seq): \n    return filterfalse(predicate, seq)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rad(degrees): \n    return ((pi * degrees) / 180)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chunks(l, n): \n    return [l[i:(i + n)] for i in range(0, len(l), n)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_basedir(path): \n    return (path[:path.index(os.sep)] if (os.sep in path) else path)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _make_url_query(args): \n    return ('?' + '&'.join((('%s=%s' % (key, args[key])) for key in args)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_cuda_ndarray(obj): \n    return getattr(obj, '__cuda_ndarray__', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_deflate(content): \n    return zlib.compress(content)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_block_ids(payload): \n    if ('data' in payload): \n      for ele in payload['data']: \n         if ('module_id' in ele): \n            ele['block_id'] = UsageKey.from_string(ele['module_id']).block_id",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def can_access_self_blocks(requesting_user, course_key): \n    return ((requesting_user.id and CourseEnrollment.is_enrolled(requesting_user, course_key)) or has_access(requesting_user, CourseStaffRole.ROLE, course_key))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def E_nl(n, l, hw): \n    return ((((2 * n) + l) + Rational(3, 2)) * hw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fake_payment(db, participant, team, timestamp, amount, payday, direction): \n    return insert_fake_data(db, 'payments', timestamp=timestamp, participant=participant, team=team, amount=amount, payday=payday, direction=direction)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_datasource_unframe_protocol(event): \n    assert (event.type in DATASOURCE_TYPE)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def delete_containers(containers, container_client, object_client): \n    for cont in containers: \n      try: \n         params = {'limit': 9999, 'format': 'json'} \n         (resp, objlist) = container_client.list_container_contents(cont, params) \n         for obj in objlist: \n            test_utils.call_and_ignore_notfound_exc(object_client.delete_object, cont, obj['name']) \n         time.sleep(2) \n         container_client.delete_container(cont) \n      except lib_exc.NotFound: \n         pass",
        "line_count": 10,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def getPluginsDirectoryPath(): \n    return archive.getAbsoluteFrozenFolderPath(__file__, 'interpret_plugins')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decorator_from_middleware(middleware_class): \n    return make_middleware_decorator(middleware_class)()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def LogIf(condition, message): \n    if condition: \n      __Log__.debug(message)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def mergedefaults(d1, d2): \n    for k in d2: \n      if ((k in d1) and isinstance(d1[k], dict) and isinstance(d2[k], dict)): \n         mergedefaults(d1[k], d2[k]) \n      else: \n         d1.setdefault(k, d2[k])",
        "line_count": 5,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_discussion_id_map_entry(xblock): \n    return (xblock.discussion_id, {'location': xblock.location, 'title': ((xblock.discussion_category.split('/')[(-1)].strip() + '   /   ') + xblock.discussion_target)})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_iht_sk_estimator(): \n    check_estimator(InstanceHardnessThreshold)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten(urls_list): \n    for url in urls_list: \n      if isinstance(url, dict): \n         (yield url) \n      else: \n         for sub_url in url: \n            (yield sub_url)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def render_purchase_form_html(cart, callback_url=None, extra_data=None): \n    return render_to_string('shoppingcart/cybersource_form.html', {'action': get_purchase_endpoint(), 'params': get_signed_purchase_params(cart, callback_url=callback_url, extra_data=extra_data)})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def erf(x): \n    return (1.0 - erfc(x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_sub_dirs(parent): \n    return [child for child in os.listdir(parent) if os.path.isdir(os.path.join(parent, child))]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def CoefDetermination(ys, res): \n    return (1 - (Var(res) / Var(ys)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_temp_dir(): \n    return TEMP_DIR",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_billed_ops_to_map(billed_ops_dict, billed_ops_list): \n    for billed_op in billed_ops_list: \n      if (billed_op.op() not in billed_ops_dict): \n         update_me = datamodel_pb.BilledOpProto() \n         update_me.set_op(billed_op.op()) \n         update_me.set_num_ops(0) \n         billed_ops_dict[billed_op.op()] = update_me \n      update_me = billed_ops_dict[billed_op.op()] \n      update_me.set_num_ops((update_me.num_ops() + billed_op.num_ops()))",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def input_loop(): \n    while (mestate.exit != True): \n      try: \n         if (mestate.exit != True): \n            line = raw_input(mestate.rl.prompt) \n      except EOFError: \n         mestate.exit = True \n         sys.exit(1) \n      mestate.input_queue.put(line)",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def quota_destroy_by_project(context, project_id): \n    return IMPL.quota_destroy_by_project(context, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isleap(year): \n    return (((year % 4) == 0) and (((year % 100) != 0) or ((year % 400) == 0)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_instantiation_FileLinks(): \n    fls = display.FileLinks('example')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_rdp_jarpath(): \n    return getenv('RDP_JAR_PATH')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sample(expr, condition=None, **kwargs): \n    return next(sample_iter(expr, condition, numsamples=1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __checkIsFinalizedName(filename): \n    if filename.split('/')[2].startswith(_CREATION_HANDLE_PREFIX): \n      raise InvalidFileNameError(('File   %s   should   have   finalized   filename' % filename))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def current_service(request): \n    if request.matched_route: \n      services = request.registry.cornice_services \n      pattern = request.matched_route.pattern \n      try: \n         service = services[pattern] \n      except KeyError: \n         return None \n      else: \n         return service",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def create_exponential_delay_function(base, growth_factor): \n    return functools.partial(delay_exponential, base=base, growth_factor=growth_factor)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getboolean(s): \n    return _default_root.tk.getboolean(s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_ip_filter(ip, options=None): \n    return (is_ipv4_filter(ip, options=options) or is_ipv6_filter(ip, options=options))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def Thing2Str(s, d): \n    return str(s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_all_files(dir_path=theano.__path__[0], pattern='*.py'): \n    with open('theano_filelist.txt', 'a') as f_txt: \n      for (dir, _, files) in os.walk(dir_path): \n         for f in files: \n            if fnmatch(f, pattern): \n               error_num = flake8.main.check_file(os.path.join(dir, f), ignore=ignore) \n               if (error_num > 0): \n                  path = os.path.relpath(os.path.join(dir, f), theano.__path__[0]) \n                  f_txt.write((('\"' + path) + '\",\\n'))",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def register(linter): \n    linter.register_checker(LoggingChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in6_islladdr(str): \n    return in6_isincluded(str, 'fe80::', 10)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unconvert_from_RGB_255(colors): \n    return ((colors[0] / 255.0), (colors[1] / 255.0), (colors[2] / 255.0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sha1_hash_digest(payload): \n    return base64.b64encode(hashlib.sha1(payload).digest())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cmd_list_resources(args, opts): \n    for x in json_get(opts, '')['resources']: \n      print(x)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _shouldRelocateCommand(cmd): \n    return (cmd in _RELOCATABLE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timedelta_as_seconds(td): \n    return ((td.days * 86400) + td.seconds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def first(items): \n    return items[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def message_destroy(context, message_id): \n    return IMPL.message_destroy(context, message_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MakeHistFromDict(d, label=None): \n    return Hist(d, label)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def echo(data=''): \n    return data",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def example_exc_handler(tries_remaining, exception, delay): \n    print >>sys.stderr, (\"Caught   '%s',   %d   tries   remaining,   sleeping   for   %s   seconds\" % (exception, tries_remaining, delay))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vm_cputime(vm_=None): \n    with _get_xapi_session() as xapi: \n      def _info(vm_): \n         host_rec = _get_record_by_label(xapi, 'VM', vm_) \n         host_cpus = len(host_rec['host_CPUs']) \n         if (host_rec is False): \n            return False \n         host_metrics = _get_metrics_record(xapi, 'VM', host_rec) \n         vcpus = int(host_metrics['VCPUs_number']) \n         cputime = int(host_metrics['VCPUs_utilisation']['0']) \n         cputime_percent = 0 \n         if cputime: \n            cputime_percent = (((1e-07 * cputime) / host_cpus) / vcpus) \n         return {'cputime': int(cputime), 'cputime_percent': int('{0:.0f}'.format(cputime_percent))} \n      info = {} \n      if vm_: \n         info[vm_] = _info(vm_) \n         return info \n      for vm_ in list_domains(): \n         info[vm_] = _info(vm_) \n      return info",
        "line_count": 20,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _keys_equal(x, y): \n    return (x.lower() == y.lower())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_extra_header(header_key, header_value): \n    browser._browser.addheaders += [(header_key, header_value)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_metadata(headers): \n    return dict(((k, v) for (k, v) in headers.iteritems() if any((k.lower().startswith(valid) for valid in _GCS_METADATA))))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_lighting_value(label): \n    return _check_range_and_return('lighting', label, (-1), 5, (-1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dmp_one(u, K): \n    return dmp_ground(K.one, u)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def redirect(path, code=303): \n    raise HTTPRedirect(path, int(code))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def finished(ignored): \n    reactor.stop()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_file(file_path): \n    return (file_path in _db_content.get('files'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def conda_creator(env_name, pkgs): \n    subprocess.call(('conda   create   --yes   -n   %s   %s' % (env_name, pkgs)), shell=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _system_compute_nrhs(b): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getreader(encoding): \n    return lookup(encoding).streamreader",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return JitterRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cross_entropy(input, target, weight=None, size_average=True): \n    return nll_loss(log_softmax(input), target, weight, size_average)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPluginsDirectoryPath(): \n    return archive.getAnalyzePluginsDirectoryPath('export_canvas_plugins')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def complete_parameter(text): \n    return rline_mpstate.mav_param.keys()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _run_handlers(): \n    for (_ident, (func, args, kwargs, ctx)) in sorted(_handlers.items(), reverse=True): \n      try: \n         with context.local(): \n            context.clear() \n            context.update(**ctx) \n            func(*args, **kwargs) \n      except SystemExit: \n         pass \n      except Exception: \n         (typ, val, tb) = sys.exc_info() \n         traceback.print_exception(typ, val, tb.tb_next)",
        "line_count": 11,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def delete(filename): \n    with open(filename, 'rb+') as file_: \n      try: \n         del IFFFile(file_)[u'ID3'] \n      except KeyError: \n         pass",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def clean_session(): \n    if os.path.exists(SESSION_FILE): \n      os.remove(SESSION_FILE)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def memory(since=0.0): \n    return (_VmB('VmSize:') - since)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_float_matrix(fid, rows, cols): \n    return _unpack_matrix(fid, rows, cols, dtype='>f4', out_dtype=np.float32)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _sub_space(m): \n    return ('   ' * (m.end() - m.start()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_datetime(value): \n    return (epoch + timedelta(seconds=value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_dict_to_cookiejar(cj, cookie_dict): \n    return cookiejar_from_dict(cookie_dict, cj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_string(s, width=70): \n    print('\\n'.join(textwrap.wrap(s, width=width)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encoder_type(encode): \n    return {'0': '', '1': 'shikata_ga_nai', '2': '', '3': 'MULTIENCODE', '4': 'BACKDOOR'}.get(encode, 'ERROR')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_version(): \n    return version.get_version()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def copyfile(source, dest): \n    if ((not path.exists(dest)) or (not filecmp.cmp(source, dest))): \n      shutil.copyfile(source, dest) \n      try: \n         copytimes(source, dest) \n      except OSError: \n         pass",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _has_method(arg, method): \n    return (hasattr(arg, method) and callable(getattr(arg, method)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_np_rng(rng_or_seed=None, default_seed=None, which_method=None): \n    return make_rng(rng_or_seed, default_seed, which_method, numpy.random.RandomState)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('lvs_service' if ('lvs.get_rules' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def service_create(context, values): \n    return IMPL.service_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_alias(tbl): \n    return u''.join(([l for l in tbl if l.isupper()] or [l for (l, prev) in zip(tbl, (u'_' + tbl)) if ((prev == u'_') and (l != u'_'))]))",
        "line_count": 1,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def ParseResponse(response, *args, **kwds): \n    return _ParseFileEx(response, response.geturl(), *args, **kwds)[1:]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eglGetError(): \n    return _lib.eglGetError()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_queue_by_name(name): \n    for queue in settings.CELERY_QUEUES: \n      if (queue.name == name): \n         return queue",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def assert_is(expr1, expr2, msg=None): \n    assert_true((expr2 is expr2), msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_channel_access(channel=14, access_update_mode='non_volatile', alerting=False, per_msg_auth=False, user_level_auth=False, access_mode='always', privilege_update_mode='non_volatile', privilege_level='administrator', **kwargs): \n    with _IpmiCommand(**kwargs) as s: \n      return s.set_channel_access(channel, access_update_mode, alerting, per_msg_auth, user_level_auth, access_mode, privilege_update_mode, privilege_level)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_duplicate_emails(): \n    return get_user_model().objects.hide_meta().values('email').annotate(Count('email')).filter(email__count__gt=1).values_list('email', flat=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _has_instructor_access_to_descriptor(user, descriptor, course_key): \n    return _has_instructor_access_to_location(user, descriptor.location, course_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear(): \n    logs_buffer().clear()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dedent(s, n=4, sep=u'\\n'): \n    return sep.join((dedent_initial(l) for l in s.splitlines()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def download_subtitles(subtitles, pool_class=ProviderPool, **kwargs): \n    with pool_class(**kwargs) as pool: \n      for subtitle in subtitles: \n         logger.info('Downloading   subtitle   %r', subtitle) \n         pool.download_subtitle(subtitle)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _get_conf_tpls(image_name, kube_annotations=None, kube_pod_name=None, kube_container_name=None): \n    return [(x, y) for (x, y) in copy.deepcopy(TestServiceDiscovery.mock_templates.get(image_name)[0])]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_user_model_name(): \n    return getattr(settings, u'AUTH_USER_MODEL', u'auth.User')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text, repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def extract_context(): \n    for frame in inspect.stack(): \n      arguments = frame[0].f_code.co_varnames \n      if (not arguments): \n         continue \n      self_argument = arguments[0] \n      if (not (self_argument in frame[0].f_locals)): \n         continue \n      instance = frame[0].f_locals[self_argument] \n      if (hasattr(instance, 'context') and isinstance(instance.context, PluginContext)): \n         return instance.context",
        "line_count": 10,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def decryptMessage(key, message): \n    return translateMessage(key, message, 'decrypt')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_snapshot_update(context, group_snapshot_id, values): \n    return IMPL.group_snapshot_update(context, group_snapshot_id, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_class_update(context, class_name, resource, limit): \n    return IMPL.quota_class_update(context, class_name, resource, limit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mntd(distmat): \n    return masked_array(distmat, eye(distmat.shape[0])).min(0).mean()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_sentences(amount, start_with_lorem=False): \n    return _GENERATOR.generate_sentences(amount, start_with_lorem)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_youtube_available(): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_rollbacks(): \n    return _get_client().get_rollbacks()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def object_copy(self, CopySource, ExtraArgs=None, Callback=None, SourceClient=None, Config=None): \n    return self.meta.client.copy(CopySource=CopySource, Bucket=self.bucket_name, Key=self.key, ExtraArgs=ExtraArgs, Callback=Callback, SourceClient=SourceClient, Config=Config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def extract_from_file(method, filename, keywords=DEFAULT_KEYWORDS, comment_tags=(), options=None, strip_comment_tags=False): \n    with open(filename, 'rb') as fileobj: \n      return list(extract(method, fileobj, keywords, comment_tags, options, strip_comment_tags))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_mac(mac): \n    return bool(re.match((('^' + '[\\\\:\\\\-]'.join((['([0-9a-f]{2})'] * 6))) + '$'), mac.lower()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def track_for_id(track_id): \n    for plugin in find_plugins(): \n      track = plugin.track_for_id(track_id) \n      if track: \n         (yield track)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def PolygonCollection(mode='raw', *args, **kwargs): \n    return RawPolygonCollection(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assign(obj, **kwargs): \n    obj.__dict__.update(kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def regions(): \n    return get_regions('ses', connection_cls=SESConnection)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def python(command='python'): \n    return REPLWrapper(command, u'>>>   ', u'import   sys;   sys.ps1={0!r};   sys.ps2={1!r}')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_minc(): \n    return (Info.version() is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_fontext_synonyms(fontext): \n    return {u'ttf': (u'ttf', u'otf'), u'otf': (u'ttf', u'otf'), u'afm': (u'afm',)}[fontext]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Check(test, msg='', error_code=datastore_pb.Error.BAD_REQUEST): \n    if (not test): \n      raise apiproxy_errors.ApplicationError(error_code, msg)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def relu(x): \n    return T.maximum(0.0, x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ping_ponger(connection, event): \n    connection.pong(event.target)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _has_beta(version, dev_releases): \n    return (version in [re.search('(\\\\d+\\\\.)+\\\\d+', s).group(0) for s in dev_releases.keys()])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def eq_(a, b, msg=None): \n    if (not (a == b)): \n      raise AssertionError((msg or ('%r   !=   %r' % (a, b))))",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def sigma_skip(p): \n    return C_skip",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def edit(sheet): \n    open_with_editor(path(sheet))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ttylog_write(logfile, length, direction, stamp, data=None): \n    with open(logfile, 'ab') as f: \n      (sec, usec) = (int(stamp), int((1000000 * (stamp - int(stamp))))) \n      f.write(struct.pack('<iLiiLL', 3, 0, length, direction, sec, usec)) \n      f.write(data)",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def t_newline(t): \n    t.lineno += t.value.count('\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def contenttype(): \n    return random.choice(('image/jpeg', 'text/html', 'audio/aiff', 'video/avi', 'text/plain', 'application/msword', 'application/x-gzip', 'application/javascript'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def notify_user(user, msg, **kwargs): \n    Notification.objects.create(recipient=user, subject=msg, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___delattr__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fetch_page(base_url, page, session): \n    return session.get((base_url + '?page={}'.format(page))).json()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Dot(): \n    return Leaf(token.DOT, '.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def try_run(obj, names): \n    for name in names: \n      func = getattr(obj, name, None) \n      if (func is not None): \n         if (type(obj) == types.ModuleType): \n            if isinstance(func, types.FunctionType): \n               (args, varargs, varkw, defaults) = inspect.getargspec(func) \n            else: \n               if (hasattr(func, '__call__') and (not inspect.ismethod(func))): \n                  func = func.__call__ \n               try: \n                  (args, varargs, varkw, defaults) = inspect.getargspec(func) \n                  args.pop(0) \n               except TypeError: \n                  raise TypeError(('Attribute   %s   of   %r   is   not   a   python   function.   Only   functions   or   callables   may   be   used   as   fixtures.' % (name, obj))) \n            if len(args): \n               log.debug('call   fixture   %s.%s(%s)', obj, name, obj) \n               return func(obj) \n         log.debug('call   fixture   %s.%s', obj, name) \n         return func()",
        "line_count": 19,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def replace_jump_to_id_urls(course_id, jump_to_id_base_url, block, view, frag, context): \n    return wrap_fragment(frag, static_replace.replace_jump_to_id_urls(frag.content, course_id, jump_to_id_base_url))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def event_return(events): \n    with _get_serv(events, commit=True) as cur: \n      for event in events: \n         tag = event.get('tag', '') \n         data = event.get('data', '') \n         sql = 'INSERT   INTO   `salt_events`   (`tag`,   `data`,   `master_id`   )\\n                                                               VALUES   (%s,   %s,   %s)' \n         cur.execute(sql, (tag, json.dumps(data), __opts__['id']))",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def clean_raw_line(raw_line, blacklist=DEFAULT_BLACKLIST): \n    return re.sub('|'.join(blacklist), '', raw_line)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def edns_to_text(flags): \n    return _to_text(flags, _edns_by_value, _edns_flags_order)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dynamic_choice_scriptler_param(registry, xml_parent, data): \n    dynamic_scriptler_param_common(registry, xml_parent, data, 'ScriptlerChoiceParameterDefinition')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_logging(loglevel=logging.DEBUG, loggers=[u'kombu.connection', u'kombu.channel']): \n    for logger in loggers: \n      l = get_logger(logger) \n      l.addHandler(logging.StreamHandler()) \n      l.setLevel(loglevel)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def largest(interface, instance): \n    return _superlative(interface, 1)(instance)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return MillRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _IsSudsIterable(obj): \n    return (obj and (not isinstance(obj, basestring)) and hasattr(obj, '__iter__'))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def ipaddrs(): \n    return __proxy__['napalm.call']('get_interfaces_ip', **{})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lstrip(s, chars=None): \n    return s.lstrip(chars)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def net_connections(kind='inet'): \n    return _psplatform.net_connections(kind)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, *args, **kwargs): \n    return DES3Cipher(key, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def t_instdef_spam_BITS(t): \n    return t",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def schaffer_mo(individual): \n    return ((individual[0] ** 2), ((individual[0] - 2) ** 2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLHIKKAKE(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLHIKKAKE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def include(d, e): \n    return (d, [f for f in glob.glob(('%s/%s' % (d, e))) if os.path.isfile(f)])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_client_error(status): \n    return ((400 <= status) and (status <= 499))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def version(pretty=False, best=False): \n    return _distro.version(pretty, best)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_threading_args(parser): \n    parser.add_argument(u'--threads', u'-T', default=DEFAULT_N_THREADS, type=int, help=u'Number   of   simultaneous   threads   to   execute')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def false(*args, **kwargs): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def path_exists_glob(path): \n    return (True if glob.glob(os.path.expanduser(path)) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def quota_usage_update(context, project_id, user_id, resource, **kwargs): \n    return IMPL.quota_usage_update(context, project_id, user_id, resource, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_tounicode(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Compilable(filename): \n    return any((filename.endswith(e) for e in COMPILABLE_EXTENSIONS))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _linear_func(t, y, a): \n    return a.dot(y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def regions(): \n    return get_regions('elasticloadbalancing', connection_cls=ELBConnection)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_statements_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isgenerator(object): \n    return isinstance(object, types.GeneratorType)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ConvertAtomTimestampToEpoch(timestamp): \n    return time.mktime(time.strptime(timestamp, '%Y-%m-%dT%H:%M:%S.000Z'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def copula_bv_indep(u, v): \n    return (u * v)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pylong_join(count, digits_ptr='digits', join_type='unsigned   long'): \n    return (('(' * (count * 2)) + '   |   '.join((('(%s)%s[%d])%s)' % (join_type, digits_ptr, _i, ('   <<   PyLong_SHIFT' if _i else ''))) for _i in range((count - 1), (-1), (-1)))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def write_info_refs(refs, store): \n    for (name, sha) in sorted(refs.items()): \n      if (name == 'HEAD'): \n         continue \n      try: \n         o = store[sha] \n      except KeyError: \n         continue \n      peeled = store.peel_sha(sha) \n      (yield (((o.id + ' DCTB ') + name) + '\\n')) \n      if (o.id != peeled.id): \n         (yield ((((peeled.id + ' DCTB ') + name) + ANNOTATED_TAG_SUFFIX) + '\\n'))",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def getNewRepository(): \n    return MetaRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ensure_port_cleanup(bound_addresses, maxtries=30, sleeptime=2): \n    atexit.register(_cleanup_ports, bound_addresses, maxtries=maxtries, sleeptime=sleeptime)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_PATH(): \n    return os.getenv('PATH')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stream_as_text(stream): \n    for data in stream: \n      if (not isinstance(data, six.text_type)): \n         data = data.decode(u'utf-8', u'replace') \n      (yield data)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getNewRepository(): \n    return PolyfileRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text='', repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def redact(string): \n    return global_redaction_engine.redact(string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def synchronous_switch_listener(dbapi_conn, connection_rec): \n    dbapi_conn.execute('PRAGMA   synchronous   =   OFF')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strconvert(d): \n    return dict([(str(k), v) for (k, v) in d.iteritems()])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _coord_byval(coord): \n    return c_long(((coord.Y * 65536) | (coord.X & 65535)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RANDOMIZE(v): \n    context.defaults['randomize'] = asbool(v)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_builtin(msg_type_name): \n    return (msg_type_name in BUILTIN_TYPES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_loc_files(file_creator): \n    file_creator.remove_all()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_partition(G, partition): \n    return all(((sum(((1 if (v in c) else 0) for c in partition)) == 1) for v in G))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _sort_keys_by_values(p): \n    return sorted((pn for pn in p if p[pn]), key=(lambda pn: p[pn]))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def execvp(file, args): \n    _execvpe(file, args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def directLoopLists(isWiddershins, loopLists): \n    for loopList in loopLists: \n      directLoops(isWiddershins, loopList)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _GetActivationURL(user, secret): \n    return 'https://www.google.com/chart?chs=200x200&chld=M|0&cht=qr&chl=otpauth://totp/{0}@www.{1}%3Fsecret%3D{2}'.format(user, options.options.domain, secret)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subscription_name_from_path(path, project): \n    return _name_from_project_path(path, project, _SUBSCRIPTION_TEMPLATE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_png_depth(filename): \n    with open(filename, 'rb') as f: \n      f.seek((- (LEN_IEND + LEN_DEPTH)), 2) \n      depthchunk = f.read(LEN_DEPTH) \n      if (not depthchunk.startswith((DEPTH_CHUNK_LEN + DEPTH_CHUNK_START))): \n         return None \n      else: \n         return struct.unpack('!i', depthchunk[14:18])[0]",
        "line_count": 7,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _daily_qs_for(model_cls): \n    return model_cls.objects.filter(created__gte=date(2011, 1, 1), creator__is_active=1).extra(select={'day': 'extract(   day   from   created   )', 'month': 'extract(   month   from   created   )', 'year': 'extract(   year   from   created   )'}).values('year', 'month', 'day').annotate(count=Count('created'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_fqdn(fqdn): \n    return (re.match('^[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$', fqdn) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cooperate(iterator): \n    return _theCooperator.cooperate(iterator)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def transfer_destroy(context, transfer_id): \n    return IMPL.transfer_destroy(context, transfer_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeRst(prefix, section, app, exampleByIdentifier, schema_store): \n    for route in sorted(getRoutes(app)): \n      if route.attributes.get('private_api', False): \n         continue \n      data = _introspectRoute(route, exampleByIdentifier, schema_store) \n      if (data['section'] != section): \n         continue \n      for method in route.methods: \n         if (data['header'] is not None): \n            (yield data['header']) \n            (yield ('-' * len(data['header']))) \n            (yield '') \n         body = _formatRouteBody(data, schema_store) \n         for line in http_directive(method, (prefix + route.path), body): \n            (yield line)",
        "line_count": 14,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def randi(N): \n    return int(uniform(0, N))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_not_nat(builder, val): \n    return builder.icmp(lc.ICMP_NE, val, NAT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rosstack_depends_1(s): \n    return rosstackexec(['depends1', s]).split()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_assertion(name, result, expected): \n    assert (result == expected), ('Expected   %s,   got   %s   for   %s' % (expected, result, name))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_all(): \n    return _get_svc_list('')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def length_lte(value, arg): \n    return (len(value) <= int(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_chassis_location(host=None, admin_username=None, admin_password=None): \n    return system_info(host=host, admin_username=admin_username, admin_password=admin_password)['Chassis   Information']['Chassis   Location']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onGlobalData(key, value): \n    DEBUG_MSG(('onGlobalData:   %s' % key))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_dnf(expr): \n    return _is_form(expr, Or, And)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_method_selection_message(version, method): \n    return struct.pack('!BB', version, method)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_sentinel_object(): \n    return Other3()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _accessible_libraries_list(user): \n    return [lib for lib in modulestore().get_libraries() if has_studio_read_access(user, lib.location.library_key)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def skipUnlessDBFeature(feature): \n    return _deferredSkip((lambda : (not getattr(connection.features, feature))), (\"Database   doesn't   support   feature   %s\" % feature))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lt(a, b): \n    return (a < b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _clear_context(): \n    for key in list(__context__): \n      try: \n         if (key.startswith('systemd._systemctl_status.') or (key in ('systemd.systemd_services',))): \n            __context__.pop(key) \n      except AttributeError: \n         continue",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def purge(name=None, pkgs=None, **kwargs): \n    return _uninstall(action='purge', name=name, pkgs=pkgs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookupMailGroup(name, timeout=None): \n    return getResolver().lookupMailGroup(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO_mode(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lte(value, arg): \n    return (value <= int(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ensure_data_root(environ=None): \n    ensure_directory(data_root(environ=environ))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def name_for_valid_number(numobj, lang, script=None, region=None): \n    return _prefix_description_for_number(CARRIER_DATA, CARRIER_LONGEST_PREFIX, numobj, lang, script, region)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lower(s): \n    return s.lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_comment_too_deep(parent): \n    return ((MAX_COMMENT_DEPTH is not None) and ((MAX_COMMENT_DEPTH < 0) or (parent and (parent['depth'] >= MAX_COMMENT_DEPTH))))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def format_user_and_project_subscriptions(user): \n    return [{'node': {'id': user._id, 'title': 'Default   Notification   Settings', 'help': (('These   are   default   settings   for   new   projects   you   create   ' + 'or   are   added   to.   Modifying   these   settings   will   not   ') + 'modify   settings   on   existing   projects.')}, 'kind': 'heading', 'children': format_user_subscriptions(user)}, {'node': {'id': '', 'title': 'Project   Notifications', 'help': ('These   are   settings   for   each   of   your   projects.   Modifying   ' + 'these   settings   will   only   modify   the   settings   for   the   selected   project.')}, 'kind': 'heading', 'children': format_data(user, get_configured_projects(user))}]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_machine_project(): \n    return get_metadata_path('project/project-id')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_sync(): \n    return get_var('SYNC')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_create(context, values, group_snapshot_id=None, group_id=None): \n    return IMPL.group_create(context, values, group_snapshot_id, group_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetCrypter(secret): \n    return GetSecretsManagerForSecret(secret).GetCrypter(secret)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cell_get_all(context): \n    return IMPL.cell_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_virtio_blk(device_path): \n    return device_path.basename().startswith('vd')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def migrate_consistencygroups_to_groups(context, max_count, force=False): \n    return IMPL.migrate_consistencygroups_to_groups(context, max_count, force)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _xml_oneliner_re_from_tab_width(tab_width): \n    return re.compile(('\\n                        (?:\\n                                    (?<=\\\\n\\\\n)                     #   Starting   after   a   blank   line\\n                                    |                                             #   or\\n                                    \\\\A\\\\n?                                 #   the   beginning   of   the   doc\\n                        )\\n                        (                                                                                 #   save   in   $1\\n                                    [   ]{0,%d}\\n                                    (?:\\n                                                <\\\\?\\\\w+\\\\b\\\\s+.*?\\\\?>         #   XML   processing   instruction\\n                                                |\\n                                                <\\\\w+:\\\\w+\\\\b\\\\s+.*?/>      #   namespaced   single   tag\\n                                    )\\n                                    [   \\\\t]*\\n                                    (?=\\\\n{2,}|\\\\Z)                     #   followed   by   a   blank   line   or   end   of   document\\n                        )\\n                        ' % (tab_width - 1)), re.X)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decrypt(encrypted): \n    return _decrypt(encrypted, g.tracking_secret)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_small_stmt(p): \n    p[0] = p[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_datadir(store): \n    store.sql('CREATE   TABLE   abe_tmp_datadir   AS   SELECT   *   FROM   datadir')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_single(doctype): \n    return get_doc(doctype, doctype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_handler(path, *args, **kwargs): \n    return import_string(path)(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_accumulator_filepath(): \n    return os.path.join(salt.utils.get_accumulator_dir(__opts__['cachedir']), __instance_id__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dbserialize(data): \n    return do_pickle(to_pickle(data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_components(page, item_type, items, is_advanced_problem=False): \n    for item in items: \n      add_component(page, item_type, item, is_advanced_problem)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sh(cmd): \n    return subprocess.check_call(cmd, shell=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_safe(word): \n    return re.sub('[^A-Za-z0-9\\\\-]', '_', word)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize(str): \n    return whitespace.sub('   ', str).strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lsmod(addr_space): \n    for m in tasks.get_kdbg(addr_space).modules(): \n      (yield m)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def PPO(ds, count, fastperiod=(- (2 ** 31)), slowperiod=(- (2 ** 31)), matype=0): \n    return call_talib_with_ds(ds, count, talib.PPO, fastperiod, slowperiod, matype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def longest_cmp(a, b): \n    return cmp(len(a), len(b))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _prep_input(kwargs): \n    for kwarg in ('environment', 'lxc_conf'): \n      kwarg_value = kwargs.get(kwarg) \n      if ((kwarg_value is not None) and (not isinstance(kwarg_value, six.string_types))): \n         err = 'Invalid   {0}   configuration.   See   the   documentation   for   proper   usage.'.format(kwarg) \n         if salt.utils.is_dictlist(kwarg_value): \n            new_kwarg_value = salt.utils.repack_dictlist(kwarg_value) \n            if (not kwarg_value): \n               raise SaltInvocationError(err) \n            kwargs[kwarg] = new_kwarg_value \n         if (not isinstance(kwargs[kwarg], dict)): \n            raise SaltInvocationError(err)",
        "line_count": 11,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def test_multiplication(): \n    assert ((2 * 2) == 4)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def import_module(name, deprecated=False): \n    with _ignore_deprecated_imports(deprecated): \n      try: \n         return importlib.import_module(name) \n      except ImportError as msg: \n         raise unittest.SkipTest(str(msg))",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def mapall(funcs, seq): \n    for func in funcs: \n      for elem in seq: \n         (yield func(elem))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def time(days=0, seconds=0, minutes=0, hours=0, **kwargs): \n    return Time(days=days, seconds=seconds, minutes=minutes, hours=hours, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gcs_post_request(url): \n    return requests.request('POST', url, verify=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_payment_handler(request, order_form, order): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fetch_github_activity(gen, metadata): \n    if (u'GITHUB_ACTIVITY_FEED' in gen.settings.keys()): \n      gen.context[u'github_activity'] = gen.plugin_instance.fetch()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_available(recommended=False, restart=False): \n    return _get_available(recommended, restart)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def central_server_down_or_error(error_msg): \n    if error_msg: \n      from kalite.version import user_agent \n      if (requests.get(settings.CENTRAL_SERVER_URL, headers={'user-agent': user_agent()}).status_code != 200): \n         return {'error_msg': _('Central   Server   is   not   reachable;   please   try   again   after   some   time.')} \n      else: \n         return {'error_msg': error_msg}",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def default_zone(): \n    return __firewall_cmd('--get-default-zone')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def norm(n, mean=0.0, stdev=1.0): \n    return [gauss(mean, stdev) for i in xrange(n)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def parallax(): \n    return [(si.arcsecond, astrophys.parsec, (lambda x: (1.0 / x)))]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text, repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read(file): \n    return Parser(file).read()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_hardware(): \n    with open(os.devnull, 'w') as devnull: \n      return check_output(['lshw', '-quiet', '-json'], stderr=devnull)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jsonc_to_string(jsonc_obj): \n    return simplejson.dumps(_convert_to_object(jsonc_obj))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def geom_index(func): \n    return geom_output(func, [GEOM_PTR, c_int])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def detect(stream): \n    return detect_wrapper(stream, delimiter=DELIMITER)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_named_nodes(graph): \n    return _get_named_nodes(graph, {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_image_url(image_ref): \n    return ('%s/images/%s' % (generate_glance_url(), image_ref))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_message_from_model(message_model): \n    return feedback_domain.FeedbackMessage(message_model.id, message_model.thread_id, message_model.message_id, message_model.author_id, message_model.updated_status, message_model.updated_subject, message_model.text, message_model.created_on, message_model.last_updated)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def errorInFile(f, line=17, name=''): \n    return ('%s:%d:%s' % (f, line, name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_monitor_timeout(scheme=None): \n    return _get_powercfg_minute_values(scheme, 'SUB_VIDEO', 'VIDEOIDLE', 'Turn   off   display   after')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def contract_creation_exceptions(): \n    return {sa.Column: ['networksegments.name', 'networksegments.standard_attr_id']}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chisquare(f_obs, f_exp=None, ddof=0, axis=0): \n    return power_divergence(f_obs, f_exp=f_exp, ddof=ddof, axis=axis, lambda_='pearson')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_get_by_host(context, host): \n    return IMPL.fixed_ip_get_by_host(context, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eval(x): \n    return to_dense(x).eval()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _calculate_image_filename(instance, filename): \n    return os.path.join(settings.ANNOUNCEMENTS_PHOTO_DIR, (str(uuid.uuid4()) + '.jpg'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_users_with_role(role_prefix): \n    return User.objects.filter(groups__name__startswith=role_prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tag_list(): \n    return list(reversed(for_each_ref_basename(u'refs/tags')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def broadcast_arrays(*args): \n    return broadcast(*args).values",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def slugify(value): \n    return django_slugify(unidecode((value or '')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def unexpected_error_msg(error): \n    return ('Unexpected   response:   (%s).   Detail:   %s' % (str(error), traceback.format_exc(error)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TimestampISO8601(t): \n    return time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime(t))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def equateZ(point, returnValue): \n    point.z = returnValue",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_py_state_ptr(context, builder): \n    return get_state_ptr(context, builder, 'py')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inject_create_tags(event_name, class_attributes, **kwargs): \n    class_attributes['create_tags'] = create_tags",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_attribute_statement(identity): \n    return saml.AttributeStatement(attribute=do_attributes(identity))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ro(object): \n    return mergeOrderings([_flatten(object)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_get_all_by_filters(context, filters, sort_key='created_at', sort_dir='desc', limit=None, marker=None, columns_to_join=None): \n    return IMPL.instance_get_all_by_filters(context, filters, sort_key, sort_dir, limit=limit, marker=marker, columns_to_join=columns_to_join)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def keyring_purge(**kwargs): \n    return ceph_cfg.keyring_purge(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mimetype(): \n    return Rebulk().rules(Mimetype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _clear_ignore_list(lst): \n    return [_clear_ignore(ele) for ele in lst]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __virtual__(): \n    return (HAS_KEYSTONE and HAS_GLANCE)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_rfill_simple(): \n    assert_equals(strings.rfill('ab', 10, '-'), 'ab--------')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _skip_answer_ratelimit(request): \n    return (('delete_images' in request.POST) or ('upload_image' in request.POST))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def MEDPRICE(barDs, count): \n    return call_talib_with_hl(barDs, count, talib.MEDPRICE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attach_translations(addons): \n    attach_trans_dict(Webapp, addons)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rect_to_tuple(rect): \n    return (rect.x(), rect.y(), rect.width(), rect.height())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable_root_login(sshd_config='/etc/ssh/sshd_config'): \n    _update_ssh_setting(sshd_config, 'PermitRootLogin', 'yes')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def autoassign(self, locals): \n    for (key, value) in locals.iteritems(): \n      if (key == 'self'): \n         continue \n      setattr(self, key, value)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_message_id(): \n    return u'<{unique}@{site}>'.format(site=frappe.local.site, unique=email.utils.make_msgid(random_string(10)).split(u'@')[0].split(u'<')[1])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DiscreteUniform(name, items): \n    return rv(name, DiscreteUniformDistribution, *items)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_backend(): \n    return sys.modules[__name__]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sdm_monomial_divides(A, B): \n    return ((A[0] == B[0]) and all(((a <= b) for (a, b) in zip(A[1:], B[1:]))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def mean_grad(x, beta): \n    return x",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def console_auth_token_destroy_all_by_instance(context, instance_uuid): \n    return IMPL.console_auth_token_destroy_all_by_instance(context, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_path(name, scheme=_get_default_scheme(), vars=None, expand=True): \n    return get_paths(scheme, vars, expand)[name]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _devpath(dev): \n    return os.path.join('/dev', _devbase(dev))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_time_override(override_time=datetime.datetime.utcnow()): \n    utcnow.override_time = override_time",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def axify(expr, axis, keepdims=False): \n    return type(expr)(expr._child, axis=axis, keepdims=keepdims)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _normalize_proj(info): \n    _make_projector(info['projs'], info.get('ch_names', info.get('names')), info['bads'], include_active=True, inplace=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def docstrings_disabled(): \n    return (docstrings_disabled.__doc__ is None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def was_active(reference_date_value, asset): \n    return (asset.start_date.value <= reference_date_value <= asset.end_date.value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sort_mapping_by_size(cluster_mapping): \n    return sorted(cluster_mapping.keys(), cmp=(lambda a, b: cmp(len(a), len(b))), key=(lambda k: cluster_mapping[k]), reverse=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_attached_volume(dataset_id, mountpoint, maximum_size=None, metadata=pmap()): \n    return AttachedVolume(manifestation=Manifestation(dataset=Dataset(dataset_id=dataset_id, maximum_size=maximum_size, metadata=metadata), primary=True), mountpoint=FilePath(mountpoint))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def abs__file__(): \n    for m in sys.modules.values(): \n      if ((_is_jython and (not isinstance(m, ModuleType))) or hasattr(m, '__loader__')): \n         continue \n      f = getattr(m, '__file__', None) \n      if (f is None): \n         continue \n      m.__file__ = os.path.abspath(f)",
        "line_count": 7,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def hobj(symb, width): \n    return ''.join(xobj(symb, width))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetSecret(secret): \n    return GetSecretsManagerForSecret(secret).GetSecret(secret)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def htons(integer): \n    return ntohs(integer)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _print_keys(query): \n    for row in query: \n      print_(((u'   ' * 2) + row['key']))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def user_is_system_admin(user_db): \n    return user_has_role(user_db=user_db, role=SystemRole.SYSTEM_ADMIN)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return CoolRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_filename_excluded_for_bad_patterns_check(pattern, filename): \n    return (any((filename.startswith(bad_pattern) for bad_pattern in BAD_PATTERNS[pattern]['excluded_dirs'])) or (filename in BAD_PATTERNS[pattern]['excluded_files']))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def addXIntersectionsFromLoops(loops, xIntersections, y): \n    for loop in loops: \n      addXIntersections(loop, xIntersections, y)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def threshold(image, selem, out=None, mask=None, shift_x=False, shift_y=False): \n    return _apply_scalar_per_pixel(generic_cy._threshold, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=SmartyLexer(), buf_class=SmartyBuffer, import_handler_class=None, cile_driver_class=SmartyCILEDriver, is_cpln_lang=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def umount(unmount_target): \n    check_output(['umount', unmount_target.path])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def export_set(dataset): \n    return json.dumps(dataset.dict)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gemset_copy(source, destination, runas=None): \n    return _rvm(['gemset', 'copy', source, destination], runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _lstsq_solution(b, bcpy, n): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compat_patch_logging_config(logging_config): \n    if ('filters' not in logging_config.get('handlers', {}).get('mail_admins', {'filters': []})): \n      warnings.warn(\"You   have   no   filters   defined   on   the   'mail_admins'   logging   handler:   adding   implicit   debug-false-only   filter.   See   http://docs.djangoproject.com/en/dev/releases/1.4/#request-exceptions-are-now-always-logged\", PendingDeprecationWarning) \n      filter_name = 'require_debug_false' \n      filters = logging_config.setdefault('filters', {}) \n      while (filter_name in filters): \n         filter_name = (filter_name + '_') \n      filters[filter_name] = {'()': 'django.utils.log.RequireDebugFalse'} \n      logging_config['handlers']['mail_admins']['filters'] = [filter_name]",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def floating_ip_fixed_ip_associate(context, floating_address, fixed_address, host): \n    return IMPL.floating_ip_fixed_ip_associate(context, floating_address, fixed_address, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def utcnow(): \n    return _factory.utcnow()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def String(string, prefix=None): \n    return Leaf(token.STRING, string, prefix=prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def provide(callback, resource_type): \n    _get_manager().register(callback, resource_type)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_cache(alias): \n    return caches[alias]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _encode_minkey(name, dummy0, dummy1, dummy2): \n    return ('\\xff' + name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_key_id(vault, name, version=None): \n    return create_object_id('keys', vault, name, version)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eval_once(saver, summary_writer, top_k_op, summary_op): \n    with tf.Session() as sess: \n      ckpt = tf.train.get_checkpoint_state(FLAGS.checkpoint_dir) \n      if (ckpt and ckpt.model_checkpoint_path): \n         saver.restore(sess, ckpt.model_checkpoint_path) \n         global_step = ckpt.model_checkpoint_path.split('/')[(-1)].split('-')[(-1)] \n      else: \n         print('No   checkpoint   file   found') \n         return \n      coord = tf.train.Coordinator() \n      try: \n         threads = [] \n         for qr in tf.get_collection(tf.GraphKeys.QUEUE_RUNNERS): \n            threads.extend(qr.create_threads(sess, coord=coord, daemon=True, start=True)) \n         num_iter = int(math.ceil((FLAGS.num_examples / FLAGS.batch_size))) \n         true_count = 0 \n         total_sample_count = (num_iter * FLAGS.batch_size) \n         step = 0 \n         while ((step < num_iter) and (not coord.should_stop())): \n            predictions = sess.run([top_k_op]) \n            true_count += np.sum(predictions) \n            step += 1 \n         precision = (true_count / total_sample_count) \n         print(('%s:   precision   @   1   =   %.3f' % (datetime.now(), precision))) \n         summary = tf.Summary() \n         summary.ParseFromString(sess.run(summary_op)) \n         summary.value.add(tag='Precision   @   1', simple_value=precision) \n         summary_writer.add_summary(summary, global_step) \n      except Exception as e: \n         coord.request_stop(e) \n      coord.request_stop() \n      coord.join(threads, stop_grace_period_secs=10)",
        "line_count": 31,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def shuffle(arr): \n    for i in range(0, len(arr)): \n      r = randint(0, i) \n      (arr[i], arr[r]) = (arr[r], arr[i])",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def delete_instance(model, *instance_or_pk): \n    cache.delete_many([instance_key(model, x) for x in instance_or_pk])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def load_compatibility(filename): \n    with open(filename, 'rb') as file_handle: \n      unpickler = ZipNumpyUnpickler(filename, file_handle=file_handle) \n      try: \n         obj = unpickler.load() \n      except UnicodeDecodeError as exc: \n         if PY3_OR_LATER: \n            new_exc = ValueError('You   may   be   trying   to   read   with   python   3   a   joblib   pickle   generated   with   python   2.   This   feature   is   not   supported   by   joblib.') \n            new_exc.__cause__ = exc \n            raise new_exc \n      finally: \n         if hasattr(unpickler, 'file_handle'): \n            unpickler.file_handle.close() \n      return obj",
        "line_count": 13,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def training_event(): \n    return s3db.hrm_training_event_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _serialize_agent(controlamp): \n    return str(controlamp.transport.getPeer())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def body_quopri_check(c): \n    return bool(bqre.match(c))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_yahoo_historical_ochl(fh, adjusted=True, asobject=False): \n    return _parse_yahoo_historical(fh, adjusted=adjusted, asobject=asobject, ochl=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_pyflakes_installed(): \n    return programs.is_module_installed('pyflakes', PYFLAKES_REQVER)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def item_entity(): \n    return s3db.supply_item_entity_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user_exists(keystone, user): \n    return (user in [x.name for x in keystone.users.list()])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_reverse_o2o(field): \n    return (field.is_relation and field.one_to_one and (not field.concrete))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def doctree_resolved(app, doctree, docname): \n    for node in doctree.traverse(nodes.target): \n      if node.get('refid', '').startswith('sec-'): \n         section = node.parent \n         section['ids'].append(node['refid']) \n         node['refid'] = ('-' + node['refid'])",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def instance_get_all_hung_in_rebooting(context, reboot_window): \n    return IMPL.instance_get_all_hung_in_rebooting(context, reboot_window)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_compound_statement_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return (('npm' if ('npm.list' in __salt__) else False), \"'npm'   binary   not   found   on   system\")",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_string_module(project, code, resource=None, force_errors=False): \n    return pyobjectsdef.PyModule(project.pycore, code, resource, force_errors=force_errors)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unlink_all(rc_object): \n    for kind in ALL_FOUR: \n      os.unlink(getattr(rc_object, kind))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _check_for_cores(): \n    return (len(__salt__['config.option']('solr.cores')) > 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def failed(seg): \n    return ((seg._marked is False) and (seg._uploaded is False))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _chunks(l, n): \n    for i in range(0, len(l), n): \n      (yield l[i:(i + n)])",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def disable(name, **kwargs): \n    return _rcconf_status(name, 'NO')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fix_ampersands(value): \n    return unencoded_ampersands_re.sub('&amp;', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def verify_config(args): \n    with open(os.devnull, 'w') as devnull: \n      try: \n         subprocess.check_call([args.apache_ctl, '-d', args.server_root, '-f', args.config_file, '-t'], stdout=devnull, stderr=subprocess.STDOUT) \n      except OSError: \n         sys.exit(_NO_APACHECTL) \n      except subprocess.CalledProcessError: \n         sys.exit('Syntax   check   from   apachectl   failed')",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def mapk(actual, predicted, k=10): \n    return np.mean([apk(a, p, k) for (a, p) in zip(actual, predicted)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _to_bytes(msg): \n    return _to_bytes_impl(msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return suop.HAS_PYRAX",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addFileHandler(path): \n    addHandler(logging.FileHandler(path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _community_email(body, kind): \n    Email.handler.add_to_queue(c.user, g.community_email, g.domain, g.community_email, kind, body=body)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def does_file_exist(path): \n    return os.path.isfile(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getFirstWordFromLine(line): \n    return getFirstWord(line.split())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_binary_name(): \n    return os.path.basename(sys.argv[0])[:16].replace('   ', '_')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def take(n, iterable): \n    return islice(iterable, n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def div_roundup(a, b): \n    return (((int(a) + int(b)) - 1) // int(b))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_acme_error(err): \n    return ((ERROR_PREFIX in str(err)) or (OLD_ERROR_PREFIX in str(err)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def teardown_module(): \n    reload(db_replicator)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def kivy_usage(): \n    print (kivy_usage.__doc__ % basename(sys.argv[0]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uses_mysql(connection): \n    return (u'mysql' in connection.settings_dict[u'ENGINE'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_user(): \n    return _store.user",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_file_name(type, test, platform=None): \n    return ('_'.join((get_platform_string(platform), type.__module__, get_class_name(type), test)) + '.log')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _keypair_get_count_by_user(*args, **kwargs): \n    return objects.KeyPairList.get_count_by_user(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inspect_stack(): \n    return {'co_name': inspect.stack()[1][3]}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cumprod(x, axis=None): \n    return CumOp(axis=axis, mode='mul')(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pathname2url(pathname): \n    return urllib.quote(('///' + pathname.translate(__slash_dot)), '/$:')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def null_image(): \n    return QImage()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def recursive_filelisting(base_directories): \n    for base_directory in base_directories: \n      for (root, _, files) in os.walk(base_directory): \n         for leaffile in files: \n            (yield os.path.join(root, leaffile))",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def indicator(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def time_label(seconds, decimal=0, is_long=False): \n    return _get_label(TIME_UNITS, seconds, decimal, is_long)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def detect_format(stream): \n    for fmt in formats.available: \n      try: \n         if fmt.detect(stream): \n            return fmt.title \n      except AttributeError: \n         pass",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def volume_type_get(context, id, inactive=False, expected_fields=None): \n    return IMPL.volume_type_get(context, id, inactive, expected_fields)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_rule_empty(p): \n    p[0] = (p[1], [[]])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_report_data(year, quarter): \n    if (ct._check_input(year, quarter) is True): \n      ct._write_head() \n      df = _get_report_data(year, quarter, 1, pd.DataFrame()) \n      if (df is not None): \n         df['code'] = df['code'].map((lambda x: str(x).zfill(6))) \n      return df",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def remove_event_handler(name, func): \n    for e in list(_events.get(name, [])): \n      if (e.func is func): \n         _events[name].remove(e)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def glob(pathname): \n    return sorted(list(iglob(pathname)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apply_overwrites_to_context(context, overwrite_context): \n    for (variable, overwrite) in overwrite_context.items(): \n      if (variable not in context): \n         continue \n      context_value = context[variable] \n      if isinstance(context_value, list): \n         if (overwrite in context_value): \n            context_value.remove(overwrite) \n            context_value.insert(0, overwrite) \n      else: \n         context[variable] = overwrite",
        "line_count": 10,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def validate(*matrices): \n    for i in range((len(matrices) - 1)): \n      (A, B) = matrices[i:(i + 2)] \n      if (A.cols != B.rows): \n         raise ShapeError(('Matrices   %s   and   %s   are   not   aligned' % (A, B)))",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def logpow(x, m): \n    return tt.switch(tt.eq(x, 0), (- np.inf), (m * tt.log(x)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or __virtualname__), ('xml_rpc', 'user', 'password'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def tstd_dlldy(y, df): \n    return ((((- (df + 1)) / (df - 2.0)) / (1 + ((y ** 2) / (df - 2.0)))) * y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_type_specifier(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _log_wishart_norm(degrees_of_freedom, log_det_precisions_chol, n_features): \n    return (- (((degrees_of_freedom * log_det_precisions_chol) + (((degrees_of_freedom * n_features) * 0.5) * math.log(2.0))) + np.sum(gammaln((0.5 * (degrees_of_freedom - np.arange(n_features)[:, np.newaxis]))), 0)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def partition_by(inputs, attribute): \n    return group_by(inputs, (lambda x: x[0][attribute]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in6_isaddrllallservers(str): \n    return (inet_pton(socket.AF_INET6, 'ff02::2') == inet_pton(socket.AF_INET6, str))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_test_results_dir(env=None): \n    return os.path.join(get_ros_home(env), 'test_results')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ksubsets(superset, k): \n    return combinations(superset, k)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def suffix_replace(original, old, new): \n    return (original[:(- len(old))] + new)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_statement_assign_2(t): \n    names[t[1]] = t[3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getRound(value): \n    return round(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cumdims_label(chunks, const): \n    return [tuple(zip(((const,) * (1 + len(bds))), accumulate(add, ((0,) + bds)))) for bds in chunks]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ofs_nbits(start, end): \n    return ((start << 6) + (end - start))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def recommend_for_user(user): \n    return recommend_for_brands(brandsfor.get(user, set()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unload_metadefs(): \n    return get_backend().db_unload_metadefs(engine=db_api.get_engine())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generator(gen): \n    return GeneratorOp(gen)()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def htonl(n): \n    return struct.pack('!I', n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('pkg.mod_repo' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def local_response_normalization(x, n=5, k=2, alpha=0.0001, beta=0.75): \n    return LocalResponseNormalization(n, k, alpha, beta)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _volume_get(context, volume_id): \n    return TEST_VOLUME[int(volume_id.replace('-', ''))]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show_conf(conf_file=default_conf): \n    return _parse_conf(conf_file)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def grad_sum(x, y, z): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def discrete_attributes(domain): \n    return [attr for attr in (domain.variables + domain.metas) if attr.is_discrete]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def cast(conf, *args, **kwargs): \n    _multi_send(_cast, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ynp_zeros(n, nt): \n    return jnyn_zeros(n, nt)[3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def epsilon(): \n    return _EPSILON",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip(input_string, chars=seps): \n    return input_string.strip(chars)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_duplicates(l): \n    return (len(set(l)) < len(l))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_all_white(line): \n    return (re.match('^\\\\s*$', line) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def camel_case_to_spaces(value): \n    return re_camel_case.sub('   \\\\1', value).strip().lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_template(template): \n    template['annotated_body'] = html4annotation(template['annotated_body'], template['url'], proxy_resources=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _organize_states_for_delete(base_mapper, states, uowtransaction): \n    for (state, dict_, mapper, connection) in _connections_for_states(base_mapper, uowtransaction, states): \n      mapper.dispatch.before_delete(mapper, connection, state) \n      if (mapper.version_id_col is not None): \n         update_version_id = mapper._get_committed_state_attr_by_column(state, dict_, mapper.version_id_col) \n      else: \n         update_version_id = None \n      (yield (state, dict_, mapper, connection, update_version_id))",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def dump_neigh_entries(ip_version, device=None, namespace=None, **kwargs): \n    return list(privileged.dump_neigh_entries(ip_version, device, namespace, **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([FoscamCamera(config)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _parse_openssh_output(lines): \n    for line in lines: \n      if line.startswith('#'): \n         continue \n      try: \n         (hostname, enc, key) = line.split() \n      except ValueError: \n         continue \n      fingerprint = _fingerprint(key) \n      if (not fingerprint): \n         continue \n      (yield {'hostname': hostname, 'key': key, 'enc': enc, 'fingerprint': fingerprint})",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([ZigBeeLight(hass, ZigBeeDigitalOutConfig(config))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetLevel(): \n    return _Level",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_collection_summary(collection_id): \n    collection_models.CollectionSummaryModel.get(collection_id).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_option_w_unset(pyi_builder): \n    pyi_builder.test_source(\"\\n                        import   sys\\n                        assert   'ignore'   not   in   sys.warnoptions\\n                        \")",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_and_write_file(json_file_path, csv_file_path, column_names): \n    with open(csv_file_path, 'wb+') as fout: \n      csv_file = csv.writer(fout) \n      csv_file.writerow(list(column_names)) \n      with open(json_file_path) as fin: \n         for line in fin: \n            line_contents = json.loads(line) \n            csv_file.writerow(get_row(line_contents, column_names))",
        "line_count": 7,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _get_active_config_key(app_version): \n    return db.Key.from_path(CONFIG_KIND, ('%s/%s' % (app_version, ACTIVE_KEY_NAME)), namespace=NAMESPACE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return (salt.utils.which_bin(['udevadm']) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _parse_codec_options(options): \n    return CodecOptions(document_class=options.get('document_class', DEFAULT_CODEC_OPTIONS.document_class), tz_aware=options.get('tz_aware', DEFAULT_CODEC_OPTIONS.tz_aware), uuid_representation=options.get('uuidrepresentation', DEFAULT_CODEC_OPTIONS.uuid_representation), unicode_decode_error_handler=options.get('unicode_decode_error_handler', DEFAULT_CODEC_OPTIONS.unicode_decode_error_handler), tzinfo=options.get('tzinfo', DEFAULT_CODEC_OPTIONS.tzinfo))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(filename): \n    with open(filename) as f: \n      parser = ASDLParser() \n      return parser.parse(f.read())",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape_md(text): \n    return md_chars_matcher.sub('\\\\\\\\\\\\1', text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_loop(): \n    while True: \n      while (not Message.objects.all()): \n         logging.debug((u'sleeping   for   %s   seconds   before   checking   queue   again' % EMPTY_QUEUE_SLEEP)) \n         time.sleep(EMPTY_QUEUE_SLEEP) \n      send_all()",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def migrate(cr, version): \n    migrate_from_audittrail(cr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def okayAboveSpawn(level, pos): \n    return (not any([level.blockAt(pos[0], (pos[1] + i), pos[2]) for i in range(1, 4)]))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def logger_name_from_path(path): \n    return _name_from_project_path(path, None, _LOGGER_TEMPLATE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_(uri, value): \n    return salt.utils.sdb.sdb_set(uri, value, __opts__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def installed(version=oracle_jdk.DEFAULT_VERSION): \n    if (oracle_jdk.version() != version): \n      oracle_jdk.install_from_oracle_site(version)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def version(): \n    return _nodetool('version')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in6_isaddrllallnodes(str): \n    return (inet_pton(socket.AF_INET6, 'ff02::1') == inet_pton(socket.AF_INET6, str))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_local_backup_file(local_file): \n    if (not remove(local_file)): \n      logging.warning(\"No   local   backup   file   '{0}'   to   delete.   Skipping...\".format(local_file))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def system_parallel(commands, timeout=None, ignore_status=False): \n    return [bg_jobs.exit_status for bg_jobs in run_parallel(commands, timeout=timeout, ignore_status=ignore_status, stdout_tee=TEE_TO_LOGS, stderr_tee=TEE_TO_LOGS)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_symmetric_and_hollow(matrix): \n    return ((matrix.T == matrix).all() and (trace(matrix) == 0))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def scite(exe=u'scite'): \n    install_editor((exe + u'   {filename}   -goto:{line}'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def id_srand(n): \n    return _id.id_srand(n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def consume(iterator): \n    deque(iterator, maxlen=0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _bool_from_json(value, field): \n    if _not_null(value, field): \n      return (value.lower() in ['t', 'true', '1'])",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def isend(var, dest, tag): \n    return MPISend(dest, tag)(var)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def circle_perimeter_aa(r, c, radius, shape=None): \n    return _circle_perimeter_aa(r, c, radius, shape)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def square(width, dtype=np.uint8): \n    return np.ones((width, width), dtype=dtype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def f(x): \n    return (x * np.sin(x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encrypt_password(password): \n    return base64.b64encode(encrypt(password))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_overload_method_template(typ, attr, overload_func): \n    return make_overload_attribute_template(typ, attr, overload_func, base=_OverloadMethodTemplate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_task_successful(request, task_id): \n    return JsonResponse({u'task': {u'id': task_id, u'executed': AsyncResult(task_id).successful()}})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_executable(exe): \n    return (os.path.isfile(exe) and os.access(exe, os.X_OK))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def changeToPyImportType(path): \n    return ntpath.splitext(path)[0].strip('/').replace('/', '.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def HandleRequestDirectly(request, client_address): \n    BaseHTTPServer.HTTPServer.process_request(HttpServer(), request, client_address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_minus_sign_symbol(locale=LC_NUMERIC): \n    return Locale.parse(locale).number_symbols.get('minusSign', u'-')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cgsnapshot_update(context, cgsnapshot_id, values): \n    return IMPL.cgsnapshot_update(context, cgsnapshot_id, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_fs_tasks(): \n    return (([(Paths, [SelectDependencies(PathsExpansion, PathGlobs, field_types=(PathWildcard, PathDirWildcard, PathRoot), transitive=True)], finalize_path_expansion), (PathsExpansion, [Select(PathRoot)], apply_path_root), (PathsExpansion, [SelectProjection(DirectoryListing, Dir, (u'canonical_stat',), PathWildcard), Select(PathWildcard)], apply_path_wildcard), (PathsExpansion, [SelectProjection(Dirs, Paths, (u'paths',), FilteredPaths), Select(PathDirWildcard)], apply_path_dir_wildcard), (FilteredPaths, [SelectProjection(DirectoryListing, Dir, (u'canonical_stat',), PathDirWildcard), Select(PathDirWildcard)], filter_paths)] + [(Dirs, [Select(Paths), SelectDependencies(Dirs, Paths, field=u'link_stats', field_types=(Link,))], resolve_dir_links), (Files, [Select(Paths), SelectDependencies(Files, Paths, field=u'link_stats', field_types=(Link,))], resolve_file_links), (Dirs, [SelectProjection(Dirs, PathGlobs, (u'path_globs',), ReadLink)], resolve_link), (Files, [SelectProjection(Files, PathGlobs, (u'path_globs',), ReadLink)], resolve_link)]) + [(FilesContent, [Select(Files), SelectDependencies(FileContent, Files, field=u'stats', field_types=(File,))], files_content), (FilesDigest, [Select(Files), SelectDependencies(FileDigest, Files, field=u'stats', field_types=(File,))], files_digest)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def b64decode(value, *args, **kwargs): \n    return decode(base64.b64decode(value), *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_bytestring_tuple(*x): \n    return tuple(imap(to_bytestring, x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tanh(x, use_cudnn=True): \n    return Tanh(use_cudnn)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getShouldReverse(elementNode, prefix): \n    return evaluate.getEvaluatedBoolean(True, elementNode, (prefix + 'reverse'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subnets6(): \n    return _subnets('inet6')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or __virtualname__), ('url',))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read_raw_artemis123(input_fname, preload=False, verbose=None): \n    return RawArtemis123(input_fname, preload=preload, verbose=verbose)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_mac(): \n    return (platform.system() == 'Darwin')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_monthly(): \n    for report in frappe.get_all(u'Auto   Email   Report', {u'enabled': 1, u'frequency': u'Monthly'}): \n      frappe.get_doc(u'Auto   Email   Report', report.name).send()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def tensorinv(a, ind=2): \n    return TensorInv(ind)(a)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_to_grayscale(imlist): \n    for imname in imlist: \n      im = Image.open(imname).convert('L') \n      im.save(imname)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def emit_options(options): \n    return ','.join((('%s=%s' % (k, v)) for (k, v) in options.items()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _get_children_as(parent, tag, construct): \n    return [construct(child) for child in parent.findall(_ns(tag))]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def toplevel_wrapper(*args, **kwargs): \n    return ndb.toplevel(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tb_lineno(tb): \n    return tb.tb_lineno",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _default_ret(name): \n    return {'name': name, 'result': False, 'changes': {}, 'comment': ''}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getaddrinfo(host, port, family=0, socktype=0, proto=0, flags=0): \n    return get_hub().resolver.getaddrinfo(host, port, family, socktype, proto, flags)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def initialize(cli): \n    cli.register('building-command-table.cloudformation', inject_commands)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def homogeneity_score(labels_true, labels_pred): \n    return homogeneity_completeness_v_measure(labels_true, labels_pred)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_definition_type(p): \n    p[0] = p[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_expression_opt_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attrsetter(attr, value): \n    return (lambda method: (setattr(method, attr, value) or method))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def not_the_same(user, other_user): \n    return (user['id'] != other_user['id'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_kernel_context(): \n    return _kernel_context",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cache(tex_root, name, generate): \n    return cache_local(tex_root, name, generate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_precision_matrix(precision, covariance_type): \n    if (not (np.allclose(precision, precision.T) and np.all((linalg.eigvalsh(precision) > 0.0)))): \n      raise ValueError((\"'%s   precision'   should   be   symmetric,   positive-definite\" % covariance_type))",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def asynchronous(function, *args, **kwargs): \n    return AsynchronousRequest(function, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(reactor, jid, secret): \n    return Client(reactor, JID(jid), secret).finished",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def url_argument_spec(): \n    return dict(url=dict(), force=dict(default='no', aliases=['thirsty'], type='bool'), http_agent=dict(default='ansible-httpget'), use_proxy=dict(default='yes', type='bool'), validate_certs=dict(default='yes', type='bool'), url_username=dict(required=False), url_password=dict(required=False), force_basic_auth=dict(required=False, type='bool', default='no'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def testfunction(self): \n    return self",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mangle_args_c(argtys): \n    return ''.join([mangle_type_c(t) for t in argtys])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _get_queue_arguments(conf): \n    return ({'x-ha-policy': 'all'} if conf.rabbit_ha_queues else {})",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def search_player_tag(key=None, category=None): \n    return PlayerDB.objects.get_by_tag(key=key, category=category)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ScrubItem(dict, item_name): \n    if (item_name in dict): \n      dict[item_name] = ('...scrubbed   %s   bytes...' % len(dict[item_name]))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def mattrgetter(*attrs): \n    return (lambda obj: {attr: getattr(obj, attr, None) for attr in attrs})",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def generate_youtube_embed(video_id): \n    return render_to_string('wikiparser/hook_youtube_embed.html', {'video_id': video_id})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ntToPosixSlashes(filepath): \n    return filepath.replace('\\\\', '/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def case_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def monitor_del_global(sock, name): \n    return communicate(sock, ('__del_global__(\"%s\")' % name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_best_match(class1, class2, format_classes): \n    return ((class1 is class2) or (issubclass(class1, class2) and (class1 not in {cls for (fmt, cls) in format_classes})))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def group_type_access_remove(context, type_id, project_id): \n    return IMPL.group_type_access_remove(context, type_id, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rand_text_alpha_lower(length, bad=''): \n    return rand_base(length, bad, set(lowerAlpha))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___hash__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def partition_is(dev): \n    return ceph_cfg.partition_is(dev)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_exit(actions): \n    for action_group in actions: \n      if (len(action_group.destroy) > 0): \n         raise SystemExit(1)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def disable(level): \n    root.manager.disable = level",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_entry_point(dist, group, name): \n    return get_distribution(dist).load_entry_point(group, name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_vocabulary(vocabulary_path, data_path, max_vocabulary_size, tokenizer=None, normalize_digits=True): \n    if (not gfile.Exists(vocabulary_path)): \n      print(('Creating   vocabulary   %s   from   data   %s' % (vocabulary_path, data_path))) \n      vocab = {} \n      with gfile.GFile(data_path, mode='rb') as f: \n         counter = 0 \n         for line in f: \n            counter += 1 \n            if ((counter % 100000) == 0): \n               print(('      processing   line   %d' % counter)) \n            line = tf.compat.as_bytes(line) \n            tokens = (tokenizer(line) if tokenizer else basic_tokenizer(line)) \n            for w in tokens: \n               word = (_DIGIT_RE.sub('0', w) if normalize_digits else w) \n               if (word in vocab): \n                  vocab[word] += 1 \n               else: \n                  vocab[word] = 1 \n         vocab_list = (_START_VOCAB + sorted(vocab, key=vocab.get, reverse=True)) \n         if (len(vocab_list) > max_vocabulary_size): \n            vocab_list = vocab_list[:max_vocabulary_size] \n         with gfile.GFile(vocabulary_path, mode='wb') as vocab_file: \n            for w in vocab_list: \n               vocab_file.write((w + '\\n'))",
        "line_count": 23,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def _raise_if(predicate, *args): \n    if predicate: \n      raise InvalidChunk(*args)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def monomial_mul(A, B): \n    return tuple([(a + b) for (a, b) in zip(A, B)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_base_type(name): \n    return PyObject._get_base_type(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def environment(): \n    return __proxy__['napalm.call']('get_environment', **{})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_ipv6(ipv6): \n    return netaddr.valid_ipv6(ipv6)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bindir_def(*args): \n    return os.path.join('$bindir', *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def policy_key(location): \n    return u'{cat}/{name}'.format(cat=location.category, name=location.name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plugin(): \n    return BracketRemove",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shape(x): \n    return tf.shape(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def queue_get_for(context, topic, host): \n    return (('%s.%s' % (topic, host)) if host else topic)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _check_thicknesses(surfs): \n    for (surf_1, surf_2) in zip(surfs[:(-1)], surfs[1:]): \n      min_dist = _compute_nearest(surf_1['rr'], surf_2['rr'], return_dists=True)[0] \n      min_dist = min_dist.min() \n      logger.info(('Checking   distance   between   %s   and   %s   surfaces...' % (_surf_name[surf_1['id']], _surf_name[surf_2['id']]))) \n      logger.info(('Minimum   distance   between   the   %s   and   %s   surfaces   is   approximately   %6.1f   mm' % (_surf_name[surf_1['id']], _surf_name[surf_2['id']], (1000 * min_dist))))",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def translate_longopt(opt): \n    return string.translate(opt, longopt_xlate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete(url, **kwargs): \n    return request('delete', url, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def splitdrive(p): \n    return ('', p)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_not_(a, b, msg=None): \n    assert (a is not b), (msg or ('%r   is   %r' % (a, b)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fake_is_vim_object(arg, module): \n    return isinstance(module, fake.FakeVim)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_themes(v=False): \n    for (t, l) in themes(): \n      if (not v): \n         t = os.path.basename(t) \n      if l: \n         if v: \n            print((t + ((u'   (symbolic   link   to   `' + l) + u\"')\"))) \n         else: \n            print((t + u'@')) \n      else: \n         print(t)",
        "line_count": 10,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_kernel(): \n    return ('python%s' % sys.version_info.major)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def comment_form_target(): \n    return comments.get_form_target()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_graph(): \n    with tf.gfile.FastGFile(os.path.join(FLAGS.model_dir, 'classify_image_graph_def.pb'), 'rb') as f: \n      graph_def = tf.GraphDef() \n      graph_def.ParseFromString(f.read()) \n      _ = tf.import_graph_def(graph_def, name='')",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def repeat_elements(x, rep, axis): \n    return T.repeat(x, rep, axis=axis)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def url_path(url): \n    return urlparse.urlsplit(url).path",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def split(pattern, string, maxsplit=0, flags=0): \n    return _compile(pattern, flags).split(string, maxsplit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def interactive(): \n    with tf.Session() as sess: \n      (model, _, _, _, _, _) = initialize(sess) \n      sys.stdout.write('Input   to   Neural   GPU,   e.g.,   0   1.   Use   -1   for   PAD.\\n') \n      sys.stdout.write('>   ') \n      sys.stdout.flush() \n      inpt = sys.stdin.readline() \n      while inpt: \n         ids = [data.to_id(s) for s in inpt.strip().split()] \n         (inpt, target) = data.get_batch(len(ids), 1, False, '', preset=(ids, [0 for _ in ids])) \n         (_, res, _, _) = model.step(sess, inpt, target, False) \n         res = [np.argmax(o, axis=1) for o in res] \n         res = [o for o in res[:len(ids)] if (o > 0)] \n         print ('      ' + '   '.join([data.to_symbol(output[0]) for output in res])) \n         sys.stdout.write('>   ') \n         sys.stdout.flush() \n         inpt = sys.stdin.readline()",
        "line_count": 16,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def test_ast_bad_raise(): \n    cant_compile(u'(raise   Exception   Exception)')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def time_format(value, format=None): \n    return dateformat.time_format(value, get_format((format or 'TIME_FORMAT')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def rec_test(sequence, test_func): \n    for x in sequence: \n      if isinstance(x, (list, tuple)): \n         for y in rec_test(x, test_func): \n            (yield y) \n      else: \n         (yield test_func(x))",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_users(profile='pagerduty', subdomain=None, api_key=None): \n    return _list_items('users', 'id', profile=profile, subdomain=subdomain, api_key=api_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_iris(): \n    return np.load(load_data_file('iris/iris.npz', force_download='2014-09-04'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_email_when_changes_email(old_email, new_email): \n    send_email(to=old_email, action=USER_CHANGE_EMAIL, subject=MAILS[USER_CHANGE_EMAIL]['subject'], html=MAILS[USER_CHANGE_EMAIL]['message'].format(email=old_email, new_email=new_email))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def downcaseTokens(s, l, t): \n    return [tt.lower() for tt in map(_ustr, t)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __virtual__(): \n    return 'nagios_rpc'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quad_explain(output=sys.stdout): \n    output.write(quad.__doc__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_join(*args): \n    return fs_encode(join(*[(x if (type(x) == unicode) else decode(x)) for x in args]))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def select_filters(filters, level): \n    return [f for f in filters if ((f.max_debug_level is None) or (cmp_debug_levels(level, f.max_debug_level) <= 0))]",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def sub(a, b): \n    return (a - b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ip_addrs6(interface=None, include_loopback=False): \n    return salt.utils.network.ip_addrs6(interface=interface, include_loopback=include_loopback)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trace(operator): \n    return lo.LinOp(lo.TRACE, (1, 1), [operator], None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_loader_type(loader_type, provider_factory): \n    _provider_factories[loader_type] = provider_factory",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_npz(filename, obj): \n    with numpy.load(filename) as f: \n      d = NpzDeserializer(f) \n      d.load(obj)",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hello3(): \n    return dict(message='Hello   World')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def activate(csr_file, certificate_id, web_server_type, approver_email=None, http_dc_validation=False, **kwargs): \n    return __get_certificates('namecheap.ssl.activate', 'SSLActivateResult', csr_file, certificate_id, web_server_type, approver_email, http_dc_validation, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _gpg(): \n    return salt.utils.which('gpg')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _Same(tool, name, setting_type): \n    _Renamed(tool, name, name, setting_type)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getDefaultProfilePath(): \n    return os.path.join(getBasePath(), 'current_profile.ini')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ssh_wrapper(opts, functions=None, context=None): \n    return LazyLoader(_module_dirs(opts, 'wrapper', base_path=os.path.join(SALT_BASE_PATH, os.path.join('client', 'ssh'))), opts, tag='wrapper', pack={'__salt__': functions, '__grains__': opts.get('grains', {}), '__pillar__': opts.get('pillar', {}), '__context__': context})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mattrgetter(*attrs): \n    return (lambda obj: dict(((attr, getattr(obj, attr, None)) for attr in attrs)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def deprecated_xblocks(): \n    return XBlockConfiguration.objects.current_set().filter(deprecated=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def request_user_input(prompt='>   '): \n    return raw_input(prompt)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def html_unescape(text): \n    return xml.sax.saxutils.unescape(text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hw_addr(iface): \n    return salt.utils.network.hw_addr(iface)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___doc__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wait(name, **kwargs): \n    return {'name': name, 'changes': {}, 'result': True, 'comment': ''}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_get_by_host_and_topic(context, host, topic): \n    return IMPL.service_get_by_host_and_topic(context, host, topic)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getopenfilenames(parent=None, caption='', basedir='', filters='', selectedfilter='', options=None): \n    return _qfiledialog_wrapper('getOpenFileNames', parent=parent, caption=caption, basedir=basedir, filters=filters, selectedfilter=selectedfilter, options=options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pipeline_factory(loader, global_conf, **local_conf): \n    versionutils.report_deprecated_feature(LOG, _LW('The   legacy   V2   API   code   tree   has   been   removed   in   Newton.   Please   remove   legacy   v2   API   entry   from   api-paste.ini,   and   use   V2.1   API   or   V2.1   API   compat   mode   instead'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sm_flavor_create(context, values): \n    return IMPL.sm_flavor_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def solution(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def query_user(query_string, order='UserName'): \n    return query_item('user', query_string, order)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strand(s1, s2): \n    return ''.join(map((lambda x, y: chr((ord(x) & ord(y)))), s1, s2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mkchi2(k): \n    return SelectKBest(chi2, k=k)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def where(): \n    return os.path.join(os.path.dirname(__file__), 'cacert.pem')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sleep(interval=1): \n    time.sleep(float(interval))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def detect(source): \n    return source.replace('   ', '').startswith('eval(function(p,a,c,k,e,')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sci(im): \n    gci._current = im",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def say(text, priority='important'): \n    mpstate.functions.say(text, priority)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getConsumer(request): \n    return consumer.Consumer(request.session, getOpenIDStore())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def o_tmpfile_supported(): \n    return all([linkat.available, (platform.system() == 'Linux'), (LooseVersion(platform.release()) >= LooseVersion('3.16'))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strings(filename, min=4): \n    with io.open(filename, mode='rb') as f: \n      result = '' \n      for c in f.read(): \n         if (c in '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~   '): \n            result += c \n            continue \n         if ((len(result) >= min) and result[0].isalnum()): \n            (yield ((\"'\" + result) + \"'\")) \n         result = ''",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def record_exchange_result(db, exchange_id, status, error, participant): \n    with db.get_cursor() as cursor: \n      (amount, fee, username, route) = cursor.one(u'\\n                                    UPDATE   exchanges   e\\n                                             SET   status=%(status)s\\n                                                   ,   note=%(error)s\\n                                       WHERE   id=%(exchange_id)s\\n                                             AND   status   <>   %(status)s\\n                           RETURNING   amount,   fee,   participant\\n                                                   ,   (   SELECT   r.*::exchange_routes\\n                                                                     FROM   exchange_routes   r\\n                                                                  WHERE   r.id   =   e.route\\n                                                         )   AS   route\\n                        ', locals()) \n      assert (participant.username == username) \n      assert isinstance(route, ExchangeRoute) \n      route.set_attributes(participant=participant) \n      if (amount < 0): \n         amount -= fee \n         amount = (amount if (status == u'failed') else 0) \n         propagate_exchange(cursor, participant, route, error, (- amount)) \n      else: \n         amount = (amount if (status == u'succeeded') else 0) \n         propagate_exchange(cursor, participant, route, error, amount)",
        "line_count": 12,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def touch_journal(filename): \n    if (not os.path.exists(filename)): \n      log.debug(u'Creating   journal   file   %s', filename) \n      util.prompt(u'[Journal   created   at   {0}]'.format(filename)) \n      open(filename, u'a').close()",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def CDLIDENTICAL3CROWS(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLIDENTICAL3CROWS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _gluster_ok(xml_data): \n    return (int(xml_data.find('opRet').text) == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPluginsDirectoryPath(): \n    return archive.getInterpretPluginsPath('xml_plugins')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_all(context, stack_id, traversal_id): \n    return sync_point_object.SyncPoint.delete_all_by_stack_and_traversal(context, stack_id, traversal_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_number(number, locale=LC_NUMERIC): \n    return format_decimal(number, locale=locale)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate(*args): \n    return lowercase.validate(*args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gethostbyname_ex(host): \n    return _Resolve(host, [AF_INET])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_providers(): \n    return [PROVIDER_LOOKUP_INVERTED[p] for p in settings.PAYMENT_PROVIDERS]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dnsdomain_register_for_zone(context, fqdomain, zone): \n    return IMPL.dnsdomain_register_for_zone(context, fqdomain, zone)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_host_non_ssds(host_reference): \n    return _get_host_disks(host_reference).get('Non-SSDs')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getManipulatedPaths(close, elementNode, loop, prefix, sideLength): \n    return [(loop + flip.getFlippedLoop(elementNode, euclidean.getPathCopy(loop), prefix))]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run(tests): \n    tt.check_pairs(ip.prefilter_manager.prefilter_lines, tests)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PRE(text): \n    return (('<pre>' + escape(text)) + '</pre>')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dynamic_string_scriptler_param(registry, xml_parent, data): \n    dynamic_scriptler_param_common(registry, xml_parent, data, 'ScriptlerStringParameterDefinition')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(argv): \n    correct_font(argv[1], argv[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getAroundsFromLoops(loops, radius, thresholdRatio=0.9): \n    return getAroundsFromPoints(getPointsFromLoops(loops, (1.01 * abs(radius)), thresholdRatio), radius)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def markdown(text, mode='', context='', raw=False): \n    return gh.markdown(text, mode, context, raw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prep_jid(nocache=False, passed_jid=None): \n    return (passed_jid if (passed_jid is not None) else salt.utils.jid.gen_jid())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def executePairOperations(evaluators, operationLevel): \n    for negativeIndex in xrange((1 - len(evaluators)), (-1)): \n      evaluatorIndex = (negativeIndex + len(evaluators)) \n      evaluators[evaluatorIndex].executePairOperation(evaluators, evaluatorIndex, operationLevel)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dictreverse(d): \n    return dict([(v, k) for (k, v) in d.iteritems()])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def new(gtype_or_similar, **kwargs): \n    return GType(gtype_or_similar).pytype(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _initialize_builtins(): \n    for filename in os.listdir(_handler_dir): \n      if os.path.isfile(_get_yaml_path(filename, '')): \n         _available_builtins.append(filename)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def read_footer(filename): \n    with open(filename, u'rb') as file_obj: \n      if ((not _check_header_magic_bytes(file_obj)) or (not _check_footer_magic_bytes(file_obj))): \n         raise ParquetFormatException(u'{0}   is   not   a   valid   parquet   file   (missing   magic   bytes)'.format(filename)) \n      return _read_footer(file_obj)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def list_incidents(profile=None, api_key=None): \n    return salt.utils.pagerduty.list_items('incidents', 'id', __salt__['config.option'](profile), api_key, opts=__opts__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def evaluate_old_assump(pred): \n    return pred.xreplace(Transform(_old_assump_replacer))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_service(hass, config, discovery_info=None): \n    return XmppNotificationService(config.get('sender'), config.get('password'), config.get('recipient'), config.get('tls'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lazy_gettext(string): \n    return _TranslationProxy(mygettext, string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def my_dynamic_default(): \n    return (3 + 4)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sqlwhere(data, grouping='   AND   '): \n    return SQLQuery.join([((k + '   =   ') + sqlparam(v)) for (k, v) in data], grouping)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_standby_timeout(scheme=None): \n    return _get_powercfg_minute_values(scheme, 'SUB_SLEEP', 'STANDBYIDLE', 'Sleep   after')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_standby_timeout(timeout, power='ac', scheme=None): \n    return _set_powercfg_value(scheme, 'SUB_SLEEP', 'STANDBYIDLE', power, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ngettext(singular, plural, number): \n    return do_ntranslate(singular, plural, number, 'ngettext')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Case(re): \n    return SwitchCase(re, nocase=0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def security_group_get_by_name(context, project_id, group_name, columns_to_join=None): \n    return IMPL.security_group_get_by_name(context, project_id, group_name, columns_to_join=None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pooled_standard_deviation(input_variances): \n    return sqrt(mean(square([float(i) for i in input_variances])))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def norm_sq(s): \n    return np.square(s.get_value()).sum()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_secure_cookie(): \n    return is_https_enabled()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def readcomments(context, uri): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ALL_REGIONS_WITHOUT_CONTENT_RATINGS(): \n    return (set(ALL_REGIONS) - set(ALL_REGIONS_WITH_CONTENT_RATINGS()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upgrade(db_url, revision='head'): \n    with _temp_alembic_ini(db_url) as alembic_ini: \n      check_call(['alembic', '-c', alembic_ini, 'upgrade', revision])",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_plain_boolean(file_obj, count): \n    return read_bitpacked(file_obj, (count << 1), 1, logger.isEnabledFor(logging.DEBUG))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lstrips(text, remove): \n    return _strips('l', text, remove)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getDotProduct(firstComplex, secondComplex): \n    return ((firstComplex.real * secondComplex.real) + (firstComplex.imag * secondComplex.imag))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def split(s, sep=None, maxsplit=(-1)): \n    return s.split(sep, maxsplit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def modified_since(path, dt): \n    return (exists(path) and (last_modified_time(path) > dt))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def isleap(year): \n    return (((year % 4) == 0) and (((year % 100) != 0) or ((year % 400) == 0)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def processElementNode(elementNode): \n    evaluate.processArchivable(TriangleMesh, elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_group_members_add(context, group_uuid, members, set_delete=False): \n    return IMPL.instance_group_members_add(context, group_uuid, members, set_delete=set_delete)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_fakedir(outputdir, tiles): \n    for (tilepath, tilemtime) in tiles.iteritems(): \n      dirpath = os.path.join(outputdir, *(str(x) for x in tilepath[:(-1)])) \n      if (len(tilepath) == 0): \n         imgname = 'base.png' \n      else: \n         imgname = (str(tilepath[(-1)]) + '.png') \n      if (not os.path.exists(dirpath)): \n         os.makedirs(dirpath) \n      finalpath = os.path.join(dirpath, imgname) \n      open(finalpath, 'w').close() \n      os.utime(finalpath, (tilemtime, tilemtime))",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def _istree(obj): \n    return isinstance(obj, nltk.tree.Tree)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_url(filename): \n    return (URL_REGEX.match(filename) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wrap(text, width=80): \n    return reduce((lambda line, word: ('%s%s%s' % (line, '   \\n'[((((len(line) - line.rfind('\\n')) - 1) + len(word.split('\\n', 1)[0])) >= width)], word))), text.split('   '))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def brill24(): \n    return [Template(Pos([(-1)])), Template(Pos([1])), Template(Pos([(-2)])), Template(Pos([2])), Template(Pos([(-2), (-1)])), Template(Pos([1, 2])), Template(Pos([(-3), (-2), (-1)])), Template(Pos([1, 2, 3])), Template(Pos([(-1)]), Pos([1])), Template(Pos([(-2)]), Pos([(-1)])), Template(Pos([1]), Pos([2])), Template(Word([(-1)])), Template(Word([1])), Template(Word([(-2)])), Template(Word([2])), Template(Word([(-2), (-1)])), Template(Word([1, 2])), Template(Word([(-1), 0])), Template(Word([0, 1])), Template(Word([0])), Template(Word([(-1)]), Pos([(-1)])), Template(Word([1]), Pos([1])), Template(Word([0]), Word([(-1)]), Pos([(-1)])), Template(Word([0]), Word([1]), Pos([1]))]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def monitor_save_globals(sock, settings, filename): \n    return communicate(sock, '__save_globals__()', settings=[settings, filename])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_profiler(name, description=None): \n    return models.Profiler.add_object(name=name, description=description).id",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fix_script(path): \n    if os.path.isfile(path): \n      script = open(path, 'rb') \n      try: \n         firstline = script.readline() \n         if (not firstline.startswith(binary('#!python'))): \n            return False \n         exename = sys.executable.encode(sys.getfilesystemencoding()) \n         firstline = ((binary('#!') + exename) + binary(os.linesep)) \n         rest = script.read() \n      finally: \n         script.close() \n      script = open(path, 'wb') \n      try: \n         script.write(firstline) \n         script.write(rest) \n      finally: \n         script.close() \n      return True",
        "line_count": 18,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_shortcut(context, name): \n    return CONF.get('shortcuts', ('%s/%s' % (context, name)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_dirty(using=None): \n    return get_connection(using).is_dirty()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isListLike(value): \n    return isinstance(value, (list, tuple, set, BigArray))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fix_ampersands(value): \n    return unencoded_ampersands_re.sub(u'&amp;', force_text(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def info_installed(*names): \n    return _info(*names)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def toVolts(raw): \n    return (DIGITAL_ANALOG_16_STEP * raw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def release_tidy_doc(): \n    if hasattr(thread_local_doc, 'doc'): \n      tidy.tidyRelease(thread_local_doc.doc) \n      del thread_local_doc.doc",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def user(): \n    return dict(form=auth())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def thrift_library_config(append=None, **kwargs): \n    blade_config.update_config('thrift_config', append, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _retry_sys_call(f, *args, **kwargs): \n    while True: \n      rc = f(*args) \n      try: \n         _check_rc(rc) \n      except InterruptedSystemCall: \n         continue \n      else: \n         break",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def zen(): \n    return gh.zen()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pyzmq_version_info(): \n    return version_info",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onGlobalDataDel(key): \n    DEBUG_MSG(('onDelGlobalData:   %s' % key))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getTextLines(text): \n    return text.replace('\\r', '\\n').replace('\\n\\n', '\\n').split('\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isEllipticCurve(kexAlgorithm): \n    return _IEllipticCurveExchangeKexAlgorithm.providedBy(getKex(kexAlgorithm))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def arccsc(val): \n    return numpy.arcsin((1.0 / val))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def findUser(): \n    return (os.environ.get('SUDO_USER', False) or (quietRun('who   am   i').split() or [False])[0] or quietRun('whoami').strip())",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def pretty_filesize(file_bytes): \n    for mod in [u'B', u'KB', u'MB', u'GB', u'TB', u'PB']: \n      if (file_bytes < 1024.0): \n         return (u'%3.2f   %s' % (file_bytes, mod)) \n      file_bytes /= 1024.0",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def aggregate_get_all(context): \n    return IMPL.aggregate_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_script_name(name): \n    return os.path.basename(name).split()[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def evaluate_entrance_exam(course, block, user_id): \n    if milestones_helpers.is_entrance_exams_enabled(): \n      entrance_exam_enabled = getattr(course, 'entrance_exam_enabled', False) \n      in_entrance_exam = getattr(block, 'in_entrance_exam', False) \n      if (entrance_exam_enabled and in_entrance_exam): \n         request = RequestFactory().request() \n         request.user = User.objects.get(id=user_id) \n         exam_pct = get_entrance_exam_score(request, course) \n         if (exam_pct >= course.entrance_exam_minimum_score_pct): \n            exam_key = UsageKey.from_string(course.entrance_exam_id) \n            relationship_types = milestones_helpers.get_milestone_relationship_types() \n            content_milestones = milestones_helpers.get_course_content_milestones(course.id, exam_key, relationship=relationship_types['FULFILLS']) \n            user = {'id': request.user.id} \n            for milestone in content_milestones: \n               milestones_helpers.add_user_milestone(user, milestone)",
        "line_count": 14,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def clip(a, a_min, a_max, out=None): \n    return a.clip(a_min, a_max, out=out)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def yn_validator(optdict, name, value): \n    return optik_ext.check_yn(None, name, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def verify(): \n    for (fname, parts) in get_sources().items(): \n      data = generate(parts) \n      fname = os.path.join(LIBRARY, fname) \n      if (not (open(fname).read() == data.getvalue())): \n         raise GenerateAnsibleException(('Generated   content   does   not   match   for   %s' % fname))",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getitem(a, b): \n    return a[b]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def relu6(x): \n    return tf.nn.relu6(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gethostbyname_ex(hostname): \n    return get_hub().resolver.gethostbyname_ex(hostname)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user(name, password, **kwargs): \n    if (not user_exists(name, **kwargs)): \n      create_user(name, password, **kwargs)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_path_names(): \n    return _SCHEME_KEYS",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLTASUKIGAP(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLTASUKIGAP)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetWsdlNamespace(version): \n    return ('urn:' + serviceNsMap[version])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rjust(s, width, *args): \n    return s.rjust(width, *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def match(condition, data): \n    return ((condition == data) or (isinstance(condition, type) and isinstance(data, condition)) or ((not isinstance(condition, type)) and callable(condition) and condition(data)) or (isinstance(condition, tuple) and any((match(c, data) for c in condition))))",
        "line_count": 1,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def __virtual__(): \n    return ('bower' if ('bower.list' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_gm_id(s): \n    return (re.match(gm_id_regex, s) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_raw_cnt(input_fname, montage, eog=(), misc=(), ecg=(), emg=(), data_format='auto', date_format='mm/dd/yy', preload=False, verbose=None): \n    return RawCNT(input_fname, montage=montage, eog=eog, misc=misc, ecg=ecg, emg=emg, data_format=data_format, date_format=date_format, preload=preload, verbose=verbose)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_deps(task, upstream_task_family): \n    return set([t for t in dfs_paths(task, upstream_task_family)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def isfuture(obj): \n    return (hasattr(obj.__class__, '_asyncio_future_blocking') and (obj._asyncio_future_blocking is not None))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def trained(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def console_get_by_pool_instance(context, pool_id, instance_uuid): \n    return IMPL.console_get_by_pool_instance(context, pool_id, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_struct_declarator_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fake_sentence(start=1, stop=100): \n    return faker.sentence(random.randrange(start, stop))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def link_config(append=None, **kwargs): \n    blade_config.update_config('link_config', append, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pretty_all(container): \n    for (name, mt) in container.mime_map.iteritems(): \n      prettied = False \n      if (mt in OEB_DOCS): \n         pretty_html_tree(container, container.parsed(name)) \n         prettied = True \n      elif (mt in OEB_STYLES): \n         container.parsed(name) \n         prettied = True \n      elif (name == container.opf_name): \n         root = container.parsed(name) \n         pretty_opf(root) \n         pretty_xml_tree(root) \n         prettied = True \n      elif (mt in {guess_type(u'a.ncx'), guess_type(u'a.xml')}): \n         pretty_xml_tree(container.parsed(name)) \n         prettied = True \n      if prettied: \n         container.dirty(name)",
        "line_count": 18,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def get_thirdparty_root(*append): \n    return __get_root('ext', 'thirdparty', *append)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rollaxis(a, axis, start=0): \n    return core.rollaxis(a, axis, start)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _mergetree(src, dst): \n    for item in os.listdir(src): \n      s = os.path.join(src, item) \n      d = os.path.join(dst, item) \n      if os.path.isdir(s): \n         log.info('Copying   folder   {0}   to   {1}'.format(s, d)) \n         if os.path.exists(d): \n            _mergetree(s, d) \n         else: \n            shutil.copytree(s, d) \n      else: \n         log.info('Copying   file   {0}   to   {1}'.format(s, d)) \n         shutil.copy2(s, d)",
        "line_count": 12,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _visible_to_nonstaff_users(descriptor): \n    return (VisibilityError() if descriptor.visible_to_staff_only else ACCESS_GRANTED)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_disk_size(path): \n    return images.qemu_img_info(path).virtual_size",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mmwrite(target, a, comment='', field=None, precision=None, symmetry=None): \n    MMFile().write(target, a, comment, field, precision, symmetry)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addListsToRepository(fileNameHelp, repository): \n    addListsToRepositoryByFunction(fileNameHelp, None, repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pythonversion(): \n    return {'pythonversion': list(sys.version_info)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def softsign(x): \n    return tf.nn.softsign(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_anonymous_cart_from_token(token, cart_queryset=Cart.objects.all()): \n    return cart_queryset.open().filter(token=token, user=None).first()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_module(mod): \n    for f in dir(mod.lib): \n      f = getattr(mod.lib, f) \n      if isinstance(f, BuiltinFunctionType): \n         _ool_func_types[f] = mod.ffi.typeof(f) \n         addr = mod.ffi.addressof(mod.lib, f.__name__) \n         _ool_func_ptr[f] = int(mod.ffi.cast('uintptr_t', addr)) \n      _ffi_instances.add(mod.ffi)",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def etc_services(attrs=None, where=None): \n    return _osquery_cmd(table='etc_services', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_channel(model, channel_name, monitor_name='monitor'): \n    return getattr(model, monitor_name).channels[channel_name].val_record[(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def at_server_stop(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_session(env_vars=None): \n    return Session(env_vars)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_topics(max_results=DEFAULT_LIST_TOPICS_MAX_RESULTS, topic_start=None): \n    return prospective_search_admin.list_topics(max_results, topic_start=topic_start)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backup_get_all(context): \n    return IMPL.backup_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def StringToCMakeTargetName(a): \n    return a.translate(string.maketrans('   /():.\"', '_______'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processXMLElement(xmlElement): \n    evaluate.processArchivable(Dictionary, xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_json_getsysinfo(): \n    json.dumps(sysinfo.get_sys_info())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _number_format(val, dec): \n    return ((dec and ((('%.' + str(dec)) + 'f') % val)) or int(round(val)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _can_support_reuse_db(connection): \n    return (not (connection.creation._get_test_db_name() == ':memory:'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_global_size(*args, **kargs): \n    raise _stub_error",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def key_not_string(d): \n    for (k, v) in d.items(): \n      if ((not isinstance(k, six.string_types)) or (isinstance(v, dict) and key_not_string(v))): \n         return True",
        "line_count": 3,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def replace_file_special_chars(filename_path): \n    return filename_path.replace(':', '_')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def samestat(s1, s2): \n    return ((s1.st_ino == s2.st_ino) and (s1.st_dev == s2.st_dev))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_escape_if_necessary_escapes_nothing_if_has_more_than_1_char(): \n    assert_equals(strings.escape_if_necessary('NOT   ESCAPED'), 'NOT   ESCAPED')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_entity_in_table(key, validated_entity, datastore): \n    datastore.batch_put_entity(APP_ENTITY_TABLE, [key], APP_ENTITY_SCHEMA, validated_entity)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return FilletRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove(name=None, pkgs=None, **kwargs): \n    return _uninstall(name=name, pkgs=pkgs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _stub_armor(s): \n    return s.encode('hex')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hstack(operators, size): \n    return lo.LinOp(lo.HSTACK, size, operators, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resolve(bears): \n    return _resolve(bears, [], [])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def justTransportResponse(transport): \n    return Response(('HTTP', 1, 1), 200, 'OK', _boringHeaders, transport)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def smartos_build(): \n    with settings(hide('running', 'stdout')): \n      return run('uname   -v')",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_function(f): \n    register_variable(f.__name__, f)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compare(name, first, second, bfr): \n    return (('end' + bfr[first.begin:first.end].lower()) == bfr[second.begin:second.end].lower())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def blend_channels_multiply(bottom_chan, top_chan): \n    return (bottom_chan[:, :] * top_chan[:, :])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def json_decode(value): \n    return _json_decode(to_basestring(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('keystone' if ('keystone.auth' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_multiplicative_expression_4(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _run_cmd(cmd_str): \n    return subprocess.check_output(cmd_str.split('   ')).strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def i32le(c, o=0): \n    return unpack('<I', c[o:(o + 4)])[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_append(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_specifier_qualifier_list_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wildcard_to_re(text): \n    return ''.join([_wildcard_to_regex.get(ch, ch) for ch in text])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def projection_factory(projection, figure, rect, **kwargs): \n    return get_projection_class(projection)(figure, rect, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return skeinforge_analyze.AnalyzeRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_asynchronous_for_sqlite(sender, connection, **kwargs): \n    if (connection.vendor == 'sqlite'): \n      cursor = connection.cursor() \n      cursor.execute('PRAGMA   synchronous=OFF;')",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def disabled(name): \n    return (name in get_disabled())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_uint8(fid): \n    return _unpack_simple(fid, '>u1', np.uint8)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def network_get_all(context): \n    return IMPL.network_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CompareEntityPbByKey(a, b): \n    return cmp(datastore_types.Key._FromPb(a.key()), datastore_types.Key._FromPb(b.key()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snuff(subprocs): \n    for proc in subprocs: \n      if (proc.poll() is None): \n         os.kill(proc.pid, signal.SIGKILL) \n         proc.wait()",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def NewCollection(seq, cls=Collection): \n    return pythoncom.WrapObject(policy.DefaultPolicy(cls(seq)), pythoncom.IID_IDispatch, pythoncom.IID_IDispatch)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prefix(command): \n    return _setenv((lambda : {'command_prefixes': (state.env.command_prefixes + [command])}))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tamper(payload, **kwargs): \n    return (payload.replace(\"'\", '%00%27') if payload else payload)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _read_int(fid): \n    return np.fromfile(fid, '>i4', 1)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mul(a, b): \n    return (a * b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_dict(l): \n    return dict(zip(map(str, range(len(l))), l))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def simulate_patch(app, path, **kwargs): \n    return simulate_request(app, 'PATCH', path, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _p(pp, name): \n    return ('%s_%s' % (pp, name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def l1_loss(tensor, weight=1.0, scope=None): \n    with tf.name_scope(scope, 'L1Loss', [tensor]): \n      weight = tf.convert_to_tensor(weight, dtype=tensor.dtype.base_dtype, name='loss_weight') \n      loss = tf.multiply(weight, tf.reduce_sum(tf.abs(tensor)), name='value') \n      tf.add_to_collection(LOSSES_COLLECTION, loss) \n      return loss",
        "line_count": 5,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def detect_parquet(fhandle): \n    return parquet._check_header_magic_bytes(fhandle)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_nested_gen(n): \n    for a in range(n): \n      (yield (b for b in range(a)))",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_is_repo_url_for_remote_urls(remote_repo_url): \n    assert (is_repo_url(remote_repo_url) is True)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def parse_timestamp(ts): \n    return (datetime.datetime.strptime(ts[:(-7)], '%Y-%m-%dT%H:%M:%S') + (datetime.timedelta(hours=int(ts[(-5):(-3)]), minutes=int(ts[(-2):])) * int((ts[(-6):(-5)] + '1'))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def health_check(): \n    return (time.time() - int(NamedGlobals.get(PROMO_HEALTH_KEY, default=0)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generateElementsNamed(list, name): \n    for n in list: \n      if (IElement.providedBy(n) and (n.name == name)): \n         (yield n)",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def __virtual__(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_minions(): \n    with _get_serv(ret=None, commit=True) as cur: \n      sql = 'SELECT   DISTINCT   id\\n                                                FROM   `salt_returns`' \n      cur.execute(sql) \n      data = cur.fetchall() \n      ret = [] \n      for minion in data: \n         ret.append(minion[0]) \n      return ret",
        "line_count": 8,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_identifier_list_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _quota_reservations_query(session, context, reservations): \n    return model_query(context, models.Reservation, read_deleted='no', session=session).filter(models.Reservation.uuid.in_(reservations)).with_lockmode('update')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_divisibleby(value, num): \n    return ((value % num) == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _unmunge_zone(zone): \n    return zone.replace('_plus_', '+').replace('_minus_', '-')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def author_structure(user): \n    return {'user_id': user.pk, 'user_login': user.get_username(), 'display_name': user.__str__(), 'user_email': user.email}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def on_slave_report(client_id, data): \n    stats['content-length'] += data['content-length']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return HAS_NEUTRON",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def job_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_proper_module(obj): \n    return (inspect.ismodule(obj) and (obj is sys.modules.get(getattr(obj, '__name__', None))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_upper(value): \n    return text_type(value).isupper()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_tags(s): \n    return re.compile(u'<([^>]+)>', flags=re.UNICODE).sub(u'   ', s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_course_author_access(user, course_key): \n    return has_studio_write_access(user, course_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def findCheckerFactories(): \n    return getPlugins(ICheckerFactory)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unauthenticated_userid(request): \n    return request.unauthenticated_userid",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_string_set(info, name): \n    return StringSet(info, name, case_flags=make_case_flags(info))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def markup_serialize_tokens(tokens, markup_func): \n    for token in tokens: \n      for pre in token.pre_tags: \n         (yield pre) \n      html = token.html() \n      html = markup_func(html, token.annotation) \n      if token.trailing_whitespace: \n         html += token.trailing_whitespace \n      (yield html) \n      for post in token.post_tags: \n         (yield post)",
        "line_count": 10,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def list_elbs(region=None, key=None, keyid=None, profile=None): \n    return [e.name for e in get_all_elbs(region=region, key=key, keyid=keyid, profile=profile)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_enterprise_branding_filter_param(request): \n    return request.session.get(ENTERPRISE_CUSTOMER_BRANDING_OVERRIDE_DETAILS, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_application(): \n    return webapp2.WSGIApplication(create_handlers_map(), debug=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skipUnlessDBFeature(*features): \n    return _deferredSkip((lambda : (not all((getattr(connection.features, feature, False) for feature in features)))), (\"Database   doesn't   support   feature(s):   %s\" % ',   '.join(features)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def index_alt(): \n    s3_redirect_default(URL(f='school', args='summary'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _collapse_addresses_recursive(addresses): \n    while True: \n      last_addr = None \n      ret_array = [] \n      optimized = False \n      for cur_addr in addresses: \n         if (not ret_array): \n            last_addr = cur_addr \n            ret_array.append(cur_addr) \n         elif ((cur_addr.network_address >= last_addr.network_address) and (cur_addr.broadcast_address <= last_addr.broadcast_address)): \n            optimized = True \n         elif (cur_addr == list(last_addr.supernet().subnets())[1]): \n            ret_array[(-1)] = last_addr = last_addr.supernet() \n            optimized = True \n         else: \n            last_addr = cur_addr \n            ret_array.append(cur_addr) \n      addresses = ret_array \n      if (not optimized): \n         return addresses",
        "line_count": 19,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def create_thread(exploration_id, state_name, original_author_id, subject, text): \n    _create_models_for_thread_and_first_message(exploration_id, state_name, original_author_id, subject, text, False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_cast(cast_type): \n    return CASTS.get(cast_type, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def grad_not_implemented(op, x_pos, x, comment=''): \n    return NullType(('This   variable   is   Null   because   the   grad   method   for   input   %s   (%s)   of   the   %s   op   is   not   implemented.   %s' % (x_pos, x, op, comment)))()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def kill(greenlet, exception=GreenletExit): \n    if (not greenlet.dead): \n      core.active_event(greenlet.throw, exception)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def validate_lowercase(string): \n    if (not string.islower()): \n      raise ValidationError(_(u'This   value   must   be   all   lowercase.'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def next_week(t): \n    return (this_week(t) + WEEK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_readbuffer_encode(): \n    if is_cli: \n      AssertError(NotImplementedError, codecs.readbuffer_encode, 'abc')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def same_kind(src, dest): \n    return ((DATETIME_UNITS[src] < 5) == (DATETIME_UNITS[dest] < 5))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten(seq): \n    return [x for subseq in seq for x in subseq]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def Geometric(name, p): \n    return rv(name, GeometricDistribution, p)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _generate_request_id_hash(): \n    return hashlib.sha1(str(_request_id)).hexdigest()[:8].upper()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_app_path(app_name, *joins): \n    return get_pymodule_path(app_name, *joins)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_all_names(): \n    for filename in glob.glob(os.path.join(REQ_DIR, 'requirements-*.txt-raw')): \n      basename = os.path.basename(filename) \n      (yield basename[len('requirements-'):(- len('.txt-raw'))])",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def detect(code): \n    return (('   ' not in code) and (('%20' in code) or (code.count('%') > 3)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def MakePmfFromDict(d, label=None): \n    return Pmf(d, label=label)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new_dd_object(dsk, _name, meta, divisions): \n    return _get_return_type(meta)(dsk, _name, meta, divisions)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_profile_when_user_created(instance, created, raw, *args, **kwargs): \n    if (created and (not raw)): \n      (person, p_created) = Person.objects.get_or_create(user=instance)",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def count_params(x): \n    return np.prod(x.shape.eval())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or __virtualname__), ('url', 'user', 'password'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def generate_simple_resp_page(errormsg='We   Got   An   Unknown   Error', error_code=500): \n    return make_response(errormsg, error_code)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def aggregate_host_delete(context, aggregate_id, host): \n    IMPL.aggregate_host_delete(context, aggregate_id, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_command(): \n    return os.environ.get('MAKE', 'make')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _pinv_1d(v, eps=1e-05): \n    return np.array([(0 if (abs(x) <= eps) else (1 / x)) for x in v], dtype=float)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def expand_format_text(hosts, text): \n    return direct_format_text(expand_line(text, hosts))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def found(url): \n    return redirect(url, '302   Found')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_users(**filter_data): \n    return rpc_utils.prepare_for_serialization(models.User.list_objects(filter_data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log_error(message=None, title=None): \n    get_doc(dict(doctype=u'Error   Log', error=str((message or get_traceback())), method=title)).insert(ignore_permissions=True)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def enable(): \n    if (not _status_csf()): \n      return __csf_cmd('-e')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def equalContents(arr1, arr2): \n    return (frozenset(arr1) == frozenset(arr2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_milestone_namespace(namespace, course_key=None): \n    if (namespace in NAMESPACE_CHOICES.values()): \n      if (namespace == 'entrance_exams'): \n         return '{}.{}'.format(unicode(course_key), NAMESPACE_CHOICES['ENTRANCE_EXAM'])",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def call_on_class_only(*args, **kwargs): \n    raise AttributeError('This   method   should   be   called   on   a   class   object.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_attribute(ob, attribute): \n    return (getattr(ob, attribute, None) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cigar(individual): \n    return (((individual[0] ** 2) + (1000000.0 * sum(((gene * gene) for gene in individual)))),)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def subXMLHTMLSGMLRefs(s): \n    return re_everyentcharrefssub(_replAllXMLRef, s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _atrun_enabled(): \n    return __salt__['service.enabled']('com.apple.atrun')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_sleep_timer_service(service): \n    _apply_service(service, SonosDevice.set_sleep_timer, service.data[ATTR_SLEEP_TIME])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixAPI(document, url): \n    for node in domhelpers.findElementsWithAttribute(document, 'class', 'API'): \n      fullname = _getAPI(node) \n      anchor = dom.Element('a') \n      anchor.setAttribute('href', (url % (fullname,))) \n      anchor.setAttribute('title', fullname) \n      while node.childNodes: \n         child = node.childNodes[0] \n         node.removeChild(child) \n         anchor.appendChild(child) \n      node.appendChild(anchor) \n      if node.hasAttribute('base'): \n         node.removeAttribute('base')",
        "line_count": 12,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def subscriptions_for(username, number=(-1), etag=None): \n    return gh.subscriptions_for(username, number, etag)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_refct_calls(func): \n    for bb in func.basic_blocks: \n      remove_null_refct_call(bb) \n      remove_refct_pairs(bb)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fakeprofiledloopbackblockdeviceapi_for_test(test_case, allocation_unit=None): \n    return FakeProfiledLoopbackBlockDeviceAPI(loopback_blockdevice_api=loopbackblockdeviceapi_for_test(test_case, allocation_unit=allocation_unit))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_default_timezone_name(): \n    return _get_timezone_name(get_default_timezone())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def die(signal, frame): \n    os._exit(1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_pack_index(path): \n    with GitFile(path, 'rb') as f: \n      return load_pack_index_file(path, f)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def places_autocomplete_query(client, input_text, offset=None, location=None, radius=None, language=None): \n    return _autocomplete(client, 'query', input_text, offset=offset, location=location, radius=radius, language=language)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def path2url(path): \n    return (u'file:' + urllib.pathname2url(os.path.abspath(path)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unequal_vals_constraint(A, a, B, b): \n    return (a != b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fanout_cast_to_server(context, server_params, topic, msg): \n    return _get_impl().fanout_cast_to_server(CONF, context, server_params, topic, msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_info_cache_get(context, instance_uuid): \n    return IMPL.instance_info_cache_get(context, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def arg_to_softmax(prob): \n    raise NotImplementedError('Implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_disassociate(context, address): \n    return IMPL.fixed_ip_disassociate(context, address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def popValue(): \n    return getCurrentThreadData().valueStack.pop()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _children_with_tag(element, tag): \n    return itertools.chain(element.iterfind((_OLD_NAMESPACE_PREFIX + tag)), element.iterfind((_NEW_NAMESPACE_PREFIX + tag)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_for_iam(name): \n    return re.sub('[^A-Za-z0-9+=,.@_-]+', '-', name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def warning(request, message): \n    add_message(get_request(request), constants.WARNING, message)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def json_load(filename): \n    with open(filename, u'r') as fh: \n      return json.load(fh, object_hook=_json_decode)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_defaults(key=None): \n    return frappe.db.get_defaults(key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ULTOSC(barDs, count, timeperiod1=(- (2 ** 31)), timeperiod2=(- (2 ** 31)), timeperiod3=(- (2 ** 31))): \n    return call_talib_with_hlc(barDs, count, talib.ULTOSC, timeperiod1, timeperiod2, timeperiod3)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ((salt.utils.which('cabal') is not None) and (salt.utils.which('ghc-pkg') is not None))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def create(): \n    redirect(URL(f='req', args='create'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_save_notes(dire): \n    return read_in(os.path.join(dire, 'CHANGES_SINCE'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def key_pair_count_by_user(context, user_id): \n    return IMPL.key_pair_count_by_user(context, user_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_info(): \n    return _get_pkg_info(os.path.dirname(__file__))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def job_file_for(job): \n    return os.path.join(job.expt_dir, 'jobs', ('%08d.pb' % job.id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def renew_by(name, window=None): \n    return _renew_by(name, window).isoformat()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def http_date(timestamp=None): \n    return _dump_date(timestamp, '   ')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ordered_dict_factory(colnames, rows): \n    return [OrderedDict(zip(colnames, row)) for row in rows]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_params(**kwargs): \n    return {k: v for (k, v) in kwargs.items() if (v is not None)}",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_ccx_course(course_key): \n    return (isinstance(course_key, CCXLocator) or isinstance(course_key, CCXBlockUsageLocator))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def password_data(username, password): \n    return {'username': username, 'password': hashlib.sha1(password.encode('utf-8')).hexdigest(), 'passwordMd5': hashlib.md5(password.encode('utf-8')).hexdigest()}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_navigator_server_url(): \n    return get_conf().get(_CONF_NAVIGATOR_SERVER_URL, 'http://localhost:7187')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prepare_form_encoded_body(oauth_params, body): \n    return _append_params(oauth_params, body)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def authorize_project_context(context, project_id): \n    if is_user_context(context): \n      if (not context.project_id): \n         raise exception.NotAuthorized() \n      elif (context.project_id != project_id): \n         raise exception.NotAuthorized()",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _item_to_dataset(iterator, resource): \n    return Dataset.from_api_repr(resource, iterator.client)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text='', flowRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), flowRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _getCommonSteadyDBArgsDict(): \n    return dict(creator=pymysql, host=Configuration.get('nupic.cluster.database.host'), port=int(Configuration.get('nupic.cluster.database.port')), user=Configuration.get('nupic.cluster.database.user'), passwd=Configuration.get('nupic.cluster.database.passwd'), charset='utf8', use_unicode=True, setsession=['SET   AUTOCOMMIT   =   1'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def zero_mul_simp(l, index): \n    while ((index >= 0) and (index < (len(l) - 1)) and (l[index][0] is l[(index + 1)][0])): \n      exp = (l[index][1] + l[(index + 1)][1]) \n      base = l[index][0] \n      l[index] = (base, exp) \n      del l[(index + 1)] \n      if (l[index][1] == 0): \n         del l[index] \n         index -= 1",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def updateTwistedVersionInformation(baseDirectory, now): \n    for project in findTwistedProjects(baseDirectory): \n      project.updateVersion(getNextVersion(project.getVersion(), now=now))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_badrule(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_charbuffer_encode(): \n    if is_cli: \n      AssertError(NotImplementedError, codecs.charbuffer_encode, 'abc')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def isMultiline(s): \n    return (s.find('\\n') != (-1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_files_list(root_dir): \n    return [os.path.join(dirpath, file_path) for (dirpath, subdirs, files) in os.walk(root_dir) for file_path in files]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def listen(target, identifier, fn, *args, **kw): \n    _event_key(target, identifier, fn).listen(*args, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_comment(message): \n    return {'event': 'commented', 'type': message['type'], 'values': {'user': get_owner_name(message), 'subject': get_subject(message)}}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _SffTrimIterator(handle, alphabet=Alphabet.generic_dna): \n    return SffIterator(handle, alphabet, trim=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def maybe(typ, val): \n    return (typ(val) if (val is not None) else val)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def gist(id_num): \n    return gh.gist(id_num)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def version_agnostic(children): \n    return [child.version_agnostic() for child in children]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def learner_name(learner): \n    return getattr(learner, 'name', type(learner).__name__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def si16le(c, o=0): \n    return unpack('<h', c[o:(o + 2)])[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, *args, **kwargs): \n    return XORCipher(key, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def precompute_idfs(wglobal, dfs, total_docs): \n    return dict(((termid, wglobal(df, total_docs)) for (termid, df) in iteritems(dfs)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def quote_etag(etag): \n    return (u'\"%s\"' % etag.replace(u'\\\\', u'\\\\\\\\').replace(u'\"', u'\\\\\"'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def createFillForSurroundings(radius, shouldExtraLoopsBeAdded, surroundingLoops): \n    for surroundingLoop in surroundingLoops: \n      createExtraFillLoops(radius, shouldExtraLoopsBeAdded, surroundingLoop)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def median_high(name, num, minimum=0, maximum=0, ref=None): \n    return calc(name, num, 'median_high', ref)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_errors(name): \n    return reduce((lambda memo, obj: (memo + get_rate(('%srequests_%s_errors_errorCount' % (NAME_PREFIX, obj))))), ['DELETE', 'GET', 'POST', 'PUT'], 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def node(): \n    return uname()[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def match_text_content(matcher): \n    return AfterPreprocessing((lambda content: content.as_text()), matcher)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def appendToBundle(bundle, oscAddress, dataArray): \n    bundle.append(createBinaryMsg(oscAddress, dataArray), 'b')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _qs_for(model_cls): \n    return model_cls.objects.filter(created__gte=date(2011, 1, 1)).extra(select={'day': 'extract(   day   from   created   )', 'month': 'extract(   month   from   created   )', 'year': 'extract(   year   from   created   )'}).values('year', 'month', 'day').annotate(count=Count('created'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MIDPRICE(barDs, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_hl(barDs, count, talib.MIDPRICE, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def all_weighers(): \n    return CellWeightHandler().get_all_classes()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_random_bytes(n): \n    return _get_singleton().read(n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def signal_name(signum): \n    return SIGMAP[signum][3:]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log_softmax(x, use_cudnn=True): \n    return LogSoftmax(use_cudnn)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_number(number, locale=LC_NUMERIC): \n    return format_decimal(number, locale=locale)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_image_front(releaseid, size=None): \n    return get_image(releaseid, 'front', size=size)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def kmz(request, label, model, field_name=None, using=DEFAULT_DB_ALIAS): \n    return kml(request, label, model, field_name, compress=True, using=using)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def res_xml(res, *args, **kw): \n    return parse_xml(res.text, *args, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_test_cache_folder(): \n    if (not os.path.isdir(sickbeard.CACHE_DIR)): \n      os.mkdir(sickbeard.CACHE_DIR)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def graycode_subsets(gray_code_set): \n    for bitstring in list(GrayCode(len(gray_code_set)).generate_gray()): \n      (yield get_subset_from_bitstring(gray_code_set, bitstring))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def trim_cflags(value): \n    return trim_var('CFLAGS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return (__virtualname__ if HAS_LIBS else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def CDL2CROWS(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDL2CROWS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_abstract_declarator_opt_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'unpause', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isMultiline(s): \n    return (string.find(s, '\\n') != (-1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_remote_catalog_db(dbname, cache=True, verbose=True): \n    return VOSDatabase.from_json(urllib.parse.urljoin(vo_conf.vos_baseurl, (dbname + u'.json')), encoding=u'utf8', cache=cache, show_progress=verbose)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def critical(msg, t=None, obj=None): \n    root.log(msg, level=CRITICAL, t=t, obj=obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def location_tag(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cbAuthentication(result, proto): \n    return proto.list('', '*').addCallback(cbMailboxList, proto)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subscription(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def open_text_files(urlpath, compression=None, mode='rt', encoding='utf8', errors='strict', **kwargs): \n    return open_files(urlpath, compression, mode.replace('b', 't'), encoding, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def put(url, data=None, **kwargs): \n    return request('put', url, data=data, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_logging_format(): \n    logging.basicConfig(level=logging.INFO, format='%(asctime)s   %(levelname)s   %(filename)s:%(lineno)s   %(message)s   ')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def OutHeader2(text): \n    OutHeader(text, '-')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find(function, iterable): \n    for x in iterable: \n      if (function(x) == True): \n         return x",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_rollback(using=None): \n    return get_connection(using).get_rollback()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_scalar(v): \n    return isinstance(v, _scalar_types)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_expression(expr): \n    if (not expr): \n      raise ValueError('expr   cannot   be   an   empty   string')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def onStart(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_headers(environ): \n    for (key, value) in iteritems(environ): \n      key = str(key) \n      if (key.startswith('HTTP_') and (key not in ('HTTP_CONTENT_TYPE', 'HTTP_CONTENT_LENGTH'))): \n         (yield (key[5:].replace('_', '-').title(), value)) \n      elif (key in ('CONTENT_TYPE', 'CONTENT_LENGTH')): \n         (yield (key.replace('_', '-').title(), value))",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_cms_course_link(course, page='course'): \n    return u'//{}/{}/{}'.format(settings.CMS_BASE, page, unicode(course.id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ValidateMSBuildSettings(settings, stderr=sys.stderr): \n    _ValidateSettings(_msbuild_validators, settings, stderr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_messages(exploration_id, thread_id): \n    return [_get_message_from_model(m) for m in feedback_models.FeedbackMessageModel.get_messages(exploration_id, thread_id)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def reservation_get(context, uuid): \n    return IMPL.reservation_get(context, uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_pageview_pixel_url(): \n    return ((g.tracker_url + '?v=') + _get_encrypted_user_slug())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_bulk_destroy(context, ips): \n    return IMPL.floating_ip_bulk_destroy(context, ips)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def model_is_projection(model_instance): \n    return (model_instance._entity and model_instance._entity.is_projection())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def has_studio_read_access(user, course_key): \n    return bool((STUDIO_VIEW_CONTENT & get_user_permissions(user, course_key)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('win_dns_client' if ('win_dns_client.add_dns' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, concatenated=WRAPPER_CONCATENATIONS, append=False, updated=WRAPPER_UPDATES, replace_before=None): \n    return partial(update_wrapper, wrapped=wrapped, assigned=assigned, append=append, updated=updated, replace_before=replace_before)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def admin_username(): \n    return DETAILS.get('admin_username', 'root')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_sequence(i, include=None): \n    return ((hasattr(i, '__getitem__') and iterable(i)) or (bool(include) and isinstance(i, include)))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def cgconfig_is_running(): \n    return service_cgconfig_control('status')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_load(jid, load, minions=None): \n    with _get_serv(commit=True) as cur: \n      sql = 'INSERT   INTO   jids\\n                                             (jid,   load)\\n                                                VALUES   (%s,   %s)' \n      try: \n         cur.execute(sql, (jid, json.dumps(load))) \n      except psycopg2.IntegrityError: \n         pass",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def system_info(): \n    return cmd('system_info')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def params(css, encoding, use_bom=False, expect_error=False, **kwargs): \n    return (css, encoding, use_bom, expect_error, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def label(input, neighbors=None, background=None, return_num=False, connectivity=None): \n    return clabel(input, neighbors, background, return_num, connectivity)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_devices(): \n    return devices.gpus",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_unix_like_platform(): \n    return (platform.system() in ['Linux', 'FreeBSD'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def BM_elements(predicate, expr, assumptions): \n    return all((ask(predicate(b), assumptions) for b in expr.blocks))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getPolar(angleDegrees, radius=1.0): \n    return (radius * euclidean.getWiddershinsUnitPolar(math.radians(angleDegrees)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dict_title(prj, lang): \n    return (_('%(language)s   dictionary   for   %(project)s') % {'language': lang, 'project': prj})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def readlines_from_file(filename): \n    with open_with_encoding(filename) as input_file: \n      return input_file.readlines()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_service(hass, config, discovery_info=None): \n    return SimplePushNotificationService(config.get(CONF_DEVICE_KEY))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=TclLexer(), buf_class=TclBuffer, langintel_class=TclLangIntel, import_handler_class=TclImportHandler, cile_driver_class=TclCILEDriver)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rs_client_noauth(h=client_context.host, p=client_context.port, **kwargs): \n    return _mongo_client(h, p, authenticate=False, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_metadata_update(context, snapshot_id, metadata, delete): \n    IMPL.snapshot_metadata_update(context, snapshot_id, metadata, delete)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def import_submodules(context, root_module, path): \n    for (loader, module_name, is_pkg) in pkgutil.walk_packages(path, (root_module + '.')): \n      module = __import__(module_name, globals(), locals(), ['__name__']) \n      for (k, v) in six.iteritems(vars(module)): \n         if (not k.startswith('_')): \n            context[k] = v \n      context[module_name] = module",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def take(n, iterable): \n    return itertools.islice(iterable, n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dict_to_tuple_key(dictionary): \n    return tuple(sorted(dictionary.items()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def this_is_a_testdir(dirpath): \n    return TESTDIR_RE.match(osp.basename(dirpath))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rmul_expr(lh_op, rh_op, size): \n    return lo.LinOp(lo.RMUL, size, [lh_op], rh_op)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_shape_c_code(type, code, version=()): \n    Shape.c_code_and_version[type] = (code, version)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(linter): \n    linter.register_checker(ClassChecker(linter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_scalar(): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gf_trunc(f, p): \n    return gf_strip([(a % p) for a in f])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def deserialize(data, src_version=VERSION, dest_version=VERSION, *args, **kwargs): \n    return serializers.deserialize('versioned-json', data, src_version=src_version, dest_version=dest_version, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_glance_metadata_get_all(context): \n    return IMPL.volume_glance_metadata_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def status(): \n    return _lib.RAND_status()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def glob(pathname): \n    return list(iglob(pathname))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_stubs(): \n    api_server.test_setup_stubs(request_data, app_id=APP_ID, application_root=APPLICATION_ROOT, trusted=TRUSTED, blobstore_path=BLOBSTORE_PATH, datastore_consistency=datastore_stub_util.TimeBasedHRConsistencyPolicy(), datastore_path=DATASTORE_PATH, datastore_require_indexes=DATASTORE_REQUIRE_INDEXES, images_host_prefix=IMAGES_HOST_PREFIX, logs_path=':memory:', mail_smtp_host=MAIL_SMTP_HOST, mail_smtp_port=MAIL_SMTP_PORT, mail_smtp_user=MAIL_SMTP_USER, mail_smtp_password=MAIL_SMTP_PASSWORD, mail_enable_sendmail=MAIL_ENABLE_SENDMAIL, mail_show_mail_body=MAIL_SHOW_MAIL_BODY, matcher_prospective_search_path=MATCHER_PROSPECTIVE_SEARCH_PATH, taskqueue_auto_run_tasks=TASKQUEUE_AUTO_RUN_TASKS, taskqueue_default_http_server=TASKQUEUE_DEFAULT_HTTP_SERVER, user_login_url=USER_LOGIN_URL, user_logout_url=USER_LOGOUT_URL)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_disabled(): \n    return _get_svc_list(status='DISABLED')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _join_token_parts(*args): \n    return '|'.join([urllib.quote_plus((a or '')) for a in args])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_404_page(browser): \n    return ('Page   not   found   (404)' in browser.find_element_by_tag_name('h1').text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_task(name): \n    return _run_cmd('kapacitor   delete   tasks   {0}'.format(name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def summary_exists(tag): \n    return next((item['tensor'] for item in tf.get_collection('summary_tags') if (item['tag'] == tag)), None)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def canonicalize_cfg(blocks): \n    return canonicalize_cfg_single_backedge(blocks)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_pxd_locals(): \n    return (foo(1), foo_defval(), cpfoo(1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=PHPLexer(), buf_class=PHPBuffer, langintel_class=PHPLangIntel, import_handler_class=PHPImportHandler, cile_driver_class=PHPCILEDriver, is_cpln_lang=True, import_everything=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_entity_batch(last_key, datastore, batch_size): \n    return datastore.range_query(APP_ENTITY_TABLE, APP_ENTITY_SCHEMA, last_key, '', batch_size, start_inclusive=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_fiducials(fname, pts, coord_frame=FIFF.FIFFV_COORD_UNKNOWN): \n    write_dig(fname, pts, coord_frame)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safetar_extractall(tar_file, path='.', members=None): \n    return tar_file.extractall(path, safemembers(tar_file, path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def process_contexts(server, contexts, p_ctx, error=None): \n    for ctx in contexts: \n      ctx.descriptor.aux.initialize_context(ctx, p_ctx, error) \n      if ((error is None) or ctx.descriptor.aux.process_exceptions): \n         ctx.descriptor.aux.process_context(server, ctx)",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def install_flocker(nodes, package_source): \n    return _run_on_all_nodes(nodes, task=(lambda node: sequence([task_install_flocker(distribution=node.distribution, package_source=package_source), task_install_docker_plugin(distribution=node.distribution, package_source=package_source)])))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_s3a_secret_key(): \n    return get_conf().get(_CNF_S3A_SECRET_KEY)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_progress(opts, out, progress): \n    return salt.loader.raw_mod(opts, out, 'rawmodule', mod='output')['{0}.progress_iter'.format(out)](progress)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_cpu(t): \n    return (100 * (0.5 + (0.5 * np.sin(((0.2 * np.pi) * (t - 0.25))))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_base_url(is_secure): \n    return _absolute_url(is_secure=is_secure, url_path='')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_float(dtype): \n    return (('float' in dtype.name) or (dtype.name in ['single', 'double']))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fake_upload_image(context, image, instance, **kwargs): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dirname(p): \n    return split(p)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_volume_region(volume): \n    return (getattr(volume.driver, 'region', None) or getattr(volume.driver, 'region_name', None))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def format_date(date=None, format=None, rebase=True): \n    return get_i18n().format_date(date, format, rebase)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def axis_reverse(a, axis=(-1)): \n    return axis_slice(a, step=(-1), axis=axis)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def keyToXML(key): \n    return _tagAttr(key, '')[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timedelta_to_seconds(td): \n    return ((td.microseconds + ((td.seconds + ((td.days * 24) * 3600)) * (10 ** 6))) / float((10 ** 6)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return HAS_NEUTRON",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_chassis_name(host=None, admin_username=None, admin_password=None): \n    return bare_rac_cmd('getchassisname', host=host, admin_username=admin_username, admin_password=admin_password)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mock_software_secure_post_unavailable(url, headers=None, data=None, **kwargs): \n    raise requests.exceptions.ConnectionError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DateFromTicks(ticks): \n    return Date(*time.gmtime(ticks)[:3])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def python_version_tuple(): \n    return tuple(_sys_version()[1].split('.'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _setWafFunctions(): \n    if conf.identifyWaf: \n      for found in glob.glob(os.path.join(paths.SQLMAP_WAF_PATH, '*.py')): \n         (dirname, filename) = os.path.split(found) \n         dirname = os.path.abspath(dirname) \n         if (filename == '__init__.py'): \n            continue \n         debugMsg = (\"loading   WAF   script   '%s'\" % filename[:(-3)]) \n         logger.debug(debugMsg) \n         if (dirname not in sys.path): \n            sys.path.insert(0, dirname) \n         try: \n            if (filename[:(-3)] in sys.modules): \n               del sys.modules[filename[:(-3)]] \n            module = __import__(filename[:(-3)].encode((sys.getfilesystemencoding() or UNICODE_ENCODING))) \n         except ImportError as msg: \n            raise SqlmapSyntaxException((\"cannot   import   WAF   script   '%s'   (%s)\" % (filename[:(-3)], msg))) \n         _ = dict(inspect.getmembers(module)) \n         if ('detect' not in _): \n            errMsg = \"missing   function   'detect(get_page)'   \" \n            errMsg += (\"in   WAF   script   '%s'\" % found) \n            raise SqlmapGenericException(errMsg) \n         else: \n            kb.wafFunctions.append((_['detect'], _.get('__product__', filename[:(-3)]))) \n      kb.wafFunctions = sorted(kb.wafFunctions, key=(lambda _: ('generic' in _[1].lower())))",
        "line_count": 24,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def get_ngrams(sent_iterator, n): \n    for sent in sent_iterator: \n      w_boundary = ((n - 1) * [(None, '*')]) \n      w_boundary.extend(sent) \n      w_boundary.append((None, 'STOP')) \n      ngrams = (tuple(w_boundary[i:(i + n)]) for i in xrange(((len(w_boundary) - n) + 1))) \n      for n_gram in ngrams: \n         (yield n_gram)",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _report_invalid_attribute(name, value, reason): \n    logging.error('invalid   Cookie   attribute   (%s):   %r=%r', reason, name, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def worker_activate(worker, lbn, profile='default'): \n    return _worker_ctl(worker, lbn, 'a', profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_module_js(output_root): \n    return _write_js(output_root, _list_modules())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reload(): \n    return __csf_cmd('-r')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subnets(): \n    return salt.utils.network.subnets()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_tool_shed_client(app): \n    return hasattr(app, 'install_model')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def no_direct_use_of_unicode_function(logical_line): \n    if unicode_func_re.match(logical_line): \n      (yield (0, 'G320:   Use   six.text_type()   instead   of   unicode()'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def pids(): \n    return [int(x) for x in os.listdir(b(get_procfs_path())) if x.isdigit()]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getSidesBasedOnPrecision(radius, xmlElement): \n    return int(math.ceil(math.sqrt(((((0.5 * radius) * math.pi) * math.pi) / getPrecision(xmlElement)))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_get_all(context, backend_match_level=None, **filters): \n    return IMPL.service_get_all(context, backend_match_level, **filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_unseen_likes(): \n    return frappe.db.sql(u\"select   count(*)   from   `tabCommunication`\\n DCTB  DCTB where\\n DCTB  DCTB  DCTB communication_type='Comment'\\n DCTB  DCTB  DCTB and   modified   >=   DATE_SUB(NOW(),INTERVAL   1   YEAR)\\n DCTB  DCTB  DCTB and   comment_type='Like'\\n DCTB  DCTB  DCTB and   owner   is   not   null   and   owner!=%(user)s\\n DCTB  DCTB  DCTB and   reference_owner=%(user)s\\n DCTB  DCTB  DCTB and   seen=0\", {u'user': frappe.session.user})[0][0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_auth_username(): \n    return DEFAULT_AUTH_USERNAME.get()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def winTime(): \n    return (systime.clock() + START_TIME)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def powerlaw_sequence(n, exponent=2.0): \n    return [random.paretovariate((exponent - 1)) for i in range(n)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getDeprecationWarningString(callableThing, version, format=None, replacement=None): \n    return _getDeprecationWarningString(_fullyQualifiedName(callableThing), version, format, replacement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _unquote_path(path): \n    return urllib.unquote(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def region(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('ipset.version' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_nodes_select(call=None): \n    return salt.utils.cloud.list_nodes_select(list_nodes_full(), __opts__['query.selection'], call)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_quarter_names(width='wide', context='format', locale=LC_TIME): \n    return Locale.parse(locale).quarters[context][width]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def preserve_plugin_listeners(): \n    if (not ImportAddedPlugin.listeners): \n      ImportAddedPlugin.listeners = _listeners",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __virtual__(): \n    return (__virtualname__ if salt.utils.which('htpasswd') else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def full_max(var): \n    return var.max(axis=range(0, len(var.type.broadcastable)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nzf_cmp_date(nzf1, nzf2): \n    return nzf_cmp_name(nzf1, nzf2, name=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_filename_filter(module): \n    return (getattr(module, 'filename', None) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def virtual_interface_update(context, address, values): \n    return IMPL.virtual_interface_update(context, address, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_call_item_to_queue(pending_work_items, work_ids, call_queue): \n    while True: \n      if call_queue.full(): \n         return \n      try: \n         work_id = work_ids.get(block=False) \n      except queue.Empty: \n         return \n      else: \n         work_item = pending_work_items[work_id] \n         if work_item.future.set_running_or_notify_cancel(): \n            call_queue.put(_CallItem(work_id, work_item.fn, work_item.args, work_item.kwargs), block=True) \n         else: \n            del pending_work_items[work_id] \n            continue",
        "line_count": 14,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def num_answers(user): \n    return Answer.objects.filter(creator=user).count()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def session(**kwargs): \n    return Session(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SetComputerInfo(): \n    info = win32net.NetWkstaGetInfo(None, 502)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLHARAMICROSS(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLHARAMICROSS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape_markup(text): \n    return text.replace('&', '&amp;').replace('[', '&bl;').replace(']', '&br;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _stdin_ready_nt(): \n    return msvcrt.kbhit()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lineage(resource): \n    while (resource is not None): \n      (yield resource) \n      try: \n         resource = resource.__parent__ \n      except AttributeError: \n         resource = None",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_multi(keys, **ctx_options): \n    return [future.get_result() for future in get_multi_async(keys, **ctx_options)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def NowUTCToISO8601(): \n    return TimestampUTCToISO8601(time.time())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_by(lookup_dict, pillar, merge=None, default='default', base=None): \n    return salt.utils.filter_by(lookup_dict=lookup_dict, lookup=pillar, traverse=__pillar__, merge=merge, default=default, base=base)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _format_unicode_password(pwd): \n    return '\"{0}\"'.format(pwd).encode('utf-16-le')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decode(file): \n    raise NotImplementedError('topojson.decode()   not   yet   written')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shuffle(l): \n    random.shuffle(l)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render_markup(text): \n    return Markup(markdown.render(text))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def single_pre_save_handler(sender, instance, **kwargs): \n    instance._ct_inventory = None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_login(sender, user, request, **kwargs): \n    if (user and user.is_authenticated()): \n      token = None \n      try: \n         Application = get_application_model() \n         app = Application.objects.get(name='GeoServer') \n         token = generate_token() \n         AccessToken.objects.get_or_create(user=user, application=app, expires=(datetime.datetime.now() + datetime.timedelta(days=1)), token=token) \n      except: \n         u = uuid.uuid1() \n         token = u.hex \n      url = ('%s%s?access_token=%s' % (settings.OGC_SERVER['default']['PUBLIC_LOCATION'], 'ows?service=wms&version=1.3.0&request=GetCapabilities', token)) \n      cj = cookielib.CookieJar() \n      opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj)) \n      jsessionid = None \n      try: \n         opener.open(url) \n         for c in cj: \n            if (c.name == 'JSESSIONID'): \n               jsessionid = c.value \n      except: \n         u = uuid.uuid1() \n         jsessionid = u.hex \n      request.session['access_token'] = token \n      request.session['JSESSIONID'] = jsessionid",
        "line_count": 24,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def _root_task(worker): \n    return worker._add_task_history[0][0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return ChamberRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_symlinks(config, unused_plugins): \n    cert_manager.update_live_symlinks(config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_setup_headshape(): \n    for hs in hs_fnames: \n      (dig, t) = _process_bti_headshape(hs) \n      expected = set(['kind', 'ident', 'r']) \n      found = set(reduce((lambda x, y: (list(x) + list(y))), [d.keys() for d in dig])) \n      assert_true((not (expected - found)))",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def maximum(x, y): \n    return tf.maximum(x, y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log2(x): \n    return Log2()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_mark_unsafe(value): \n    return text_type(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dev_from_pcapname(pcap_name): \n    return IFACES.dev_from_pcapname(pcap_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return (__virtualname__ if ('lgpo.set' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def str(val): \n    return format('%.12g', val)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_datetimetz(array): \n    return ((isinstance(array, ABCDatetimeIndex) and (getattr(array, 'tz', None) is not None)) or is_datetime64tz_dtype(array))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_all_sharing_strategies(): \n    return _all_sharing_strategies",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def append_crypto_meta(value, crypto_meta): \n    return ('%s;   swift_meta=%s' % (value, dump_crypto_meta(crypto_meta)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ogrinspect(*args, **kwargs): \n    return '\\n'.join((s for s in _ogrinspect(*args, **kwargs)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def datetime_to_csl(dt): \n    return {'date-parts': [[dt.year, dt.month, dt.day]]}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def outparam(key, type_=None): \n    return BindParameter(key, None, type_=type_, unique=False, isoutparam=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_disabled(): \n    return sorted((set(get_all()) - set(get_enabled())))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _retrieve_ntp_servers(): \n    return __salt__['ntp.servers']()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def s3_image_create(context, image_uuid): \n    return IMPL.s3_image_create(context, image_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookupSenderPolicy(name, timeout=None): \n    return getResolver().lookupSenderPolicy(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_spaces_between_tags(value): \n    return re.sub('>\\\\s+<', '><', str(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _safe_del_key(dict_, key): \n    if (key in dict_): \n      del dict_[key]",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ms_module(exploit): \n    return {'1': 'exploit/multi/browser/adobe_flash_hacking_team_uaf', '2': 'exploit/multi/browser/adobe_flash_nellymoser_bof', '3': 'exploit/multi/browser/adobe_flash_shader_drawing_fill', '4': 'exploit/windows/browser/ms14_012_textrange', '5': 'exploit/windows/browser/ms14_012_cmarkup_uaf', '6': 'exploit/windows/browser/ms13_080_cdisplaypointer', '7': 'exploit/windows/browser/ie_setmousecapture_uaf', '8': 'exploit/multi/browser/java_jre17_jmxbean_2', '9': 'exploit/multi/browser/java_jre17_jmxbean', '10': 'exploit/windows/browser/ms13_009_ie_slayoutrun_uaf', '11': 'exploit/windows/browser/ie_cbutton_uaf', '12': 'exploit/multi/browser/java_jre17_exec', '13': 'exploit/windows/browser/ie_execcommand_uaf', '14': 'exploit/multi/browser/java_atomicreferencearray', '15': 'exploit/multi/browser/java_verifier_field_access', '16': 'exploit/windows/browser/ms12_037_same_id', '17': 'exploit/windows/browser/msxml_get_definition_code_exec', '18': 'exploit/windows/browser/adobe_flash_rtmp', '19': 'exploit/windows/browser/adobe_flash_mp4_cprt', '20': 'exploit/windows/browser/ms12_004_midi', '21': 'multi/browser/java_rhino\\nset   target   1', '22': 'windows/browser/ms11_050_mshtml_cobjectelement', '23': 'windows/browser/adobe_flashplayer_flash10o', '24': 'windows/browser/cisco_anyconnect_exec', '25': 'windows/browser/ms11_003_ie_css_import', '26': 'windows/browser/wmi_admintools', '27': 'windows/browser/ms10_090_ie_css_clip', '28': 'windows/browser/java_codebase_trust', '29': 'windows/browser/java_docbase_bof', '30': 'windows/browser/webdav_dll_hijacker', '31': 'windows/browser/adobe_flashplayer_avm', '32': 'windows/browser/adobe_shockwave_rcsl_corruption', '33': 'windows/browser/adobe_cooltype_sing', '34': 'windows/browser/apple_quicktime_marshaled_punk', '35': 'windows/browser/ms10_042_helpctr_xss_cmd_exec', '36': 'windows/browser/ms10_018_ie_behaviors', '37': 'windows/browser/ms10_002_aurora', '38': 'windows/browser/ms10_018_ie_tabular_activex', '39': 'windows/browser/ms09_002_memory_corruption', '40': 'windows/browser/ms09_072_style_object', '41': 'windows/browser/ie_iscomponentinstalled', '42': 'windows/browser/ms08_078_xml_corruption', '43': 'windows/browser/ie_unsafe_scripting', '44': 'multi/browser/firefox_escape_retval', '45': 'windows/browser/mozilla_mchannel', '46': 'auxiliary/server/browser_autopwn'}.get(exploit, 'ERROR')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_status_to_session(strategy, pipeline_index, *args, **kwargs): \n    strategy.session_set('partial_pipeline', strategy.partial_to_session((pipeline_index + 1), *args, **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ProfileEntryFromString(xml_string): \n    return atom.core.parse(ProfileEntry, xml_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run(*tests, **options): \n    return RobotFramework().execute(*tests, **options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _wider_test_jpeg(data): \n    if (data[:2] == '\\xff\\xd8'): \n      return 'jpeg'",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _remove_original_values(_config_vars): \n    for k in list(_config_vars): \n      if k.startswith(_INITPRE): \n         del _config_vars[k]",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def teardown_module(): \n    for path in [DATA_HOME, LOAD_FILES_ROOT]: \n      _remove_dir(path)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def pseudocorpus(source_vocab, sep): \n    for k in source_vocab: \n      if (sep not in k): \n         continue \n      unigrams = k.split(sep) \n      for i in range(1, len(unigrams)): \n         (yield [sep.join(unigrams[:i]), sep.join(unigrams[i:])])",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def merge_base(head, ref): \n    return git.merge_base(head, ref)[STDOUT]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_arithmetic(): \n    _test_interop_set(clr_types, py_types, arith_test_cases)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Smooth(xs, sigma=2, **options): \n    return ndimage.filters.gaussian_filter1d(xs, sigma, **options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assertion(assertion): \n    assert assertion",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def vpn_enable(name): \n    run(settings.service, 'openvpn', 'start', name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_pathscrub(val, os_mode=None): \n    return pathscrub(val, os_mode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_uid(path, follow_symlinks=True): \n    return stats(os.path.expanduser(path), follow_symlinks=follow_symlinks).get('uid', (-1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pack_ieee(value): \n    return np.fromstring(value.tostring(), np.ubyte).reshape((value.shape + (4,)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backwards(apps, schema_editor): \n    User.objects.get(username=USERNAME, email=EMAIL).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PacificDate(now): \n    return datetime.date(*time.gmtime(PacificTime(now))[:3])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_parameter_declaration_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lpol_sdiff(s): \n    return (([1] + ([0] * (s - 1))) + [(-1)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safe_subn(pattern, repl, target, *args, **kwargs): \n    return re.subn(str(pattern), str(repl), target, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getInterpretPluginsPath(subName=''): \n    return getJoinedPath(getFabmetheusToolsPath('interpret_plugins'), subName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lambda2nu(lambda_): \n    return (_np.asanyarray(c) / lambda_)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strFromDate(date): \n    return time.strftime('%Y_%m_%d   %H:%M', date)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def recursive_list_removal(base_list, purge_list): \n    for item in purge_list: \n      for _item in base_list: \n         if (item == _item): \n            base_list.pop(base_list.index(item))",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def post(url, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=60, allow_redirects=False, stream=False): \n    return request('POST', url, params, data, headers, cookies, files, auth, timeout, allow_redirects, stream)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gen_state_tag(low): \n    return '{0[state]}_|-{0[__id__]}_|-{0[name]}_|-{0[fun]}'.format(low)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_cache_time(f): \n    return struct.unpack('>LL', f.read(8))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _isint(string): \n    return ((type(string) is _int_type) or (type(string) is _long_type))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getPreview(layer): \n    return (200, Headers([('Content-Type', 'text/html')]), Core._preview(layer))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _potential_before(i, input_string): \n    return (((i - 2) >= 0) and (input_string[i] == input_string[(i - 2)]) and (input_string[(i - 1)] not in seps))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def update_resource(zone, resource_type, resource_selector, **kwargs): \n    return _resource('update', zone, resource_type, resource_selector, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(key, profile=None): \n    return environ.get(key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_encoding(): \n    return (settings.get('encoding') or default_encoding)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def flavor_create(context, values, projects=None): \n    return IMPL.flavor_create(context, values, projects=projects)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def process_email_outbox(): \n    msg.process_outbox(contact_method='EMAIL')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reservation_create(context, uuid, usage, project_id, resource, delta, expire): \n    return IMPL.reservation_create(context, uuid, usage, project_id, resource, delta, expire)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def logout(client): \n    return client.get('/logout', follow_redirects=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def search(pattern, string, flags=0): \n    return _compile(pattern, flags).search(string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_url(url, *args, **kwargs): \n    return bool(get_url(url, *args, **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_submodules(config): \n    for section in config.keys(): \n      (section_kind, section_name) = section \n      if (section_kind == 'submodule'): \n         sm_path = config.get(section, 'path') \n         sm_url = config.get(section, 'url') \n         (yield (sm_path, sm_url, section_name))",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def build_binary_response(request, data, code): \n    return build_response(request, data, code, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_block(): \n    move_entry(unblocked_list, unblocked, blocked_list, blocked)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PrintFeed(feed): \n    for entry in feed.entry: \n      PrintResource(entry)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def validate_domain(value): \n    if (not re.search(u'^[a-zA-Z0-9-\\\\.]+$', value)): \n      raise ValidationError(u'\"{}\"   contains   unexpected   characters'.format(value))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def check_data_query_args(data_query_time, data_query_tz): \n    if ((data_query_time is None) ^ (data_query_tz is None)): \n      raise ValueError((\"either   'data_query_time'   and   'data_query_tz'   must   both   be   None   or   neither   may   be   None   (got   %r,   %r)\" % (data_query_time, data_query_tz)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_class_private_name(name): \n    return (name.startswith('__') and (not name.endswith('__')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _DoesTargetTypeRequireBuild(target_dict): \n    return bool(((target_dict['type'] != 'none') or target_dict.get('actions') or target_dict.get('rules')))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def combine_images(im1, im2, alpha): \n    return (((1 - alpha) * im1) + (alpha * im2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pycodestylemod_update_margin_line_length(new_margin_line): \n    pycodestylemod.MAX_LINE_LENGTH = new_margin_line",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def waitForVBL(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_formatter(view, values): \n    return u',   '.join((text_type(v) for v in values))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def arg_string(func): \n    return inspect.formatargspec(*inspect.getargspec(func))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_rollback(rollback, using=None): \n    return get_connection(using).set_rollback(rollback)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_python_failure(*args, **env_vars): \n    return _assert_python(False, *args, **env_vars)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _apply_global_addr_ssl(addr_to_ssl, parsed_server): \n    for addr in parsed_server['addrs']: \n      addr.ssl = addr_to_ssl[addr.normalized_tuple()] \n      if addr.ssl: \n         parsed_server['ssl'] = True",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _verify_environment(): \n    if (TEST_UUID_VARNAME not in os.environ): \n      logging.error('Unique   test   ID   is   missing   in   env   vars,   aborting.') \n      sys.exit(1)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def lower(value): \n    return value.lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enhance_contrast(image, selem, out=None, mask=None, shift_x=False, shift_y=False): \n    return _apply_scalar_per_pixel(generic_cy._enhance_contrast, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def river(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cache_from_source(path, debug_override=None): \n    with warnings.catch_warnings(): \n      warnings.simplefilter('ignore') \n      return util.cache_from_source(path, debug_override)",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def equateY(point, returnValue): \n    point.y = returnValue",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tornado_sleep(duration): \n    return gen.Task(IOLoop.instance().add_timeout, (time.time() + duration))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_scm(scm): \n    if (scm is not None): \n      if (not isinstance(scm, Scm)): \n         raise ValueError(u'The   scm   must   be   an   instance   of   Scm,   given   {}'.format(scm)) \n      global _SCM \n      _SCM = scm",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def response_message(): \n    return s3_rest_controller('deploy', 'response', custom_crud_buttons={'list_btn': None})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getStartingAddress(packet): \n    return ((ord(packet[8]) << 8) + ord(packet[9]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mul(name, num, minimum=0, maximum=0, ref=None): \n    return calc(name, num, 'mul', ref)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def key_pair_get_all_by_user(context, user_id, limit=None, marker=None): \n    return IMPL.key_pair_get_all_by_user(context, user_id, limit=limit, marker=marker)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_jump_statement_4(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cli(*commands): \n    return __proxy__['napalm.call']('cli', **{'commands': list(commands)})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def println(text, *colors): \n    sys.stdout.write((sprint(text, *colors) + '\\n'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PBToPy(numpb): \n    return PhoneNumber(country_code=(numpb.country_code if numpb.HasField('country_code') else None), national_number=(numpb.national_number if numpb.HasField('national_number') else None), extension=(numpb.extension if numpb.HasField('extension') else None), italian_leading_zero=(numpb.italian_leading_zero if numpb.HasField('italian_leading_zero') else None), number_of_leading_zeros=(numpb.number_of_leading_zeros if numpb.HasField('number_of_leading_zeros') else None), raw_input=(numpb.raw_input if numpb.HasField('raw_input') else None), country_code_source=(numpb.country_code_source if numpb.HasField('country_code_source') else None), preferred_domestic_carrier_code=(numpb.preferred_domestic_carrier_code if numpb.HasField('preferred_domestic_carrier_code') else None))",
        "line_count": 1,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def is_short(w): \n    return (is_short_syllable(w[(-3):]) and (len([ch for ch in w[:(-3)] if (ch in VOWELS)]) == 0))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def validate_password(request, api_password): \n    return hmac.compare_digest(api_password, request.app['hass'].http.api_password)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rest_api_context_factory(ca_certificate, control_credential): \n    return _ControlServiceContextFactory(ca_certificate, control_credential, 'user-')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sleep(duration): \n    return SleepEvent(duration)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flavor_access_get_by_flavor_id(context, flavor_id): \n    return IMPL.flavor_access_get_by_flavor_id(context, flavor_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def demo_verbose_rule_format(): \n    postag(ruleformat='verbose')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start_subprocess(cmd): \n    return subprocess.Popen(cmd, stdout=DEVNULL, stderr=DEVNULL)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def excel_datetime(timestamp, epoch=datetime.datetime.fromordinal(693594)): \n    return (epoch + datetime.timedelta(timestamp))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def current_process(): \n    return _current_process",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ids2str(ids): \n    return ('(%s)' % ','.join((str(i) for i in ids)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def started(name=None, user=None, group=None, chroot=None, caps=None, no_caps=False, pidfile=None, enable_core=False, fd_limit=None, verbose=False, debug=False, trace=False, yydebug=False, persist_file=None, control=None, worker_threads=None, *args, **kwargs): \n    return __salt__['syslog_ng.start'](name=name, user=user, group=group, chroot=chroot, caps=caps, no_caps=no_caps, pidfile=pidfile, enable_core=enable_core, fd_limit=fd_limit, verbose=verbose, debug=debug, trace=trace, yydebug=yydebug, persist_file=persist_file, control=control, worker_threads=worker_threads)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lower(value): \n    return value.lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def publicize_collection(committer_id, collection_id): \n    _publicize_activity(committer_id, collection_id, feconf.ACTIVITY_TYPE_COLLECTION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sm_volume_delete(context, volume_id): \n    return IMPL.sm_volume_delete(context, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_token_url(course_id): \n    return reverse('get_token', kwargs={'course_id': unicode(course_id)})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pack(o, default=encode, encoding='utf-8', unicode_errors='strict', use_single_float=False, autoreset=1, use_bin_type=1): \n    return Packer(default=default, encoding=encoding, unicode_errors=unicode_errors, use_single_float=use_single_float, autoreset=autoreset, use_bin_type=use_bin_type).pack(o)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'speed', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_rv_json(rv): \n    return json.loads(rv.data.decode(encoding='utf-8'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def error(msg, html=False): \n    write(msg, 'ERROR', html)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_has_release(): \n    assert_equals(lettuce.release, 'kryptonite')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or 'saltify'), ())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def slot(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def network_in_use_on_host(context, network_id, host=None): \n    return IMPL.network_in_use_on_host(context, network_id, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generative_network(z): \n    with pt.defaults_scope(activation_fn=tf.nn.elu, batch_normalize=True, scale_after_normalization=True): \n      return pt.wrap(z).reshape([M, 1, 1, d]).deconv2d(3, 128, edges='VALID').deconv2d(5, 64, edges='VALID').deconv2d(5, 32, stride=2).deconv2d(5, 1, stride=2, activation_fn=None).flatten().tensor",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_inactdays(name, days): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _iterKeywords(results): \n    for key in results: \n      (yield (key.id, key.keyword))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def risk(): \n    return s3_rest_controller(rheader=s3db.vulnerability_rheader)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(): \n    parser.dispatch()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_login_token(user): \n    return _security.login_serializer.dumps([str(user.id)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _bytes_chr_py2(i): \n    return chr(i)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_ec2_instance_id_by_uuid(context, instance_id): \n    return IMPL.get_ec2_instance_id_by_uuid(context, instance_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def debris_basin(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def initRepeat(container, func, n): \n    return container((func() for _ in xrange(n)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def render_purchase_form_html(cart, **kwargs): \n    return PROCESSOR_MODULE.render_purchase_form_html(cart, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nop(name, **kwargs): \n    return succeed_without_changes(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_conditional_expression_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_categorical(dtype): \n    return ((dtype in OBJECT_DTYPES) or (dtype.kind in STRING_KINDS))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def meters(kilometers=0, miles=0, feet=0, nautical=0): \n    return ((kilometers + km(nautical=nautical, miles=miles, feet=feet)) * 1000)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resolve_embedded_documents(document, resource, embedded_fields): \n    for field in sorted(embedded_fields, key=(lambda a: a.count('.'))): \n      data_relation = field_definition(resource, field)['data_relation'] \n      getter = (lambda ref: embedded_document(ref, data_relation, field)) \n      fields_chain = field.split('.') \n      last_field = fields_chain[(-1)] \n      for subdocument in subdocuments(fields_chain[:(-1)], resource, document): \n         if (last_field not in subdocument): \n            continue \n         if isinstance(subdocument[last_field], list): \n            subdocument[last_field] = list(map(getter, subdocument[last_field])) \n         else: \n            subdocument[last_field] = getter(subdocument[last_field])",
        "line_count": 12,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def _normalize_configuration_objs(configurations): \n    for c in configurations: \n      if (not hasattr(c, 'properties')): \n         c.properties = [] \n      if hasattr(c, 'configurations'): \n         if (not c.configurations): \n            del c.configurations \n         else: \n            _normalize_configuration_objs(c.configurations)",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def clear_mine_func(tgt=None, tgt_type='glob', clear_mine_func_flag=None, expr_form=None): \n    return _clear_cache(tgt, tgt_type, clear_mine_func_flag=clear_mine_func_flag)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def roc_auc_score(y_pred, y_true): \n    with tf.name_scope('RocAucScore'): \n      pos = tf.boolean_mask(y_pred, tf.cast(y_true, tf.bool)) \n      neg = tf.boolean_mask(y_pred, (~ tf.cast(y_true, tf.bool))) \n      pos = tf.expand_dims(pos, 0) \n      neg = tf.expand_dims(neg, 1) \n      gamma = 0.2 \n      p = 3 \n      difference = (((tf.zeros_like((pos * neg)) + pos) - neg) - gamma) \n      masked = tf.boolean_mask(difference, (difference < 0.0)) \n      return tf.reduce_sum(tf.pow((- masked), p))",
        "line_count": 10,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in_range_list(num, range_list): \n    return ((num == int(num)) and within_range_list(num, range_list))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def add_constant(builder, val, const): \n    return builder.add(val, Constant.int(TIMEDELTA64, const))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quantize_amount_to_string(amount): \n    return ('%i%%' % int((amount * 100.0)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_storage_class_specifier(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bytes_to_skip(record_size, range_start): \n    return ((record_size - (range_start % record_size)) % record_size)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_perms_for(roles, perm_doctype=u'DocPerm'): \n    return frappe.db.sql(u'select   *   from   `tab{doctype}`   where   docstatus=0\\n DCTB  DCTB and   ifnull(permlevel,0)=0\\n DCTB  DCTB and   role   in   ({roles})'.format(doctype=perm_doctype, roles=u',   '.join(([u'%s'] * len(roles)))), tuple(roles), as_dict=1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def walk_revctrl(dirname=''): \n    for ep in pkg_resources.iter_entry_points('setuptools.file_finders'): \n      for item in ep.load()(dirname): \n         (yield item)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def ban(ban_expression): \n    return (_run_varnishadm('ban', [ban_expression])['retcode'] == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in6_and(a1, a2): \n    return _in6_bitops(a1, a2, 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_config(ctx, param, value): \n    ctx.ensure_object(ScriptInfo).config_file = value",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_image_unsafe(source, dest, out_format, run_as_root=False): \n    _convert_image(source, dest, None, out_format, run_as_root)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_user(username): \n    return get_user_model().objects.get_by_natural_key(username)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addPointOnPathIfFree(path, pathIndex, pixelTable, point, pointIndex, width): \n    if isAddedPointOnPathFree(path, pixelTable, point, pointIndex, width): \n      addPointOnPath(path, pathIndex, pixelTable, point, pointIndex, width)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read_buffer(request): \n    return HttpResponse(request.read(99999))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mon_is(**kwargs): \n    return ceph_cfg.mon_is(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def no_translate_debug_logs(logical_line, filename): \n    if logical_line.startswith('LOG.debug(_('): \n      (yield (0, \"N319   Don't   translate   debug   level   logs\"))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def unsorted_unique(lista): \n    return list(set(lista))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nowdate(): \n    return now_datetime().strftime(DATE_FORMAT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return dataflash_logger(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _href(collection, href): \n    return ('%s%s' % (collection.configuration.get('server', 'base_prefix'), href.lstrip('/')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def version(*names, **kwargs): \n    return __salt__['pkg_resource.version'](*names, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deep_dict(obj): \n    return json.loads(json.dumps(obj))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_orphaned_vdis(xenapi, vdi_uuids): \n    for vdi_uuid in vdi_uuids: \n      if CONF.verbose: \n         print ('CLEANING   VDI   (%s)' % vdi_uuid) \n      vdi_ref = call_xenapi(xenapi, 'VDI.get_by_uuid', vdi_uuid) \n      try: \n         call_xenapi(xenapi, 'VDI.destroy', vdi_ref) \n      except XenAPI.Failure as exc: \n         sys.stderr.write(('Skipping   %s:   %s' % (vdi_uuid, exc)))",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def is_float_list(value, min=None, max=None): \n    return [is_float(mem) for mem in is_list(value, min, max)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def helptext(): \n    return [('basic', 'Basics', '\\n\\n            {0}Basic   Usage{1}\\n\\n            Use   {2}/{1}   or   {2}.{1}   to   prefix   your   search   query.      e.g.,   {2}/pink   floyd{1}\\n\\n            Then,   when   results   are   shown:\\n\\n                        {2}<number(s)>{1}   -   play   specified   items,   separated   by   commas.\\n                                                                  e.g.,   {2}1-3,5{1}   plays   items   1,   2,   3   and   5.\\n\\n                        {2}i   <number>{1}   -   view   information   on   video   <number>\\n                        {2}c   <number>{1}   -   view   comments   for   video   <number>\\n                        {2}d   <number>{1}   -   download   video   <number>\\n                        {2}r   <number>{1}   -   show   videos   related   to   video   <number>\\n                        {2}u   <number>{1}   -   show   videos   uploaded   by   uploader   of   video   <number>\\n                        {2}x   <number>{1}   -   copy   item   <number>   url   to   clipboard   (requires   pyperclip)\\n\\n                        {2}q{1},   {2}quit{1}   -   exit   mpsyt\\n            '.format(c.ul, c.w, c.y)), ('search', 'Searching   and   Retrieving', \"\\n            {0}Searching   and   Retrieving{1}\\n\\n            {2}set   search_music   false{1}   -   search   all   YouTube   categories.\\n            {2}set   search_music   true{1}      -   search   only   YouTube   music   category.\\n\\n            {2}/<query>{1}   or   {2}.<query>{1}   to   search   for   videos.   e.g.,   {2}/daft   punk{1}\\n                        [-d   {{any,short,medium,long}}]   [-a   AFTER]   search   [search   ...]   {2}/-a   short   -d   day   hits{1}\\n                           AFTER:   day,   week,   month,   year,   yyyy-mm-dd,   yyyy-mm-ddThh:mm:ddZ\\n                        {2}/   --after   2016-08-11   tweekaz   --duration   long{1}\\n            {2}//<query>{1}   or   {2}..<query>{1}   -   search   for   YouTube   playlists.   e.g.,               {2}//80's   music{1}\\n            {2}n{1}   and   {2}p{1}   -   continue   search   to   next/previous   pages.\\n            {2}p   <number>{1}   -   switch   to   page   <number>.\\n\\n            {2}album   <album   title>{1}   -   Search   for   matching   tracks   using   album   title\\n            {2}user   <username>{1}   -   list   YouTube   uploads   by   <username>.\\n            {2}user   <username>/<query>{1}   -   as   above,   but   matches   <query>.\\n            {2}userpl   <username>{1}   -   list   YouTube   playlists   created   by   <username>.\\n            {2}pl   <url   or   id>{1}   -   Open   YouTube   playlist   by   url   or   id.\\n            {2}url   <url   or   id>{1}   -   Retrieve   specific   YouTube   video   by   url   or   id.\\n            {2}url   <url>   <url>   ...   <url>{1}   -   Retrieve   specific   YouTube   videos   by   url   or   id.\\n            {2}url_file   <file_absolute_path>{1}   -   Retrieve   YouTube   videos   by   url   or   id   from   a   .txt   file.\\n            File   format   :   .txt,   with   one   url   or   id   by   line.\\n\\n            {2}r   <number>{1}   -   show   videos   related   to   video   <number>.\\n            {2}u   <number>{1}   -   show   videos   uploaded   by   uploader   of   video   <number>.\\n            {2}c   <number>{1}   -   view   comments   for   video   <number>\\n            \".format(c.ul, c.w, c.y)), ('edit', 'Editing   /   Manipulating   Results', '\\n            {0}Editing   and   Manipulating   Results{1}\\n\\n            {2}rm   <number(s)>{1}   -   remove   items   from   displayed   results.\\n            {2}sw   <number>,<number>{1}   -   swap   two   items.\\n            {2}mv   <number>,<number>{1}   -   move   item   <number>   to   position   <number>.\\n            {2}save   <name>{1}   -   save   displayed   items   as   a   local   playlist.\\n            {2}mix   <number>{1}   -   show   YouTube   mix   playlist   from   item   in   results.\\n\\n            {2}shuffle{1}   -   Shuffle   the   displayed   results.\\n            {2}reverse{1}   or   {2}reverse   <number>-<number>{1}   -   Reverse   the   displayed   items   or   item   range.\\n            {2}reverse   all{1}   -   Reverse   order   of   entire   loaded   playlist\\n            '.format(c.ul, c.w, c.y)), ('download', 'Downloading   and   Playback', \"\\n            {0}Downloading   and   Playback{1}\\n\\n            {2}set   show_video   true{1}   -   play   video   instead   of   audio.\\n\\n            {2}<number(s)>{1}   -   play   specified   items,   separated   by   commas.\\n                                                      e.g.,   {2}1-3,5{1}   plays   items   1,   2,   3   and   5\\n\\n            {2}d   <number>{1}   -   view   downloads   available   for   an   item.\\n            {2}da   <number(s)>{1}   -   download   best   available   audio   file(s).\\n            {2}dv   <number(s)>{1}   -   download   best   available   video   file(s).\\n            {2}dapl   <url   or   id>{1}   -   download   YouTube   playlist   (audio)   by   url   or   id.\\n            {2}dvpl   <url   or   id>{1}   -   download   YouTube   playlist   (video)   by   url   or   id.\\n            {2}daupl   <username>{1}   -   download   user's   YouTube   playlists   (audio).\\n            {2}dvupl   <username>{1}   -   download   user's   YouTube   playlists   (video).\\n            {2}dlurl   <url   or   id>{1}   -   download   a   YouTube   video   by   url   or   video   id.\\n            {2}daurl   <url   or   id>{1}   -   download   best   available   audio   of   YouTube   video   by   url   or   video   id.\\n            {2}playurl   <url   or   id>{1}   -   play   a   YouTube   video   by   url   or   id.\\n            {2}browserplay   <number>{1}   -   open   a   specified   previous   search   in   browser.\\n\\n            {2}all{1}   or   {2}*{1}   -   play   all   displayed   items.\\n            {2}repeat   <number(s)>{1}   -   play   and   repeat   the   specified   items.\\n            {2}shuffle   <number(s)>{1}   -   play   specified   items   in   random   order.\\n            \".format(c.ul, c.w, c.y)), ('dl-command', 'Downloading   Using   External   Application', '\\n            {0}Download   Using   A   Custom   Application{1}\\n\\n            Use   {2}set   download_command   <command>{1}   to   specify   a   custom   command   to   use   for\\n            downloading.\\n\\n            mps-youtube   will   make   the   following   substitutions:\\n\\n            %u   -   url   of   the   remote   file   to   download\\n            %d   -   download   directory   as   set   in   DDIR   in   mps-youtube   config\\n            %f   -   filename   (determined   by   title   and   filetype)\\n            %F   -   full   file   path   (%d/%f)\\n            %i   -   youtube   video   id\\n\\n            for   example,   to   download   using   aria2c   (http://aria2.sourceforge.net),   enter:\\n\\n                        {2}set   download_command   aria2c   --dir=%d   --out=%f   %u{1}\\n\\n            Note   that   using   a   custom   download   command   does   not   support   transcoding   the\\n            downloaded   file   to   another   format   using   mps-youtube.\\n            '.format(c.ul, c.w, c.y)), ('encode', 'Encoding   to   MP3   and   other   formats', '\\n            {0}Encoding   to   MP3   and   other   formats{1}\\n\\n            Enter   {2}encoders{1}   to   view   available   encoding   presets\\n            Enter   {2}set   encoder   <number>{1}   to   apply   an   encoding   preset   for   downloads\\n\\n            This   feature   requires   that   ffmpeg   or   avconv   is   installed   on   your   system   and   is\\n            available   in   the   system   path.\\n\\n            The   encoding   presets   can   be   modified   by   editing   the   text   config   file   which\\n            resides   at:\\n                     {3}\\n            '.format(c.ul, c.w, c.y, g.TCFILE)), ('playlists', 'Using   Local   Playlists', \"\\n            {0}Using   Local   Playlists{1}\\n\\n            {2}add   <number(s)>{1}   -   add   items   to   the   current   playlist.\\n            {2}add   <number(s)>   <playlist>{1}   -   add   items   to   the   specified   playlist.\\n                           (<playlist>   will   be   created   if   it   doesn't   already   exist)\\n\\n            {2}vp{1}   -   view   current   playlist.\\n            {2}ls{1}   -   list   saved   playlists.\\n            {2}mv   <old   name   or   ID>   <new   name>{1}   -   rename   a   playlist.\\n            {2}rmp   <playlist_name   or   ID>{1}   -   delete   a   playlist   from   disk.\\n\\n            {2}open   <name   or   ID>{1}   -   open   a   saved   playlist   as   the   current   playlist.\\n            {2}play   <name   or   ID>{1}   -   play   a   saved   playlist   directly.\\n            {2}view   <name   or   ID>{1}   -   view   a   playlist   (current   playlist   left   intact).\\n            {2}save{1}   or   {2}save   <name>{1}   -   save   the   displayed   items   as   a   playlist.\\n\\n            {2}rm   <number(s)>{1}   -   remove   items   from   displayed   results.\\n            {2}sw   <number>,<number>{1}   -   swap   two   items.\\n            {2}mv   <number>,<number>{1}   -   move   item   <number>   to   position   <number>.\\n            \".format(c.ul, c.w, c.y)), ('history', 'Accessing   Local   History', '\\n            {0}Accessing   Local   History{1}\\n\\n            Access   songs   that   have   been   played   within   mpsyt\\n\\n                        {2}history{1}   -   displays   a   list   of   songs   contained   in   history\\n                        {2}history   clear{1}   -   clears   the   song   history\\n                        {2}history   recent{1}   -   displays   a   list   of   recent   played   songs\\n            '.format(c.ul, c.w, c.y)), ('invoke', 'Invocation   Parameters', '\\n            {0}Invocation{1}\\n\\n            All   mpsyt   commands   can   be   entered   from   the   command   line.      For   example;\\n\\n                  {2}mpsyt   dlurl   <url   or   id>{1}   to   download   a   YouTube   video   by   url   or   id\\n                  {2}mpsyt   playurl   <url   or   id>{1}   to   play   a   YouTube   video   by   url   or   id\\n                  {2}mpsyt   /mozart{1}   to   search\\n                  {2}mpsyt   //best   songs   of   2010{1}   for   a   playlist   search\\n                  {2}mpsyt   play   <playlist   name   or   ID>{1}   to   play   a   saved   playlist\\n                  {2}mpsyt   ls{1}   to   list   saved   playlists\\n\\n            For   further   automation,   a   series   of   commands   can   be   entered   separated   by\\n            commas   (,).      E.g.,\\n\\n                  {2}mpsyt   open   1,   2-4{1}   -   play   items   2-4   of   first   saved   playlist\\n                  {2}mpsyt   //the   doors,   1,   all   -a{1}   -   open   YouTube   playlist   and   play   audio\\n\\n            If   you   need   to   enter   an   actual   comma   on   the   command   line,   use   {2},,{1}   instead.\\n            '.format(c.ul, c.w, c.y)), ('config', 'Configuration   Options', '\\n            {0}Configuration{1}\\n\\n            {2}set{1}   -   view   current   configuration\\n            {2}set   <item>   default{1}   -   set   an   item   to   its   default   value\\n            {2}set   all   default{1}   -   restore   default   settings\\n            {2}set   checkupdate   true|false{1}   -   check   for   updates   on   exit\\n            {2}set   columns   <columns>{1}   -   select   extra   displayed   fields   in   search   results:\\n                           (valid:   views   comments   rating   date   user   likes   dislikes   category)\\n            {2}set   ddir   <download   direcory>{1}   -   set   where   downloads   are   saved\\n            {2}set   download_command   <command>{1}   -   type   {2}help   dl-command{1}   for   info\\n            {2}set   encoder   <number>{1}   -   set   encoding   preset   for   downloaded   files\\n            {2}set   fullscreen   true|false{1}   -   output   video   content   in   full-screen   mode\\n            {2}set   max_res   <number>{1}   -   play   /   download   maximum   video   resolution   height{3}\\n            {2}set   notifier   <notifier   app>{1}   -   call   <notifier   app>   with   each   new   song   title\\n            {2}set   order   <relevance|date|views|rating>{1}   search   result   ordering\\n            {2}set   user_order   <<nothing>|relevance|date|views|rating>{1}   user   upload   list\\n                        result   ordering,   leave   blank   for   the   same   as   order   setting\\n            {2}set   overwrite   true|false{1}   -   overwrite   existing   files   (skip   if   false)\\n            {2}set   player   <player   app>{1}   -   use   <player   app>   for   playback\\n            {2}set   playerargs   <args>{1}   -   use   specified   arguments   with   player\\n            {2}set   search_music   true|false{1}   -   search   only   music   (all   categories   if   false)\\n            {2}set   show_mplayer_keys   true|false{1}   -   show   keyboard   help   for   mplayer   and   mpv\\n            {2}set   show_status   true|false{1}   -   show   status   messages   and   progress\\n            {2}set   show_video   true|false{1}   -   show   video   output   (audio   only   if   false)\\n            {2}set   window_pos   <top|bottom>-<left|right>{1}   -   set   player   window   position\\n            {2}set   window_size   <number>x<number>{1}   -   set   player   window   width   &   height\\n            {2}set   audio_format   <auto|m4a|webm>{1}   -   set   default   music   audio   format\\n            {2}set   api_key   <key>{1}   -   use   a   different   API   key   for   accessing   the   YouTube   Data   API\\n            '.format(c.ul, c.w, c.y, ('\\n{0}set   max_results   <number>{1}   -   show   <number>   results   when   searching   (max   50)'.format(c.y, c.w) if (not g.detectable_size) else ''))), ('tips', 'Advanced   Tips', '\\n            {0}Advanced   Tips{1}\\n\\n            Use   {2}-w{1},   {2}-f{1}   or   {2}-a{1}   with   your   choice   to   override   the   configured               setting   and\\n            play   items   in   windowed,   fullscreen   or   audio   modes.      E.g.,   1-4   -a\\n\\n            When   specifying   columns   with   {2}set   columns{1}   command,   append   :N   to   set               width.\\n                        E.g.:   {2}set   columns   date   views   user:17   likes{1}\\n\\n            When   using   {2}open{1},   {2}view{1}   or   {2}play{1}   to   access   a   local   playlist,               you   can   enter\\n            the   first   few   characters   instead   of   the   whole   name.\\n\\n            Use   {2}5-{1}   to   select   items   5   upward   and   {2}-5{1}   to   select   up   to   item   5.               This   can   be\\n            included   with   other   choices.   e.g.,   5,3,7-,-2\\n            You   can   use   spaces   instead   of   commas:   5   3   7-   -2\\n            Reversed   ranges   also   work.   eg.,   5-2\\n\\n            {2}dump{1}   -   to   show   entire   contents   of   an   opened   YouTube   playlist.\\n                                 (useful   for   playing   or   saving   entire   playlists,   use   {2}undump{1}   to               undo)\\n\\n            {2}set   player   mpv{1}   or   {2}set   player   mplayer{1}   -   change   player   application\\n\\n            Use   {2}1{1}   and   {2}0{1}   in   place   of   true   and   false   when   using   the   {2}set{1}               command\\n            '.format(c.ul, c.w, c.y)), ('new', 'New   Features', '\\n            {0}New   Features   in   v0.2.7{1}\\n\\n               -   Setting   for   default   audio   format   (nishanthkarthik)\\n\\n               -   Search   history   with   \"history\"   command   (kraetzin)\\n\\n               -   Add   syntax   for   repeating   a   track   several   times   (ghallak)\\n\\n               -   New   \"reverse\"   command   (kraetzin)\\n\\n               -   New   \"daurl   <url>\"   command   (maricn){2}\\n            '.format(c.ul, c.w, c.y))]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def vvd(val, valok, dval, func, test, status): \n    assert quantity_allclose(val, (valok * val.unit), atol=(dval * val.unit))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def clipped_relu(x, z=20.0): \n    return ClippedReLU(z)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_rare_data(otu_table, seqs_per_sample, include_small_samples=False, subsample_f=subsample): \n    with errstate(empty='raise'): \n      if (not include_small_samples): \n         otu_table = filter_samples_from_otu_table(otu_table, otu_table.ids(), seqs_per_sample, inf) \n      def func(x, s_id, s_md): \n         if (x.sum() < seqs_per_sample): \n            return x \n         else: \n            return subsample_f(x.astype(int), seqs_per_sample) \n      subsampled_otu_table = otu_table.transform(func, axis='sample') \n      return subsampled_otu_table",
        "line_count": 10,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def vector_as_matrix(v): \n    return [[v_i] for v_i in v]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def create_local_xmlrpc_uri(port): \n    return ('http://%s:%s/' % (get_host_name(), port))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_bake_with_apostrophe_and_run_tests(cookies): \n    with bake_in_temp_dir(cookies, extra_context={'full_name': \"O'connor\"}) as result: \n      assert result.project.isdir() \n      (run_inside_dir('python   setup.py   test', str(result.project)) == 0)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def format_timedelta(datetime_or_timedelta, granularity='second', threshold=0.85): \n    return get_i18n().format_timedelta(datetime_or_timedelta, granularity, threshold)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sci(im): \n    gca()._sci(im)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_up(): \n    for filename in ['test_file', 'Phylip/opuntia.phy', 'Phylip/hedgehog.phy']: \n      if os.path.isfile(filename): \n         os.remove(filename)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def decode_result(found): \n    return {True: 'Countermodel   found', False: 'No   countermodel   found', None: 'None'}[found]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'smooth', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _Cycle(value, unused_context, args): \n    return args[((value - 1) % len(args))]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def what(): \n    return 'serializer/file'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def image_resize_image_big(base64_source, size=(1024, 1024), encoding='base64', filetype=None, avoid_if_small=True): \n    return image_resize_image(base64_source, size, encoding, filetype, avoid_if_small)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jsonrpc_result(id, result): \n    return {'jsonrpc': '2.0', 'result': result, 'id': id}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addGeometryList(faces, xmlElement): \n    for face in faces: \n      faceElement = xml_simple_reader.XMLElement() \n      face.addToAttributeDictionary(faceElement.attributeDictionary) \n      faceElement.className = 'face' \n      faceElement.parent = xmlElement \n      xmlElement.children.append(faceElement)",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def FakeUTime(path, times): \n    raise OSError(errno.EPERM, 'Operation   not   permitted', path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unicode_join(seq): \n    return concat(imap(text_type, seq))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_caller_id(name): \n    return make_global_ns(ns_join(get_ros_namespace(), name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def yaml_squote(text): \n    with io.StringIO() as ostream: \n      yemitter = yaml.emitter.Emitter(ostream, width=six.MAXSIZE) \n      yemitter.write_single_quoted(six.text_type(text)) \n      return ostream.getvalue()",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_for_default_values(fname, arg_val_dict, compat_args): \n    for key in arg_val_dict: \n      try: \n         v1 = arg_val_dict[key] \n         v2 = compat_args[key] \n         if (((v1 is not None) and (v2 is None)) or ((v1 is None) and (v2 is not None))): \n            match = False \n         else: \n            match = (v1 == v2) \n         if (not is_bool(match)): \n            raise ValueError(\"'match'   is   not   a   boolean\") \n      except: \n         match = (arg_val_dict[key] is compat_args[key]) \n      if (not match): \n         raise ValueError(\"the   '{arg}'   parameter   is   not   supported   in   the   pandas   implementation   of   {fname}()\".format(fname=fname, arg=key))",
        "line_count": 14,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def _swap_curly(string): \n    return string.replace('{{   ', '{{').replace('{{', '\\x00').replace('{', '{{').replace('\\x00', '{').replace('   }}', '}}').replace('}}', '\\x00').replace('}', '}}').replace('\\x00', '}')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_token(catalog): \n    return catalog['access']['token']['id']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_sans_from_csr(csr, typ=OpenSSL.crypto.FILETYPE_PEM): \n    return _get_sans_from_cert_or_req(csr, OpenSSL.crypto.load_certificate_request, typ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def authorize(api_handle, user, resource, arg1=None, arg2=None): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CalculateVariables(default_variables, params): \n    default_variables.setdefault('OS', gyp.common.GetFlavor(params))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_word(word): \n    return ((len(word) <= 2) or (word in SAME_BLACKLIST))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def extract_msg_options(options, keep=MSG_OPTIONS): \n    return dict(((name, options.get(name)) for name in keep))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_all(): \n    return sorted((get_enabled() + get_disabled()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ipv6_addr(addr): \n    return __ip_addr(addr, socket.AF_INET6)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addXIntersectionIndexesFromLoops(frontOverWidth, loops, solidIndex, xIntersectionIndexLists, width, yList): \n    for loop in loops: \n      addXIntersectionIndexesFromLoop(frontOverWidth, loop, solidIndex, xIntersectionIndexLists, width, yList)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def on_plugin_start(config): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _orm_deannotate(element): \n    return sql_util._deep_deannotate(element, values=('_orm_adapt', 'parententity'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_user_id(user): \n    return user.user_id()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update(individual, mu, sigma): \n    for (i, mu_i) in enumerate(mu): \n      individual[i] = random.gauss(mu_i, sigma)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def new(data=None): \n    return RIPEMD160Hash().new(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def arma2ar(ar, ma, nobs=100): \n    return arma_impulse_response(ma, ar, nobs=nobs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def view(request): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices_callback, discovery_info=None): \n    add_devices_callback(DEVICES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _IsFileOrDirWithFile(path): \n    return (os.path.isfile(path) or (os.path.isdir(path) and os.path.isfile(os.path.join(path, 'include.yaml'))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def mmap_read(f, sz=0, close=True): \n    return _mmap_do(f, sz, mmap.MAP_PRIVATE, mmap.PROT_READ, close)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_suite_tests(suite): \n    for item in suite._tests: \n      if isinstance(item, unittest.TestCase): \n         (yield item) \n      elif isinstance(item, unittest.TestSuite): \n         for r in iter_suite_tests(item): \n            (yield r) \n      else: \n         raise Exception(('unknown   object   %r   inside   test   suite   %r' % (item, suite)))",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def impact_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skip(reason): \n    return _skip_test(reason, 'SKIP')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO_readall(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vcpu_pin(vm_, vcpu, cpus): \n    with _get_xapi_session() as xapi: \n      vm_uuid = _get_label_uuid(xapi, 'VM', vm_) \n      if (vm_uuid is False): \n         return False \n      def cpu_make_map(cpulist): \n         cpus = [] \n         for c in cpulist.split(','): \n            if (c == ''): \n               continue \n            if ('-' in c): \n               (x, y) = c.split('-') \n               for i in range(int(x), (int(y) + 1)): \n                  cpus.append(int(i)) \n            elif (c[0] == '^'): \n               cpus = [x for x in cpus if (x != int(c[1:]))] \n            else: \n               cpus.append(int(c)) \n         cpus.sort() \n         return ','.join(map(str, cpus)) \n      if (cpus == 'all'): \n         cpumap = cpu_make_map('0-63') \n      else: \n         cpumap = cpu_make_map('{0}'.format(cpus)) \n      try: \n         xapi.VM.add_to_VCPUs_params_live(vm_uuid, 'cpumap{0}'.format(vcpu), cpumap) \n         return True \n      except Exception: \n         return __salt__['cmd.run']('{0}   vcpu-pin   {1}   {2}   {3}'.format(_get_xtool(), vm_, vcpu, cpus), python_shell=False)",
        "line_count": 28,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def textinfo_from_filename(path): \n    return TextInfo.init_from_filename(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_vms(service_instance): \n    return list_objects(service_instance, vim.VirtualMachine)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def distro_release_attr(attribute): \n    return _distro.distro_release_attr(attribute)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def merge(obj_a, obj_b, strategy='smart', renderer='yaml', merge_lists=False): \n    return salt.utils.dictupdate.merge(obj_a, obj_b, strategy, renderer, merge_lists)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nova_import_no_db_in_virt(logical_line, filename): \n    if (('nova/virt' in filename) and (not filename.endswith('fake.py'))): \n      if logical_line.startswith('from   nova   import   db'): \n         (yield (0, 'N307:   nova.db   import   not   allowed   in   nova/virt/*'))",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_single_job(request, jobid): \n    return Job.from_id(jt=request.jt, jobid=jobid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def now(): \n    return datetime.datetime.now(tz=Utc())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_users(n_users): \n    for i in range(0, n_users): \n      user = Profile() \n      user.username = ('user_%s' % i) \n      user.save()",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_dependencies(): \n    return config.check_driver_dependencies(__virtualname__, {'libcloud': HAS_LIBS})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_variables_to_restore(): \n    return tf.get_collection(VARIABLES_TO_RESTORE)[:]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jscode(expr, assign_to=None, **settings): \n    return JavascriptCodePrinter(settings).doprint(expr, assign_to)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iteritems(d, **kw): \n    return iter(getattr(d, _iteritems)(**kw))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_number(best=False): \n    return _distro.build_number(best)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([DemoImageProcessing('camera.demo_camera', 'Demo'), DemoImageProcessingAlpr('camera.demo_camera', 'Demo   Alpr')])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _iteritems(d): \n    return (d.iteritems() if hasattr(d, 'iteritems') else d.items())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def number_of_nonisomorphic_trees(order): \n    return sum((1 for _ in nonisomorphic_trees(order)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _copy_r_to_cat(r, cat): \n    for key in r._attributes: \n      new_key = (u'validate_' + key) \n      cat[new_key] = r._attributes[key]",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _settings_closed(events, params): \n    params['fig_options'] = None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _generate_reset_key(user): \n    return '{0}_reset_key'.format(user.name).lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def EmblCdsFeatureIterator(handle, alphabet=Alphabet.generic_protein): \n    return EmblScanner(debug=0).parse_cds_features(handle, alphabet)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return DwindleRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def virtual_interface_get_by_uuid(context, vif_uuid): \n    return IMPL.virtual_interface_get_by_uuid(context, vif_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in6_ismaddr(str): \n    return in6_isincluded(str, 'ff00::', 8)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def randomish_uid(): \n    with RID_COUNTER_LOCK: \n      global RID_COUNTER \n      RID_COUNTER += 1 \n      RID_COUNTER %= 4096 \n      return ('%3.3x%7.7x%x' % (random.randint(0, 4095), (time.time() // 16), RID_COUNTER))",
        "line_count": 5,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tempnam_no_warning(*args): \n    return os.tempnam(*args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def t_NUMBER(t): \n    return t",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def blame_upstream(registry, xml_parent, data): \n    XML.SubElement(xml_parent, 'hudson.plugins.blame__upstream__commiters.BlameUpstreamCommitersPublisher')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_glance_metadata_get(context, volume_id): \n    return IMPL.volume_glance_metadata_get(context, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _drop_protected_attrs(model_class, values): \n    for attr in model_class.__protected_attributes__: \n      if (attr in values): \n         del values[attr]",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_eol_chars_from_os_name(os_name): \n    for (eol_chars, name) in EOL_CHARS: \n      if (name == os_name): \n         return eol_chars",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def initialize(): \n    db_options.set_defaults(CONF, connection='sqlite:///keystone.db')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _select_iterables(elements): \n    return itertools.chain(*[c._select_iterable for c in elements])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def freeze_login_details(mc_kwargs, mm_kwargs): \n    for (cls, kwargs) in ((Musicmanager, mm_kwargs), (Mobileclient, mc_kwargs)): \n      freeze_method_kwargs(cls, u'login', **kwargs)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def calculate_distance_between_colors(color1, color2): \n    return (((color1[0] + color2[0]) / 2), ((color1[1] + color2[1]) / 2), ((color1[2] + color2[2]) / 2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_allocated_get_all_by_project(context, project_id): \n    return IMPL.quota_allocated_get_all_by_project(context, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_chelsea(): \n    data.chelsea()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ClearProspectiveSearchStorage(prospective_search_path): \n    if os.path.lexists(prospective_search_path): \n      try: \n         os.remove(prospective_search_path) \n      except OSError as e: \n         logging.warning('Failed   to   remove   prospective   search   file   %r:   %s', prospective_search_path, e)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def create_path(*args): \n    return os.path.join(*args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_namespace_to_cmd(cmd, namespace=None): \n    return ((['ip', 'netns', 'exec', namespace] + cmd) if namespace else cmd)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def print_data_patch(f): \n    print('\\n            def   _value_to_graph_object(self,   index,   value,   _raise=True):\\n\\n                        if   not   isinstance(value,   dict):\\n                                    if   _raise:\\n                                                notes   =   [\\'Entry   should   subclass   dict.\\']\\n                                                path   =   self._get_path()   +   (index,   )\\n                                                raise   exceptions.PlotlyListEntryError(self,   path,\\n                                                                                                                                                                  notes=notes)\\n                                    else:\\n                                                return\\n\\n                        item   =   value.get(\\'type\\',   \\'scatter\\')\\n                        if   item   not   in   graph_reference.ARRAYS[\\'data\\'][\\'items\\']:\\n                                    if   _raise:\\n                                                path   =   self._get_path()   +   (0,   )\\n                                                raise   exceptions.PlotlyDataTypeError(self,   path)\\n\\n                        return   GraphObjectFactory.create(item,   _raise=_raise,\\n                                                                                                                           _parent=self,\\n                                                                                                                           _parent_key=index,   **value)\\n\\n            def   get_data(self,   flatten=False):\\n                        \"\"\"\\n                        Returns   the   JSON   for   the   plot   with   non-data   elements   stripped.\\n\\n                        :param   (bool)   flatten:   {\\'a\\':   {\\'b\\':   \\'\\'}}   -->   {\\'a.b\\':   \\'\\'}\\n                        :returns:   (dict|list)   Depending   on   (flat|unflat)\\n\\n                        \"\"\"\\n                        if   flatten:\\n                                    data   =   [v.get_data(flatten=flatten)   for   v   in   self]\\n                                    d   =   {}\\n                                    taken_names   =   []\\n                                    for   i,   trace   in   enumerate(data):\\n\\n                                                #   we   want   to   give   the   traces   helpful   names\\n                                                #   however,   we   need   to   be   sure   they\\'re   unique   too...\\n                                                trace_name   =   trace.pop(\\'name\\',   \\'trace_{0}\\'.format(i))\\n                                                if   trace_name   in   taken_names:\\n                                                            j   =   1\\n                                                            new_trace_name   =   \"{0}_{1}\".format(trace_name,   j)\\n                                                            while   new_trace_name   in   taken_names:\\n                                                                        new_trace_name   =   (\\n                                                                                    \"{0}_{1}\".format(trace_name,   j)\\n                                                                        )\\n                                                                        j   +=   1\\n                                                            trace_name   =   new_trace_name\\n                                                taken_names.append(trace_name)\\n\\n                                                #   finish   up   the   dot-concatenation\\n                                                for   k,   v   in   trace.items():\\n                                                            key   =   \"{0}.{1}\".format(trace_name,   k)\\n                                                            d[key]   =   v\\n                                    return   d\\n                        else:\\n                                    return   super(Data,   self).get_data(flatten=flatten)\\n', file=f, end='')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _create_preference_update_error(preference_key, preference_value, error): \n    return PreferenceUpdateError(developer_message=u\"Save   failed   for   user   preference   '{key}'   with   value   '{value}':   {error}\".format(key=preference_key, value=preference_value, error=error), user_message=_(u\"Save   failed   for   user   preference   '{key}'   with   value   '{value}'.\").format(key=preference_key, value=preference_value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_range(range_list): \n    return '{}->{}'.format(range_list[0], range_list[(-1)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def AROONOSC(barDs, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_hl(barDs, count, talib.AROONOSC, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _validate_throttle(throttle): \n    if (throttle is not None): \n      if (not isinstance(throttle, dict)): \n         raise TypeError('throttle   must   be   a   dictionary,   provided   value:   {0}'.format(throttle))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def signature(part): \n    return (part.func, part.args, part.keywords, part.__dict__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_xmp_identifers(parent): \n    for li in XPath(u'./rdf:Bag/rdf:li')(parent): \n      is_resource = (li.attrib.get(expand(u'rdf:parseType'), None) == u'Resource') \n      is_resource = (is_resource or ((len(li) == 1) and (li[0].tag == expand(u'rdf:Description')))) \n      if (not is_resource): \n         (yield (None, (li.text or u''))) \n      value = XPath(u'descendant::rdf:value')(li) \n      if (not value): \n         continue \n      value = (value[0].text or u'') \n      scheme = XPath(u'descendant::xmpidq:Scheme')(li) \n      if (not scheme): \n         (yield (None, value)) \n      else: \n         (yield ((scheme[0].text or u''), value))",
        "line_count": 14,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def describe_nat_gateways(nat_gateway_id=None, subnet_id=None, subnet_name=None, vpc_id=None, vpc_name=None, states=('pending', 'available'), region=None, key=None, keyid=None, profile=None): \n    return _find_nat_gateways(nat_gateway_id=nat_gateway_id, subnet_id=subnet_id, subnet_name=subnet_name, vpc_id=vpc_id, vpc_name=vpc_name, states=states, region=region, key=key, keyid=keyid, profile=profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_signals(sig_handler_dict): \n    for (s, h) in sig_handler_dict.items(): \n      signal.signal(s, h)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def iter_mode(n, obj='ndarray'): \n    for mode in cap[obj][MODE]: \n      for char in fmtdict[mode]: \n         (yield randitems(n, obj, mode, char))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def print_jscode(expr, **settings): \n    print(jscode(expr, **settings))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def precision(true_positives, false_positives): \n    return accuracy(true_positives, 0, false_positives, 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getencoder(encoding): \n    return lookup(encoding).encode",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def triplet(anchor, positive, negative, margin=0.2): \n    return Triplet(margin)(anchor, positive, negative)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_group(path, follow_symlinks=True): \n    return stats(os.path.expanduser(path), follow_symlinks=follow_symlinks).get('group', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def header(hdr, value): \n    ctx.headers.append((hdr, value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def num_questions(user): \n    return Question.objects.filter(creator=user).count()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_default_version_hostname(): \n    return os.getenv('DEFAULT_VERSION_HOSTNAME')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def removeQuotes(s, l, t): \n    return t[0][1:(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_non_float_chars(s): \n    return re.sub('[^-+0123456789.]+', '', six.text_type(s))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shutdown(): \n    log.debug('Cisco   NSO   proxy   shutdown()   called...')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ex_rvalue(name): \n    return ast.Name(name, ast.Load())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def schunk(string, size): \n    return [string[i:(i + size)] for i in range(0, len(string), size)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def all_hooks(): \n    return _HOOKS",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def monomial_divides(A, B): \n    return all(((a <= b) for (a, b) in zip(A, B)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_rast(h, f): \n    if (h[:4] == 'Y\\xa6j\\x95'): \n      return 'rast'",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def create_database(name, owner, template='template0', encoding='UTF8', locale='en_US.UTF-8'): \n    _run_as_pg(('createdb   --owner   %(owner)s   --template   %(template)s                                                         --encoding=%(encoding)s   --lc-ctype=%(locale)s                                                         --lc-collate=%(locale)s   %(name)s' % locals()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def standard_b64decode(s): \n    return b64decode(s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_inherited_metadata(descriptor): \n    if descriptor.has_children: \n      parent_metadata = descriptor.xblock_kvs.inherited_settings.copy() \n      for field in InheritanceMixin.fields.values(): \n         if field.is_set_on(descriptor): \n            parent_metadata[field.name] = field.read_json(descriptor) \n      for child in descriptor.get_children(): \n         inherit_metadata(child, parent_metadata) \n         compute_inherited_metadata(child)",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def experience(): \n    return s3db.hrm_experience_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_uri(uri): \n    return (('://' in uri) and bool(urlparse(uri).scheme))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def hazard_point(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def authenticate(api_handle, username, password): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def result_list(cl): \n    return {'cl': cl, 'result_hidden_fields': list(result_hidden_fields(cl)), 'result_headers': list(result_headers(cl)), 'results': list(results(cl))}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _delete_users(users): \n    return __salt__['users.delete_users'](users, commit=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lbp_key(f): \n    return (sig_key(Sign(f), Polyn(f).ring.order), (- Num(f)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reinitLoggingDir(): \n    if (gLoggingInitialized and ('NTA_LOG_DIR' in os.environ)): \n      makeDirectoryFromAbsolutePath(os.path.dirname(_genLoggingFilePath()))",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def set_var(name, value): \n    return config(name, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_ca_bundle(target=None, source=None, merge_files=None): \n    return salt.utils.http.update_ca_bundle(target, source, __opts__, merge_files)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def outerjoin(left, right, onclause=None, join_to_left=None): \n    return _ORMJoin(left, right, onclause, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_magic(magic): \n    if (magic != 779314790): \n      raise RuntimeError('This   file   does   not   seems   to   be   an   sff   file.')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _KindsListToTuple(kinds_list): \n    return ('', [{'kind_name': kind} for kind in sorted(kinds_list)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def find_sample_file(filename): \n    return find_file(filename, path=os.path.join(neutron.__path__[0], '..', 'etc'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def control_ttyhup(port, disable_hup): \n    if (platform.system() == 'Linux'): \n      if disable_hup: \n         os.system(('stty   -F   %s   -hup' % port)) \n      else: \n         os.system(('stty   -F   %s   hup' % port))",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_redaction_policy(): \n    return LOG_REDACTION_FILE.get()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def path_to_url(path): \n    return path.replace(os.sep, '/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_identity(x): \n    return x",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def three_to_index(s): \n    return d3_to_index[s]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enumerate(): \n    with _active_limbo_lock: \n      return (_active.values() + _limbo.values())",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def arcsec(val): \n    return numpy.arccos((1.0 / val))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def s_poly(cp): \n    return lbp_sub(lbp_mul_term(cp[2], cp[1]), lbp_mul_term(cp[5], cp[4]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def need_join(model, table): \n    return (table not in model._sa_class_manager.mapper.tables)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isEven(x): \n    return ((x % 2) == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_all(xapi, rectype): \n    return getattr(xapi, rectype).get_all()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def admin_wrapper(request): \n    return staff_member_required(site.index)(request)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_signing_format(data): \n    return '.'.join(map(str, data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def team(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def EvalNormalCdfInverse(p, mu=0, sigma=1): \n    return stats.norm.ppf(p, loc=mu, scale=sigma)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trg_write(uid, res_type, res_id, cr): \n    return WorkflowService.new(cr, uid, res_type, res_id).write()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rootserviceHandle(target): \n    GlobalObject().root.service.mapTarget(target)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _consume_decimal(seq): \n    return (int(seq[0:2], 10), seq[2:])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_test_bloom(test_logs): \n    for data in test_logs: \n      address = data['address'] \n      b = bloom.bloom_insert(0, decode_hex(address)) \n      for t in data['topics']: \n         b = bloom.bloom_insert(b, decode_hex(t)) \n      topics = [decode_int_from_hex(x) for x in data['topics']] \n      log = pb.Log(decode_hex(address), topics, '') \n      log_bloom = bloom.b64(bloom.bloom_from_list(log.bloomables())) \n      assert (encode_hex(log_bloom) == encode_hex_from_int(b)) \n      assert (str_to_bytes(data['bloom']) == encode_hex(log_bloom))",
        "line_count": 10,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def build_text_response(request, data, code): \n    return build_response(request, data, code, u'ascii')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_time(string): \n    return get_i18n().parse_time(string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_le_script_version(venv_dir, version): \n    with open(join(venv_dir, 'letsencrypt', 'bin', 'letsencrypt'), 'w') as script: \n      script.write((\"#!/usr/bin/env   python\\nfrom   sys   import   stderr\\nstderr.write('letsencrypt   %s\\\\n')\" % version))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _quote_domain(domain): \n    return urllib.parse.quote(domain.replace('.', '%2E'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def migrate(vm_, target, live=1, port=0, node=(-1), ssl=None, change_home_server=0): \n    with _get_xapi_session() as xapi: \n      vm_uuid = _get_label_uuid(xapi, 'VM', vm_) \n      if (vm_uuid is False): \n         return False \n      other_config = {'port': port, 'node': node, 'ssl': ssl, 'change_home_server': change_home_server} \n      try: \n         xapi.VM.migrate(vm_uuid, target, bool(live), other_config) \n         return True \n      except Exception: \n         return False",
        "line_count": 10,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _yield_all_steps(emr_conn, cluster_id, *args, **kwargs): \n    for resp in _repeat(_patched_list_steps, emr_conn, cluster_id, *args, **kwargs): \n      for step in getattr(resp, 'steps', []): \n         (yield step)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def negate(f): \n    return (lambda *args, **kwargs: (- f(*args, **kwargs)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def teensy_config(choice): \n    return {'1': 'powershell_down.ino', '2': 'wscript.ino', '3': 'powershell_reverse.ino', '4': 'beef.ino', '5': 'java_applet.ino', '6': 'gnome_wget.ino'}.get(choice, 'ERROR')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backend(comment, content_object, request): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_password(name, password): \n    return __salt__['user.update'](name=name, password=password)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nbsp(x): \n    return x.replace(u'   ', u'\\xa0')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nos_unknown_host_cb(host, fingerprint): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def s3_auth_on_login(form): \n    s3_clear_session()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_datacenters(service_instance): \n    return list_objects(service_instance, vim.Datacenter)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def neg(a): \n    return (- a)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_binary(content): \n    return ('\\x00' in content[:FIRST_FEW_BYTES])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftSequence(): \n    return 'carve,bottom,preface,widen,inset,fill,multiply,speed,temperature,raft,chamber,tower,jitter,clip,stretch,comb,cool,hop,wipe,oozebane,outline,splodge,home,lash,fillet,limit,reversal,dimension,altshell,unpause,export'.split(',')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def structure_tensor_eigvals(Axx, Axy, Ayy): \n    return _image_orthogonal_matrix22_eigvals(Axx, Axy, Ayy)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def retry(times): \n    return repeat_with_success_at_least(times, 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shallow_copy(in_list): \n    return [x for x in in_list]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def BuildFileTargets(target_list, build_file): \n    return [p for p in target_list if (BuildFile(p) == build_file)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _TruncDelta(timedelta): \n    return datetime.timedelta(days=timedelta.days, seconds=timedelta.seconds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_instance(c_instance): \n    return GenericScript(c_instance, Live.MidiMap.MapMode.absolute, Live.MidiMap.MapMode.absolute, DEVICE_CONTROLS, TRANSPORT_CONTROLS, VOLUME_CONTROLS, TRACKARM_CONTROLS, BANK_CONTROLS, CONTROLLER_DESCRIPTION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setenv(name, value): \n    os.environ[name] = value",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_sub_created_events(src_dir_path): \n    for (root, directories, filenames) in os.walk(src_dir_path): \n      for directory in directories: \n         (yield DirCreatedEvent(os.path.join(root, directory))) \n      for filename in filenames: \n         (yield FileCreatedEvent(os.path.join(root, filename)))",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def last(attrs=None, where=None): \n    return _osquery_cmd(table='last', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _gen_index_name(keys): \n    return _UUNDER.join([('%s_%s' % item) for item in keys])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def rotate_90_counterclockwise(request, fileobjects): \n    transpose_image(request, fileobjects, 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('boto_datapipeline' if ('boto_datapipeline.create_pipeline' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'skin', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def comparable_formats(): \n    return ([u'png'] + list(converter))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run(): \n    for chunk in chunked(Webapp.objects.all(), 50): \n      for app in chunk: \n         generate_image_assets.delay(app, slug='featured_tile') \n         print (u'Generated   feature   tile   for   app   %d' % app.id)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def removeBackupFilesByTypes(fileTypes): \n    for fileType in fileTypes: \n      removeBackupFilesByType(fileType)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _flush_dscl_cache(): \n    __salt__['cmd.run'](['dscacheutil', '-flushcache'], python_shell=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_module_imports(project, pymodule): \n    return module_imports.ModuleImports(project, pymodule)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def requires_special_home_display(name): \n    return ((name == '~') and Color.HOME_SPECIAL_DISPLAY)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def query(params): \n    return TrainTicketsQuery(*params).query()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_ns_name(prefix, identifier): \n    return (prefix + identifier)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vgg_16(inputs, num_classes=1000, is_training=True, dropout_keep_prob=0.5, spatial_squeeze=True, scope='vgg_16'): \n    with tf.variable_scope(scope, 'vgg_16', [inputs]) as sc: \n      end_points_collection = (sc.name + '_end_points') \n      with slim.arg_scope([slim.conv2d, slim.fully_connected, slim.max_pool2d], outputs_collections=end_points_collection): \n         net = slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1') \n         net = slim.max_pool2d(net, [2, 2], scope='pool1') \n         net = slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2') \n         net = slim.max_pool2d(net, [2, 2], scope='pool2') \n         net = slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3') \n         net = slim.max_pool2d(net, [2, 2], scope='pool3') \n         net = slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4') \n         net = slim.max_pool2d(net, [2, 2], scope='pool4') \n         net = slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5') \n         net = slim.max_pool2d(net, [2, 2], scope='pool5') \n         net = slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6') \n         net = slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6') \n         net = slim.conv2d(net, 4096, [1, 1], scope='fc7') \n         net = slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7') \n         net = slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8') \n         end_points = slim.utils.convert_collection_to_dict(end_points_collection) \n         if spatial_squeeze: \n            net = tf.squeeze(net, [1, 2], name='fc8/squeezed') \n            end_points[(sc.name + '/fc8')] = net \n         return (net, end_points)",
        "line_count": 23,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def processElse(xmlElement): \n    evaluate.processCondition(xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _bytes_feature(value): \n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_configuration(dev, bConfigurationNumber): \n    dev.set_configuration(bConfigurationNumber)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onSpaceData(spaceID, entryID, key, value): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def smart_split(text): \n    for bit in split_re.finditer(text): \n      (yield bit.group(0))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def migration_get_all_by_filters(context, filters): \n    return IMPL.migration_get_all_by_filters(context, filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_pre_delete(instance, sender, **kwargs): \n    if (instance.name == 'anonymous'): \n      raise Exception('Deletion   of   the   anonymous   group   is                           not   permitted   as   will   break   the   geonode   permissions   system')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_hwclock(): \n    return 'localtime'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Target(filename): \n    return (os.path.splitext(filename)[0] + '.o')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_long_path_name(path): \n    return _get_long_path_name(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _InitNinjaFlavor(params, target_list, target_dicts): \n    for qualified_target in target_list: \n      spec = target_dicts[qualified_target] \n      if spec.get('msvs_external_builder'): \n         continue \n      path_to_ninja = spec.get('msvs_path_to_ninja', 'ninja.exe') \n      spec['msvs_external_builder'] = 'ninja' \n      if (not spec.get('msvs_external_builder_out_dir')): \n         (gyp_file, _, _) = gyp.common.ParseQualifiedTarget(qualified_target) \n         gyp_dir = os.path.dirname(gyp_file) \n         configuration = '$(Configuration)' \n         if (params.get('target_arch') == 'x64'): \n            configuration += '_x64' \n         spec['msvs_external_builder_out_dir'] = os.path.join(gyp.common.RelativePath(params['options'].toplevel_dir, gyp_dir), ninja_generator.ComputeOutputDir(params), configuration) \n      if (not spec.get('msvs_external_builder_build_cmd')): \n         spec['msvs_external_builder_build_cmd'] = [path_to_ninja, '-C', '$(OutDir)', '$(ProjectName)'] \n      if (not spec.get('msvs_external_builder_clean_cmd')): \n         spec['msvs_external_builder_clean_cmd'] = [path_to_ninja, '-C', '$(OutDir)', '-tclean', '$(ProjectName)']",
        "line_count": 17,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def is_not_scalar_zero(builder, value): \n    return _scalar_pred_against_zero(builder, value, functools.partial(builder.fcmp_unordered, '!='), '!=')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def server_hardreset(host=None, admin_username=None, admin_password=None, module=None): \n    return __execute_cmd('serveraction   hardreset', host=host, admin_username=admin_username, admin_password=admin_password, module=module)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def marker_sorted(markers, matches): \n    return sorted(markers, key=cmp_to_key(marker_comparator(matches, markers)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def WinFileTimeToDateTime(filetime): \n    return (NULL_FILETIME + datetime.timedelta(microseconds=(filetime / 10)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable_site(site_name): \n    if (not is_site_enabled(site_name)): \n      run_as_root(('a2ensite   %s' % _site_config_filename(site_name)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def poisson(y_true, y_pred): \n    return tf.reduce_sum((y_pred - (y_true * tf.log((y_pred + 1e-08)))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_style(opts=(), **kwargs): \n    return (lambda text: colorize(text, opts, **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_full_cache(items, id_key='id', ids=None): \n    return dict(((item['id'], item) for item in items))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_month_names(width='wide', context='format', locale=LC_TIME): \n    return Locale.parse(locale).months[context][width]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in6_isdocaddr(str): \n    return in6_isincluded(str, '2001:db8::', 32)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_ipver_str(ip_version): \n    return IP_VERSION_DICT.get(ip_version, '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _valid_dict(dic): \n    return (isinstance(dic, dict) and (len(dic) > 0))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _check_ironic_client_enabled(): \n    if (ironic_client is None): \n      common.raise_feature_not_supported()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def f_oneway(*args): \n    return _f_oneway(*args)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MailItemPropertyFromString(xml_string): \n    return atom.CreateClassFromXMLString(MailItemProperty, xml_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices_callback, discovery_info=None): \n    add_devices_callback(DEVICES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _sizestr(size_in_g): \n    return ('%sG' % size_in_g)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('zabbix.host_create' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_marketing_site_config(settings): \n    if settings.FEATURES.get('ENABLE_MKTG_SITE'): \n      if (not hasattr(settings, 'MKTG_URLS')): \n         raise ValueError(\"'ENABLE_MKTG_SITE'   is   True,   but   'MKTG_URLS'   is   not   defined.\") \n      if (not settings.MKTG_URLS.get('ROOT')): \n         raise ValueError(\"There   is   no   'ROOT'   defined   in   'MKTG_URLS'.\")",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _system_check_dimensionally_valid(a, b): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLABANDONEDBABY(barDs, count, penetration=(-4e+37)): \n    return call_talib_with_ohlc(barDs, count, talib.CDLABANDONEDBABY, penetration)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def force_rss(): \n    __SCHED.add_single_task(rss.run_method, 'RSS', 1, kronos.method.sequential, None, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _calculate_photo_filename(instance, filename): \n    return os.path.join(settings.MOZSPACE_PHOTO_DIR, (str(uuid.uuid4()) + '.jpg'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random_chars(num_chars): \n    return binascii.hexlify(os.urandom(int((num_chars / 2)))).decode('ascii')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def evaluation_question(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def allocate_ids(model, size, **kwargs): \n    return allocate_ids_async(model, size, **kwargs).get_result()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_sql_all(app): \n    return ((get_sql_create(app) + get_custom_sql(app)) + get_sql_indexes(app))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_pprint(value, verbose=False): \n    return pformat(value, verbose=verbose)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_authorized_node_settings(user_addon): \n    return AddonDataverseNodeSettings.find(Q('user_settings', 'eq', user_addon))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _arr2img(ar): \n    return Image.frombytes('L', (ar.shape[1], ar.shape[0]), ar.astype(numpy.ubyte).tostring())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DEMA(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.DEMA, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def option_namespace(name): \n    return (name + '-')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_tool_dependency(app, id): \n    return app.install_model.context.query(app.install_model.ToolDependency).get(app.security.decode_id(id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_direct_declarator_6(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_module_path(modname): \n    return osp.abspath(osp.dirname(sys.modules[modname].__file__))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index(): \n    return dict()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_format(filter_template, assertion_values): \n    return (filter_template % tuple(map(escape_filter_chars, assertion_values)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def replacer(dst): \n    return links.get(dst, dst)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_local_ip(local_ip): \n    if (not ip_lib.IPWrapper().get_device_by_ip(local_ip)): \n      LOG.error(_LE(\"Tunneling   can't   be   enabled   with   invalid   local_ip   '%s'.   IP   couldn't   be   found   on   this   host's   interfaces.\"), local_ip) \n      raise SystemExit(1)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def any(x, axis=None, keepdims=False): \n    return T.any(x, axis=axis, keepdims=keepdims)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def modify_mesh(x, insert_1, insert_2): \n    return np.sort(np.hstack((x, (0.5 * (x[insert_1] + x[(insert_1 + 1)])), (((2 * x[insert_2]) + x[(insert_2 + 1)]) / 3), ((x[insert_2] + (2 * x[(insert_2 + 1)])) / 3))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_color_groups(mapping, prefs): \n    for key in natsort(prefs.keys()): \n      col_name = prefs[key]['column'] \n      if ('colors' in prefs[key]): \n         if isinstance(prefs[key]['colors'], dict): \n            colors = prefs[key]['colors'].copy() \n         else: \n            colors = prefs[key]['colors'][:] \n      else: \n         colors = {} \n      labelname = prefs[key]['column'] \n      groups = group_by_field(mapping, col_name) \n      (colors, data_colors, data_color_order) = get_group_colors(groups, colors) \n      (yield (labelname, groups, colors, data_colors, data_color_order))",
        "line_count": 13,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def enabled(name, **kwargs): \n    return _get_svc('/etc/rc.d/{0}'.format(name), 'YES')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_cms_block_link(block, page): \n    return u'//{}/{}/{}'.format(settings.CMS_BASE, page, block.location)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _unHtml(s): \n    return subSGMLRefs(re_spacessub('   ', re_unhtmlsub('', s)).strip())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_config(path, calendar): \n    with open(path, 'a') as out: \n      out.write('\\n') \n      yaml.dump([calendar], out, default_flow_style=False)",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _isDefaultHandler(): \n    return (signal.getsignal(signal.SIGCHLD) == signal.SIG_DFL)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onGlobalDataDel(key): \n    DEBUG_MSG(('onDelGlobalData:   %s' % key))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _remap_date_counts(**kwargs): \n    for (label, qs) in kwargs.iteritems(): \n      res = defaultdict((lambda : {label: 0})) \n      for x in qs: \n         key = date(x['year'], x['month'], x.get('day', 1)) \n         res[key][label] += x['count'] \n      (yield res)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def no_prefix(name): \n    return (name.startswith('E') and (not name.startswith('EVENT')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _old_api_error(obj_name): \n    raise SystemExit(('%s   has   been   removed   in   PyInstaller   2.0.   Please   update   your   spec-file.   See   http://www.pyinstaller.org/wiki/MigrateTo2.0   for   details' % obj_name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user_remove(username, user=None, host=None, port=None, maintenance_db=None, password=None, runas=None): \n    return _role_remove(username, user=user, host=host, port=port, maintenance_db=maintenance_db, password=password, runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cancel_job(job): \n    default_scheduler.cancel_job(job)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def count_failures(runner): \n    return [TestResults(f, t) for (f, t) in runner._name2ft.values() if (f > 0)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def parse_argstring(magic_func, argstring): \n    return magic_func.parser.parse_argstring(argstring)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _assert_is_type(name, value, value_type): \n    if (not isinstance(value, value_type)): \n      if (type(value_type) is tuple): \n         types = ',   '.join((t.__name__ for t in value_type)) \n         raise ValueError('{0}   must   be   one   of   ({1})'.format(name, types)) \n      else: \n         raise ValueError('{0}   must   be   {1}'.format(name, value_type.__name__))",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def assert_array_almost_equal_nulp(x, y, nulp=1): \n    numpy.testing.assert_array_almost_equal_nulp(cupy.asnumpy(x), cupy.asnumpy(y), nulp=nulp)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_connection_status(value): \n    if (value.lower() not in ['planned', 'connected']): \n      raise ValidationError('Invalid   connection   status   ({});   must   be   either   \"planned\"   or   \"connected\".'.format(value))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def het_arch(resid, maxlag=None, autolag=None, store=False, regresults=False, ddof=0): \n    return acorr_lm((resid ** 2), maxlag=maxlag, autolag=autolag, store=store, regresults=regresults)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _sd_version(): \n    return salt.utils.systemd.version(__context__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_history_import_abspath_in_metadata(): \n    with HistoryArchive() as history_archive: \n      history_archive.write_metafiles(dataset_file_name=os.path.join(history_archive.temp_directory, 'outside.txt')) \n      history_archive.write_file('datasets/Pasted_Entry_1.txt', 'foo') \n      history_archive.write_outside() \n      _run_jihaw_cleanup(history_archive, 'Absolute   path   in   datasets_attrs.txt   allowed')",
        "line_count": 5,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_file(file): \n    return roslib.manifestlib.parse_file(StackManifest(), file)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_get(context, project_id, resource): \n    return IMPL.quota_get(context, project_id, resource)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_object_support(obj): \n    return isinstance(obj, models.Model)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_pathdir(val): \n    return os.path.dirname((val or u''))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewDerivation(elementNode, prefix, sideLength): \n    return SegmentDerivation(elementNode, prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def std_spec(batch_size, isotropic=True): \n    return DataSpec(batch_size=batch_size, scale_size=256, crop_size=224, isotropic=isotropic)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_metadata_update(context, volume_id, metadata, delete): \n    IMPL.volume_metadata_update(context, volume_id, metadata, delete)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_lights_xy(hass, lights, x_val, y_val, brightness): \n    for light in lights: \n      if is_on(hass, light): \n         turn_on(hass, light, xy_color=[x_val, y_val], brightness=brightness, transition=30)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getLogger(msg): \n    return _LoggerClass(msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show(job, related_jobs=None): \n    return flask.render_template('datasets/generic/show.html', job=job, related_jobs=related_jobs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def root_test(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flavor_extra_specs_delete(context, flavor_id, key): \n    IMPL.flavor_extra_specs_delete(context, flavor_id, key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def median(y): \n    return linkage(y, method='median', metric='euclidean')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eventloop(conn, limit=None, timeout=None, ignore_timeouts=False): \n    for i in ((limit and range(limit)) or count()): \n      try: \n         (yield conn.drain_events(timeout=timeout)) \n      except socket.timeout: \n         if (timeout and (not ignore_timeouts)): \n            raise",
        "line_count": 6,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def get_css_context(data, payload): \n    return [c for c in get_css_context_iter(data, payload)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _is_valid_field_name(name): \n    return (name and (name == name.strip()) and (not name.startswith('_')) and ('\"' not in name))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def servicegroup_server_exists(sg_name, s_name, s_port=None, **connection_args): \n    return (_servicegroup_get_server(sg_name, s_name, s_port, **connection_args) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def migration_update(context, id, values): \n    return IMPL.migration_update(context, id, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plot_mesh(x, y, tri): \n    for t in tri: \n      t_ext = [t[0], t[1], t[2], t[0]] \n      plot(x[t_ext], y[t_ext], 'r')",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def parse_etag_response(value): \n    if (value and (not value.startswith('W/'))): \n      unquote_match = QUOTES_RE.match(value) \n      if (unquote_match is not None): \n         value = unquote_match.group(1) \n         value = value.replace('\\\\\"', '\"') \n      return value",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def with_metaclass(meta, *bases): \n    return meta('NewBase', bases, {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(handle): \n    for line in handle: \n      if line.startswith('#'): \n         continue \n      (yield Record(line))",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def p_expression_number(t): \n    t[0] = t[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def swap_memory(): \n    return _psplatform.swap_memory()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def human_size(num, precision=3): \n    return (human_num(num, precision) + u'B')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_results(distributions, list_all_files): \n    for dist in distributions: \n      logger.notify('---') \n      logger.notify(('Name:   %s' % dist['name'])) \n      logger.notify(('Version:   %s' % dist['version'])) \n      logger.notify(('Location:   %s' % dist['location'])) \n      logger.notify(('Requires:   %s' % ',   '.join(dist['requires']))) \n      if list_all_files: \n         logger.notify('Files:') \n         if ('files' in dist): \n            for line in open(dist['files']): \n               logger.notify(('      %s' % line.strip())) \n         else: \n            logger.notify('Cannot   locate   installed-files.txt')",
        "line_count": 13,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def binary_crossentropy(output, target): \n    return (- ((target * tensor.log(output)) + ((1.0 - target) * tensor.log((1.0 - output)))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_subtitle(text): \n    print_col('------   {}   ------'.format(text), 'cyan')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_blas_return(context, builder, res): \n    with builder.if_then(cgutils.is_not_null(builder, res), likely=False): \n      pyapi = context.get_python_api(builder) \n      pyapi.gil_ensure() \n      pyapi.fatal_error('BLAS   wrapper   returned   with   an   error')",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_permanent(): \n    return __firewall_cmd('--runtime-to-permanent')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def join_path_native(a, *p): \n    return to_native_path(join_path(a, *p))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def basicConfig(**kwargs): \n    if (len(root.handlers) == 0): \n      filename = kwargs.get('filename') \n      if filename: \n         mode = kwargs.get('filemode', 'a') \n         hdlr = FileHandler(filename, mode) \n      else: \n         stream = kwargs.get('stream') \n         hdlr = StreamHandler(stream) \n      fs = kwargs.get('format', BASIC_FORMAT) \n      dfs = kwargs.get('datefmt', None) \n      fmt = Formatter(fs, dfs) \n      hdlr.setFormatter(fmt) \n      root.addHandler(hdlr) \n      level = kwargs.get('level') \n      if (level is not None): \n         root.setLevel(level)",
        "line_count": 16,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def delete_lead_addresses(company_name): \n    for lead in frappe.get_all(u'Lead', filters={u'company': company_name}): \n      frappe.db.sql(u\"delete   from   `tabAddress`\\n DCTB  DCTB  DCTB where   lead=%s   and   (customer=''   or   customer   is   null)   and   (supplier=''   or   supplier   is   null)\", lead.name) \n      frappe.db.sql(u'update   `tabAddress`   set   lead=null,   lead_name=null   where   lead=%s', lead.name)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewRepository(): \n    return ExtrusionRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unzip(filename, root, verbose=True): \n    for message in _unzip_iter(filename, root, verbose): \n      if isinstance(message, ErrorMessage): \n         raise Exception(message)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def ioff(): \n    matplotlib.interactive(False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def saveSupportedExtensions(): \n    return ['.amf', '.stl']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_ext_domain_inurl_scheme_prefix(ext_domain, force_https=None): \n    return ''",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return LiftRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MatchesRoutingRules(rules): \n    return AfterPreprocessing(RoutingRules.to_xml, Equals(RoutingRules(rules).to_xml()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_argument(p): \n    p[0] = p[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _print_dot(_self, expr): \n    return ('{((%s)   \\\\cdot   (%s))}' % (expr.args[0], expr.args[1]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ssh_interface(vm_): \n    return config.get_cloud_config_value('ssh_interface', vm_, __opts__, default='public_ips', search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_default_theme(is_unicode=True): \n    return (u'powerline_terminus' if is_unicode else u'ascii')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def group_types_get_by_name_or_id(context, group_type_list): \n    return IMPL.group_types_get_by_name_or_id(context, group_type_list)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _api_config_get_speedlimit(output, kwargs): \n    return report(output, keyword='speedlimit', data=Downloader.do.get_limit())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_ttl(): \n    return ((__opts__.get('couchbase.ttl', 24) * 60) * 60)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_sudo_prefix_with_user(): \n    eq_(_sudo_prefix(user='foo', group=None), ('%s   -u   \"foo\"   ' % (env.sudo_prefix % env)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _defaultHTTPUserAgent(): \n    return ('%s   (%s)' % (VERSION_STRING, SITE))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_dist(Y, W, domain): \n    return np.bincount(Y, weights=W, minlength=len(domain.class_var.values))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getImportPluginFileNames(): \n    return archive.getPluginFileNamesFromDirectoryPath(getPluginsDirectoryPath())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def argrelmin(data, axis=0, order=1, mode='clip'): \n    return argrelextrema(data, np.less, axis, order, mode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_best_cpu_topology(flavor, image_meta, allow_threads=True, numa_topology=None): \n    return _get_desirable_cpu_topologies(flavor, image_meta, allow_threads, numa_topology)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_get_all_by_project(context, project_id, filters=None, marker=None, limit=None, sort_keys=None, sort_dirs=None, offset=None): \n    return IMPL.snapshot_get_all_by_project(context, project_id, filters, marker, limit, sort_keys, sort_dirs, offset)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _bits_to_bytes_len(length_in_bits): \n    return ((length_in_bits + 7) // 8)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_cache_cluster(name, wait=600, region=None, key=None, keyid=None, profile=None, **args): \n    return _delete_resource(name, name_param='CacheClusterId', desc='cache   cluster', res_type='cache_cluster', wait=wait, status_param='CacheClusterStatus', region=region, key=key, keyid=keyid, profile=profile, **args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_type_error_if_not_dict_context(replay_test_dir, template_name): \n    with pytest.raises(TypeError): \n      replay.dump(replay_test_dir, template_name, 'not_a_dict')",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_counter(action): \n    return isinstance(action, _CountAction)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLUPSIDEGAP2CROWS(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLUPSIDEGAP2CROWS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_pathname(val): \n    return os.path.splitext(os.path.basename((val or u'')))[0]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def to_time(wmi_ts): \n    return (2015, 12, 24, 11, 30, 47, 0, 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getModule(moduleName): \n    return theSystemPath[moduleName]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def entropy(class_probabilities): \n    return sum((((- p) * math.log(p, 2)) for p in class_probabilities if p))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_long_description(): \n    return 'Output   plugins   allow   the   user   to   configure   how   the   framework   is\\n            going   to   show   its   results.\\n            '",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _filter_keys(item, keys): \n    return {k: v for (k, v) in item.items() if (k in keys)}",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_value(x): \n    return x.eval(session=get_session())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def max_call_gas(gas): \n    return (gas - (gas // opcodes.CALL_CHILD_LIMIT_DENOM))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_tax_handler(request, order_form): \n    set_tax(request, _(u'Tax'), 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_class(class_string, exception=FilterError): \n    if (not hasattr(class_string, u'__bases__')): \n      try: \n         class_string = str(class_string) \n         (mod_name, class_name) = get_mod_func(class_string) \n         if class_name: \n            return getattr(__import__(mod_name, {}, {}, [str(u'')]), class_name) \n      except AttributeError as e: \n         raise exception((u'Failed   to   import   %s.   AttributeError   is:   %s' % (class_string, e))) \n      except ImportError as e: \n         raise exception((u'Failed   to   import   %s.   ImportError   is:   %s' % (class_string, e))) \n      raise exception((u\"Invalid   class   path   '%s'\" % class_string))",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def managedcloud(vm_): \n    return config.get_cloud_config_value('managedcloud', vm_, __opts__, default=False, search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resnet_v2(inputs, blocks, num_classes=None, is_training=True, global_pool=True, output_stride=None, include_root_block=True, reuse=None, scope=None): \n    with tf.variable_scope(scope, 'resnet_v2', [inputs], reuse=reuse) as sc: \n      end_points_collection = (sc.name + '_end_points') \n      with slim.arg_scope([slim.conv2d, bottleneck, resnet_utils.stack_blocks_dense], outputs_collections=end_points_collection): \n         with slim.arg_scope([slim.batch_norm], is_training=is_training): \n            net = inputs \n            if include_root_block: \n               if (output_stride is not None): \n                  if ((output_stride % 4) != 0): \n                     raise ValueError('The   output_stride   needs   to   be   a   multiple   of   4.') \n                  output_stride /= 4 \n               with slim.arg_scope([slim.conv2d], activation_fn=None, normalizer_fn=None): \n                  net = resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1') \n               net = slim.max_pool2d(net, [3, 3], stride=2, scope='pool1') \n            net = resnet_utils.stack_blocks_dense(net, blocks, output_stride) \n            net = slim.batch_norm(net, activation_fn=tf.nn.relu, scope='postnorm') \n            if global_pool: \n               net = tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True) \n            if (num_classes is not None): \n               net = slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits') \n            end_points = slim.utils.convert_collection_to_dict(end_points_collection) \n            if (num_classes is not None): \n               end_points['predictions'] = slim.softmax(net, scope='predictions') \n            return (net, end_points)",
        "line_count": 23,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def _upstart_is_enabled(name): \n    return (not _upstart_is_disabled(name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _patch_object(target, attribute, new=DEFAULT, spec=None, create=False, mocksignature=False, spec_set=None): \n    return _patch(target, attribute, new, spec, create, mocksignature, spec_set)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def from_string(s): \n    return cPickle.loads(s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dict_contains(superset, subset): \n    for (key, value) in subset.iteritems(): \n      ok_((key in superset)) \n      eq_(superset[key], value)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_pipeline(*steps): \n    return Pipeline(_name_estimators(steps))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index(operator, size, keys): \n    return lo.LinOp(lo.INDEX, size, [operator], keys)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def arcsin(x): \n    return Arcsin()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_focused_on_element(browser, selector): \n    return browser.execute_script(\"return   $('{}').is(':focus')\".format(selector))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inception_v3_parameters(weight_decay=4e-05, stddev=0.1, batch_norm_decay=0.9997, batch_norm_epsilon=0.001): \n    with scopes.arg_scope([ops.conv2d, ops.fc], weight_decay=weight_decay): \n      with scopes.arg_scope([ops.conv2d], stddev=stddev, activation=tf.nn.relu, batch_norm_params={'decay': batch_norm_decay, 'epsilon': batch_norm_epsilon}) as arg_scope: \n         (yield arg_scope)",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def node_info(): \n    with _get_xapi_session() as xapi: \n      host_rec = _get_record(xapi, 'host', _get_all(xapi, 'host')[0]) \n      host_cpu_rec = _get_record(xapi, 'host_cpu', host_rec['host_CPUs'][0]) \n      host_metrics_rec = _get_metrics_record(xapi, 'host', host_rec) \n      def getCpuMhz(): \n         cpu_speeds = [int(host_cpu_rec['speed']) for host_cpu_it in host_cpu_rec if ('speed' in host_cpu_it)] \n         if cpu_speeds: \n            return (sum(cpu_speeds) / len(cpu_speeds)) \n         else: \n            return 0 \n      def getCpuFeatures(): \n         if host_cpu_rec: \n            return host_cpu_rec['features'] \n      def getFreeCpuCount(): \n         cnt = 0 \n         for host_cpu_it in host_cpu_rec: \n            if (len(host_cpu_rec['cpu_pool']) == 0): \n               cnt += 1 \n         return cnt \n      info = {'cpucores': _get_val(host_rec, ['cpu_configuration', 'nr_cpus']), 'cpufeatures': getCpuFeatures(), 'cpumhz': getCpuMhz(), 'cpuarch': _get_val(host_rec, ['software_version', 'machine']), 'cputhreads': _get_val(host_rec, ['cpu_configuration', 'threads_per_core']), 'phymemory': ((int(host_metrics_rec['memory_total']) / 1024) / 1024), 'cores_per_sockets': _get_val(host_rec, ['cpu_configuration', 'cores_per_socket']), 'free_cpus': getFreeCpuCount(), 'free_memory': ((int(host_metrics_rec['memory_free']) / 1024) / 1024), 'xen_major': _get_val(host_rec, ['software_version', 'xen_major']), 'xen_minor': _get_val(host_rec, ['software_version', 'xen_minor']), 'xen_extra': _get_val(host_rec, ['software_version', 'xen_extra']), 'xen_caps': '   '.join(_get_val(host_rec, ['capabilities'])), 'xen_scheduler': _get_val(host_rec, ['sched_policy']), 'xen_pagesize': _get_val(host_rec, ['other_config', 'xen_pagesize']), 'platform_params': _get_val(host_rec, ['other_config', 'platform_params']), 'xen_commandline': _get_val(host_rec, ['other_config', 'xen_commandline']), 'xen_changeset': _get_val(host_rec, ['software_version', 'xen_changeset']), 'cc_compiler': _get_val(host_rec, ['software_version', 'cc_compiler']), 'cc_compile_by': _get_val(host_rec, ['software_version', 'cc_compile_by']), 'cc_compile_domain': _get_val(host_rec, ['software_version', 'cc_compile_domain']), 'cc_compile_date': _get_val(host_rec, ['software_version', 'cc_compile_date']), 'xend_config_format': _get_val(host_rec, ['software_version', 'xend_config_format'])} \n      return info",
        "line_count": 21,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list(prefix=None, region=None, key=None, keyid=None, profile=None): \n    return [r.name for r in get_all_queues(prefix=prefix, region=region, key=key, keyid=keyid, profile=profile)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def send(var, dest, tag): \n    return MPISendWait(tag)(*isend(var, dest, tag))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_no_log_generator(container, log_args): \n    (yield u\"WARNING:   no   logs   are   available   with   the   '{}'   log   driver\\n\".format(container.log_driver))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cdao_to_obo(s): \n    return ('obo:%s' % cdao_elements[s[len('cdao:'):]])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_builtin(s): \n    return hasattr(builtins, s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def concat_multi_values(models, attribute): \n    return u';'.join((getattr(m, attribute) for m in models if (getattr(m, attribute, None) is not None)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def replace(a, b, x): \n    return (b if (x == a) else x)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_running(container): \n    return ((container['State']['Running'] == True) and (not container['State'].get('Ghost', False)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def output_file(filename, title='Bokeh   Plot', mode='cdn', root_dir=None): \n    _state.output_file(filename, title=title, mode=mode, root_dir=root_dir)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def synchronize(*klasses): \n    if (threadmodule is not None): \n      for klass in klasses: \n         for methodName in klass.synchronized: \n            hook.addPre(klass, methodName, _synchPre) \n            hook.addPost(klass, methodName, _synchPost)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_swap_size(vm_): \n    return config.get_cloud_config_value('swap', vm_, __opts__, default=128)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _Offsets(*args): \n    return dict(((a, None) for a in args))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_unary_operator(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dup_reverse(f): \n    return dup_strip(list(reversed(f)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_column(col): \n    return isinstance(col, ColumnElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_secret_key(): \n    return _get_random_string()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def printTogetherListsByFileNames(fileNames): \n    for fileName in fileNames: \n      togetherLists = getTogetherLists(fileName) \n      if (len(togetherLists) > 0): \n         for togetherList in togetherLists: \n            for together in togetherList: \n               function = together[0] \n               sorted = together[1] \n         return",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def instance_get_all_by_host_and_not_type(context, host, type_id=None): \n    return IMPL.instance_get_all_by_host_and_not_type(context, host, type_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, gcodeText, repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, gcodeText), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _numeric(n): \n    return isinstance(n, (salt.ext.six.integer_types + (float,)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getmodebase(mode): \n    return ImageMode.getmode(mode).basemode",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def borrowing_record(): \n    return library_check_auth(u'\\u67e5\\u8be2\\u4e2d\\u2026\\u2026')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable_insecure_serializers(choices=[u'pickle', u'yaml', u'msgpack']): \n    for choice in choices: \n      try: \n         registry.enable(choice) \n      except KeyError: \n         pass",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _get_changed_items(baselist, comparelist): \n    return list((set(baselist) & set((set(baselist) ^ set(comparelist)))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trigamma(x): \n    return polygamma(1, x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLUNIQUE3RIVER(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLUNIQUE3RIVER)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def require_change_password(self): \n    if (('desktop.auth.backend.AllowFirstUserDjangoBackend' in desktop.conf.AUTH.BACKEND.get()) and self.first_login and desktop.conf.AUTH.CHANGE_DEFAULT_PASSWORD.get()): \n      return True",
        "line_count": 2,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def delete_symlink(link_path): \n    if os.path.exists(link_path): \n      os.remove(link_path)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def unpickle_lazyobject(wrapped): \n    return wrapped",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def search_upnp_device(): \n    return defer.maybeDeferred(UPnPProtocol().search_device)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def my_not(arg): \n    return TT.eq(arg, zero)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def branch_delete(repo, name): \n    with open_repo_closing(repo) as r: \n      if isinstance(name, bytes): \n         names = [name] \n      elif isinstance(name, list): \n         names = name \n      else: \n         raise TypeError(('Unexpected   branch   name   type   %r' % name)) \n      for name in names: \n         del r.refs[('refs/heads/' + name)]",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def partition_suite(suite, classes, bins): \n    for test in suite: \n      if isinstance(test, unittest.TestSuite): \n         partition_suite(test, classes, bins) \n      else: \n         for i in range(len(classes)): \n            if isinstance(test, classes[i]): \n               bins[i].addTest(test) \n               break \n         else: \n            bins[(-1)].addTest(test)",
        "line_count": 10,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def unregister(func): \n    if (func in _handlers): \n      del _handlers[func]",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def guess_sys_stdout_encoding(): \n    return (getattr(sys.stdout, 'encoding', None) or getattr(__stdout__, 'encoding', None) or locale.getpreferredencoding() or sys.getdefaultencoding() or 'ascii')",
        "line_count": 1,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def getMinimum(firstComplex, secondComplex): \n    return complex(min(firstComplex.real, secondComplex.real), min(firstComplex.imag, secondComplex.imag))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fbthrift_library_config(append=None, **kwargs): \n    blade_config.update_config('fbthrift_config', append, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def modNull(s, titlesRefs, namesRefs, charactersRefs): \n    return s",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def certificate_create(context, values): \n    return IMPL.certificate_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ispow(e): \n    return (isinstance(e, Expr) and (e.is_Pow or (e.func is exp)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def type(): \n    return s3_rest_controller('impact', 'type')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def row(matlist, i): \n    return matlist[i]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getInradiusByPaths(elementNode): \n    return (0.5 * getExtentByPaths(elementNode))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_list_of_strict(object_list, object_types): \n    for object_ in object_list: \n      validate_type_strict(object_, object_types)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _parse_file(descriptor_file, validate=False, **kwargs): \n    while True: \n      descriptor_content = _read_until_keywords('signature', descriptor_file) \n      block_end_prefix = PGP_BLOCK_END.split('   ', 1)[0] \n      descriptor_content += _read_until_keywords(block_end_prefix, descriptor_file, True) \n      if descriptor_content: \n         if descriptor_content[0].startswith('@type'): \n            descriptor_content = descriptor_content[1:] \n         (yield HiddenServiceDescriptor(bytes.join('', descriptor_content), validate, **kwargs)) \n      else: \n         break",
        "line_count": 10,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def write_incron_file(user, path): \n    return (__salt__['cmd.retcode'](_get_incron_cmdstr(path), runas=user, python_shell=False) == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def text(): \n    return load('text.png')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_in_process_course_actions(request): \n    return [course for course in CourseRerunState.objects.find_all(exclude_args={'state': CourseRerunUIStateManager.State.SUCCEEDED}, should_display=True) if has_studio_read_access(request.user, course.course_key)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def eval_location(pymodule, offset): \n    return eval_location2(pymodule, offset)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getGCodeFilesWhichAreNotLogFiles(): \n    return archive.getFilesWithFileTypeWithoutWords('gcode', ['_log'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def squeeze(x, axis=None): \n    return Squeeze(axis)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _PRE(text): \n    return ('<pre>%s</pre>' % (escape(text),))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_entrance_exams_enabled(): \n    return settings.FEATURES.get('ENTRANCE_EXAMS')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cardOkay(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_datetime(days=0, weeks=0): \n    return (datetime.today() + timedelta(days=days, weeks=weeks))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def repeat(times): \n    return repeat_with_success_at_least(times, times)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getOpenIDStore(): \n    return util.getOpenIDStore('/tmp/djopenid_c_store', 'c_')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_construction(): \n    wabs_deleter.Deleter('test', 'ing')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plainpager(text): \n    sys.stdout.write(_encode(plain(text), getattr(sys.stdout, 'encoding', _encoding)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _tag(short_name, local): \n    return ('{%s}%s' % (NAMESPACES[short_name], local))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RawMoment(xs, k): \n    return (sum(((x ** k) for x in xs)) / len(xs))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getStartsWithCurlyEqualRoundSquare(word): \n    return (word.startswith('{') or word.startswith('=') or word.startswith('(') or word.startswith('['))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def retry_before_failing(retries=NO_RETRIES): \n    return retry(exception=AssertionError, timeout=None, retries=retries)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def echo(text): \n    return text",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_fields(context, fields): \n    for field in fields: \n      if (field.get('type') and (not _is_valid_pg_type(context, field['type']))): \n         raise ValidationError({'fields': [u'\"{0}\"   is   not   a   valid   field   type'.format(field['type'])]}) \n      elif (not _is_valid_field_name(field['id'])): \n         raise ValidationError({'fields': [u'\"{0}\"   is   not   a   valid   field   name'.format(field['id'])]})",
        "line_count": 5,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def app_view_factory(qs): \n    return functools.partial(app_view, qs=qs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_finalize(): \n    eq_('', render('{{   x   }}', {'x': None}))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cleanup(): \n    for c in _CLASSES: \n      _db_content[c] = {}",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_declarator_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def items(): \n    return _inventory.items",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_visible(sr): \n    return ((sr.type not in Subreddit.private_types) and (not sr._spam) and sr.discoverable)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getNewRepository(): \n    return CleaveRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def linked(prefix, ignore_channels=False): \n    return set(linked_data(prefix, ignore_channels=ignore_channels).keys())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_review_request_fieldset(fieldset_id): \n    return fieldset_registry.get(u'fieldset_id', fieldset_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return CoolRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_hostnames_in_bucket(hist_data, bucket): \n    return [hostname for (hostname, pass_rate) in hist_data if (bucket[0] <= pass_rate < bucket[1])]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def cnv_dateTime(attribute, arg, element): \n    return str(arg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Rademacher(name): \n    return rv(name, RademacherDistribution)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getOverhangSpan(xmlElement): \n    return xmlElement.getCascadeFloat(0.0, 'overhangSpan')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xywh_to_xyxy(boxes): \n    return np.hstack((boxes[:, 0:2], ((boxes[:, 0:2] + boxes[:, 2:4]) - 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def places_autocomplete(client, input_text, offset=None, location=None, radius=None, language=None, type=None, components=None): \n    return _autocomplete(client, '', input_text, offset=offset, location=location, radius=radius, language=language, type=type, components=components)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def symmetric_encrypt(encrypt_key, plaintext): \n    return binascii.hexlify(encrypt_key.Encrypt(plaintext)).upper()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(): \n    return 'manage/import'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bracket_parse(s): \n    raise NameError(u'Use   Tree.read(s,   remove_empty_top_bracketing=True)   instead.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_type_destroy(context, name): \n    return IMPL.instance_type_destroy(context, name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape(str): \n    return commands.mkarg(str)[1:]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _document_form_initial(document): \n    return {'title': document.title, 'slug': document.slug, 'category': document.category, 'is_localizable': document.is_localizable, 'is_archived': document.is_archived, 'topics': Topic.objects.filter(document=document).values_list('id', flat=True), 'products': Product.objects.filter(document=document).values_list('id', flat=True), 'related_documents': Document.objects.filter(related_documents=document).values_list('id', flat=True), 'allow_discussion': document.allow_discussion, 'needs_change': document.needs_change, 'needs_change_comment': document.needs_change_comment}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ng_model_options(request): \n    return {u'EDITCART_NG_MODEL_OPTIONS': app_settings.EDITCART_NG_MODEL_OPTIONS, u'ADD2CART_NG_MODEL_OPTIONS': app_settings.ADD2CART_NG_MODEL_OPTIONS}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disease(): \n    return s3_rest_controller(rheader=s3db.disease_rheader)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TearDownStubs(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _random_name(size=6): \n    return ('cloud-test-' + ''.join((random.choice((string.ascii_lowercase + string.digits)) for x in range(size))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or __virtualname__), ('username', 'identity_url', 'compute_region'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def matrix_vector_mul(a, b): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def out_of_date(original, derived): \n    return ((not os.path.exists(derived)) or (os.path.exists(original) and (os.stat(derived).st_mtime < os.stat(original).st_mtime)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def traverse(roots, parent='', verbose=False): \n    for root in roots: \n      if root.method_map: \n         print('->', ((parent + '/') + root.raw_segment)) \n         if verbose: \n            for (method, func) in root.method_map.items(): \n               if (func.__name__ != 'method_not_allowed'): \n                  print('-->{0}   {1}:{2}'.format(method, inspect.getsourcefile(func), inspect.getsourcelines(func)[1])) \n      if root.children: \n         traverse(root.children, ((parent + '/') + root.raw_segment), verbose)",
        "line_count": 9,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def upload_image(request): \n    return upload_media(request, ImageForm, create_image)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_expression_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reaped(subset=None, show_ipv4=False): \n    return list_state(subset=subset, show_ipv4=show_ipv4, state='reaped')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _url(path=''): \n    return urljoin(BASE_URL, path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_share_url_with_dirname(uk, shareid, dirname): \n    return ''.join([const.PAN_URL, 'wap/link', '?shareid=', shareid, '&uk=', uk, '&dir=', encoder.encode_uri_component(dirname), '&third=0'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decoder(conv_func): \n    return (lambda s: conv_func(s.decode('utf-8')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def static_slotname(instance): \n    return instance.code",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MakeSandboxOnProdResponse(): \n    return '{\"status\":   21007}'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_cache(obj, funcname): \n    get_cache_impl(obj, funcname).clear(obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clock(): \n    return load('clock_motion.png')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_name(base): \n    return (base + _dmcrypt_suffix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_instance_list(mig, field='name', filter_list=['NONE']): \n    return [x[field] for x in mig.list_managed_instances() if (x['currentAction'] in filter_list)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def assert_true(expr, msg='False   is   not   True'): \n    if (not expr): \n      raise AssertionError(msg)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_image_back(releaseid, size=None): \n    return get_image(releaseid, 'back', size=size)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_protocol_from_tool_shed_url(tool_shed_url): \n    return util.remove_protocol_from_url(tool_shed_url)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_old_files(directory): \n    for (root, dirs, files) in os.walk(directory, topdown=False): \n      for f in files: \n         if fnmatch(f, '*.package-control-old'): \n            path = os.path.join(root, f) \n            try: \n               os.remove(path) \n            except OSError as e: \n               console_write(u'\\n                                                                        Error   removing   old   file   \"%s\":   %s\\n                                                                        ', (path, unicode_from_os(e)))",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def onReadyForLogin(isBootstrap): \n    return 1.0",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_collection_summary(collection_id, contributor_id_to_add): \n    create_collection_summary(collection_id, contributor_id_to_add)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jaccard_distance(label1, label2): \n    return ((len(label1.union(label2)) - len(label1.intersection(label2))) / len(label1.union(label2)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_go_library(target, source, env): \n    return _generate_go_package(target, source, env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_number(value): \n    return isinstance(value, (int, float, complex))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_move(move): \n    setattr(_MovedItems, move.name, move)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def linspace(count): \n    return list(map(float, numpy.linspace(0.0, 1.0, (count + 2), endpoint=True)[1:(-1)]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def provider_fw_rule_get_all(context): \n    return IMPL.provider_fw_rule_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dot(v, w): \n    return sum(((v_i * w_i) for (v_i, w_i) in zip(v, w)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def parse_url(url, encoding=None): \n    return (url if isinstance(url, urlparse.ParseResult) else urlparse.urlparse(unicode_to_str(url, encoding)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def strips(text, remove): \n    return rstrips(lstrips(text, remove), remove)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _pick_aux_channels(info, exclude='bads'): \n    return pick_types(info, meg=False, eog=True, ecg=True, emg=True, bio=True, ref_meg=False, exclude=exclude)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return CopyDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def s3_key_to_uri(s3_key): \n    return ('s3://%s/%s' % (s3_key.bucket.name, s3_key.name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    solid.processElementNodeByFunctionPair(elementNode, getManipulatedGeometryOutput, getManipulatedPaths)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subsector(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def extract_svhn(local_url): \n    with gfile.Open(local_url, mode='r') as file_obj: \n      dict = loadmat(file_obj) \n      (data, labels) = (dict['X'], dict['y']) \n      data = np.asarray(data, dtype=np.float32) \n      labels = np.asarray(labels, dtype=np.int32) \n      data = data.transpose(3, 0, 1, 2) \n      labels[(labels == 10)] = 0 \n      labels = labels.reshape(len(labels)) \n      return (data, labels)",
        "line_count": 9,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def post(url, data=None, **kwargs): \n    return request(u'post', url, data=data, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def asint(text): \n    if (text is not None): \n      return int(text)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _augknt(x, k): \n    return np.r_[(((x[0],) * k), x, ((x[(-1)],) * k))]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _report_lines(msgs): \n    return ('      ' + '\\n      '.join((str(msg) for msg in msgs)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def kill_raspistill(*args): \n    subprocess.Popen(['killall', 'raspistill'], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rgbcie2rgb(rgbcie): \n    return _convert(rgb_from_rgbcie, rgbcie)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cluster_position(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def LabelFromString(xml_string): \n    return atom.CreateClassFromXMLString(Label, xml_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _a_decode_int(stream, offset, count, _): \n    return ((offset + count), int(stream[offset:(offset + count)]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def guess_net_inet_tcp_recvbuf_max(): \n    return (16 * MB)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def version(request): \n    return {u'DJANGO_VERSION': __version__}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or __virtualname__), ('subscription_id', 'certificate_path'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __handle_except(inst): \n    return __standardize_result(False, 'Docker-compose   command   {0}   failed'.format(inspect.stack()[1][3]), '{0}'.format(inst), None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sitemap_urls_from_robots(robots_text, base_url=None): \n    for line in robots_text.splitlines(): \n      if line.lstrip().lower().startswith('sitemap:'): \n         url = line.split(':', 1)[1].strip() \n         (yield urljoin(base_url, url))",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def strip_spaces_between_tags(value): \n    return re.sub('>\\\\s+<', '><', force_unicode(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def broadcast_to(array, shape, subok=False): \n    return _broadcast_to(array, shape, subok=subok, readonly=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def envs(): \n    return list(__opts__['file_roots'].keys())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_extension(environ=None): \n    return zipline_path(['extension.py'], environ=environ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def asksaveasfilename(**options): \n    return SaveAs(**options).show()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_default_encoding_file(): \n    return default_encoding_file",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_thing(x): \n    return x.thing",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addXIntersectionIndexesFromLoopsY(loops, solidIndex, xIntersectionIndexList, y): \n    for loop in loops: \n      addXIntersectionIndexesFromLoopY(loop, solidIndex, xIntersectionIndexList, y)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def prohibit_output(data, tables=None): \n    for char in data: \n      for check in tables: \n         if check(char): \n            raise StringPrepError((u'Prohibited   code   point:   %s' % char))",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def quota_update_resource(context, old_res, new_res): \n    return IMPL.quota_update_resource(context, old_res, new_res)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attach_bumper_transcript(item, filename, lang='en'): \n    item.video_bumper['transcripts'][lang] = filename",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _verify_revision_is_published(location): \n    assert (location.revision == MongoRevisionKey.published)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_title(article): \n    return truncate_title(article.title)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CleanList(list, folder, files): \n    for path in sorted(list.keys()): \n      (fld, name) = os.path.split(path) \n      if (fld == folder): \n         present = False \n         for name in files: \n            if (os.path.join(folder, name) == path): \n               present = True \n               break \n         if (not present): \n            del list[path]",
        "line_count": 10,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def urlencode(t): \n    return urllib.quote(t)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _FixPaths(paths): \n    return [_FixPath(i) for i in paths]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_all(): \n    return _get_svc_list()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_timeline_data(doctype, name): \n    return dict(frappe.db.sql(u\"select   unix_timestamp(cs.schedule_date),   count(*)\\n DCTB  DCTB from   `tabCourse   Schedule`   as   cs   ,   `tabStudent   Attendance`   as   sa   where\\n DCTB  DCTB  DCTB sa.course_schedule   =   cs.name\\n DCTB  DCTB  DCTB and   sa.student=%s\\n DCTB  DCTB  DCTB and   cs.schedule_date   >   date_sub(curdate(),   interval   1   year)\\n DCTB  DCTB  DCTB and   status   =   'Present'\\n DCTB  DCTB  DCTB group   by   cs.schedule_date\", name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sort_results(results): \n    results.sort(key=(lambda x: unicode_sorter(force_text(x))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fake_uname(): \n    return ('Linux', '', '', '', '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_node_get_all_by_pagination(context, limit=None, marker=None): \n    return IMPL.compute_node_get_all_by_pagination(context, limit=limit, marker=marker)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plot_day_summary2_ochl(ax, opens, closes, highs, lows, ticksize=4, colorup=u'k', colordown=u'r'): \n    return plot_day_summary2_ohlc(ax, opens, highs, lows, closes, ticksize, colorup, colordown)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def preorder_traversal(task): \n    for item in task: \n      if istask(item): \n         for i in preorder_traversal(item): \n            (yield i) \n      elif isinstance(item, list): \n         (yield list) \n         for i in preorder_traversal(item): \n            (yield i) \n      else: \n         (yield item)",
        "line_count": 10,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def generate_glance_url(): \n    return next(get_api_servers())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_struct_or_union_specifier_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_postfix_expression_4(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ast_good_yield(): \n    can_compile(u'(yield   1)')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_update(context, project_id, resource, limit, user_id=None): \n    return IMPL.quota_update(context, project_id, resource, limit, user_id=user_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return AnalyzeRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in_main_thread(): \n    return (threading.current_thread().__class__.__name__ == u'_MainThread')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return CarveDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trim_gentoo_mirrors(value): \n    return trim_var('GENTOO_MIRRORS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _clear_context(): \n    for var in [x for x in __context__ if x.startswith('lxc.')]: \n      log.trace(\"Clearing   __context__['{0}']\".format(var)) \n      __context__.pop(var, None)",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def fill_paragraphs(s, width, sep=u'\\n'): \n    return sep.join((fill(p, width) for p in s.split(sep)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _compile_multi_match_regex(strings): \n    return re.compile('|'.join((re.escape(s) for s in strings)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def match(pattern, string, flags=0, pos=None, endpos=None, partial=False, concurrent=None, **kwargs): \n    return _compile(pattern, flags, kwargs).match(string, pos, endpos, concurrent, partial)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stop(app, url='http://localhost:8080/manager', timeout=180): \n    return _simple_cmd('stop', app, url, timeout=timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def elemwise_mul(a, b): \n    return (a * b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_raw(preload=False): \n    return read_raw_fif(raw_fname, preload=preload)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def import_book(stream, format=None, **kwargs): \n    return Databook().load(stream, format, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_database(): \n    with settings(warn_only=True): \n      sudo(('psql   -c   \"CREATE   USER   %s   WITH   NOCREATEDB   NOCREATEUSER   ENCRYPTED   PASSWORD   E\\'%s\\'\"' % (PG_USERNAME, PG_PASSWORD)), user='postgres') \n      sudo(('psql   -c   \"CREATE   DATABASE   %s   WITH   OWNER   %s\"' % (PG_DATABASE, PG_USERNAME)), user='postgres')",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def db_sync(version=None, database='main', context=None): \n    return IMPL.db_sync(version=version, database=database, context=context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getenv(name, default=None): \n    return os.environ.get(name, default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def settings_module(module): \n    os.environ['DJANGO_SETTINGS_MODULE'] = module",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def IsInTransaction(): \n    return isinstance(_GetConnection(), datastore_rpc.TransactionalConnection)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _comp_sort_keys(c): \n    return (int(c['coeff_type']), int(c['scanno']))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_router_interface_port(port): \n    return _is_owner_router_interface(port['device_owner'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_javascript(obj): \n    return json.dumps(obj).replace(u'</', u'<\\\\/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expand_path(path): \n    return os.path.abspath(os.path.expandvars(os.path.expanduser(path)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_segments(mailchimp, list_id, count, emails): \n    if (count > 0): \n      segments = mailchimp.listStaticSegments(id=list_id) \n      for seg in segments: \n         if seg['name'].startswith('random'): \n            mailchimp.listStaticSegmentDel(id=list_id, seg_id=seg['id']) \n      emails = list(emails) \n      random.shuffle(emails) \n      chunk_size = int(math.ceil((float(len(emails)) / count))) \n      chunks = list(chunk(emails, chunk_size)) \n      for seg in xrange(count): \n         name = 'random_{0:002}'.format(seg) \n         seg_id = mailchimp.listStaticSegmentAdd(id=list_id, name=name) \n         for batch in chunk(chunks[seg], BATCH_SIZE): \n            mailchimp.listStaticSegmentMembersAdd(id=list_id, seg_id=seg_id, batch=batch)",
        "line_count": 14,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def _linear_jac(t, y, a): \n    return a",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def site_activity(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_batch_notification_listener(transport, targets, endpoints, allow_requeue=False, batch_size=1, batch_timeout=None): \n    return oslo_messaging.get_batch_notification_listener(transport, targets, endpoints, executor='threading', allow_requeue=allow_requeue, batch_size=batch_size, batch_timeout=batch_timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _filterout_legal(lines): \n    return [line for line in lines[5:] if ((not ('This   experiment   was   created   using   PsychoPy2   Experiment   Builder   (' in line)) and (not (('trialList=data.importConditions(' in line) and (\".xlsx'))\" in line))))]",
        "line_count": 1,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def PyJsBshift(a, b): \n    return a.pyjs_bshift(b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def repeat_first_axis(array, count): \n    return as_strided(array, ((count,) + array.shape), ((0,) + array.strides))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_request_type(direction, type, recipient): \n    return ((recipient | type) | direction)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def identity(x): \n    return x",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def postBuildStatic(static): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_diff_renderer(*args, **kwargs): \n    return _diff_renderer_class(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_type_error_if_no_template_name(replay_test_dir, context): \n    with pytest.raises(TypeError): \n      replay.dump(replay_test_dir, None, context)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _chop(seq, how_much): \n    return seq[_B(how_much):]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_type_destroy(context, id): \n    return IMPL.volume_type_destroy(context, id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_unique_filename(filename): \n    return (u'%s__%s' % (uuid4(), filename))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ExportStateName(state): \n    return {STATE_READ: 'READ', STATE_GETTING: 'GETTING', STATE_GOT: 'GOT', STATE_ERROR: 'NOT_GOT'}[state]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ORIG(k, n): \n    return _XXX(k, n, _ORIG)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_data_file(pkg, path): \n    return io.BytesIO(pkgutil.get_data(pkg, path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tokenize(s, *args, **kwargs): \n    return parser.find_tokens(text_type(s), *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def w(message): \n    print_log(message, YELLOW)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cache_dir(path, saltenv='base', include_empty=False, include_pat=None, exclude_pat=None): \n    return _client().cache_dir(path, saltenv, include_empty, include_pat, exclude_pat)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_postfix_expression_6(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return ProfileRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def educateEllipses(s): \n    return s.replace('...', '&#8230;').replace('.   .   .', '&#8230;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def readlines_file(filename, mode='r'): \n    return read_file(filename, mode).split('\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gca(**kwargs): \n    return gcf().gca(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_undo_commands(dire): \n    with open(os.path.join(dire, 'COMMANDS')) as csvfile: \n      return list(csv.reader(csvfile))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pg(word, body): \n    return (((html_header % word) + body) + html_trailer)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cosine_distance(u, v): \n    return (1 - (numpy.dot(u, v) / (sqrt(numpy.dot(u, u)) * sqrt(numpy.dot(v, v)))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Xor(string, key): \n    return ''.join([chr((c ^ key)) for c in bytearray(string)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([KNXSwitch(hass, KNXConfig(config))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def findall(pattern, string, flags=0): \n    return _compile(pattern, flags).findall(string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_library(): \n    for lib in settings.VIDEO_LIBRARIES: \n      mod = import_module(lib) \n      if mod.Video.library_available(): \n         return mod.Video",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def active_env(): \n    return get_link_suffix('env')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def checkSuhosinPatch(injection): \n    if (injection.place == PLACE.GET): \n      debugMsg = 'checking   for   parameter   length   ' \n      debugMsg += 'constrainting   mechanisms' \n      logger.debug(debugMsg) \n      pushValue(kb.injection) \n      kb.injection = injection \n      randInt = randomInt() \n      if (not checkBooleanExpression(('%d=%s%d' % (randInt, ('   ' * SUHOSIN_MAX_VALUE_LENGTH), randInt)))): \n         warnMsg = 'parameter   length   constrainting   ' \n         warnMsg += 'mechanism   detected   (e.g.   Suhosin   patch).   ' \n         warnMsg += 'Potential   problems   in   enumeration   phase   can   be   expected' \n         logger.warn(warnMsg) \n      kb.injection = popValue()",
        "line_count": 13,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def inter_community_non_edges(G, partition): \n    return inter_community_edges(nx.complement(G), partition)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_call(kwargs): \n    return f(a=1, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cache_files(paths, saltenv='base'): \n    return _client().cache_files(paths, saltenv)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def crontab(attrs=None, where=None): \n    return _osquery_cmd(table='crontab', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sum(x, axis=None, keepdims=False): \n    return T.sum(x, axis=axis, keepdims=keepdims)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_naive(dt): \n    return ((dt.tzinfo is None) or (dt.tzinfo.utcoffset(dt) is None))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def zipline_path(paths, environ=None): \n    return join(zipline_root(environ=environ), *paths)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLGAPSIDESIDEWHITE(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLGAPSIDESIDEWHITE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_err(text, *colors): \n    sys.stderr.write((sprint(text, *colors) + '\\n'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_rfill_blank(): \n    assert_equals(strings.rfill('   ', 10, '|'), '   |||||||||')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_permission(request, owner_name, error_msg, allow_root=False): \n    if (request.user.username != owner_name): \n      if (allow_root and request.user.is_superuser): \n         return \n      access_warn(request, error_msg) \n      raise PopupException(_('Permission   denied.   You   are   not   the   owner.'))",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def getCarving(fileName): \n    return getFromGNUTriangulatedSurfaceText(archive.getFileText(fileName), triangle_mesh.TriangleMesh())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def zero_grad(x): \n    return zero_grad_(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reset(vm_): \n    with _get_xapi_session() as xapi: \n      vm_uuid = _get_label_uuid(xapi, 'VM', vm_) \n      if (vm_uuid is False): \n         return False \n      try: \n         xapi.VM.hard_reboot(vm_uuid) \n         return True \n      except Exception: \n         return False",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def __virtual__(): \n    return ('grafana4.get_datasource' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_expression_number(p): \n    p[0] = p[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def goal(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_prefix(key): \n    return ('id_' + key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timedelta_to_seconds(delta): \n    return ((delta.days * (3600 * 24)) + delta.seconds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_disabled(): \n    return _get_svc_list('NO')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bash(cmd): \n    return shlex.os.system(cmd)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _encode_bool(name, value, dummy0, dummy1): \n    return (('\\x08' + name) + ((value and '\\x01') or '\\x00'))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _handle_blacklist(blacklist, dirnames, filenames): \n    for norecurs in blacklist: \n      if (norecurs in dirnames): \n         dirnames.remove(norecurs) \n      elif (norecurs in filenames): \n         filenames.remove(norecurs)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def p_relational_expression_4(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _equalsIgnoreCase(a, b): \n    return ((a == b) or (string.lower(a) == string.lower(b)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _onenormest_m1_power(A, p, t=2, itmax=5, compute_v=False, compute_w=False): \n    return onenormest(_MatrixM1PowerOperator(A, p), t=t, itmax=itmax, compute_v=compute_v, compute_w=compute_w)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _character_name(code): \n    return unicode_data.name(unichr(code), '<Unassigned>')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(handle): \n    for line in handle: \n      if line.startswith('#'): \n         continue \n      (yield Record(line))",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _check_sets(result, expected, msg, path, type_): \n    if (result != expected): \n      if (result > expected): \n         diff = (result - expected) \n         msg = ('extra   %s   in   result:   %r' % (_s(type_, diff), diff)) \n      elif (result < expected): \n         diff = (expected - result) \n         msg = ('result   is   missing   %s:   %r' % (_s(type_, diff), diff)) \n      else: \n         in_result = (result - expected) \n         in_expected = (expected - result) \n         msg = ('%s   only   in   result:   %s\\n%s   only   in   expected:   %s' % (_s(type_, in_result), in_result, _s(type_, in_expected), in_expected)) \n      raise AssertionError(('%s%ss   do   not   match\\n%s' % (_fmt_msg(msg), type_, _fmt_path(path))))",
        "line_count": 12,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def version(hostname, timeout=20, username=None, password=None): \n    return __version(__connect(hostname, timeout, username, password))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_file(name): \n    return absjoin(test_file_dir, name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _volume_field(): \n    return field(type=BlockDeviceVolume, mandatory=True, factory=(lambda x: x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_fastq_record(label, seq, qual): \n    return ('@%s\\n%s\\n+\\n%s\\n' % (label, seq, qual))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _test(value, *args, **keywargs): \n    return (value, args, keywargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_wsgi_intercept(host, port, app_create_fn, script_name=''): \n    _wsgi_intercept[(host, port)] = (app_create_fn, script_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def discriminant(a, b, c): \n    return math.sqrt(((b ** 2) - ((4 * a) * c)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def f1_score(y_true, y_pred, labels=None, pos_label=1, average='binary', sample_weight=None): \n    return fbeta_score(y_true, y_pred, 1, labels=labels, pos_label=pos_label, average=average, sample_weight=sample_weight)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return DeviceOpModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_message(command_id, arguments=tuple()): \n    return (((MESSAGE_START + (command_id,)) + arguments) + (midi.SYSEX_END,))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_invalid_token(platform, version): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Application_End(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ceil(x): \n    return Ceil()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Coin(name, p=S.Half): \n    return rv(name, BernoulliDistribution, p, 'H', 'T')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isNegInf(val): \n    return (str(float(val)) == str(NegInf))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def octocat(say=None): \n    return gh.octocat(say)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _url_for_read(user_id): \n    return '{prefix}/users/{user_id}/read'.format(prefix=settings.PREFIX, user_id=user_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_get_by_address(context, address): \n    return IMPL.floating_ip_get_by_address(context, address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_all(stream): \n    return yaml.load_all(stream, Loader=AstropyLoader)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def f(x): \n    return (x * np.sin(x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLBREAKAWAY(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLBREAKAWAY)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ipv6(value, options=None): \n    return _ipv_filter(value, 6, options=options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _clientJobsDB(): \n    return cjdao.ClientJobsDAO.get()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def kivy_configure(): \n    for callback in __kivy_post_configuration: \n      callback()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getPrecision(elementNode): \n    return getCascadeFloatWithoutSelf((0.2 * getLayerHeight(elementNode)), elementNode, 'precision')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upretty(expr): \n    return xpretty(expr, use_unicode=True, wrap_line=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_dladm(): \n    return salt.utils.which('dladm')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sdm_sort(f, O): \n    return sorted(f, key=(lambda term: O(term[0])), reverse=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_item_expr(p): \n    p[0] = ('', p[1])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getBooleanFromDictionary(dictionary, key): \n    return getBooleanFromDictionaryDefault(True, dictionary, key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attachment_specs_update_or_create(context, attachment_id, specs): \n    return IMPL.attachment_specs_update_or_create(context, attachment_id, specs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_identifier_list_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _buildTestClasses(_locals): \n    for x in getModule('twisted').walkModules(): \n      ignoredModules = ['twisted.test.reflect_helper', 'twisted.internet.test.process_', 'twisted.test.process_'] \n      isIgnored = [x.name.startswith(ignored) for ignored in ignoredModules] \n      if (True in isIgnored): \n         continue \n      class Test(NewStyleOnly, unittest.TestCase, ): \n         '\\n                                    @see:   L{NewStyleOnly}\\n                                    ' \n         module = x.name \n      acceptableName = x.name.replace('.', '_') \n      Test.__name__ = acceptableName \n      if hasattr(Test, '__qualname__'): \n         Test.__qualname__ = acceptableName \n      _locals.update({acceptableName: Test})",
        "line_count": 13,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def delete(filename): \n    OggSpeex(filename).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_user(path, follow_symlinks=True): \n    return stats(os.path.expanduser(path), follow_symlinks=follow_symlinks).get('user', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connect_action_bool(action, fn): \n    action.triggered[bool].connect(fn)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_endpoint_json(path): \n    with open(path, 'r') as endpoints_file: \n      return json.load(endpoints_file)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_no_ready_python_process(noready_pyproc): \n    with pytest.raises(testprocess.ProcessExited): \n      with stopwatch(max_ms=5000): \n         noready_pyproc.start()",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def export_library_to_xml(modulestore, contentstore, library_key, root_dir, library_dir): \n    LibraryExportManager(modulestore, contentstore, library_key, root_dir, library_dir).export()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def job_list(context, data_dict): \n    return {'success': False}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_bundle_ingest_dirname(ts): \n    return ts.isoformat().replace(':', ';')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_supported_locales(manifest): \n    return sorted(filter(None, map(find_language, set(manifest.get('locales', {}).keys()))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _setHTTPCookies(): \n    if conf.cookie: \n      debugMsg = 'setting   the   HTTP   Cookie   header' \n      logger.debug(debugMsg) \n      conf.httpHeaders[HTTP_HEADER.COOKIE] = conf.cookie",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_other_dvr_serviced_device_owners(): \n    return [n_const.DEVICE_OWNER_LOADBALANCER, n_const.DEVICE_OWNER_LOADBALANCERV2, n_const.DEVICE_OWNER_DHCP]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ansi_expand_style(cmap): \n    for (key, val) in list(cmap.items()): \n      if (key == 'NO_COLOR'): \n         continue \n      elif (len(val) == 0): \n         cmap[('BOLD_' + key)] = '1' \n         cmap[('UNDERLINE_' + key)] = '4' \n         cmap[('BOLD_UNDERLINE_' + key)] = '1;4' \n         cmap[('BACKGROUND_' + key)] = val \n      else: \n         cmap[('BOLD_' + key)] = ('1;' + val) \n         cmap[('UNDERLINE_' + key)] = ('4;' + val) \n         cmap[('BOLD_UNDERLINE_' + key)] = ('1;4;' + val) \n         cmap[('BACKGROUND_' + key)] = val.replace('38', '48', 1)",
        "line_count": 13,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def EMA(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.EMA, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_grouped_copy(T1): \n    for masked in (False, True): \n      t1 = Table(T1, masked=masked) \n      tg = t1.group_by('a') \n      tgc = tg.copy() \n      assert np.all((tgc.groups.indices == tg.groups.indices)) \n      assert np.all((tgc.groups.keys == tg.groups.keys)) \n      tac = tg['a'].copy() \n      assert np.all((tac.groups.indices == tg['a'].groups.indices)) \n      c1 = t1['a'].copy() \n      gc1 = c1.group_by(t1['a']) \n      gc1c = gc1.copy() \n      assert np.all((gc1c.groups.indices == np.array([0, 1, 4, 8])))",
        "line_count": 12,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def register_schema(path, schema): \n    schema_paths[path] = schema",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def logFactorial(x): \n    return lgamma((x + 1.0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bench_optimizer(optimizer, param_grid): \n    return sum((apply_optimizer(optimizer, func, a, b) for (func, a, b) in param_grid))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def nolog(*allargs): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _bit_length(num): \n    return len(bin(num).lstrip(u'-0b'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=XBLLexer(), buf_class=XBLBuffer, import_handler_class=None, cile_driver_class=XBLCILEDriver, is_cpln_lang=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def minimum_spanning_edges(G, algorithm='kruskal', weight='weight', keys=True, data=True): \n    return _spanning_edges(G, minimum=True, algorithm=algorithm, weight=weight, keys=keys, data=data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getManipulatedPaths(close, elementNode, loop, prefix, sideLength): \n    return [getFlippedLoop(elementNode, loop, prefix)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_load(jid): \n    with _get_serv(ret=None, commit=True) as cur: \n      sql = 'SELECT   load   FROM   jids   WHERE   jid   =   %s;' \n      cur.execute(sql, (jid,)) \n      data = cur.fetchone() \n      if data: \n         return data[0] \n      return {}",
        "line_count": 7,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def GetContentType(filename): \n    return (mimetypes.guess_type(filename)[0] or 'application/octet-stream')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def do_title(s): \n    return soft_unicode(s).title()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unicode_list(_list): \n    return [unicode_obj(x) for x in _list]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def func2(): \n    return (1, 2, 3)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def executable(path): \n    return os.access(path, os.X_OK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('boto_asg' if ('boto_asg.exists' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def CDLCONCEALBABYSWALL(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLCONCEALBABYSWALL)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(json_filename, encoding='UTF-8'): \n    with codecs.open(json_filename, 'rU', encoding=encoding) as input_file: \n      json_data = json.load(input_file, encoding=encoding) \n      json_processor = JsonParser() \n      features = json_processor.parse_features(json_data) \n      return features",
        "line_count": 5,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def json_ser(obj): \n    if isinstance(obj, (datetime, date)): \n      return obj.isoformat()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def normalizeUnicode(value): \n    return (unicodedata.normalize('NFKD', value).encode('ascii', 'ignore') if isinstance(value, unicode) else value)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def parse_command_line(args=None, final=True): \n    return options.parse_command_line(args, final=final)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Erlang(name, k, l): \n    return rv(name, GammaDistribution, (k, (1 / l)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def glob(pathname): \n    return list(iglob(pathname))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def kill_listen_processes(namespace): \n    if _kill_listen_processes(namespace, force=False): \n      try: \n         wait_until_no_listen_pids_namespace(namespace) \n      except PidsInNamespaceException: \n         _kill_listen_processes(namespace, force=True) \n         wait_until_no_listen_pids_namespace(namespace)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def serviceHandle(target): \n    ser.mapTarget(target)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tmp_path(*paths): \n    return os.path.join(os.path.dirname(__file__), u'tmp', *paths)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(blob_key): \n    return BlobInfo.get(blob_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _restoreMergedOptions(): \n    for option in RESTORE_MERGED_OPTIONS: \n      conf[option] = mergedOptions[option]",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def show(br=None): \n    return _os_dispatch('brshow', br)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def matchStrengthNoNoise(x, y, n): \n    return sum(((xi == yi) for (xi, yi, ni) in zip(x, y, n) if (ni != '#')))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def error_msg(text): \n    msg(colorize(('Error:   ' + str(text)), 'red'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def IsBucket(name): \n    return ObjectStore.HasInstance(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_public_languages(site_id=None): \n    return [lang['code'] for lang in get_language_objects(site_id) if lang.get('public', True)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def complement(func): \n    return compose(operator.not_, func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def transpose(a, axes=None): \n    return a.transpose(axes)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def take(n, seq): \n    return list(islice(seq, n))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getSkeinforgePluginsPath(subName=''): \n    return getJoinedPath(getSkeinforgePath('skeinforge_plugins'), subName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unjellyFromAOT(aot): \n    return AOTUnjellier().unjelly(aot)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _retrieve_rpm_probes(): \n    return __salt__['probes.config']()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start(name, runas=None): \n    return prlctl('start', _sdecode(name), runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_link_id(link): \n    return link.get('href')[(link.get('href').find(\"'\") + 1):link.get('href').rfind(\"'\")]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resolve_content_toctree(environment, docname, builder, toctree, prune=True, maxdepth=0, titles_only=False, collapse=False, includehidden=False): \n    return toctree",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sha512b64(*data): \n    return _hash(hashlib.sha512, data).digest().encode('base64')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def failure_to_exc_info(failure): \n    if isinstance(failure, Failure): \n      return (failure.type, failure.value, failure.getTracebackObject())",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def symptom_LDAP_group_members_are_ids_disabled(): \n    return ((CONF.ldap.group_objectclass == 'posixGroup') and (not CONF.ldap.group_members_are_ids))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def py2encode(s): \n    return (s.encode('utf-8') if (PY2 and (type(s) is unicode)) else s)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_magic(): \n    return '\\xb3\\xf2\\r\\n'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addSymmetricXPaths(outputs, paths, x): \n    for path in paths: \n      addSymmetricXPath(outputs, path, x)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewRepository(): \n    return WipeRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wholelist(*field_list): \n    return Role(Role.wholelist, field_list)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_generator_text(widget, text_view_obj, generator_instance): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uniq(seq): \n    return [x for (i, x) in enumerate(seq) if (seq.index(x) == i)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def __virtual__(): \n    return ('pagerduty_user' if ('pagerduty_util.get_resource' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_user(path, follow_symlinks=True): \n    return uid_to_user(get_uid(path, follow_symlinks))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ValidatePropertyInteger(name, value): \n    if (not ((-9223372036854775808) <= value <= 9223372036854775807)): \n      raise OverflowError(('%d   is   out   of   bounds   for   int64' % value))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _salt_configuration_error(filename): \n    raise SaltConfigurationError('Configuration   error   in   {0}'.format(filename))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_cache_fname(image_id): \n    return hashlib.sha1(image_id.encode('utf-8')).hexdigest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_collapse_fns(): \n    return {'median': _collapse_to_median, 'first': _collapse_to_first, 'random': _collapse_to_random, 'sum': _collapse_to_sum, 'mean': _collapse_to_mean}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _isscalar(x): \n    return (np.isscalar(x) or (hasattr(x, 'shape') and (x.shape == ())))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getGeometricDifference(first, second): \n    return (max(first, second) / min(first, second))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getAroundsFromPath(path, radius, thresholdRatio=0.9): \n    return getAroundsFromPoints(getPointsFromPath(path, (1.01 * abs(radius)), thresholdRatio), radius)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_vcs_installed(repo_type): \n    return bool(which(repo_type))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def identification_field_factory(label, error_required): \n    return forms.CharField(label=label, widget=forms.TextInput(attrs=attrs_dict), max_length=75, error_messages={u'required': error_required})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def htmlsafe_dump(obj, fp, **kwargs): \n    fp.write(unicode(htmlsafe_dumps(obj, **kwargs)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rosstack_depends(s): \n    return rosstackexec(['depends', s]).split()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def symptom_comma_in_SAML_private_key_file_path(): \n    return (',' in CONF.saml.keyfile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gae_mini_profiler_should_profile_production(): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Subscript(index_node): \n    return Node(syms.trailer, [Leaf(token.LBRACE, '['), index_node, Leaf(token.RBRACE, ']')])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reset_terminal(): \n    if (not mswin): \n      subprocess.call(['tset', '-c'])",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def estrada_index(G): \n    return sum(subgraph_centrality(G).values())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onBaseAppReady(isBootstrap): \n    INFO_MSG(('onBaseAppReady:   isBootstrap=%s,   appID=%s,   bootstrapGroupIndex=%s,   bootstrapGlobalIndex=%s' % (isBootstrap, os.getenv('KBE_COMPONENTID'), os.getenv('KBE_BOOTIDX_GROUP'), os.getenv('KBE_BOOTIDX_GLOBAL'))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_sevenfile(path): \n    return (SEVEN_COMMAND and (os.path.splitext(path)[1].lower() == '.7z'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def si32le(c, o=0): \n    return unpack('<i', c[o:(o + 4)])[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def immunohistochemistry(): \n    return load('ihc.png')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_create_or_delete(message): \n    return {'type': message['type'], 'event': message['action'], 'values': {'user': get_owner_name(message), 'subject': get_subject(message)}}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_bind_addr(conf, default_port=None): \n    return (conf.bind_host, (conf.bind_port or default_port))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_long_description(): \n    return 'Audit   plugins   use   the   knowledge   created   by   crawl   plugins   to\\n            find   vulnerabilities   on   the   remote   web   application   and   web   server.\\n            '",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TriangleCollection(mode='raw', *args, **kwargs): \n    return RawTriangleCollection(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def on_doctype_update(): \n    frappe.db.add_index(u'Email   Queue', (u'status', u'send_after', u'priority', u'creation'), u'index_bulk_flush')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tokenize(sent): \n    return [x.strip() for x in re.split('(\\\\W+)?', sent) if x.strip()]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def seqids_from_otu_to_seqid(otu_to_seqid): \n    return set(flatten(otu_to_seqid.values()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def debug_option(): \n    if g['debug']: \n      g['traceback'].append(traceback.format_exc())",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def GetNodes(node, match_tag): \n    return (child for child in node.getchildren() if (GetTag(child) == match_tag))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def volume_update(context, volume_id, values): \n    return IMPL.volume_update(context, volume_id, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eq_(a, b, msg=None): \n    assert (a == b), (msg or ('%r   !=   %r' % (a, b)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def add_reload_hook(fn): \n    _reload_hooks.append(fn)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backward_migrate_group_curators(apps, schema_editor): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def this_is_a_testfile(filename): \n    return TESTFILE_RE.match(osp.basename(filename))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_picks(raw): \n    return [0, 1, 2, 6, 7, 8, 306, 340, 341, 342]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _dirtyPatches(): \n    httplib._MAXLINE = ((1 * 1024) * 1024)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_extend(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_repo(backend, mat): \n    return backend.open_repository(url_prefix(mat))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dup_add_ground(f, c, K): \n    return dup_add_term(f, c, 0, K)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fast_attacks(): \n    return FastAttacks",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def drop_model_tables(models, **drop_table_kwargs): \n    for m in reversed(sort_models_topologically(models)): \n      m.drop_table(**drop_table_kwargs)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _restore_path_envvar(original): \n    if original: \n      os.environ['PATH'] = original",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _do_mb_put(path): \n    return _mb_request(path, 'PUT', AUTH_YES, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log(x): \n    return Log()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inp(address): \n    return port.DlPortReadPortUchar(address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('pecl' if ('pecl.list' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def neuron(w, x): \n    return sigmoid((w[0] + np.inner(w[1:], x)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_ansi(source): \n    return re.sub('\\\\033\\\\[(\\\\d|;)+?m', '', source)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write(path, contents, encoding=None): \n    with xopen(path, u'wb') as fh: \n      return xwrite(fh, contents, encoding=encoding)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def public_gists(number=(-1), etag=None): \n    return gh.public_gists(number, etag)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tamper(payload, **kwargs): \n    return (('%s%%00' % payload) if payload else payload)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def in6_xor(a1, a2): \n    return _in6_bitops(a1, a2, 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def interface_addresses(attrs=None, where=None): \n    return _osquery_cmd(table='interface_addresses', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def necklaces(n, k, free=False): \n    return uniq((minlex(i, directed=(not free)) for i in variations(list(range(k)), n, repetition=True)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def generate_objects_info_packs(repo): \n    for pack in repo.object_store.packs: \n      (yield (('P   ' + pack.data.filename.encode(sys.getfilesystemencoding())) + '\\n'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def smartos_image(): \n    with settings(hide('running', 'stdout')): \n      if is_file('/etc/product'): \n         return run('cat   /etc/product   |   head   -n   2   |   tail   -n   1   |   awk   \\'{   print   $2   \"   \"   $3   }\\'') \n      else: \n         return None",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def track_index_changed(item, track_info): \n    return (item.track not in (track_info.medium_index, track_info.index))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup(app): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unlink_cohort_partition_group(cohort): \n    CourseUserGroupPartitionGroup.objects.filter(course_user_group=cohort).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _retrieve_users(): \n    return __salt__['users.config']()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _fixup_ins_del_tags(doc): \n    for tag in ['ins', 'del']: \n      for el in doc.xpath(('descendant-or-self::%s' % tag)): \n         if (not _contains_block_level_tag(el)): \n            continue \n         _move_el_inside_block(el, tag=tag) \n         el.drop_tag()",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def Hexdump(data, width=16): \n    for offset in xrange(0, len(data), width): \n      row_data = data[offset:(offset + width)] \n      translated_data = [(x if ((ord(x) < 127) and (ord(x) > 32)) else '.') for x in row_data] \n      hexdata = '   '.join(['{0:02x}'.format(ord(x)) for x in row_data]) \n      (yield (offset, hexdata, translated_data))",
        "line_count": 5,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def set_defaults(defaults, kwargs): \n    for (key, value) in defaults.items(): \n      if ((key not in kwargs) and (value is not None)): \n         kwargs[key] = value \n      elif (isinstance(value, list) and isinstance(kwargs[key], list)): \n         kwargs[key] = (list(value) + kwargs[key]) \n      elif (isinstance(value, dict) and isinstance(kwargs[key], dict)): \n         set_defaults(value, kwargs[key]) \n      elif ((key in kwargs) and (value is None)): \n         kwargs[key] = None",
        "line_count": 9,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def isgeneratorfunction(object): \n    return bool(((isfunction(object) or ismethod(object)) and (object.func_code.co_flags & CO_GENERATOR)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def enable_merge_strategies(*merge_strategies): \n    return _EnableMergeStrategies(*merge_strategies)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_pickle(obj, fname): \n    with get_file_obj(fname, 'wb') as fout: \n      cPickle.dump(obj, fout, protocol=(-1))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_bsd(): \n    return (platform.system() in ('Darwin', 'FreeBSD', 'OpenBSD'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deactivate(): \n    if hasattr(_active, u'value'): \n      del _active.value",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def contract_creation_exceptions(): \n    return {sa.Column: [('%s.binding_index' % ROUTER_L3_AGENT_BINDING)]}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    evaluate.processArchivable(group.Group, elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def idd_sfrmi(l, m): \n    return _id.idd_sfrmi(l, m)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def orphans(i, o): \n    return variables_and_orphans(i, o)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_user_by_username(trans, username): \n    return trans.sa_session.query(trans.model.User).filter((trans.model.User.table.c.username == username)).one()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_backend(): \n    return rcParams['backend']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def s3_image_get(context, image_id): \n    return IMPL.s3_image_get(context, image_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _item_to_zone(iterator, resource): \n    return ManagedZone.from_api_repr(resource, iterator.client)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices_callback, discovery_info=None): \n    add_devices_callback([DemoLight('Bed   Light', False, effect_list=LIGHT_EFFECT_LIST, effect=LIGHT_EFFECT_LIST[0]), DemoLight('Ceiling   Lights', True, LIGHT_COLORS[0], LIGHT_TEMPS[1]), DemoLight('Kitchen   Lights', True, LIGHT_COLORS[1], LIGHT_TEMPS[0])])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_const_map_item(p): \n    p[0] = [p[1], p[3]]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def demographic_data(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def arg_repr(*args, **kwargs): \n    return {'args': repr(args), 'kwargs': repr(kwargs)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DX(barDs, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_hlc(barDs, count, talib.DX, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _AddFilters(filters): \n    _cpplint_state.AddFilters(filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safe(text): \n    return _safe(text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def from_store_name(container_name): \n    return CallingInfo(container_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def indent(string, depth=1): \n    return re.sub(u'(^|\\\\n)([^\\\\n]+)', ((u'\\\\g<1>' + (u'            ' * depth)) + u'\\\\g<2>'), string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_create(context, values): \n    return IMPL.instance_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def threshold_mean(image): \n    return np.mean(image)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('win_servermanager' if ('win_servermanager.install' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cleanup(out_file): \n    if os.path.isfile(out_file): \n      os.remove(out_file)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def moments_hu(nu): \n    return _moments_cy.moments_hu(nu.astype(np.double))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disjuncts(expr): \n    return Or.make_args(expr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def regularize_layer_params_weighted(layers, penalty, tags={'regularizable': True}, **kwargs): \n    return sum(((coeff * apply_penalty(layer.get_params(**tags), penalty, **kwargs)) for (layer, coeff) in layers.items()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def init(mpstate): \n    return CameraViewModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MigratePython27Notice(): \n    ErrorUpdate('WARNING:   This   application   is   using   the   Python   2.5   runtime,   which   is   deprecated!   It   should   be   updated   to   the   Python   2.7   runtime   as   soon   as   possible,   which   offers   performance   improvements   and   many   new   features.   Learn   how   simple   it   is   to   migrate   your   application   to   Python   2.7   at   https://developers.google.com/appengine/docs/python/python25/migrate27.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _dec2hex(decval): \n    return _pretty_hex('{0:X}'.format(decval))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def post(url, data=None, **kwargs): \n    return request('post', url, data=data, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _basic_auth_str(username, password): \n    return ('Basic   ' + b64encode(('%s:%s' % (username, password)).encode('latin1')).strip().decode('latin1'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_parameter_type_list_opt_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_group_members_get(context, group_uuid): \n    return IMPL.instance_group_members_get(context, group_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def redirect_if_blocked(course_key, access_point='enrollment', **kwargs): \n    if settings.FEATURES.get('EMBARGO'): \n      is_blocked = (not check_course_access(course_key, **kwargs)) \n      if is_blocked: \n         if (access_point == 'courseware'): \n            if (not RestrictedCourse.is_disabled_access_check(course_key)): \n               return message_url_path(course_key, access_point) \n         else: \n            return message_url_path(course_key, access_point)",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def create_gist(description, files): \n    return gh.create_gist(description, files)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isdata(object): \n    return (not (inspect.ismodule(object) or inspect.isclass(object) or inspect.isroutine(object) or inspect.isframe(object) or inspect.istraceback(object) or inspect.iscode(object)))",
        "line_count": 1,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def ms_attacks(exploit): \n    return {'1': 'dll_hijacking', '2': 'unc_embed', '3': 'exploit/windows/fileformat/ms15_100_mcl_exe', '4': 'exploit/windows/fileformat/ms14_017_rtf', '5': 'exploit/windows/fileformat/ms11_006_createsizeddibsection', '6': 'exploit/windows/fileformat/ms10_087_rtf_pfragments_bof', '7': 'exploit/windows/fileformat/adobe_flashplayer_button', '8': 'exploit/windows/fileformat/adobe_cooltype_sing', '9': 'exploit/windows/fileformat/adobe_flashplayer_newfunction', '10': 'exploit/windows/fileformat/adobe_collectemailinfo', '11': 'exploit/windows/fileformat/adobe_geticon', '12': 'exploit/windows/fileformat/adobe_jbig2decode', '13': 'exploit/windows/fileformat/adobe_pdf_embedded_exe', '14': 'exploit/windows/fileformat/adobe_utilprintf', '15': 'custom/exe/to/vba/payload', '16': 'exploit/windows/fileformat/adobe_u3d_meshdecl', '17': 'exploit/windows/fileformat/adobe_pdf_embedded_exe_nojs', '18': 'exploit/windows/fileformat/foxit_title_bof', '19': 'exploit/windows/fileformat/apple_quicktime_pnsize', '20': 'exploit/windows/fileformat/nuance_pdf_launch_overflow', '21': 'exploit/windows/fileformat/adobe_reader_u3d', '22': 'exploit/windows/fileformat/ms12_027_mscomctl_bof'}.get(exploit, 'INVALID')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skip_unless(condition, msg=None): \n    return skip_if((not condition), msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show_cookies(): \n    browser.show_cookies()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def scala_test_config(append=None, **kwargs): \n    blade_config.update_config('scala_test_config', append, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def scan_default_sr(session): \n    _scan_sr(session, _find_sr(session))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parseFilePaths(page): \n    if page: \n      for regex in FILE_PATH_REGEXES: \n         for match in re.finditer(regex, page): \n            absFilePath = match.group('result').strip() \n            page = page.replace(absFilePath, '') \n            if isWindowsDriveLetterPath(absFilePath): \n               absFilePath = posixToNtSlashes(absFilePath) \n            if (absFilePath not in kb.absFilePaths): \n               kb.absFilePaths.add(absFilePath)",
        "line_count": 9,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def request_methods_view(request): \n    return HttpResponse(('request   method:   %s' % request.method))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parsed_version(version): \n    return tuple(map(int, version.split('.')[:3]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def agent_build_create(context, values): \n    return IMPL.agent_build_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return SpeedRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def search_entries(): \n    view_entries(raw_input('Search   query:   '))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_unserialized_json(obj): \n    return _cached_dfs_serialize(obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize_excludes(rootpath, excludes): \n    return [path.abspath(exclude) for exclude in excludes]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def escape_html(text): \n    return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('\"', '&quot;').replace(\"'\", '&#39;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_bdms_to_connect(bdms, exclude_root_mapping=False): \n    return (bdm for bdm in bdms if ((bdm.get('boot_index', (-1)) != 0) or (not exclude_root_mapping)))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def equal(seq): \n    return (len(set(seq)) <= 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def proxytype(): \n    return 'junos'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mellin_transform(f, x, s, **hints): \n    return MellinTransform(f, x, s).doit(**hints)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _format_creation(stamp): \n    return ('%s.%06d' % (stamp.strftime(_BASE_CREATION_HEADER_FORMAT), stamp.microsecond))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cdf(x, mu, sigma): \n    return ((1 + sy.erf(((x - mu) / (sigma * sy.sqrt(2))))) / 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def session(): \n    return Session()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_nodes_select(call=None): \n    return salt.utils.cloud.list_nodes_select(list_nodes_full(), __opts__['query.selection'], call)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exploit_all(): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_replication_group(name, wait=600, region=None, key=None, keyid=None, profile=None, **args): \n    return _delete_resource(name, name_param='ReplicationGroupId', desc='replication   group', res_type='replication_group', wait=wait, status_param='Status', region=region, key=key, keyid=keyid, profile=profile, **args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uncomment(filename, regex, use_sudo=False, char='#', backup='.bak', shell=False): \n    return sed(filename, before=('^([[:space:]]*)%s[[:space:]]?' % char), after='\\\\1', limit=regex, use_sudo=use_sudo, backup=backup, shell=shell)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_static_file_url(asset): \n    return staticfiles_storage.url(asset)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def copy_file_without_comments(source, destination): \n    with open(source, 'r') as infile: \n      with open(destination, 'w') as outfile: \n         for line in infile: \n            if (not (line.isspace() or line.lstrip().startswith('#'))): \n               outfile.write(line)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_current_view(): \n    return getattr(g, '_admin_view', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def return_none(exc): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_file(filename, string): \n    with open(filename, 'w') as file_fd: \n      file_fd.write(string)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize_dict(dict_): \n    return dict([(k, (v[0] if ((not isinstance(v, str)) and (len(v) == 1)) else v)) for (k, v) in list(dict_.items())])",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_object_transient_sysmeta(key): \n    return ('%s%s' % (OBJECT_TRANSIENT_SYSMETA_PREFIX, key))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return InterpretRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_ptb_words_vocabulary(): \n    return _retrieve_word_vocabulary()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parseXMLString(st): \n    return parseString(st, caseInsensitive=0, preserveCase=1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_class_get_default(context): \n    return IMPL.quota_class_get_default(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _read_simple(fid, tag, shape, rlims, dtype): \n    return _fromstring_rows(fid, tag.size, dtype=dtype, shape=shape, rlims=rlims)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_repeats(arr): \n    return RepeatedResults(*_find_repeats(np.array(arr, dtype=np.float64)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def info(pretty=False, best=False): \n    return _distro.info(pretty, best)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def purge_deleted_rows(context, age_in_days): \n    return IMPL.purge_deleted_rows(context, age_in_days=age_in_days)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bic(llf, nobs, df_modelwc): \n    return (((-2.0) * llf) + (np.log(nobs) * df_modelwc))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isBlockLevel(tag): \n    return BLOCK_LEVEL_ELEMENTS.match(tag)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def arg_byref(args, offset=(-1)): \n    return args[offset]._obj.value",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_translation_unit_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(data=None): \n    return SHA512Hash().new(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_equality_expression_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_request_ip_resolver(request): \n    return (real_ip(request) or x_forwarded_ip(request) or remote_addr_ip(request))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def PackString(name, value, pbvalue): \n    pbvalue.set_stringvalue(unicode(value).encode('utf-8'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sin(x): \n    return tf.sin(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def number_of_nodes(G): \n    return G.number_of_nodes()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rands(nchars): \n    return ''.join(np.random.choice(RANDS_CHARS, nchars))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resetwarnings(): \n    filters[:] = []",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def each_cy_in_setup(top_dir): \n    for (dir_path, f) in each_setup_in_pkg(top_dir): \n      text = f.read() \n      match = RE_CYTHON.findall(text) \n      if match: \n         for cy_file in match: \n            if ('.' in cy_file): \n               parts = cy_file.split('.') \n               cy_file = parts[(-1)] \n               path = os.path.join(dir_path, *parts[:(-1)]) \n            else: \n               path = dir_path \n            full_path = os.path.join(path, cy_file) \n            (yield full_path)",
        "line_count": 13,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def install_cygwin(name, install_args=None, override_args=False): \n    return install(name, source='cygwin', install_args=install_args, override_args=override_args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_blas_funcs(names, arrays=(), dtype=None): \n    return _get_funcs(names, arrays, dtype, 'BLAS', _fblas, _cblas, 'fblas', 'cblas', _blas_alias)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index_alt(): \n    s3_redirect_default(URL(f='report'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ast_good_drop(): \n    can_compile(u'(drop   1   [2   3])')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def share(*args): \n    return prefix(u'share', u'git-cola', *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resetCounter(technique): \n    kb.counters[technique] = 0",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_list(node): \n    return (isinstance(node, Node) and (len(node.children) > 1) and isinstance(node.children[0], Leaf) and isinstance(node.children[(-1)], Leaf) and (node.children[0].value == u'[') and (node.children[(-1)].value == u']'))",
        "line_count": 1,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def Linkable(filename): \n    return filename.endswith('.o')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return ConcatenateDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def header_quopri_check(c): \n    return bool(hqre.match(c))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def circle(r, c, radius, shape=None): \n    return ellipse(r, c, radius, radius, shape)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_child_branches(trie): \n    return trie[1:]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_show(context, data_dict): \n    return _group_or_org_show(context, data_dict)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rid(): \n    return (struct.unpack('@Q', os.urandom(8))[0] & _WAMP_ID_MASK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Exponential(name, rate): \n    return rv(name, ExponentialDistribution, (rate,))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def NOPTRACE(v): \n    context.defaults['noptrace'] = asbool(v)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def force_unicode(s, strings_only=False, errors='strict'): \n    return django.utils.encoding.force_unicode(s, get_site_encoding(), strings_only, errors)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _subject_from_inverse(inverse_operator): \n    return inverse_operator['src'][0].get('subject_his_id', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _log_key(match): \n    return tuple(((k, v) for (k, v) in sorted(match.items()) if (k not in ('log_type', 'path'))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def set_sff_trimpoints(sff_dir, technical_lengths): \n    for (lib_id, sff_fp) in get_per_lib_sff_fps(sff_dir): \n      try: \n         readlength = technical_lengths[lib_id] \n      except KeyError: \n         continue \n      sff_data = parse_binary_sff(open(sff_fp), True) \n      (clipped_header, clipped_reads) = set_clip_qual_left(sff_data, readlength) \n      (fd, temp_fp) = mkstemp(dir=sff_dir) \n      close(fd) \n      with open(temp_fp, 'w') as f: \n         write_binary_sff(f, clipped_header, clipped_reads) \n      move(temp_fp, sff_fp)",
        "line_count": 12,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def t_KEGG_Compound(testfiles): \n    for file in testfiles: \n      fh = open(os.path.join('KEGG', file)) \n      print((('Testing   Bio.KEGG.Compound   on   ' + file) + '\\n\\n')) \n      records = Compound.parse(fh) \n      for record in records: \n         print(record) \n      print('\\n') \n      fh.close()",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def iso8601_from_timestamp(timestamp): \n    return isotime(datetime.datetime.utcfromtimestamp(timestamp))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def selectDialect(protocol, dialect): \n    protocol._selectDialect(dialect)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_verifier_for_ecc(signature, hash_method, public_key): \n    return public_key.verifier(signature, ec.ECDSA(hash_method))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decipher_shift(msg, key, symbols=None): \n    return encipher_shift(msg, (- key), symbols)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def split(s, token=[WORD, POS, CHUNK, PNP]): \n    return Text(text_type(s), token)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_text(nodes): \n    return ''.join([n.data for n in nodes if (n.nodeType == n.TEXT_NODE)])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def p_unary_expression_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_SAMPClientError(): \n    SAMPClientError('test')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_nan(builder, val): \n    return builder.fcmp_unordered('uno', val, val)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO_write(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ntohs(bs): \n    return struct.unpack('!h', bs)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def removeListFromDictionary(dictionary, keys): \n    for key in keys: \n      removeElementFromDictionary(dictionary, key)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def pformat(object, indent=1, width=80, depth=None): \n    return PrettyPrinter(indent=indent, width=width, depth=depth).pformat(object)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gradient_percentile(image, selem, out=None, mask=None, shift_x=False, shift_y=False, p0=0, p1=1): \n    return _apply(percentile_cy._gradient, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y, p0=p0, p1=p1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___repr__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_num_host_queue_entries(**filter_data): \n    return models.HostQueueEntry.query_count(filter_data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reset_template_info_cache(): \n    _template_info_cache.clear()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def open_project(path): \n    return open_project_with_extensions(settings.SUPPORTED_EXTENSIONS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_incron_cmdstr(path): \n    return 'incrontab   {0}'.format(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dark(): \n    logger.info(dark.__doc__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _format_info(data): \n    return {'name': data.gr_name, 'passwd': data.gr_passwd, 'gid': data.gr_gid, 'members': data.gr_mem}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def kegg_info(database): \n    return _q('info', database)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def missing(name): \n    return (name not in get_all())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pure_nash_brute(g): \n    return list(pure_nash_brute_gen(g))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load(filename): \n    return Image.load(filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def contains_whitespace(text): \n    return any((x.isspace() for x in text))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def proto2methodprotofunc(proto): \n    return proto.replace('   ', '').replace('(', '').replace('[', '').replace(')', '').replace('/', '_').replace(';', '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _default_content_type_rewriter(state): \n    if (not ('Content-Type' in state.headers)): \n      state.headers['Content-Type'] = 'text/html'",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def quota_get_per_project_resources(): \n    return IMPL.quota_get_per_project_resources()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_indexes(**ctx_options): \n    return get_indexes_async(**ctx_options).get_result()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fix_xml_ampersands(xml_str): \n    return re.sub(u'&(?!amp;|lt;|gt;|apos;|quot;|#x[0-9a-fA-F]{,4};|#[0-9]{,4};)', u'&amp;', xml_str)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pci_device_get_all_by_node(context, node_id): \n    return IMPL.pci_device_get_all_by_node(context, node_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_url_prefix(prefix): \n    _local.prefix = prefix",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _coord_frame_name(cframe): \n    return _verbose_frames.get(int(cframe), 'unknown')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_number_of_calls(object_with_method, method_name, maximum_calls, minimum_calls=1): \n    return check_sum_of_calls(object_with_method, [method_name], maximum_calls, minimum_calls)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_messages(connection, topic, input): \n    while True: \n      try: \n         body = pickle.load(input) \n      except EOFError: \n         break \n      print ('%s:   %s' % (body.get('timestamp'), body.get('event_type', 'unknown   event'))) \n      connection.topic_send(topic, body)",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def isabs(s): \n    return s.startswith('/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_create(context, project_id, resource, limit, user_id=None): \n    return IMPL.quota_create(context, project_id, resource, limit, user_id=user_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def alias(thumbnailer, thumbnail_options, source_filename, thumbnail_extension, **kwargs): \n    return u'.'.join([source_filename, thumbnail_options.get(u'ALIAS', u''), thumbnail_extension])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def watch(name, timespec, tag=None, user=None, job=None, unique_tag=False): \n    return {'name': name, 'changes': {}, 'result': True, 'comment': ''}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_get_all_by_host(context, host, filters=None): \n    return IMPL.volume_get_all_by_host(context, host, filters=filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def splititer(pattern, string, maxsplit=0, flags=0, concurrent=None, **kwargs): \n    return _compile(pattern, flags, kwargs).splititer(string, maxsplit, concurrent)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def interactive(b): \n    rcParams['interactive'] = b",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sech(arg): \n    return (1 / numpy.cosh(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def promote(operator, size): \n    return lo.LinOp(lo.PROMOTE, size, [operator], None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def require_password_change(name): \n    return __salt__['user.update'](name, expired=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_connection(fail_silently=False): \n    return _get_connection(backend=get_mail_backend(), host=options.get('mail.host'), port=options.get('mail.port'), username=options.get('mail.username'), password=options.get('mail.password'), use_tls=options.get('mail.use-tls'), fail_silently=fail_silently)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_model(instance): \n    return type(instance)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cout(*args): \n    cprint('stdout', *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_from_logout(request): \n    return getattr(request, 'is_from_logout', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sortfunc(x_obj, y_obj): \n    return cmp(y_obj[1], x_obj[1])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_package_dir(package): \n    return os.path.join(sublime.packages_path(), package)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rax_slugify(value): \n    return ('rax_%s' % re.sub('[^\\\\w-]', '_', value).lower().lstrip('_'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_temp_dir(ignore_errors=False): \n    shutil.rmtree(get_temp_dir(), ignore_errors=ignore_errors)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stop_workers(worker_sockets, log_fh=None): \n    for (i, worker) in enumerate(worker_sockets): \n      try: \n         worker.send('Server   shutting   down   all   clients') \n      except error: \n         if log_fh: \n            log_fh.write(('Worker   %s   seems   to   be   dead   already.   Check   for   runaways!\\n' % i)) \n      worker.close()",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def rollback(config, plugins): \n    client.rollback(config.installer, config.checkpoints, config, plugins)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def extract_meta(total): \n    return {'features': {'total': total.features_ran, 'success': total.features_passed, 'failures': (total.features_ran - total.features_passed)}, 'scenarios': {'total': total.scenarios_ran, 'success': total.scenarios_passed, 'failures': (total.scenarios_ran - total.scenarios_passed)}, 'steps': {'total': total.steps, 'success': total.steps_passed, 'failures': total.steps_failed, 'skipped': total.steps_skipped, 'undefined': total.steps_undefined}, 'is_success': total.is_success}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ListIndexesResponsePbToGetResponse(response, include_schema): \n    return GetResponse(results=[_NewIndexFromPb(index, include_schema) for index in response.index_metadata_list()])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_fontext_synonyms(fontext): \n    return {'ttf': ('ttf', 'otf'), 'otf': ('ttf', 'otf'), 'afm': ('afm',)}[fontext]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Parse(expression): \n    return expression_parser.Parse(expression).tree",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Application_EndRequest(app, e): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def takes_arguments(function, *named_arguments): \n    return set(named_arguments).intersection(arguments(function))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random_name(size=6): \n    return ('CLOUD-TEST-' + ''.join((random.choice((string.ascii_uppercase + string.digits)) for x in range(size))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read_int_list(start, end, addr_space): \n    return int_list(read_addr_range(start, end, addr_space), (end - start))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def installed_from_source(version=nodejs.DEFAULT_VERSION): \n    if (nodejs.version() != version): \n      nodejs.install_from_source(version)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def xhtml_escape(value): \n    return _XHTML_ESCAPE_RE.sub((lambda match: _XHTML_ESCAPE_DICT[match.group(0)]), to_basestring(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ensure_metadata_ip(): \n    _execute('ip', 'addr', 'add', '169.254.169.254/32', 'scope', 'link', 'dev', 'lo', run_as_root=True, check_exit_code=[0, 2, 254])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tile(x, reps): \n    return Tile(reps)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLSTALLEDPATTERN(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLSTALLEDPATTERN)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_initial_data(apps, schema_editor): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _writable_dir(path): \n    return (os.path.isdir(path) and os.access(path, os.W_OK))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def version(): \n    return sqlite3.version",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_contrast_change_value(label): \n    return _get_array_element('contrast   change', label, (0.8, 1.3))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_configure_files(build): \n    return bool(build.distribution.configure_files)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def aaq_languages(request): \n    return {'AAQ_LANGUAGES': QuestionLocale.objects.locales_list()}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stream_as_text(stream): \n    for data in stream: \n      if (not isinstance(data, six.text_type)): \n         data = data.decode(u'utf-8', u'replace') \n      (yield data)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def parse(xml_string, target_class): \n    return atom.core.xml_element_from_string(xml_string, target_class)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def datetime_to_iso(timestamp): \n    return datetime.strptime(timestamp, '%Y-%m-%d   %H:%M:%S').isoformat()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup(): \n    os.makedirs(IP_TEST_DIR)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_file(file): \n    return roslib.manifestlib.parse_file(Manifest(), file)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fake_get_value(name, default=None): \n    return FAKE_SITE.get(name, default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def consistencygroup_create(context, values, cg_snap_id=None, cg_id=None): \n    return IMPL.consistencygroup_create(context, values, cg_snap_id, cg_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_object_patched(modname, objname): \n    return (is_module_patched(modname) and (objname in saved[modname]))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def remove_dead_links(directory, verbose=0): \n    for (dirpath, dirname, filenames) in walk(directory): \n      for filename in (dirnames + filenames): \n         src = join(dirpath, filename) \n         if (islink(src) and (not exists(src))): \n            if verbose: \n               print('remove   dead   link', src) \n            remove(src)",
        "line_count": 7,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def import_aes(module_name): \n    return __import__(module_name, fromlist=[module_name.split('.')[(-1)]])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def elu(x): \n    return theano.tensor.switch((x > 0), x, (theano.tensor.exp(x) - 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _(text): \n    return text",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def batch_normalization(x, gamma, beta, eps=2e-05, running_mean=None, running_var=None, decay=0.9, use_cudnn=True): \n    return BatchNormalizationFunction(eps, running_mean, running_var, True, decay, use_cudnn)(x, gamma, beta)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_update(context, project_id, resource, limit): \n    return IMPL.quota_update(context, project_id, resource, limit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _filter_plans(attr, name, plans): \n    return [plan for plan in plans if (plan[attr] == name)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def standardizeJSType(vartype): \n    if vartype: \n      typename = known_javascript_types.get(vartype.lower(), None) \n      if (typename is None): \n         return vartype \n      return typename",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def do_unblock(): \n    move_entry(blocked_list, blocked, unblocked_list, unblocked)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fix_lib64(lib_dir, symlink=True): \n    if [p for p in distutils.sysconfig.get_config_vars().values() if (isinstance(p, basestring) and ('lib64' in p))]: \n      if is_pypy: \n         logger.debug('PyPy   detected,   skipping   lib64   symlinking') \n         return \n      logger.debug('This   system   uses   lib64;   symlinking   lib64   to   lib') \n      assert (os.path.basename(lib_dir) == ('python%s' % sys.version[:3])), ('Unexpected   python   lib   dir:   %r' % lib_dir) \n      lib_parent = os.path.dirname(lib_dir) \n      top_level = os.path.dirname(lib_parent) \n      lib_dir = os.path.join(top_level, 'lib') \n      lib64_link = os.path.join(top_level, 'lib64') \n      assert (os.path.basename(lib_parent) == 'lib'), ('Unexpected   parent   dir:   %r' % lib_parent) \n      if os.path.lexists(lib64_link): \n         return \n      cp_or_ln = (os.symlink if symlink else copyfile) \n      cp_or_ln('lib', lib64_link)",
        "line_count": 15,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def _read_float32(f): \n    return np.float32(struct.unpack('>f', f.read(4))[0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_default(): \n    return _module_to_dict(defaultconfig)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_files(only_py=False): \n    for (dirpath, _dirnames, filenames) in os.walk('.'): \n      parts = dirpath.split(os.sep) \n      if (len(parts) >= 2): \n         rootdir = parts[1] \n         if (rootdir.startswith('.') or (rootdir == 'htmlcov')): \n            continue \n      if only_py: \n         endings = {'.py'} \n      else: \n         endings = {'.py', '.asciidoc', '.js', '.feature'} \n      files = (e for e in filenames if (os.path.splitext(e)[1] in endings)) \n      for name in files: \n         (yield os.path.join(dirpath, name))",
        "line_count": 13,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def rslices(n, allow_empty=False): \n    for _ in range(5): \n      (yield rslice(n, allow_empty))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def purge(): \n    return ban('req.url   ~   .')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def metric_cleanup(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nopackage(pkg_name): \n    if is_installed(pkg_name): \n      uninstall(pkg_name)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sort(tuples, allitems, deterministic_order=False): \n    for set_ in sort_as_subsets(tuples, allitems, deterministic_order): \n      for s in set_: \n         (yield s)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _date_from_iso8601_date(value): \n    return datetime.datetime.strptime(value, '%Y-%m-%d').date()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def url_for(path=''): \n    return ('https://api.github.com/' + path.strip('/'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_throws(p): \n    p[0] = p[3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def BatchMailEntryFromString(xml_string): \n    return atom.CreateClassFromXMLString(BatchMailEntry, xml_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wordcount(value): \n    return len(value.split())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_temperature(): \n    return _sensehat.get_temperature()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reboot(name): \n    return (_get_domain(name).reboot(libvirt.VIR_DOMAIN_REBOOT_DEFAULT) == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_logical_or_expression_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def first(predicate, iterable): \n    for item in iterable: \n      if predicate(item): \n         return item",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def start_user_as_anon(): \n    return {'user': ANON}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def process_open_files(attrs=None, where=None): \n    return _osquery_cmd(table='process_open_files', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def possibly_scored(usage_key): \n    return (usage_key.block_type in _block_types_possibly_scored())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_keypoints_censure_mode_validity_error(): \n    assert_raises(ValueError, CENSURE, mode='dummy')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lastmodified(date_obj): \n    web.header('Last-Modified', net.httpdate(date_obj))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start_tomcat(): \n    run_as_root('/etc/init.d/tomcat   start')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def serial(proxy): \n    if proxy: \n      return {'serial': _get_grain(proxy, 'serial_number')}",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def push(repo, remote_location, refspecs=None, outstream=default_bytes_out_stream, errstream=default_bytes_err_stream): \n    with open_repo_closing(repo) as r: \n      (client, path) = get_transport_and_path(remote_location) \n      selected_refs = [] \n      def update_refs(refs): \n         selected_refs.extend(parse_reftuples(r.refs, refs, refspecs)) \n         new_refs = {} \n         for (lh, rh, force) in selected_refs: \n            if (lh is None): \n               new_refs[rh] = ZERO_SHA \n            else: \n               new_refs[rh] = r.refs[lh] \n         return new_refs \n      err_encoding = (getattr(errstream, 'encoding', None) or DEFAULT_ENCODING) \n      remote_location_bytes = client.get_url(path).encode(err_encoding) \n      try: \n         client.send_pack(path, update_refs, r.object_store.generate_pack_contents, progress=errstream.write) \n         errstream.write((('Push   to   ' + remote_location_bytes) + '   successful.\\n')) \n      except (UpdateRefsError, SendPackError) as e: \n         errstream.write((((('Push   to   ' + remote_location_bytes) + '   failed   ->   ') + e.message.encode(err_encoding)) + '\\n'))",
        "line_count": 19,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def system(command, timeout=None, ignore_status=False, verbose=True): \n    return run(command, timeout=timeout, ignore_status=ignore_status, stdout_tee=TEE_TO_LOGS, stderr_tee=TEE_TO_LOGS, verbose=verbose).exit_status",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def monitor_except_format_assert(logical_line): \n    if logical_line.startswith('self.assertRaises(Exception'): \n      (yield (1, 'ENERGY   N202:   assertRaises   Exception   too   broad'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_matrix(): \n    return T.matrix()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _verify_run(out, cmd=None): \n    if (out.get('retcode', 0) and out['stderr']): \n      if cmd: \n         log.debug(\"Command:   '{0}'\".format(cmd)) \n      log.debug('Return   code:   {0}'.format(out.get('retcode'))) \n      log.debug('Error   output:\\n{0}'.format(out.get('stderr', 'N/A'))) \n      raise CommandExecutionError(out['stderr'])",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def cycle_by_name(name): \n    return symbol_by_name(name, CYCLE_ALIASES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gen_combos(challbs): \n    return tuple(((i,) for (i, _) in enumerate(challbs)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_graph_input(variable): \n    return ((not variable.owner) and (not isinstance(variable, SharedVariable)) and (not isinstance(variable, Constant)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def fuzzy_or(args): \n    return fuzzy_not(fuzzy_and((fuzzy_not(i) for i in args)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _create_scaling_policies(conn, as_name, scaling_policies): \n    if scaling_policies: \n      for policy in scaling_policies: \n         policy = autoscale.policy.ScalingPolicy(name=policy['name'], as_name=as_name, adjustment_type=policy['adjustment_type'], scaling_adjustment=policy['scaling_adjustment'], min_adjustment_step=policy.get('min_adjustment_step', None), cooldown=policy['cooldown']) \n         conn.create_scaling_policy(policy)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def tokenize_grant(grant): \n    return _grant_to_tokens(grant)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lang_set(languages, strict=False): \n    return set((Language(l, strict=strict) for l in languages))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def apply_extra_context(extra_context, context): \n    for (key, value) in extra_context.iteritems(): \n      if callable(value): \n         context[key] = value() \n      else: \n         context[key] = value",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def multi_params(schema): \n    return {'type': 'array', 'items': schema}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def invert_real(f_x, y, x, domain=S.Reals): \n    return _invert(f_x, y, x, domain)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_width_ratios(): \n    with pytest.raises(ValueError): \n      gridspec.GridSpec(1, 1, width_ratios=[2, 1, 3])",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def describe_cache_parameter_groups(name=None, conn=None, region=None, key=None, keyid=None, profile=None): \n    return _describe_resource(name=name, name_param='CacheParameterGroupName', res_type='cache_parameter_group', info_node='CacheParameterGroups', conn=conn, region=region, key=key, keyid=keyid, profile=profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_rheader(r, tabs=[]): \n    if (r.representation == 'html'): \n      if (r.record is None): \n         return None \n      tabs = [(T('Basic   Details'), None), (T('Problems'), 'problem')] \n      group = r.record \n      duser = s3db.delphi_DelphiUser(group.id) \n      if duser.authorised: \n         tabs.append((T('Membership'), 'membership')) \n      rheader_tabs = s3_rheader_tabs(r, tabs) \n      rheader = DIV(TABLE(TR(TH(('%s:   ' % T('Group'))), group.name), TR(TH(('%s:   ' % T('Description'))), group.description), TR(TH(('%s:   ' % T('Active'))), group.active)), rheader_tabs) \n      return rheader",
        "line_count": 11,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def getNewRepository(): \n    return OutsetRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'coil', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _collapse_wspace(text): \n    if (text is not None): \n      return '   '.join(text.split())",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def greater_equal(x, y): \n    return tf.greater_equal(x, y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _changeVersionInFile(old, new, filename): \n    replaceInFile(filename, {old.base(): new.base()})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_random_numeric(length): \n    return ''.join((random.choice(string.digits) for _x in range(length)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_cash_flow(code): \n    if code.isdigit(): \n      request = Request((ct.SINA_CASHFLOW_URL % code)) \n      text = urlopen(request, timeout=10).read() \n      text = text.decode('GBK') \n      text = text.replace(' DCTB \\n', '\\r\\n') \n      text = text.replace(' DCTB ', ',') \n      df = pd.read_csv(StringIO(text), dtype={'code': 'object'}) \n      return df",
        "line_count": 8,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def create_connection(auth): \n    return sdk.Connection(url=auth.get('url'), username=auth.get('username'), password=auth.get('password'), ca_file=auth.get('ca_file', None), insecure=auth.get('insecure', False), token=auth.get('token', None), kerberos=auth.get('kerberos', None))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def std(x, axis=None, keepdims=False): \n    return tf.sqrt(var(x, axis=axis, keepdims=keepdims))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_chost(): \n    return get_var('CHOST')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def member(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def objectify_predicate(selector_func): \n    return type(selector_func.__name__, (Predicate,), {'__doc__': selector_func.__doc__, '__call__': (lambda self, *a, **kw: selector_func(*a, **kw))})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def removePre(klass, name, func): \n    _removeHook(klass, name, PRE, func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def drain(file_like, read_size, timeout): \n    while True: \n      with ChunkReadTimeout(timeout): \n         chunk = file_like.read(read_size) \n         if (not chunk): \n            break",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def CountWordErrors(ocr_text, truth_text): \n    return CountErrors(ocr_text.split(), truth_text.split())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hexii(s, width=16, skip=True): \n    return hexdump(s, width, skip, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def md(): \n    return Mde2mdConverter()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def partition_list(): \n    return ceph_cfg.partition_list()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_neutron(): \n    return CONF.use_neutron",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_naive(value): \n    return ((value.tzinfo is None) or (value.tzinfo.utcoffset(value) is None))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_equality_expression_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _validate_numa_nodes(nodes): \n    if ((nodes is not None) and ((not strutils.is_int_like(nodes)) or (int(nodes) < 1))): \n      raise exception.InvalidNUMANodesNumber(nodes=nodes)",
        "line_count": 2,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def inst_tops(days=5, retry_count=3, pause=0.001): \n    if (ct._check_lhb_input(days) is True): \n      ct._write_head() \n      df = _inst_tops(days, pageNo=1, retry_count=retry_count, pause=pause) \n      df['code'] = df['code'].map((lambda x: str(x).zfill(6))) \n      return df",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def roots(g): \n    return set((n for (n, d) in iteritems(g.in_degree()) if (d == 0)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def parse_iso8601_timestamp(timestamp): \n    return datetime.datetime.strptime(timestamp, '%Y-%m-%dT%H:%M:%S.%fZ')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_region(region): \n    _local.region = region",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def indefinite_article(word): \n    return 'a'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ext_pillar(minion_id, pillar, *args, **kwargs): \n    return SQLite3ExtPillar().fetch(minion_id, pillar, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_permalink_ids(self): \n    return list(self.get_permalink_ids_iter())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CreateApplication(): \n    return webapp.WSGIApplication([('.*', RedirectToAdminConsole)], debug=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sg_label(sg_id, sg_name): \n    return (((PREFIX + str(sg_id)) + '_') + sg_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ignore_code(code): \n    for ignore in options.ignore: \n      if code.startswith(ignore): \n         return True",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test__FileIO___init__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_html(string, strip_ansi=False, parser=HTML_PARSER): \n    return parser.parse(string, strip_ansi=strip_ansi)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_pending(): \n    default_scheduler.run_pending()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def search_form(request): \n    return {'search_form': SearchForm(request.GET)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_route_dist(route_dist): \n    return is_valid_ext_comm_attr(route_dist)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update(user=None, env=None): \n    return __salt__['cmd.run_all']('cabal   update', runas=user, env=env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def refresh(hive, hive_names, timeout=0.5): \n    for hostname in hive_names: \n      if (hive[hostname] is not None): \n         hive[hostname].expect([pexpect.TIMEOUT, pexpect.EOF], timeout=timeout)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def sgml_extract(text_data): \n    return {'docid': _get_one(docid_re, text_data, required=True), 'doctype': _get_one(doctype_re, text_data, required=True), 'datetime': _get_one(datetime_re, text_data, required=True), 'headline': _get_one(headline_re, text_data, required=True), 'poster': _get_one(poster_re, _get_one(post_re, text_data)), 'postdate': _get_one(postdate_re, _get_one(post_re, text_data)), 'text': _get_text(_get_one(post_re, text_data)).strip()}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def install_ssl_options_conf(options_ssl): \n    if (not os.path.isfile(options_ssl)): \n      shutil.copyfile(constants.os_constant('MOD_SSL_CONF_SRC'), options_ssl)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_beta(version): \n    return bool(amo.VERSION_BETA.search(version))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getOverhangSupportAngle(xmlElement): \n    return math.radians(xmlElement.getCascadeFloat(45.0, 'overhangSupportAngle'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run(name, cmd, no_start=False, preserve_state=True, stdin=None, python_shell=True, output_loglevel='debug', use_vt=False, path=None, ignore_retcode=False, chroot_fallback=False, keep_env='http_proxy,https_proxy,no_proxy'): \n    return _run(name, cmd, path=path, output=None, no_start=no_start, preserve_state=preserve_state, stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, use_vt=use_vt, ignore_retcode=ignore_retcode, chroot_fallback=chroot_fallback, keep_env=keep_env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_get_by_fixed_address(context, fixed_address): \n    return IMPL.floating_ip_get_by_fixed_address(context, fixed_address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plot_evoked_topo(evoked, layout=None, layout_scale=0.945, color=None, border='none', ylim=None, scalings=None, title=None, proj=False, vline=[0.0], fig_facecolor='k', fig_background=None, axis_facecolor='k', font_color='w', merge_grads=False, show=True): \n    return _plot_evoked_topo(evoked=evoked, layout=layout, layout_scale=layout_scale, color=color, border=border, ylim=ylim, scalings=scalings, title=title, proj=proj, vline=vline, fig_facecolor=fig_facecolor, fig_background=fig_background, axis_facecolor=axis_facecolor, font_color=font_color, merge_grads=merge_grads, show=show)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def versioned_base(plugin, version): \n    return Meta(u'VersionedBase', (object,), {u'__metaclass__': Meta, u'plugin': plugin, u'version': version})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return GasHeliModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def facility(): \n    return s3db.org_facility_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_write(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_fun(fun): \n    with _get_serv(ret=None, commit=True) as cur: \n      sql = 'SELECT   s.id,s.jid,   s.full_ret\\n                                                FROM   `salt_returns`   s\\n                                                JOIN   (   SELECT   MAX(`jid`)   as   jid\\n                                                            from   `salt_returns`   GROUP   BY   fun,   id)   max\\n                                                ON   s.jid   =   max.jid\\n                                                WHERE   s.fun   =   %s\\n                                                ' \n      cur.execute(sql, (fun,)) \n      data = cur.fetchall() \n      ret = {} \n      if data: \n         for (minion, _, full_ret) in data: \n            ret[minion] = json.loads(full_ret) \n      return ret",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def save_send(socket, data): \n    while (len(data) > 0): \n      try: \n         send_data_size = socket.send(data) \n         data = data[send_data_size:] \n      except error as msg: \n         sleep(0.01)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def gen_jid(): \n    return '{0:%Y%m%d%H%M%S%f}'.format(datetime.datetime.now())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_independent_set(G, nodes): \n    return (G.subgraph(nodes).number_of_edges() == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_py_file(filename, skip_encoding_cookie=True): \n    with tokopen(filename) as f: \n      if skip_encoding_cookie: \n         return ''.join(strip_encoding_cookie(f)) \n      else: \n         return f.read()",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def Put(entities, **kwargs): \n    return PutAsync(entities, **kwargs).get_result()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def process_memory(): \n    return resource.getrusage(resource.RUSAGE_SELF).ru_maxrss",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_string(value): \n    return isinstance(value, string_types)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def linux_distribution(full_distribution_name=True): \n    return _distro.linux_distribution(full_distribution_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_sphinx_markup(docstring): \n    return (('`' in docstring) or ('::' in docstring))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_color_table(in_class): \n    for (name, value) in color_templates: \n      setattr(in_class, name, (in_class._base % value))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def available(name, jail=None): \n    return (name in get_all(jail))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def http_time_to_posix(http_time): \n    if (http_time is not None): \n      return email_utils.mktime_tz(email_utils.parsedate_tz(http_time))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def activity(): \n    return s3_rest_controller(rheader=s3db.dvr_rheader)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index_page(request): \n    return HttpResponse('<html><body>Dummy   page</body></html>')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sum_of_squares(v): \n    return dot(v, v)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def astronaut(): \n    return load('astronaut.png')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unit_price(offer, line): \n    return line.unit_effective_price",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def natstobits(X): \n    return (logbasechange(np.e, 2) * X)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def edges(path): \n    return (((len(path) > 1) and (n.links.edge(path[(i + 1)]) for (i, n) in enumerate(path[:(-1)]))) or iter(()))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def fixed_ips_by_virtual_interface(context, vif_id): \n    return IMPL.fixed_ips_by_virtual_interface(context, vif_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_expected_key_error_user_message(preference_key, preference_value): \n    return u\"Invalid   user   preference   key   '{preference_key}'.\".format(preference_key=preference_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=PythonLexer(), buf_class=PythonBuffer, langintel_class=PythonLangIntel, import_handler_class=PythonImportHandler, cile_driver_class=PythonCILEDriver, is_cpln_lang=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quote_etag(etag): \n    return ('\"%s\"' % etag.replace('\\\\', '\\\\\\\\').replace('\"', '\\\\\"'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return CircleDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable(): \n    return (_parse_return_code_powershell(_psrdp('$RDP.SetAllowTsConnections(1,1)')) == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_assigned_metadata_initial(csvfile): \n    with open(csvfile, 'rb') as f: \n      for record in csv.reader(f): \n         module = record[0] \n         if (record[12] == 'core'): \n            supported_by = 'core' \n         elif (record[12] == 'curated'): \n            supported_by = 'committer' \n         elif (record[12] == 'community'): \n            supported_by = 'community' \n         else: \n            print ('Module   %s   has   no   supported_by   field.      Using   community' % record[0]) \n            supported_by = 'community' \n            supported_by = DEFAULT_METADATA['supported_by'] \n         status = [] \n         if record[6]: \n            status.append('stableinterface') \n         if record[7]: \n            status.append('deprecated') \n         if (not status): \n            status.extend(DEFAULT_METADATA['status']) \n         (yield (module, {'version': DEFAULT_METADATA['version'], 'supported_by': supported_by, 'status': status}))",
        "line_count": 21,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def sdm_monomial_deg(M): \n    return monomial_deg(M[1:])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_allocate_address(context, project_id, pool): \n    return IMPL.floating_ip_allocate_address(context, project_id, pool)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_ftp_list_line(ftp_list_line): \n    return FTPListDataParser().parse_line(ftp_list_line)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getatime(filename): \n    return os.stat(filename).st_atime",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_compressed(path, content): \n    with gzip.open(path, 'wb') as f: \n      f.write(content)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ip_in_subnet(ip_addr, cidr): \n    return salt.utils.network.in_subnet(cidr, ip_addr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_site_domain(): \n    return Site.objects.get_current().domain",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_hibernate_timeout(scheme=None): \n    return _get_powercfg_minute_values(scheme, 'SUB_SLEEP', 'HIBERNATEIDLE', 'Hibernate   after')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_users(): \n    return sorted([user.pw_name for user in pwd.getpwall()])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def imshow_collection(ic, plugin=None, **plugin_args): \n    return call_plugin('imshow_collection', ic, plugin=plugin, **plugin_args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_key(obj): \n    return id(obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TimestampFromTicks(ticks): \n    return Timestamp(*time.localtime(ticks)[:6])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def replaced(fmri): \n    return _fmadm_action_fmri('replaced', fmri)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def euler_from_quaternion(quaternion, axes='sxyz'): \n    return euler_from_matrix(quaternion_matrix(quaternion), axes)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fetch(): \n    return run(Fetch)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _remove_dead_thread_references(): \n    for thread_reference in set(_thread_references): \n      if (thread_reference() is None): \n         _thread_references.discard(thread_reference)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def utf8_barebyte_encoding(t): \n    return t.encode('utf8')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([MQTTRoomSensor(hass, config.get(CONF_NAME), config.get(CONF_STATE_TOPIC), config.get(CONF_DEVICE_ID), config.get(CONF_TIMEOUT), config.get(CONF_AWAY_TIMEOUT))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flip(datasheet): \n    return Datasheet(rows=datasheet.columns)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def utctz_to_altz(utctz): \n    return ((-1) * int(((float(utctz) / 100) * 3600)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_shortcuts(): \n    for option in CONF.options('shortcuts'): \n      (context, name) = option.split('/', 1) \n      (yield (context, name, get_shortcut(context, name)))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _warn_if_string(iterable): \n    if isinstance(iterable, basestring): \n      from warnings import warn \n      warn(Warning('response   iterable   was   set   to   a   string.      This   appears   to   work   but   means   that   the   server   will   send   the   data   to   the   client   char,   by   char.      This   is   almost   never   intended   behavior,   use   response.data   to   assign   strings   to   the   response   object.'), stacklevel=2)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def tags_eq(tagged_object, tag_names): \n    eq_(sorted([t.name for t in tagged_object.tags.all()]), sorted(tag_names))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def start_filter(app, conn, filter, limit=None, timeout=1.0, ack_messages=False, tasks=None, queues=None, callback=None, forever=False, on_declare_queue=None, consume_from=None, state=None, accept=None, **kwargs): \n    return Filterer(app, conn, filter, limit=limit, timeout=timeout, ack_messages=ack_messages, tasks=tasks, queues=queues, callback=callback, forever=forever, on_declare_queue=on_declare_queue, consume_from=consume_from, state=state, accept=accept, **kwargs).start()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_tables(): \n    for f in TABLES: \n      if os.path.isfile(f): \n         os.remove(f) \n         print((u'Removed   ' + f))",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _updateIndices(db): \n    db.executescript('\\n--   syncing\\ncreate   index   if   not   exists   ix_notes_usn   on   notes   (usn);\\ncreate   index   if   not   exists   ix_cards_usn   on   cards   (usn);\\ncreate   index   if   not   exists   ix_revlog_usn   on   revlog   (usn);\\n--   card   spacing,   etc\\ncreate   index   if   not   exists   ix_cards_nid   on   cards   (nid);\\n--   scheduling   and   deck   limiting\\ncreate   index   if   not   exists   ix_cards_sched   on   cards   (did,   queue,   due);\\n--   revlog   by   card\\ncreate   index   if   not   exists   ix_revlog_cid   on   revlog   (cid);\\n--   field   uniqueness\\ncreate   index   if   not   exists   ix_notes_csum   on   notes   (csum);\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timestamp_from_record_tuple(record): \n    return record[0]['timestamp']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def page(): \n    return load('page.png')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_image_bdm(image_ref, boot_index=0): \n    return BlockDeviceDict({'source_type': 'image', 'image_id': image_ref, 'delete_on_termination': True, 'boot_index': boot_index, 'device_type': 'disk', 'destination_type': 'local'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _delete_cookie(response): \n    response.set_cookie(settings.SESSION_COOKIE_NAME, max_age=0, expires='Thu,   01-Jan-1970   00:00:00   GMT', domain=settings.SESSION_COOKIE_DOMAIN, secure=(settings.SESSION_COOKIE_SECURE or None), httponly=(settings.SESSION_COOKIE_HTTPONLY or None))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def job_id(conf): \n    return hashlib.sha1(json.dumps(conf, sort_keys=True).encode(u'utf-8')).hexdigest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_microseconds(delta): \n    return timedelta(delta.days, delta.seconds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_for_bad_step(p): \n    p[0] = 'MALFORMED   STEP   IN   FOR   STATEMENT'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_type_access_get_by_flavor_id(context, flavor_id): \n    return IMPL.instance_type_access_get_by_flavor_id(context, flavor_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_irc(string): \n    return IRC_COLOR_RE.sub('', string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dmp_negative_p(f, u, K): \n    return K.is_negative(dmp_ground_LC(f, u, K))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return Binary16ByteRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fanout_cast(context, topic, msg): \n    return _get_impl().fanout_cast(CONF, context, topic, msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_context(devnum=0): \n    return _runtime.get_or_create_context(devnum)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_all(class_name): \n    for (cls, wdict) in six.iteritems(live_refs): \n      if (cls.__name__ == class_name): \n         return six.iterkeys(wdict)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_throttled(address): \n    return bool(find_containing_network(g.throttles, address))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_region(*arg, **kw): \n    return CacheRegion(*arg, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def partition_list_osd(): \n    return ceph_cfg.partition_list_osd()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def allocate_lock(): \n    return LockType()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getVertexGivenBinary(byteIndex, stlData): \n    return Vector3(getFloatGivenBinary(byteIndex, stlData), getFloatGivenBinary((byteIndex + 4), stlData), getFloatGivenBinary((byteIndex + 8), stlData))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def equalsIgnoreCase(a, b): \n    return ((a == b) or (string.lower(a) == string.lower(b)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def disable(service): \n    action('disable', service)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safe_extra(extra): \n    return re.sub('[^A-Za-z0-9.]+', '_', extra).lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _disable_privilege(privilege_name): \n    return _change_privilege_state(privilege_name, False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def regions(**kw_params): \n    return get_regions('ec2', connection_cls=VPCConnection)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subtract_mean(image, selem, out=None, mask=None, shift_x=False, shift_y=False): \n    return _apply_scalar_per_pixel(generic_cy._subtract_mean, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_phrases_from_module(module): \n    return (module.WORDS if hasattr(module, 'WORDS') else [])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def unset_macosx_deployment_target(): \n    if ('MACOSX_DEPLOYMENT_TARGET' in os.environ): \n      del os.environ['MACOSX_DEPLOYMENT_TARGET']",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def irc_prefix(var): \n    if isinstance(var, basestring): \n      return (u'irc_%s' % var.lower())",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_orm_value(obj): \n    return isinstance(obj, (sqlalchemy.orm.attributes.InstrumentedAttribute, sqlalchemy.sql.expression.ColumnElement))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_list_emptydirs(load): \n    return []",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def preBuildStatic(static): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def finalize_process(proc, **kwargs): \n    proc.wait(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_resource_container(context): \n    return context.get(RESOURCE_CONTAINER_VAR_NAME)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_long_description(): \n    return 'Crawl   plugins   use   different   techniques   to   identify   new   URLs,   forms,\\n            and   any   other   resource   that   might   be   of   use   during   the   audit   and   bruteforce\\n            phases.\\n            '",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(field, symbol): \n    return all_lookups[field].get(symbol.lower())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def empty_node_local_state(ideployer): \n    return NodeLocalState(node_state=NodeState(uuid=ideployer.node_uuid, hostname=ideployer.hostname))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _retry_recalculate_subsection_grade(task_func, exc=None, **kwargs): \n    task_func.retry(kwargs=kwargs, exc=exc)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=MasonLexer(), buf_class=MasonBuffer, import_handler_class=None, cile_driver_class=MasonCILEDriver, is_cpln_lang=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def b(level=1): \n    if (config.DEBUG >= level): \n      pdb.set_trace()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _make_money(currency_code, value): \n    return MoneyMaker(currency_code)(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def patch_crypto_be_discovery(): \n    if (((sys.platform == 'win32') or (sys.platform == 'darwin')) and is_frozen()): \n      from cryptography.hazmat import backends \n      try: \n         from cryptography.hazmat.backends.commoncrypto.backend import backend as be_cc \n      except ImportError: \n         be_cc = None \n      try: \n         from cryptography.hazmat.backends.openssl.backend import backend as be_ossl \n      except ImportError: \n         be_ossl = None \n      backends._available_backends_list = [be for be in (be_cc, be_ossl) if (be is not None)]",
        "line_count": 11,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def mirror_x(clip, apply_to='mask'): \n    return clip.fl_image((lambda f: f[:, ::(-1)]), apply_to=apply_to)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def BadXML2Node(xml): \n    return NodeBuilder(xml).getDom()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def distrib_codename(): \n    with settings(hide('running', 'stdout')): \n      return run('lsb_release   --codename   --short')",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isValid(text): \n    return any(((word in text.upper()) for word in WORDS))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_default_username(distribution): \n    return 'root'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_one_arg_pos_call(call): \n    return (isinstance(call, astroid.CallFunc) and (len(call.args) == 1) and (not isinstance(call.args[0], astroid.Keyword)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def block_device_mapping_create(context, values): \n    return IMPL.block_device_mapping_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_upload_dt(): \n    return datetime.datetime.utcnow().replace(tzinfo=utc)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return InsetRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vm_netstats(vm_=None): \n    with _get_xapi_session() as xapi: \n      def _info(vm_): \n         ret = {} \n         vm_rec = _get_record_by_label(xapi, 'VM', vm_) \n         if (vm_rec is False): \n            return False \n         for vif in vm_rec['VIFs']: \n            vif_rec = _get_record(xapi, 'VIF', vif) \n            ret[vif_rec['device']] = _get_metrics_record(xapi, 'VIF', vif_rec) \n            del ret[vif_rec['device']]['last_updated'] \n         return ret \n      info = {} \n      if vm_: \n         info[vm_] = _info(vm_) \n      else: \n         for vm_ in list_domains(): \n            info[vm_] = _info(vm_) \n      return info",
        "line_count": 18,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def setTexIfNoShaders(obj): \n    if (hasattr(obj, 'useShaders') and (not obj.useShaders)): \n      if hasattr(obj, '_needTextureUpdate'): \n         obj._needTextureUpdate = True",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def is_ipv6_pd_enabled(subnet): \n    return (subnet.get('subnetpool_id') == const.IPV6_PD_POOL_ID)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ast_good_assoc(): \n    can_compile(u'(assoc   x   y   z)')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_old_asn(asn): \n    return (isinstance(asn, numbers.Integral) and (0 <= asn <= 65535))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def translation_from_matrix(matrix): \n    return numpy.array(matrix, copy=False)[:3, 3].copy()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rospack_depends_1(pkg): \n    return rospackexec(['deps1', pkg]).split()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_base_alias(freqstr): \n    return _base_and_stride(freqstr)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_type_destroy(context, id): \n    return IMPL.group_type_destroy(context, id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ptb_producer(raw_data, batch_size, num_steps, name=None): \n    with tf.name_scope(name, 'PTBProducer', [raw_data, batch_size, num_steps]): \n      raw_data = tf.convert_to_tensor(raw_data, name='raw_data', dtype=tf.int32) \n      data_len = tf.size(raw_data) \n      batch_len = (data_len // batch_size) \n      data = tf.reshape(raw_data[0:(batch_size * batch_len)], [batch_size, batch_len]) \n      epoch_size = ((batch_len - 1) // num_steps) \n      assertion = tf.assert_positive(epoch_size, message='epoch_size   ==   0,   decrease   batch_size   or   num_steps') \n      with tf.control_dependencies([assertion]): \n         epoch_size = tf.identity(epoch_size, name='epoch_size') \n      i = tf.train.range_input_producer(epoch_size, shuffle=False).dequeue() \n      x = tf.strided_slice(data, [0, (i * num_steps)], [batch_size, ((i + 1) * num_steps)]) \n      x.set_shape([batch_size, num_steps]) \n      y = tf.strided_slice(data, [0, ((i * num_steps) + 1)], [batch_size, (((i + 1) * num_steps) + 1)]) \n      y.set_shape([batch_size, num_steps]) \n      return (x, y)",
        "line_count": 15,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _repack_options(options): \n    return dict([(str(x), _normalize(y)) for (x, y) in six.iteritems(salt.utils.repack_dictlist(options))])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_deepreload(): \n    with TemporaryDirectory() as tmpdir: \n      with prepended_to_syspath(tmpdir): \n         with open(os.path.join(tmpdir, 'A.py'), 'w') as f: \n            f.write('class   Object(object):\\n            pass\\n') \n         with open(os.path.join(tmpdir, 'B.py'), 'w') as f: \n            f.write('import   A\\n') \n         import A \n         import B \n         obj = A.Object() \n         dreload(B, exclude=['A']) \n         nt.assert_true(isinstance(obj, A.Object)) \n         obj = A.Object() \n         dreload(B) \n         nt.assert_false(isinstance(obj, A.Object))",
        "line_count": 14,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TextBeforeCursor(): \n    return ToUnicode(vim.current.line[:CurrentColumn()])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_vni(vni): \n    return (isinstance(vni, numbers.Integral) and (0 <= vni <= 16777215))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_rng_state(new_state): \n    default_generator.set_state(new_state)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _dok_gen_triples(A): \n    for ((r, c), v) in A.items(): \n      (yield (r, c, v))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def safe_mkdir_for(path): \n    safe_mkdir(os.path.dirname(path), clean=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quotedata(data): \n    return re.sub('(?m)^\\\\.', '..', re.sub('(?:\\\\r\\\\n|\\\\n|\\\\r(?!\\\\n))', CRLF, data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def authorize_quota_class_context(context, class_name): \n    if is_user_context(context): \n      if (not context.quota_class): \n         raise exception.Forbidden() \n      elif (context.quota_class != class_name): \n         raise exception.Forbidden()",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def create_application(name, image, ports=frozenset(), volume=None, links=frozenset(), environment=None, memory_limit=None, cpu_shares=None): \n    return Application(name=name, image=DockerImage.from_string((image + u':latest')), ports=ports, volume=volume, links=links, environment=environment, memory_limit=memory_limit, cpu_shares=cpu_shares)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_local_id(*args, **kargs): \n    raise _stub_error",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_group_get_all(context): \n    return IMPL.instance_group_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uuid(): \n    return str(uuid4())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(name, format_class): \n    get_registry()[name] = format_class",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xhtml_unescape(value): \n    return re.sub('&(#?)(\\\\w+?);', _convert_entity, _unicode(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rebooted(name): \n    return _virt_call(name, 'reboot', 'rebooted', 'Machine   has   been   rebooted')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(env, args, db): \n    with sentry(env): \n      serialize(env, args, db)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_pair(obj): \n    return (isinstance(obj, tuple) and (len(obj) == 2))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dirs_in_library(library, item): \n    return [ancestor for ancestor in ancestry(item) if ancestor.startswith(library)][1:]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def localize_attributes(attribs, translations): \n    for (name, atrans) in translations.items(): \n      attrib = attribs[name] \n      localize_common(attrib, atrans)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dist(distname='', version='', id='', supported_dists=_supported_dists): \n    return linux_distribution(distname, version, id, supported_dists=supported_dists, full_distribution_name=0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def condense_floating_points(css): \n    return re.sub('(:|\\\\s)0+\\\\.(\\\\d+)', '\\\\1.\\\\2', css)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_module_list(app_name): \n    return get_file_items(os.path.join(os.path.dirname(get_module(app_name).__file__), u'modules.txt'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetAuditLogEntries(offset, now, token): \n    for fd in GetAuditLogFiles(offset, now, token): \n      for event in fd.GenerateItems(): \n         if ((now - offset) < event.timestamp < now): \n            (yield event)",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def create_secret_id(vault, name, version=None): \n    return create_object_id('secrets', vault, name, version)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setDebugging(on): \n    Deferred.debug = bool(on)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DeclareKeyFlags(flag_values=FLAGS): \n    for flag_name in DECLARED_KEY_FLAGS: \n      gflags.DECLARE_key_flag(flag_name, flag_values=flag_values)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def exists(sheet): \n    return ((sheet in sheets.get()) and os.access(path(sheet), os.R_OK))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def hashtags(string): \n    return [b for (a, b) in TWITTER_HASHTAG.findall(string)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def upgrade_available(pkg, bin_env=None, user=None, cwd=None): \n    return (pkg in list_upgrades(bin_env=bin_env, user=user, cwd=cwd))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_metadata_delete(context, snapshot_id, key): \n    IMPL.snapshot_metadata_delete(context, snapshot_id, key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPolarByRadians(angleRadians, radius=1.0): \n    return (radius * euclidean.getWiddershinsUnitPolar(angleRadians))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_user(user): \n    _store.user = user",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def symptom_database_connection_is_not_SQLite(): \n    return ((CONF.database.connection is not None) and ('sqlite' in CONF.database.connection))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_valid_stream_id(entry): \n    return is_valid_circuit_id(entry)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shared_zeros(*shape): \n    return theano.shared(numpy.zeros(shape, dtype=theano.config.floatX))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def consume_queue(queue, cascade_stop): \n    while True: \n      try: \n         item = queue.get(timeout=0.1) \n      except Empty: \n         (yield None) \n         continue \n      except thread.error: \n         raise ShutdownException() \n      if item.exc: \n         raise item.exc \n      if item.is_stop: \n         if cascade_stop: \n            raise StopIteration \n         else: \n            continue \n      (yield item.item)",
        "line_count": 16,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def modClearCharacterRefs(s, titlesRefs, namesRefs, charactersRefs): \n    return re_characterRef.sub('\\\\1', s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def renameUnprocessedFolder(path, tag): \n    for i in itertools.count(): \n      if (i == 0): \n         new_path = ('%s   (%s)' % (path, tag)) \n      else: \n         new_path = ('%s   (%s[%d])' % (path, tag, i)) \n      if os.path.exists(new_path): \n         i += 1 \n      else: \n         os.rename(path, new_path) \n         return",
        "line_count": 10,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def make_hybi00_frame(buf): \n    return ('\\x00%s\\xff' % buf)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upvars(level=2): \n    return dictadd(sys._getframe(level).f_globals, sys._getframe(level).f_locals)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return ConsoleModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _nova_to_osvif_routes(routes): \n    return objects.route.RouteList(objects=[_nova_to_osvif_route(route) for route in routes])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def log_traceback(severity=logging.ERROR, debug=False): \n    cherrypy.log('', 'HTTP', severity=severity, traceback=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cgconfig_exists(): \n    return service_cgconfig_control('exists')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _filter_apis_desc(desc, apis): \n    return [api for api in apis if (api['description'] == desc)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _synchronous_switch_listener(dbapi_conn, connection_rec): \n    dbapi_conn.execute('PRAGMA   synchronous   =   OFF')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def query_tags(): \n    return read_url(get_tags_url())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def t_KEGG_Enzyme(testfiles): \n    for file in testfiles: \n      fh = open(os.path.join('KEGG', file)) \n      print((('Testing   Bio.KEGG.Enzyme   on   ' + file) + '\\n\\n')) \n      records = Enzyme.parse(fh) \n      for (i, record) in enumerate(records): \n         print(record) \n      fh.seek(0) \n      if (i == 0): \n         print(Enzyme.read(fh)) \n      else: \n         try: \n            print(Enzyme.read(fh)) \n            assert False \n         except ValueError as e: \n            assert (str(e) == 'More   than   one   record   found   in   handle') \n      print('\\n') \n      fh.close()",
        "line_count": 17,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def messages(request): \n    return {'messages': get_messages(request), 'DEFAULT_MESSAGE_LEVELS': DEFAULT_LEVELS}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TEMA(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.TEMA, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _sympify(a): \n    return sympify(a, strict=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def appstr(app): \n    return u'{0}:{1:#x}'.format((app.main or u'__main__'), id(app))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_array___sizeof__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getDoubleAfterFirstLetter(word): \n    return float(word[1:])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def aggregate_delete(context, aggregate_id): \n    return IMPL.aggregate_delete(context, aggregate_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lstrip(s): \n    return s.lstrip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wanmen_download_by_course(json_api_content, output_dir='.', merge=True, info_only=False, **kwargs): \n    for tIndex in range(len(json_api_content[0]['Topics'])): \n      for pIndex in range(len(json_api_content[0]['Topics'][tIndex]['Parts'])): \n         wanmen_download_by_course_topic_part(json_api_content, tIndex, pIndex, output_dir=output_dir, merge=merge, info_only=info_only, **kwargs)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def log_buffer_age(): \n    return logs_buffer().age()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_asian(char): \n    return (ord(char) > IDEOGRAPHIC_SPACE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cmd_stop(args, opts): \n    jsonrpc_call(opts, 'crawler/engine', 'close_spider', args[0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_fit_parameter(estimator, parameter): \n    return (parameter in signature(estimator.fit).parameters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cancelAll(): \n    for globalRepositoryDialogValue in settings.getGlobalRepositoryDialogValues(): \n      globalRepositoryDialogValue.cancel()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_makeopts(): \n    return get_var('MAKEOPTS')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inject_commands(command_table, session, **kwargs): \n    command_table['credential-helper'] = CodeCommitCommand(session)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_metadata_path(path): \n    with start_action(action_type=u'flocker:node:agents:gce:get_metadata_path', path=path) as action: \n      timeout_sec = 3 \n      r = requests.get((_METADATA_SERVER + path), headers=_METADATA_HEADERS, timeout=timeout_sec) \n      if (r.status_code != 200): \n         raise ValueError('Did   not   get   success   result   from   metadata   server   for   path   {},   instead   got   {}.'.format(path, r.status_code)) \n      action.add_success_fields(response=r.text) \n      return r.text",
        "line_count": 7,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_command_for(p): \n    p[0] = ('FOR', p[2], p[4], p[6], p[7])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _safe_update(d, other): \n    for (k, v) in compat.iteritems(other): \n      if (k in d): \n         raise Exception(('Duplicate   regressor:   %s' % k)) \n      d[k] = v",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def symptom_debug_mode_is_enabled(): \n    return CONF.debug",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remote_addr_ip(request): \n    return request.META.get('REMOTE_ADDR')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cli_pip_test(venv_name='flocker-client', package_source=PackageSource()): \n    return sequence([run_from_args(['source', '{}/bin/activate'.format(venv_name)]), run('test   `flocker-ca   --version`   =   {}'.format(quote(_get_wheel_version(package_source))))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('pkg.install' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_naive(value): \n    return (value.utcoffset() is None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('boto_cloudwatch_event' if ('boto_cloudwatch_event.exists' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _default_checker(x, y): \n    if (x[0] != y[0]): \n      raise Exception('Output   mismatch.', {'performlinker': x[0], 'clinker': y[0]})",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def data_science_day_mapper(status_update): \n    if ('data   science' in status_update['text'].lower()): \n      day_of_week = status_update['created_at'].weekday() \n      (yield (day_of_week, 1))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def register_scheme_map(scheme_map): \n    for (k, v) in scheme_map.items(): \n      if (k not in SCHEME_TO_CLS_MAP): \n         LOG.debug('Registering   scheme   %s   with   %s', k, v) \n         SCHEME_TO_CLS_MAP[k] = v",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def safe_get_bool(fact): \n    return bool(strtobool(str(fact)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_module(): \n    if (PROTOCOL_VERSION >= 4): \n      use_singledc(start=False) \n      ccm_cluster = get_cluster() \n      ccm_cluster.stop() \n      config_options = {'tombstone_failure_threshold': 2000, 'tombstone_warn_threshold': 1000} \n      ccm_cluster.set_configuration_options(config_options) \n      ccm_cluster.start(wait_for_binary_proto=True, wait_other_notice=True) \n      setup_keyspace()",
        "line_count": 8,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_text_feedback(context): \n    return context.browser.execute_script('\\n                        return   $(\".{text_input_class}\")[0].value;\\n            '.format(text_input_class=TEXT_INPUT_CLASS))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_request_kwargs(timeout, useragent): \n    return {'headers': {'User-Agent': useragent}, 'cookies': cj(), 'timeout': timeout, 'allow_redirects': True}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_config(): \n    return LuigiConfigParser.instance()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_config_defaults(): \n    cfg.set_defaults(cors.CORS_OPTS, allow_headers=['X-Auth-Token', 'X-Identity-Status', 'X-Roles', 'X-Service-Catalog', 'X-User-Id', 'X-Tenant-Id', 'X-OpenStack-Request-ID'], expose_headers=['X-Auth-Token', 'X-Subject-Token', 'X-Service-Token', 'X-OpenStack-Request-ID'], allow_methods=['GET', 'PUT', 'POST', 'DELETE', 'PATCH'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_default_headers(n): \n    return tuple((agate.utils.letter_name(i) for i in range(n)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def assert_no_dunder_name(code_obj, expr): \n    for name in code_obj.co_names: \n      if (('__' in name) or (name in _UNSAFE_ATTRIBUTES)): \n         raise NameError(('Access   to   forbidden   name   %r   (%r)' % (name, expr)))",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def total_billed_ops_to_str(self): \n    return billed_ops_to_str(self.total_billed_ops_list())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_capture_loglevel(): \n    return getattr(local_context, u'loglevel', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_domain(domain): \n    return ((domain not in DEFAULT_DOMAINS) and (not domain.startswith(u'http:')) and (not domain.startswith(u'https:')) and (not domain.endswith(u'/')))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _norm_along_axis(x, axis): \n    return np.sqrt(np.einsum('ij,ij->i', x, x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _warning_for_deprecated_user_based_rules(rules): \n    for rule in rules: \n      if [resource for resource in USER_BASED_RESOURCES if (resource in rule[0])]: \n         continue \n      if ('user_id' in KEY_EXPR.findall(rule[1])): \n         LOG.warning(_LW(\"The   user_id   attribute   isn't   supported   in   the   rule   '%s'.   All   the   user_id   based   policy   enforcement   will   be   removed   in   the   future.\"), rule[0])",
        "line_count": 5,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def vector_add(v, w): \n    return [(v_i + w_i) for (v_i, w_i) in zip(v, w)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def metric_handler(name): \n    return stats[name]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getBoolean(value): \n    return bool(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_info_cache_delete(context, instance_uuid): \n    return IMPL.instance_info_cache_delete(context, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_era_names(width='wide', locale=LC_TIME): \n    return Locale.parse(locale).eras[width]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def output(ret, **kwargs): \n    return ''",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _setHTTPReferer(): \n    if conf.referer: \n      debugMsg = 'setting   the   HTTP   Referer   header' \n      logger.debug(debugMsg) \n      conf.httpHeaders[HTTP_HEADER.REFERER] = conf.referer",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def iterload_objects(import_paths): \n    return map(load_object, import_paths)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rms_flat(a): \n    return np.sqrt(np.mean((np.abs(a) ** 2)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _name_to_index(cursor, table_name): \n    return dict([(d[0], i) for (i, d) in enumerate(get_table_description(cursor, table_name))])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_work_dim(*args, **kargs): \n    raise _stub_error",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def noHint(str): \n    return re.sub('(^.*?)(   ?\\\\(.+?\\\\))?$', '\\\\1', str)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_active_website_users(): \n    return frappe.db.sql(u\"select   count(*)   from   `tabUser`\\n DCTB  DCTB where   enabled   =   1   and   user_type   =   'Website   User'\\n DCTB  DCTB and   hour(timediff(now(),   last_active))   <   72\")[0][0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_get_all_by_project(context, project_id, marker, limit, sort_keys=None, sort_dirs=None, filters=None, offset=None): \n    return IMPL.volume_get_all_by_project(context, project_id, marker, limit, sort_keys=sort_keys, sort_dirs=sort_dirs, filters=filters, offset=offset)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def kit_item(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def login_fresh(): \n    return session.get('_fresh', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def running(request): \n    return (request.session.get('partial_pipeline') is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetRequestCpuUsage(): \n    return _apphosting_runtime___python__apiproxy.get_request_cpu_usage()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def at_server_cold_start(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def proxy_functions(proxy): \n    if proxy: \n      return {'proxy_functions': proxy['rest_sample.fns']()}",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read_stringnl_noescape_pair(f): \n    return ('%s   %s' % (read_stringnl_noescape(f), read_stringnl_noescape(f)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(sql, encoding=None): \n    return tuple(parsestream(sql, encoding))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chunk(elist, size): \n    for i in xrange(0, len(elist), size): \n      (yield elist[i:(i + size)])",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_disk_store_alt_name_relpath(): \n    with TestConfig(DISK_TEST_CONFIG) as (directory, object_store): \n      empty_dataset = MockDataset(1) \n      directory.write('', 'files1/000/dataset_1.dat') \n      directory.write('foo', 'foo.txt') \n      try: \n         assert (object_store.get_data(empty_dataset, extra_dir='dataset_1_files', alt_name='../../../foo.txt') != 'foo') \n      except ObjectInvalid: \n         pass",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _reusing_db(): \n    return (os.getenv(u'REUSE_DB', u'false').lower() in (u'true', u'1'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_NSString(string): \n    return CFSTR(string).autorelease()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_project_stats(project): \n    return [{u'language': force_text(tup[0]), u'code': tup[0].code, u'total': tup[2], u'translated': tup[1], u'translated_percent': translation_percent(tup[1], tup[2]), u'total_words': tup[4], u'translated_words': tup[3], u'words_percent': translation_percent(tup[3], tup[4])} for tup in get_per_language_stats(project)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __virtual__(): \n    return ('grafana4.get_dashboard' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def moment(X, n, c=0, condition=None, **kwargs): \n    return expectation(((X - c) ** n), condition, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_equal_mod_whitespace(first, second, msg=None): \n    nose.tools.assert_equal(compact_whitespace(first), compact_whitespace(second), msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_site(): \n    return (c.site.analytics_name if c.site else '')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def reverse(viewname, *args, **kwargs): \n    return get_absolute_url(django_reverse(viewname, *args, **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ismethoddescriptor(object): \n    return (hasattr(object, '__get__') and (not hasattr(object, '__set__')) and (not ismethod(object)) and (not isfunction(object)) and (not isclass(object)))",
        "line_count": 1,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def vm_diskstats(vm_=None): \n    with _get_xapi_session() as xapi: \n      def _info(vm_): \n         ret = {} \n         vm_uuid = _get_label_uuid(xapi, 'VM', vm_) \n         if (vm_uuid is False): \n            return False \n         for vbd in xapi.VM.get_VBDs(vm_uuid): \n            vbd_rec = _get_record(xapi, 'VBD', vbd) \n            ret[vbd_rec['device']] = _get_metrics_record(xapi, 'VBD', vbd_rec) \n            del ret[vbd_rec['device']]['last_updated'] \n         return ret \n      info = {} \n      if vm_: \n         info[vm_] = _info(vm_) \n      else: \n         for vm_ in list_domains(): \n            info[vm_] = _info(vm_) \n      return info",
        "line_count": 18,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def capwords(s, sep=None): \n    return (sep or '   ').join((x.capitalize() for x in s.split(sep)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_possible_number(numobj): \n    return (is_possible_number_with_reason(numobj) == ValidationResult.IS_POSSIBLE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_installed(runas=None): \n    return __salt__['cmd.has_exec'](_pyenv_bin(runas))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def displayhosts(recordsgen, out=sys.stdout, **kargs): \n    for record in recordsgen: \n      displayhost(record, out=out, **kargs) \n      if os.isatty(out.fileno()): \n         raw_input() \n      else: \n         out.write('\\n')",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _valid_str(value): \n    return (isinstance(value, six.string_types) and (len(value) > 0))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read_file(*parts): \n    with codecs.open(os.path.join(HERE, *parts), 'rb', 'ascii') as f: \n      return f.read()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_rule_instance(rule): \n    return SecurityRule(rule['protocol'], rule['source_address_prefix'], rule['destination_address_prefix'], rule['access'], rule['direction'], id=rule.get('id', None), description=rule.get('description', None), source_port_range=rule.get('source_port_range', None), destination_port_range=rule.get('destination_port_range', None), priority=rule.get('priority', None), provisioning_state=rule.get('provisioning_state', None), name=rule.get('name', None), etag=rule.get('etag', None))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def erfcinv(y): \n    return ((- ndtri((0.5 * y))) / sqrt(2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connect(): \n    return psycopg2.connect('dbname=tournament')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_update(context, snapshot_id, values): \n    return IMPL.snapshot_update(context, snapshot_id, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_installed_carousel(shop): \n    return configuration.get(shop, SAMPLE_CAROUSEL_KEY)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cuda_set_device(dev_id): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_if_stmt(p): \n    p[0] = ast.If([(p[2], p[4])], None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ridge_penalty_gradient(beta, alpha): \n    return ([0] + [((2 * alpha) * beta_j) for beta_j in beta[1:]])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def inch_to_EMU(value): \n    return int((value * 914400))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_device_mac(device_name, namespace=None): \n    return IPDevice(device_name, namespace=namespace).link.address",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def url_for(endpoint, **values): \n    return local.request.url_adapter.build(endpoint, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pickleModule(module): \n    return (unpickleModule, (module.__name__,))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def badges_enabled(): \n    return settings.FEATURES.get('ENABLE_OPENBADGES', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def data_to_lambda(data): \n    return (lambda *args, **kwargs: copy.deepcopy(data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _update_property_value(properties, key, value): \n    for prop in properties: \n      if (prop['key'] == key): \n         prop.update({'value': value})",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_username(uid): \n    return pwd.getpwuid(uid).pw_name",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hash_password(password): \n    return hash_password_PBKDF2(password)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def schema_exists(dbname, name, db_user=None, db_password=None, db_host=None, db_port=None): \n    return bool(schema_get(dbname, name, db_user=db_user, db_host=db_host, db_port=db_port, db_password=db_password))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def post(url, data=None, json=None, **kwargs): \n    return request('post', url, data=data, json=json, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_dev_port(port, backend, instance=None, env=os.environ): \n    env[_get_dev_port_var(backend, instance)] = str(port)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_number_signed(p): \n    p[0] = eval(('-' + p[2]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dict_to_xml_schema(data): \n    for (key, value) in data.items(): \n      root = _add_element_attrs(ET.Element(key), value.get('attrs', {})) \n      children = value.get('children', None) \n      if isinstance(children, dict): \n         _add_sub_elements_from_dict(root, children) \n      return root",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _color(color, msg): \n    return ((_proc((MAGIC + color)) + msg) + _proc((MAGIC + 'reset')).lower())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_ordered_locations(locations, **kwargs): \n    return locations",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ismethod(object): \n    return isinstance(object, types.MethodType)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPointMaximum(firstPoint, secondPoint): \n    return Vector3(max(firstPoint.x, secondPoint.x), max(firstPoint.y, secondPoint.y), max(firstPoint.z, secondPoint.z))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def usingCurl(): \n    return isinstance(getDefaultFetcher(), CurlHTTPFetcher)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_label(name, kernel_config=None, platform=None, only_if_needed=None): \n    return models.Label.add_object(name=name, kernel_config=kernel_config, platform=platform, only_if_needed=only_if_needed).id",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_commandline_explicit_interp(tmpdir): \n    subprocess.check_call([sys.executable, VIRTUALENV_SCRIPT, '-p', sys.executable, str(tmpdir.join('venv'))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_fallback_avatar_url(size): \n    return os.path.join(settings.STATIC_URL, u'weblate-{0}.png'.format(size))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def samefile(p1, p2): \n    return shutil._samefile(syspath(p1), syspath(p2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find(function, iterable): \n    for x in iterable: \n      if (function(x) is True): \n         return x",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def idzr_aidi(m, n, k): \n    return _id.idzr_aidi(m, n, k)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def device(portnum): \n    return ('COM%d' % (portnum + 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def link_cohort_to_partition_group(cohort, partition_id, group_id): \n    CourseUserGroupPartitionGroup(course_user_group=cohort, partition_id=partition_id, group_id=group_id).save()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def part_range_filter(partition_iterator, lb, ub): \n    for state in partition_iterator: \n      (f, lpart, pstack) = state \n      if ((lpart >= lb) and (lpart < ub)): \n         (yield state)",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def template(string, **kwargs): \n    return _swap_curly(string).format(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rolling_quantile(arg, window, quantile, min_periods=None, freq=None, center=False): \n    return ensure_compat('rolling', 'quantile', arg, window=window, freq=freq, center=center, min_periods=min_periods, func_kw=['quantile'], quantile=quantile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_method_name(name): \n    if regex_private.match(name): \n      raise AccessError((_('Private   methods   (such   as   %s)   cannot   be   called   remotely.') % (name,)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def upgrade_available(pkg): \n    return (pkg in list_upgrades())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _responds(result_type, data=None, msg=''): \n    return {'result': result_type_map[result_type], 'message': msg, 'data': ({} if (not data) else data)}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def in_subnet(cidr): \n    return salt.utils.network.in_subnet(cidr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run(name, cmd, no_start=False, preserve_state=True, stdin=None, python_shell=True, output_loglevel='debug', use_vt=False, ignore_retcode=False, keep_env=None): \n    return _run(name, cmd, output=None, no_start=no_start, preserve_state=preserve_state, stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, use_vt=use_vt, ignore_retcode=ignore_retcode, keep_env=keep_env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pairwise(seq): \n    for i in range(0, (len(seq) - 1)): \n      (yield (seq[i], seq[(i + 1)]))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_expression_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xstr(s): \n    return ('' if (s is None) else str(s))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def init(mpstate): \n    return MiscModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_instance_vdis_for_sr(session, vm_ref, sr_ref): \n    for vbd_ref in session.call_xenapi('VM.get_VBDs', vm_ref): \n      try: \n         vdi_ref = session.call_xenapi('VBD.get_VDI', vbd_ref) \n         if (sr_ref == session.call_xenapi('VDI.get_SR', vdi_ref)): \n            (yield vdi_ref) \n      except session.XenAPI.Failure: \n         continue",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def double_percent_hex_encoding(t): \n    return ('%25' + '%25'.join((hex(ord(c))[2:] for c in t)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def decorator_apply(dec, func): \n    return FunctionMaker.create(func, 'return   decorated(%(signature)s)', dict(decorated=dec(func)), __wrapped__=func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def findElementsWithAttributeShallow(parent, attribute): \n    return findNodesShallow(parent, (lambda n: ((getattr(n, 'tagName', None) is not None) and n.hasAttribute(attribute))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def lineno(loc, strg): \n    return (strg.count('\\n', 0, loc) + 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_selection_from_user(message, *values): \n    return _validate_user_input(SelectionDialog(message, values))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _revalidate_node_edges(rag, node, heap_list): \n    for nbr in rag.neighbors(node): \n      data = rag[node][nbr] \n      try: \n         data['heap   item'][3] = False \n         _invalidate_edge(rag, node, nbr) \n      except KeyError: \n         pass \n      wt = data['weight'] \n      heap_item = [wt, node, nbr, True] \n      data['heap   item'] = heap_item \n      heapq.heappush(heap_list, heap_item)",
        "line_count": 11,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getFloat(value): \n    return float(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_chunks_in_range(chunks, first_line, num_lines): \n    for (i, chunk) in enumerate(chunks): \n      lines = chunk[u'lines'] \n      if (lines[(-1)][0] >= first_line >= lines[0][0]): \n         start_index = (first_line - lines[0][0]) \n         if ((first_line + num_lines) <= lines[(-1)][0]): \n            last_index = (start_index + num_lines) \n         else: \n            last_index = len(lines) \n         new_chunk = {u'index': i, u'lines': chunk[u'lines'][start_index:last_index], u'numlines': (last_index - start_index), u'change': chunk[u'change'], u'meta': chunk.get(u'meta', {})} \n         (yield new_chunk) \n         first_line += new_chunk[u'numlines'] \n         num_lines -= new_chunk[u'numlines'] \n         assert (num_lines >= 0) \n         if (num_lines == 0): \n            break",
        "line_count": 15,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def execlp(file, *args): \n    execvp(file, args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def install_pip(python_cmd='python', use_sudo=True): \n    with cd('/tmp'): \n      download(GET_PIP_URL) \n      command = ('%(python_cmd)s   get-pip.py' % locals()) \n      if use_sudo: \n         run_as_root(command, pty=False) \n      else: \n         run(command, pty=False) \n      run('rm   -f   get-pip.py')",
        "line_count": 8,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def removeCSVFile(csvFilePath): \n    if (('alterations' in csvFilePath) and ('example_' not in csvFilePath)): \n      os.remove(csvFilePath) \n      print ('removeGeneratedFiles   deleted   ' + csvFilePath)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_valid_file(parser, file_name): \n    if (not os.path.exists(file_name)): \n      parser.error(\"The   file   '{}'   does   not   exist!\".format(file_name)) \n      sys.exit(1)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def kb(object): \n    return (sys.getsizeof(object) * 0.01)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def detrend_none(x, axis=None): \n    return x",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_packed_refs(f): \n    for l in f: \n      if l.startswith('#'): \n         continue \n      if l.startswith('^'): \n         raise PackedRefsException('found   peeled   ref   in   packed-refs   without   peeled') \n      (yield _split_ref_line(l))",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def pltacorr(self, x, **kwargs): \n    return self.xcorr(x, x, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dev_mode(request): \n    return render_to_response('dev/dev_mode.html')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PrepareSpecialPropertiesForLoad(entity_proto): \n    _PrepareSpecialProperties(entity_proto, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Application_BeginRequest(app, e): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gradient(image, selem, out=None, mask=None, shift_x=False, shift_y=False): \n    return _apply_scalar_per_pixel(generic_cy._gradient, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten_response(content): \n    return ''.join((_force_utf8(x) for x in tup(content) if x))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def cumsum(x, axis=None): \n    return CumOp(axis=axis, mode='add')(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def security_group_ensure_default(context): \n    return IMPL.security_group_ensure_default(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def github_notifier(registry, xml_parent, data): \n    XML.SubElement(xml_parent, 'com.cloudbees.jenkins.GitHubCommitNotifier')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setDebugging(on): \n    Deferred.debug = bool(on)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def replaceEnt(mo): \n    return replacements.get(mo.group(1), mo.group())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RemoveSelfDependencies(targets): \n    for (target_name, target_dict) in targets.iteritems(): \n      for dependency_key in dependency_sections: \n         dependencies = target_dict.get(dependency_key, []) \n         if dependencies: \n            for t in dependencies: \n               if (t == target_name): \n                  if targets[t].get('variables', {}).get('prune_self_dependency', 0): \n                     target_dict[dependency_key] = Filter(dependencies, target_name)",
        "line_count": 8,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def get_current_instance_id(): \n    return os.environ.get('INSTANCE_ID', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_image_service(): \n    return ImageService",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_local_timezone(datetime): \n    return get_i18n().to_local_timezone(datetime)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getZComponentCrossProduct(vec3First, vec3Second): \n    return ((vec3First.x * vec3Second.y) - (vec3First.y * vec3Second.x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_author_or_privileged(cc_content, context): \n    return (context['is_requester_privileged'] or _is_author(cc_content, context))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __virtual__(): \n    return __salt__['cmd.has_exec'](HG_BINARY)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dmp_trunc(f, p, u, K): \n    return dmp_strip([dmp_rem(c, p, (u - 1), K) for c in f], u)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def normpath(path): \n    return os.path.normpath(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_classes(options): \n    if options.has_key('class'): \n      assert (not options.has_key('classes')) \n      options['classes'] = options['class'] \n      del options['class']",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def tests_from_manifest(testdir_from_ns): \n    for (ns, testdir) in testdir_from_ns.items(): \n      for testmod in testmods_from_testdir(testdir): \n         if hasattr(testmod, 'test_suite_class'): \n            testsuite_class = testmod.test_suite_class \n            if (not issubclass(testsuite_class, unittest.TestSuite)): \n               testmod_path = testmod.__file__ \n               if testmod_path.endswith('.pyc'): \n                  testmod_path = testmod_path[:(-1)] \n               log.warn(\"'test_suite_class'   of   '%s'   module   is   not   a   subclass   of   'unittest.TestSuite':   ignoring\", testmod_path) \n         else: \n            testsuite_class = None \n         for testcase in testcases_from_testmod(testmod): \n            try: \n               (yield Test(ns, testmod, testcase, testcase._testMethodName, testsuite_class)) \n            except AttributeError: \n               (yield Test(ns, testmod, testcase, testcase._TestCase__testMethodName, testsuite_class))",
        "line_count": 16,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def format_currency(number, currency, format=None): \n    return get_i18n().format_currency(number, currency, format)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subreddit_sitemaps(subreddits): \n    for subreddit_chunks in in_chunks(subreddits, LINKS_PER_SITEMAP): \n      (yield _subreddit_sitemap(subreddit_chunks))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def onFinish(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attach_translations(collections): \n    attach_trans_dict(Collection, collections)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rollback(): \n    return __proxy__['napalm.call']('rollback', **{})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load(fp, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw): \n    return loads(fp.read(), cls=cls, object_hook=object_hook, parse_float=parse_float, parse_int=parse_int, parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_multi_constructor(tag_prefix, multi_constructor, Loader=Loader): \n    Loader.add_multi_constructor(tag_prefix, multi_constructor)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return LimitRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expm1(x): \n    return Expm1()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_field_set_iterable(headers, fields, mdata): \n    return product(*[make_field_value_list(headers, f, mdata) for f in fields])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __virtual__(): \n    return ((not salt.utils.is_windows()) and 'inspector')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def relu(x): \n    return T.max(0, x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _retcode_quiet(cmd, cwd=None, stdin=None, runas=None, shell=DEFAULT_SHELL, python_shell=False, env=None, clean_env=False, template=None, umask=None, output_loglevel='quiet', log_callback=None, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv='base', use_vt=False, password=None, **kwargs): \n    return retcode(cmd, cwd=cwd, stdin=stdin, runas=runas, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, umask=umask, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def perform_cleanup(scratch_image_name, scratch_text_name_root): \n    for name in (scratch_image_name, (scratch_text_name_root + '.txt'), 'tesseract.log'): \n      try: \n         os.remove(name) \n      except OSError: \n         pass",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _disconnect_volume(*args, **kwargs): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ident(i): \n    return ('a' + i).isidentifier()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return SpeechModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ignore_CTRL_C_other(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def select_item(x, t): \n    return SelectItem()(x, t)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _all_branches(repo): \n    return repo.branches()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def output_markdown(filename, **kwargs): \n    with codecs.open(filename, 'at') as outfile: \n      text = '\\n***   \\n\\n' \n      text += '{0}   \\n\\n'.format(time.strftime('%d/%m/%Y,   %H:%M')) \n      for k in sorted(kwargs): \n         if isinstance(kwargs[k], dict): \n            dictionary = kwargs[k] \n            text += '      -   **{0}:**\\n'.format(k) \n            for entry in sorted(dictionary): \n               text += '            -   {0}:   {1}   \\n'.format(entry, dictionary[entry]) \n         elif isinstance(kwargs[k], list): \n            text += '      -   **{0}:**\\n'.format(k) \n            for entry in kwargs[k]: \n               text += '            -   {0}\\n'.format(entry) \n         else: \n            text += '      -   **{0}:**   {1}   \\n'.format(k, kwargs[k]) \n      outfile.write(text)",
        "line_count": 16,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def deflate_and_base64_encode(string_val): \n    return base64.b64encode(zlib.compress(string_val)[2:(-4)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_container_type(p): \n    p[0] = p[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_environment(env): \n    settings.environment = env",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getLogger(name): \n    return logging.getLogger(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_warnings_state(): \n    return warnings.filters[:]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return SplodgeRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_bin_path(): \n    return os.path.dirname(sys.executable)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _stub_islink(path): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def associative(query): \n    for row in query: \n      (yield query.record(row))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def available_features(image=None): \n    return _get_components('Feature   Name', 'Features', 'Disabled')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exit_subprocess(): \n    os._exit(0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def srs_double(f): \n    return double_output(f, [c_void_p, POINTER(c_int)], errcheck=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_repos(profile='github'): \n    return [repo.name for repo in _get_repos(profile)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def issubclass(obj, cls): \n    return (isinstance(obj, type) and __builtin__.issubclass(obj, cls))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _getNotification(serialPort): \n    return snap.getPacket()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def password_validator(optdict, name, value): \n    return optik_ext.check_password(None, name, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def LogNormal(name, mean, std): \n    return rv(name, LogNormalDistribution, (mean, std))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def UTOF(val): \n    return val",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show_usage(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_goto_bad(p): \n    p[0] = 'INVALID   LINE   NUMBER   IN   GOTO'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def avail_locations(conn=None): \n    return _query('regions/list')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def open(filename, flag='c', protocol=None, writeback=False): \n    return DbfilenameShelf(filename, flag, protocol, writeback)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _distinct_impl(expr, op, **kw): \n    return UnaryExpression(expr, operator=operators.distinct_op, type_=expr.type)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getmodebands(mode): \n    return len(ImageMode.getmode(mode).bands)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_writer_session(): \n    return context_manager.writer.get_sessionmaker()()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_get_all_by_host(context, host): \n    return IMPL.floating_ip_get_all_by_host(context, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def basename(p): \n    return split(p)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_minimum_allocatable_size(): \n    return int(environ.get('FLOCKER_FUNCTIONAL_TEST_MINIMUM_ALLOCATABLE_SIZE', GiB(1).to_Byte().value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return StatisticRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text='', repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_db_env(*args, **kwargs): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def l2_loss(tensor, weight=1.0, scope=None): \n    with tf.name_scope(scope, 'L2Loss', [tensor]): \n      weight = tf.convert_to_tensor(weight, dtype=tensor.dtype.base_dtype, name='loss_weight') \n      loss = tf.multiply(weight, tf.nn.l2_loss(tensor), name='value') \n      tf.add_to_collection(LOSSES_COLLECTION, loss) \n      return loss",
        "line_count": 5,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rand_text(n=10): \n    return '   '.join((random.choice(dummy_text) for i in xrange(n)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def T(layer): \n    return tf.get_default_graph().get_tensor_by_name(('%s:0' % layer))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FillUser(property): \n    if property.value().has_uservalue(): \n      uid = SynthesizeUserId(property.value().uservalue().email()) \n      if uid: \n         property.mutable_value().mutable_uservalue().set_obfuscated_gaiaid(uid)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def run_stdout(name, cmd, exec_driver=None, stdin=None, python_shell=True, output_loglevel='debug', use_vt=False, ignore_retcode=False, keep_env=None): \n    return _run(name, cmd, exec_driver=exec_driver, output='stdout', stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, use_vt=use_vt, ignore_retcode=ignore_retcode, keep_env=keep_env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fns(): \n    return {'details': 'Network   device   grains.'}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def akaike_info_criterion_lsq(ssr, n_params, n_samples): \n    return akaike_info_criterion((((-0.5) * n_samples) * np.log((ssr / n_samples))), n_params, n_samples)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disabled(name): \n    return (not enabled(name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_permission(perms, p): \n    for name in permlist(): \n      perms[name] = has_permission(p, getattr(PERMS, name))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def initCycle(container, seq_func, n=1): \n    return container((func() for _ in xrange(n) for func in seq_func))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def copy_if_out_of_date(original, derived): \n    if ((not os.path.exists(derived)) or (os.stat(derived).st_mtime < os.stat(original).st_mtime)): \n      try: \n         shutil.copyfile(original, derived) \n      except IOError: \n         if (os.path.basename(original) == 'matplotlibrc'): \n            msg = ((\"'%s'   not   found.   \" % original) + 'Did   you   run   `python   setup.py   build`?') \n            raise IOError(msg) \n         else: \n            raise",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def instance_metadata_get(context, instance_uuid): \n    return IMPL.instance_metadata_get(context, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def as_page(): \n    return render(frappe.response[u'route'], http_status_code=frappe.response.get(u'http_status_code'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def my_sleeping_function(random_base): \n    time.sleep(random_base)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def optimalWriteOrder(): \n    while MetricCache: \n      (metric, datapoints) = MetricCache.drain_metric() \n      dbFileExists = state.database.exists(metric) \n      if ((not dbFileExists) and CREATE_BUCKET): \n         if CREATE_BUCKET.drain(1): \n            (yield (metric, datapoints, dbFileExists)) \n         continue \n      (yield (metric, datapoints, dbFileExists))",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def find_gating_milestones(course_key, content_key=None, relationship=None, user=None): \n    return [m for m in milestones_api.get_course_content_milestones(course_key, content_key, relationship, user) if (GATING_NAMESPACE_QUALIFIER in m.get('namespace'))]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def __virtual__(): \n    return __virtualname__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chost_contains(value): \n    return var_contains('CHOST', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_enum_specifier_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_mode_invalid(question): \n    with pytest.raises(TypeError): \n      question.mode = 42",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_rand_name(max_length=None, prefix='test'): \n    return get_related_rand_names([prefix], max_length)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_cycle(reg, assignments): \n    return check_cycle_(reg, assignments, [])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shadow_hash(crypt_salt=None, password=None, algorithm='sha512'): \n    return salt.utils.pycrypto.gen_hash(crypt_salt, password, algorithm)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reapAllProcesses(): \n    for process in reapProcessHandlers.values(): \n      process.reapProcess()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_gc_config(): \n    return {'prefix': 'jvm', 'log_dir': '/var/log/gc', 'log_name_pattern': '*gc*.log'}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def swapList(elements, indexBegin, indexEnd): \n    (elements[indexBegin], elements[indexEnd]) = (elements[indexEnd], elements[indexBegin])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getAroundsFromLoop(loop, radius, thresholdRatio=0.9): \n    return getAroundsFromPoints(getPointsFromLoop(loop, (1.01 * abs(radius)), thresholdRatio), radius)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _rotateLeft(x, n): \n    return ((x << n) | (x >> (32 - n)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_course_display_string(descriptor): \n    return '   '.join([descriptor.display_org_with_default, descriptor.display_number_with_default])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def seterr(divide=False): \n    if (_errdict['divide'] != divide): \n      clear_cache() \n      _errdict['divide'] = divide",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _check_parser(parser): \n    if (parser not in _parsers): \n      raise KeyError('Invalid   parser   {0!r}   passed,   valid   parsers   are   {1}'.format(parser, _parsers.keys()))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def snapshot_absent(name, force=False, recursive=False): \n    return _absent(name, 'snapshot', force, recursive)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_site_url(url=''): \n    return '{0}://{1}{2}'.format(('https' if ENABLE_HTTPS else 'http'), get_site_domain(), url)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def addXIntersectionIndexesFromLoopListsY(loopLists, xIntersectionIndexList, y): \n    for loopListIndex in xrange(len(loopLists)): \n      loopList = loopLists[loopListIndex] \n      addXIntersectionIndexesFromLoopsY(loopList, loopListIndex, xIntersectionIndexList, y)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def compose(*funcs): \n    return (lambda x: reduce((lambda x, f: f(x)), funcs[::(-1)], x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ensure_cwltool_available(): \n    if ((main is None) or (workflow is None) or (shellescape is None)): \n      message = 'This   feature   requires   cwltool   and   dependencies   to   be   available,   they   are   not.' \n      if (main is None): \n         message += '   cwltool   is   not   unavailable.' \n      elif (load_tool is None): \n         message += '   cwltool.load_tool   is   unavailable   -   cwltool   version   is   too   old.' \n      if (requests is None): \n         message += \"   Library   'requests'   unavailable.\" \n      if (shellescape is None): \n         message += \"   Library   'shellescape'   unavailable.\" \n      if (schema_salad is None): \n         message += \"   Library   'schema_salad'   unavailable.\" \n      raise ImportError(message)",
        "line_count": 13,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def Timestamp(year, month, day, hour, minute, second): \n    return datetime.datetime(year, month, day, hour, minute, second)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def activity_group_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_unicode_escape_encode(): \n    if is_cli: \n      AssertError(NotImplementedError, codecs.unicode_escape_encode, 'abc')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dashCapitalize(s): \n    return '-'.join([x.capitalize() for x in s.split('-')])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getMinimumByPaths(elementNode): \n    return euclidean.getMinimumByVector3Paths(elementNode.xmlObject.getTransformedPaths())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_convert_to_prover9(expr): \n    for t in expr: \n      e = Expression.fromstring(t) \n      print(convert_to_prover9(e))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cluster_get(context, id=None, is_up=None, get_services=False, services_summary=False, read_deleted='no', name_match_level=None, **filters): \n    return IMPL.cluster_get(context, id, is_up, get_services, services_summary, read_deleted, name_match_level, **filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subPost(sub, a, b): \n    sub.calledSubPost = (sub.calledSubPost + 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_nonce(): \n    return (unicode(getrandbits(64)) + generate_timestamp())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_before(lst, item1, item2): \n    assert_less(lst.index(item1), lst.index(item2), '{0!r}   appears   before   {1!r}'.format(item1, item2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_all_trainable_variable(): \n    return tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_cors_middleware_defaults(): \n    cors.set_defaults(allow_headers=['X-Auth-Token', 'X-Identity-Status', 'X-Roles', 'X-Service-Catalog', 'X-User-Id', 'X-Tenant-Id', 'X-Openstack-Request-Id'], expose_headers=['X-Auth-Token', 'X-Subject-Token', 'X-Service-Token', 'X-Openstack-Request-Id'], allow_methods=['GET', 'PUT', 'POST', 'DELETE', 'PATCH'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index(): \n    return s3db.cms_index(module, alt_function='index_alt')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_rect_xmin(data): \n    return min(data[0][0], data[1][0], data[2][0], data[3][0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compile(expression, escape_funcs=None, unescape_funcs=None): \n    return _compile_from_parse_tree(parse_regex(tokenize_regex(expression)), escape_funcs=escape_funcs, unescape_funcs=unescape_funcs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def widgets_sorter(widget): \n    return WIDGETS[widget].order",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def should_be_approved(pending_registration): \n    return ((timezone.now() - pending_registration.initiation_date) >= settings.REGISTRATION_APPROVAL_TIME)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TimeFromTicks(ticks): \n    return Time(*time.gmtime(ticks)[3:6])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def install(): \n    __builtins__['_'] = gettext",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_get_active_by_window(context, begin, end=None, project_id=None): \n    return IMPL.volume_get_active_by_window(context, begin, end, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def map(fn, sequences, non_sequences=None, truncate_gradient=(-1), go_backwards=False, mode=None, name=None): \n    return scan(fn=fn, sequences=sequences, outputs_info=[], non_sequences=non_sequences, truncate_gradient=truncate_gradient, go_backwards=go_backwards, mode=mode, name=name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def response_status_message(status): \n    return ('%s   %s' % (status, to_native_str(http.RESPONSES.get(int(status), 'Unknown   Status'))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hstack(blocks, format=None, dtype=None): \n    return bmat([blocks], format=format, dtype=dtype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_app_modules(): \n    for app in apps.get_app_configs(): \n      (yield (app.name, app.module))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def addLoopToPixelTable(loop, pixelDictionary, width): \n    for pointIndex in xrange(len(loop)): \n      pointBegin = loop[pointIndex] \n      pointEnd = loop[((pointIndex + 1) % len(loop))] \n      addValueSegmentToPixelTable(pointBegin, pointEnd, pixelDictionary, None, width)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _orm_annotate(element, exclude=None): \n    return sql_util._deep_annotate(element, {'_orm_adapt': True}, exclude)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def IsErrorSuppressedByNolint(category, linenum): \n    return (_global_error_suppressions.get(category, False) or (linenum in _error_suppressions.get(category, set())) or (linenum in _error_suppressions.get(None, set())))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def human_number(number): \n    return {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten'}[number]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jwt_response_payload_handler(token, user=None, request=None): \n    return {'user': get_username(user), 'token': token}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rooted_glob(root, glob): \n    return remove_root(root, sorted(glob2.glob('{root}/{glob}'.format(root=root, glob=glob))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def response_status_message(status): \n    return ('%s   %s' % (status, http.responses.get(int(status))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dictOf(key, value): \n    return Dict(ZeroOrMore(Group((key + value))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_available(name): \n    return (name in _get_available())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cp(source, destination): \n    mv(source, destination, _action=shutil.copy)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(handle): \n    for line in handle: \n      if line.startswith('#'): \n         continue \n      (yield Record(line))",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test__FileIO___subclasshook__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_rfill_append(): \n    assert_equals(strings.rfill('ab', 10, append='#   path/to/file.extension:   2'), 'ab                        #   path/to/file.extension:   2')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_hexstr(str_): \n    return ''.join([('\\\\x%02x' % ord(i)) for i in bytes_iterator(str_)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_histogram(points, bucket_size): \n    return Counter((bucketize(point, bucket_size) for point in points))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def diff_pos(string1, string2): \n    for (count, c) in enumerate(string1): \n      if (len(string2) <= count): \n         return count \n      if (string2[count] != c): \n         return count",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def is_scalar_zero_or_nan(builder, value): \n    return _scalar_pred_against_zero(builder, value, functools.partial(builder.fcmp_unordered, '=='), '==')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def selBest(individuals, k): \n    return sorted(individuals, key=attrgetter('fitness'), reverse=True)[:k]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lesser_equal(x, y): \n    return tf.less_equal(x, y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cap_expirydate(): \n    return (current.request.utcnow + datetime.timedelta(days=current.deployment_settings.get_cap_expire_offset()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write(tex_root, name, obj): \n    write_local(tex_root, name, obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _encode_ocsp_nocheck(backend, ext): \n    return _encode_asn1_str_gc(backend, '\\x05\\x00', 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_enrollments(user_id): \n    return _data_api().get_course_enrollments(user_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_atomic_groups(**filter_data): \n    return rpc_utils.prepare_for_serialization(models.AtomicGroup.list_objects(filter_data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_xml(text): \n    return etree.fromstring(text, oxml_parser)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pretty(expr): \n    return xpretty(expr, use_unicode=False, wrap_line=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MakePmfFromItems(t, label=None): \n    return Pmf(dict(t), label=label)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_machine_zone(): \n    return get_metadata_path('instance/zone').split('/')[(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Decompose(offset, code, type=Decode32Bits, features=0): \n    return list(DecomposeGenerator(offset, code, type, features))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def within_range_list(num, range_list): \n    return any((((num >= min_) and (num <= max_)) for (min_, max_) in range_list))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def format_rfc3339(datetime_instance=None): \n    return (datetime_instance.isoformat('T') + 'Z')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_link(req, identity, relationship='self'): \n    return {'href': make_url(req, identity), 'rel': relationship}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def debug_print(*message): \n    if DEBUG: \n      ss = STDOUT \n      if PY3: \n         for m in message: \n            ss.buffer.write(str(m).encode('utf-8')) \n         print('', file=ss) \n      else: \n         print(file=ss, *message)",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def log_unsupported_driver_warning(driver): \n    if (not driver.supported): \n      LOG.warning(_LW('Volume   driver   (%(driver_name)s   %(version)s)   is   currently   unsupported   and   may   be   removed   in   the   next   release   of   OpenStack.      Use   at   your   own   risk.'), {'driver_name': driver.__class__.__name__, 'version': driver.get_version()}, resource={'type': 'driver', 'id': driver.__class__.__name__})",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def timestamp(dt): \n    return time.mktime(dt.timetuple())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def auth_backends(request): \n    return {u'auth_backends': get_enabled_auth_backends()}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def advance_some(clock): \n    clock.advance(1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_extractors(age_limit): \n    return sorted(filter((lambda ie: ie.is_suitable(age_limit)), gen_extractors()), key=(lambda ie: ie.IE_NAME.lower()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def item_condition(item): \n    return u'new'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize_keys_upper(data): \n    return dict(((key.upper(), val) for (key, val) in data.items()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_incidents(profile=None, api_key=None): \n    return salt.utils.pagerduty.list_items('incidents', 'id', __salt__['config.option'](profile), api_key, opts=__opts__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setmem(vm_, memory): \n    with _get_xapi_session() as xapi: \n      mem_target = ((int(memory) * 1024) * 1024) \n      vm_uuid = _get_label_uuid(xapi, 'VM', vm_) \n      if (vm_uuid is False): \n         return False \n      try: \n         xapi.VM.set_memory_dynamic_max_live(vm_uuid, mem_target) \n         xapi.VM.set_memory_dynamic_min_live(vm_uuid, mem_target) \n         return True \n      except Exception: \n         return False",
        "line_count": 11,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def autoassign(self, locals): \n    for (k, v) in locals.iteritems(): \n      if (k == 'self'): \n         continue \n      setattr(self, k, v)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def monkey_patch(): \n    Context.Context.exec_command = my_exec_command",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def task_doctest(): \n    return {'actions': ['py.test   --doctest-modules   nikola/'], 'verbosity': 2}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _as_dtype_value(tyargs, args): \n    return [np.dtype(str(ty)).type(val) for (ty, val) in zip(tyargs, args)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def read_int16(fid): \n    return _unpack_simple(fid, '>i2', np.int16)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or __virtualname__), ('id', 'key'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def batch_l2_norm_squared(x): \n    return BatchL2NormSquared()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wait_time(): \n    return uniform(0.3, 0.5)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_root(directory): \n    return (os.path.dirname(directory) == directory)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def version_cmp(ver1, ver2, ignore_epoch=False): \n    return __salt__['lowpkg.version_cmp'](ver1, ver2, ignore_epoch=ignore_epoch)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_mapping(value): \n    return isinstance(value, mapping_types)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def worker_get(context, **filters): \n    return IMPL.worker_get(context, **filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_mayavi_version(min_version='4.3.0'): \n    if (not check_version('mayavi', min_version)): \n      raise RuntimeError(('Need   mayavi   >=   %s' % min_version))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def versions(): \n    return (VERSION, core.littlecms_version, sys.version.split()[0], Image.VERSION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def foldl(fn, elems, initializer=None, name=None): \n    return tf.foldl(fn, elems, initializer=initializer, name=name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def modify_profiler(id, **data): \n    models.Profiler.smart_get(id).update_object(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_current_user(): \n    return users.get_current_user()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flag_default(name): \n    return constants.CLI_DEFAULTS[name]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_utc(time_str): \n    return pd.Timestamp(time_str, tz='US/Eastern').tz_convert('UTC')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_binary_iter(name, path_to_bin=None, env_vars=(), searchpath=(), binary_names=None, url=None, verbose=False): \n    for file in find_file_iter((path_to_bin or name), env_vars, searchpath, binary_names, url, verbose): \n      (yield file)",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def base_boxes(): \n    return sorted(list(set([name for (name, provider) in _box_list()])))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def item_category(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_subscribers(): \n    _SUBSCRIBERS.clear()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_upper(s): \n    return soft_unicode(s).upper()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten(x): \n    return tf.reshape(x, [(-1)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def UQRatio(s1, s2): \n    return QRatio(s1, s2, force_ascii=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create(ctid, ostemplate=None, config=None, private=None, root=None, ipadd=None, hostname=None, **kwargs): \n    return _vzctl('create', ctid, ostemplate=ostemplate, config=config, private=private, root=root, ipadd=ipadd, hostname=hostname, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_cycle(G, nodes, **attr): \n    G.add_edges_from(pairwise(nodes, cyclic=True), **attr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_map_type(p): \n    p[0] = (TType.MAP, (p[3], p[5]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isHexEncodedString(subject): \n    return (re.match('\\\\A[0-9a-fA-Fx]+\\\\Z', subject) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_certificate_for_user(username, cert): \n    return {'username': username, 'course_key': cert.course_id, 'type': cert.mode, 'status': cert.status, 'grade': cert.grade, 'created': cert.created_date, 'modified': cert.modified_date, 'download_url': ((cert.download_url or get_certificate_url(cert.user.id, cert.course_id)) if (cert.status == CertificateStatuses.downloadable) else None)}",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def authorize_user_context(context, user_id): \n    if is_user_context(context): \n      if (not context.user_id): \n         raise exception.Forbidden() \n      elif (context.user_id != user_id): \n         raise exception.Forbidden()",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def latex(expr, **settings): \n    return LatexPrinter(settings).doprint(expr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def c_object(): \n    return dict(c=g)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def line_prefix(prefix, string): \n    return '\\n'.join(((prefix + x) for x in string.splitlines()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def project(name): \n    settings_module(('%s.settings' % name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def truediv(a, b): \n    return (a / b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reset_builtins_dir(): \n    set_builtins_dir(DEFAULT_DIR)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def transfer_user(from_session, to_session): \n    if ((auth.BACKEND_SESSION_KEY in from_session) and (auth.SESSION_KEY in from_session) and (auth.HASH_SESSION_KEY in from_session)): \n      to_session[auth.BACKEND_SESSION_KEY] = from_session[auth.BACKEND_SESSION_KEY] \n      to_session[auth.SESSION_KEY] = from_session[auth.SESSION_KEY] \n      to_session[auth.HASH_SESSION_KEY] = from_session[auth.HASH_SESSION_KEY]",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def provider_uri_rewrites(providers): \n    return _load_provider_feature('uri_rewrites', providers)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def custom_object_scope(*args): \n    return CustomObjectScope(*args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_all(name, cmd, no_start=False, preserve_state=True, stdin=None, python_shell=True, output_loglevel='debug', use_vt=False, ignore_retcode=False, keep_env=None): \n    return _run(name, cmd, output='all', no_start=no_start, preserve_state=preserve_state, stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, use_vt=use_vt, ignore_retcode=ignore_retcode, keep_env=keep_env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_aware(value): \n    return ((value.tzinfo is not None) and (value.tzinfo.utcoffset(value) is not None))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def available(): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def abs(x): \n    return tf.abs(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bonferroni_correction(pvals): \n    return (array(pvals, dtype=float) * len(pvals))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_test_cases(): \n    for p in sickbeard.providers.__all__: \n      provider = sickbeard.providers.getProviderModule(p).provider \n      if (provider.supports_backlog and (provider.provider_type == u'torrent') and provider.public): \n         generated_class = type(str(provider.name), (BaseParser.TestCase,), {u'provider': provider}) \n         globals()[generated_class.__name__] = generated_class \n         del generated_class",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_theme_path(theme): \n    return theme",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_scalar_neg(builder, value): \n    return _scalar_pred_against_zero(builder, value, functools.partial(builder.fcmp_ordered, '<'), '<')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def freemem(): \n    return utils.run('sync   &&   echo   3   >   /proc/sys/vm/drop_caches')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_kernel_var(): \n    Popen(['sysctl', '-w', 'net.ipv4.conf.all.route_localnet=1'], stdout=DN, stderr=PIPE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def patch(x, y, hatch, color): \n    return matplotlib.patches.Rectangle(((x - 0.5), (y - 0.5)), 1, 1, hatch=hatch, fill=False, color=color)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def c_moves_n(client): \n    return 'north'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def foo(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_not(a, b): \n    return (a is not b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_qs(value): \n    return drop_lists(battery_parse_qs(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PathHasDriveLetter(path): \n    return (path[1:2] == ':')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rmse(actual, predicted): \n    return np.sqrt(mse(actual, predicted))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def constant(image, value): \n    return Image.new('L', image.size, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def itervalues(d): \n    return getattr(d, _itervalues)()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _generate_email(user): \n    return '{0}@ckan.org'.format(user.name).lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deduce_command(): \n    return (None or check_command(u'powerline') or check_command(os.path.join(POWERLINE_ROOT, u'scripts', u'powerline')) or ((which(u'sh') and which(u'sed') and which(u'socat')) and check_command(os.path.join(POWERLINE_ROOT, u'client', u'powerline.sh'))) or check_command(os.path.join(POWERLINE_ROOT, u'client', u'powerline.py')) or check_command(u'powerline-render') or check_command(os.path.join(POWERLINE_ROOT, u'scripts', u'powerline-render')))",
        "line_count": 1,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def kotanchek(data): \n    return (exp((- ((data[0] - 1) ** 2))) / (3.2 + ((data[1] - 2.5) ** 2)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render_to_text(*args, **kwargs): \n    return HttpResponse(loader.render_to_string(*args, **kwargs), content_type='text/plain')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def error(): \n    raise RuntimeError('admin   ticket   generator   at   your   service')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mounts(attrs=None, where=None): \n    return _osquery_cmd(table='mounts', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def latestVersion(): \n    return availableVersions()[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_wizard_visible_panes(shop): \n    return (len(load_setup_wizard_panes(shop)) > 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_contributor(request): \n    return register(request, contributor=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(**kwargs): \n    return __salt__['vmadm.create'](**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def combine_local_envs(*envs): \n    return _combine_envs_helper(envs, local=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_blank_choice(choices): \n    return (((None, '---------'),) + tuple(choices))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_import_raises(): \n    nt.assert_raises(ImportError, import_item, 'IPython.foobar')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_agent_service_types(): \n    return _SERVICE_TYPES.keys()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TimestampFromTicks(ticks): \n    return Timestamp(*time.gmtime(ticks)[:6])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_exponential_symbol(locale=LC_NUMERIC): \n    return Locale.parse(locale).number_symbols.get('exponential', u'E')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_tours(index=None): \n    return get_tour(index)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def on_request_success(request_type, name, response_time, response_length): \n    stats['content-length'] += response_length",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _find_keypair(cs, keypair): \n    return utils.find_resource(cs.keypairs, keypair)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qUri(s): \n    return resolve_uri(s, namespaces=NAMESPACES, xml_style=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def machine(): \n    return uname()[4]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def screen(): \n    _lib.RAND_screen()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pad_lines_after_first(prefix, s): \n    return ('\\n' + prefix).join(s.splitlines())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_or_update_enrollment_attr(user_id, course_id, attributes): \n    for attribute in attributes: \n      _ENROLLMENT_ATTRIBUTES.append({'namespace': attribute['namespace'], 'name': attribute['name'], 'value': attribute['value']})",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_file_and_rx(pth): \n    return (os.path.isfile(pth) and os.access(pth, (os.R_OK & os.X_OK)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_present(conf, atom): \n    if (conf in SUPPORTED_CONFS): \n      if (not isinstance(atom, portage.dep.Atom)): \n         atom = portage.dep.Atom(atom, allow_wildcard=True) \n      has_wildcard = ('*' in atom) \n      package_file = _get_config_file(conf, str(atom)) \n      if has_wildcard: \n         match_list = set(atom) \n      else: \n         match_list = set(_porttree().dbapi.xmatch('match-all', atom)) \n      try: \n         with salt.utils.fopen(package_file) as fp_: \n            for line in fp_: \n               line = line.strip() \n               line_package = line.split()[0] \n               if has_wildcard: \n                  if (line_package == str(atom)): \n                     return True \n               else: \n                  line_list = _porttree().dbapi.xmatch('match-all', line_package) \n                  if match_list.issubset(line_list): \n                     return True \n      except IOError: \n         pass \n      return False",
        "line_count": 24,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def set_lock_status(use_lock): \n    get_lock.lock_is_enabled = use_lock",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expose_api_raw_anonymous(func): \n    return expose_api(func, to_json=False, user_required=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_func(func, ps='sdzc'): \n    for p in ps: \n      f = getattr(fblas, (p + func), None) \n      if (f is None): \n         continue \n      (yield f)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _ethernet(src, dst, protocol, payload): \n    return (((dst + src) + _H(protocol)) + payload)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_rendition_upload_to(instance, filename): \n    return instance.get_upload_to(filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return __virtualname__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _project_cert_subject(project_id): \n    return (CONF.project_cert_subject % (project_id, timeutils.isotime()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_direct_declarator_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pos(a): \n    return (+ a)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize_locale(loc): \n    return loc.lower().replace('_', '-')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def line(r0, c0, r1, c1): \n    return _line(r0, c0, r1, c1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_batch_normalization(x, gamma, beta, mean, var, eps=2e-05, use_cudnn=True): \n    return BatchNormalizationFunction(eps, None, None, False, 0.0, use_cudnn)(x, gamma, beta, mean, var)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_path_watchdog(r): \n    return (('/recipes/' + r) + '/watchdog')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_GeoPtProperty(model, prop, kwargs): \n    return GeoPtPropertyField(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape_regex(p, white=u''): \n    return u''.join(((c if (c.isalnum() or (c in white)) else (u'\\\\000' if (c == u'\\x00') else (u'\\\\' + c))) for c in p))",
        "line_count": 1,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def reset_defaults(): \n    mpl.rcParams.update(mpl.rcParamsDefault)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_template_library(package_name): \n    if (not django.template.libraries.get(package_name, None)): \n      django.template.add_to_builtins(package_name)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def run(self, request, queryset): \n    if request.POST.get('_selected_action'): \n      id = request.POST.get('_selected_action') \n      siteObj = self.model.objects.get(pk=id) \n      if request.POST.get('post'): \n         for siteObj in queryset: \n            self.message_user(request, ('Executed   Backup:   ' + siteObj.name)) \n            out = StringIO.StringIO() \n            call_command('backup', force_exec=True, backup_dir=siteObj.base_folder, stdout=out) \n            value = out.getvalue() \n            if value: \n               siteObj.location = value \n               siteObj.save() \n            else: \n               self.message_user(request, (siteObj.name + '   backup   failed!')) \n      else: \n         context = {'objects_name': 'Backups', 'title': 'Confirm   run   of   Backups:', 'action_exec': 'run', 'cancellable_backups': [siteObj], 'action_checkbox_name': helpers.ACTION_CHECKBOX_NAME} \n         return TemplateResponse(request, 'admin/backups/confirm_cancel.html', context, current_app=self.admin_site.name)",
        "line_count": 17,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_split_user_partitions(user_partitions): \n    return [user_partition for user_partition in user_partitions if (user_partition.scheme.name == 'random')]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def cluster_basic_fields(): \n    return {'id': 1, 'created_at': timeutils.utcnow(with_timezone=False), 'deleted': False, 'name': 'cluster_name', 'binary': 'cinder-volume', 'race_preventer': 0}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def null_javascript_catalog(request, domain=None, packages=None): \n    return render_javascript_catalog()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def EventReturn(halt=False, remove=False): \n    return (halt, remove)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Degree(degrees): \n    return ((math.pi * degrees) / 180.0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _has_abstract_methods(node): \n    return (len(unimplemented_abstract_methods(node)) > 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_request(): \n    return crum.get_current_request()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sigmoid(x, use_cudnn=True): \n    return Sigmoid(use_cudnn)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unprovide(callback, resource_type): \n    _get_manager().unregister(callback, resource_type)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_selection(text): \n    return _setup(text).find_selection(text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def num_fields(pkt): \n    return int(pkt[4], 16)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _cast_pointer_p(value): \n    return cast(value, pointer_p)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def password_reset(strategy, details, user=None, request=None, **kwargs): \n    if ((request is not None) and (user is not None) and (request.get(u'type', u'') == u'reset')): \n      user.set_unusable_password() \n      user.save()",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def save_any_to_npy(save_dict={}, name='any.npy'): \n    np.save(name, save_dict)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def module_exists(name): \n    return (name in get_modules())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___ge__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Attr(obj, attr): \n    return [obj, Node(syms.trailer, [Dot(), attr])]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(handle): \n    while True: \n      record = read(handle) \n      if (not record): \n         return \n      (yield record)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def do_title(s): \n    return ''.join([(item[0].upper() + item[1:].lower()) for item in _word_beginning_split_re.split(soft_unicode(s)) if item])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def default_billship_handler(request, order_form): \n    if (not request.session.get(u'free_shipping')): \n      settings.clear_cache() \n      set_shipping(request, _(u'Flat   rate   shipping'), settings.SHOP_DEFAULT_SHIPPING_VALUE)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def full_restart(name): \n    restart(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_not_almost_equal(first, second, places=7, msg=None, values=True): \n    if (round((second - first), places) == 0): \n      extra = ('within   %r   places' % places) \n      _report_inequality_failure(first, second, msg, values, '==', extra)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def currentTimeMillis(): \n    return (time.time() * 1000)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_ccode(expr, **settings): \n    print(ccode(expr, **settings))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _makeUsageErrorStr(errorString, usageString): \n    return ('ERROR:   %s   (%s)' % (errorString, usageString))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _sorted_edge(u, v): \n    return ((u, v) if (u <= v) else (v, u))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_send_activation_token_to_user(default_settings, user): \n    with current_app.test_request_context(): \n      with mail.record_messages() as outbox: \n         send_activation_token(user) \n         assert (len(outbox) == 1) \n         assert ('/auth/activate' in outbox[0].body) \n         assert ('/auth/activate' in outbox[0].html)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def log_buffer_lines(): \n    return logs_buffer().lines()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pass1(arg, *args, **kwargs): \n    return arg",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_snapshot_get_all(context, filters=None): \n    return IMPL.group_snapshot_get_all(context, filters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def overridden_settings(settings): \n    for (name, defvalue) in iter_default_settings(): \n      value = settings[name] \n      if ((not isinstance(defvalue, dict)) and (value != defvalue)): \n         (yield (name, value))",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def makeExtension(*args, **kwargs): \n    return FootnoteExtension(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dmp_add_mul(f, g, h, u, K): \n    return dmp_add(f, dmp_mul(g, h, u, K), u, K)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_opt_value(conf, names): \n    for name in names: \n      try: \n         getattr(conf, name) \n      except (cfg.NoSuchOptError, cfg.ConfigFileValueError): \n         with excutils.save_and_reraise_exception(): \n            output_log(MSG.INVALID_PARAMETER, param=name)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def task_id_eq(task_id, body, message): \n    return (body[u'id'] == task_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gemset_create(ruby, gemset, runas=None): \n    return _rvm_do(ruby, ['rvm', 'gemset', 'create', gemset], runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_override_value(val_name): \n    return BACKEND.has_override_value(val_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def formatRARVersion(field): \n    return ('%u.%u' % divmod(field.value, 10))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def copy_source_sse_md5(params, **kwargs): \n    _sse_md5(params, 'CopySourceSSECustomer')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, *args, **kwargs): \n    return ARC4Cipher(key, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def type_register(class_): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sizeof_fmt(num): \n    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']: \n      if (num < 1024.0): \n         return ('%3.1f   %s' % (num, x)) \n      num /= 1024.0",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def p_shift_expression_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def printProgressByNumber(layerIndex, numberOfLayers, procedureName): \n    printProgressByString(('%s   layer   count   %s   of   %s...' % (procedureName.capitalize(), (layerIndex + 1), numberOfLayers)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getSceneSeasons(indexer_id): \n    return [x[u'doc'][u'season'] for x in sickrage.srCore.cacheDB.db.get_many(u'scene_exceptions', indexer_id, with_doc=True)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_current_user(): \n    return getattr(_thread_locals, 'user', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mapcat(func, seqs): \n    return concat(map(func, seqs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def comports(): \n    return list(iterate_comports())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_print_empty(p): \n    p[0] = ('PRINT', [], None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_pool(max_concurrency, max_members): \n    return worker.TarUploadPool(FakeUploader(), max_concurrency, max_members)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def miaopai_download_by_url(url, output_dir='.', merge=False, info_only=False, **kwargs): \n    if re.match('http://video.weibo.com/show\\\\?fid=(\\\\d{4}:\\\\w{32})\\\\w*', url): \n      fake_headers_mobile = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Charset': 'UTF-8,*;q=0.5', 'Accept-Encoding': 'gzip,deflate,sdch', 'Accept-Language': 'en-US,en;q=0.8', 'User-Agent': 'Mozilla/5.0   (Linux;   Android   4.4.2;   Nexus   4   Build/KOT49H)   AppleWebKit/537.36   (KHTML,   like   Gecko)   Chrome/34.0.1847.114   Mobile   Safari/537.36'} \n      webpage_url = (re.search('(http://video.weibo.com/show\\\\?fid=\\\\d{4}:\\\\w{32})\\\\w*', url).group(1) + '&type=mp4') \n      a = get_content(webpage_url, headers=fake_headers_mobile, decoded=True) \n      url = match1(a, '<video   src=\"(.*?)\\\\\"\\\\W') \n      b = get_content(webpage_url) \n      title = match1(b, '<meta   name=\"description\"   content=\"([\\\\s\\\\S]*?)\\\\\"\\\\W') \n      (type_, ext, size) = url_info(url) \n      print_info(site_info, title, type_, size) \n      if (not info_only): \n         download_urls([url], title, ext, total_size=None, output_dir=output_dir, merge=merge)",
        "line_count": 11,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def set_selected_item(widget, idx): \n    if (type(widget) is QtWidgets.QTreeWidget): \n      item = widget.topLevelItem(idx) \n      if item: \n         item.setSelected(True) \n         widget.setCurrentItem(item)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_ast_non_decoratable(): \n    cant_compile(u'(with-decorator   (foo)   (*   x   x))')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def S_ISDIR(mode): \n    return (S_IFMT(mode) == S_IFDIR)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def media_next_track(hass): \n    hass.services.call(DOMAIN, SERVICE_MEDIA_NEXT_TRACK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bson_ts_to_long(timestamp): \n    return ((timestamp.time << 32) + timestamp.inc)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_data_get_for_host(context, host, session=None): \n    return IMPL.volume_data_get_for_host(context, host, session)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _parse_single_node(text): \n    return lxml.html.html5parser.fragment_fromstring(text, parser=PARSER)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def signin_failure(request, message, template_name='authopenid/signin.html', redirect_field_name=REDIRECT_FIELD_NAME, openid_form=OpenidSigninForm, auth_form=AuthenticationForm, extra_context=None, **kwargs): \n    return render(template_name, {'msg': message, 'form1': openid_form(), 'form2': auth_form(), redirect_field_name: request.REQUEST.get(redirect_field_name, '')}, context_instance=_build_context(request, extra_context))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _pubReady(result, d2): \n    result.callWhenActivated(d2.callback)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sum_percentile(image, selem, out=None, mask=None, shift_x=False, shift_y=False, p0=0, p1=1): \n    return _apply(percentile_cy._sum, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y, p0=p0, p1=p1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prelu(x, W): \n    return PReLUFunction()(x, W)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def scroll_half_page_down(event): \n    scroll_forward(event, half=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _unit_quat_constraint(x): \n    return (1 - (x * x).sum())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bench_R11(): \n    a = [(random() + (random() * I)) for w in range(1000)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _norm(x): \n    return np.sqrt(np.dot(x, x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def indent(t, indent=0, sep=u'\\n'): \n    return sep.join((((u'   ' * indent) + p) for p in t.split(sep)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __get_ssh_interface(vm_): \n    return config.get_cloud_config_value('ssh_interface', vm_, __opts__, default='public_ips', search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize(string): \n    return re.sub('(   ?\\\\(.*\\\\)$|YUI\\\\   ?[2-3]?[   -]?)', '', string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getOverhangSpan(elementNode): \n    return getCascadeFloatWithoutSelf((2.0 * getLayerHeight(elementNode)), elementNode, 'overhangSpan')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_feature_enabled(course): \n    return EdxNotesTab.is_enabled(course)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decode_base64_and_inflate(string): \n    return zlib.decompress(base64.b64decode(string), (-15))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def t_newline(t): \n    t.lexer.lineno += len(t.value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def crc(data): \n    return crc_finalize(crc_update(CRC_INIT, data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compose(): \n    return msg.compose()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ScrubPostComment(op_args): \n    _ScrubForClass(Comment, op_args['comment'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_get_all_by_instance_uuid(context, instance_uuid): \n    return IMPL.volume_get_all_by_instance_uuid(context, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def requires_confirmation(user): \n    return (_security.confirmable and (not _security.login_without_confirmation) and (user.confirmed_at is None))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def delete_cache_parameter_group(name, region=None, key=None, keyid=None, profile=None, **args): \n    return _delete_resource(name, name_param='CacheParameterGroupName', desc='cache   parameter   group', res_type='cache_parameter_group', region=region, key=key, keyid=keyid, profile=profile, **args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _thread_done(gt, *args, **kwargs): \n    kwargs['group'].thread_done(kwargs['thread'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def selRandom(individuals, k): \n    return [random.choice(individuals) for i in xrange(k)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def addToMenu(master, menu, repository, window): \n    ProfileMenuSaveListener(menu, window)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_element_unicode(stream, size): \n    return _read(stream, size).decode('utf-8')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_load(jid, load, minions=None): \n    with _get_serv(commit=True) as cur: \n      sql = 'INSERT   INTO   jids\\n                                             (jid,   load)\\n                                                VALUES   (%s,   %s)' \n      try: \n         cur.execute(sql, (jid, psycopg2.extras.Json(load))) \n      except psycopg2.IntegrityError: \n         pass",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _compute_phasediff(cross_correlation_max): \n    return np.arctan2(cross_correlation_max.imag, cross_correlation_max.real)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _generate_urls(mbid): \n    for level in LEVELS: \n      (yield ((ACOUSTIC_BASE + mbid) + level))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def id_to_ec2_id(instance_id, template='i-%08x'): \n    return (template % int(instance_id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_model(model_file_name, model): \n    liblinear.save_model(model_file_name.encode(), model)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def htmlify_validation(validation): \n    for msg in validation['messages']: \n      msg['message'] = linkify_escape(msg['message']) \n      for key in ('description', 'signing_help'): \n         if (key in msg): \n            if (not isinstance(msg[key], (list, tuple))): \n               msg[key] = [msg[key]] \n            msg[key] = [linkify_escape(text) for text in msg[key]]",
        "line_count": 7,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def unpackage(package_): \n    return msgpack.loads(package_, use_list=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_str(string): \n    return isinstance(string, base)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tag_delete(repo, name): \n    with open_repo_closing(repo) as r: \n      if isinstance(name, bytes): \n         names = [name] \n      elif isinstance(name, list): \n         names = name \n      else: \n         raise TypeError(('Unexpected   tag   name   type   %r' % name)) \n      for name in names: \n         del r.refs[('refs/tags/' + name)]",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _check_image_id(image_id): \n    if (image_id and (len(image_id) > models.Image.id.property.columns[0].type.length)): \n      raise exception.ImageNotFound()",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_fast_wait(): \n    gevent.sleep(300)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup(**kw): \n    return core.setup(**get_setup_args(**kw))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _render_blog_supernav(entry): \n    return render_to_string('blogs/supernav.html', {'entry': entry})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def md5sum(obj): \n    return md5sum_str(obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def descriptor_global_handler_url(block, handler_name, suffix='', query='', thirdparty=False): \n    raise NotImplementedError('Applications   must   monkey-patch   this   function   before   using   handler_url   for   studio_view')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def auto_threaded(interface, reactor, sync, threadpool): \n    return interface_decorator('auto_threaded', interface, _threaded_method, sync, reactor, threadpool)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def source_key(resp): \n    return float((resp.getheader('x-put-timestamp') or resp.getheader('x-timestamp') or 0))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def addNegativesPositives(derivation, negatives, paths, positives): \n    for path in paths: \n      endMultiplier = None \n      normal = euclidean.getNormalByPath(path) \n      if (normal.dot(derivation.normal) < 0.0): \n         endMultiplier = 1.000001 \n      loopListsByPath = getLoopListsByPath(derivation, endMultiplier, path) \n      geometryOutput = triangle_mesh.getPillarsOutput(loopListsByPath) \n      if (endMultiplier == None): \n         positives.append(geometryOutput) \n      else: \n         negatives.append(geometryOutput)",
        "line_count": 11,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _region(region): \n    return '   --region   {r}'.format(r=region)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_none(**kwargs): \n    return dict(((k, v) for (k, v) in six.iteritems(kwargs) if (v is not None)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def groups(username, *args, **kwargs): \n    return get_group_list(username)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _np_stack_common(context, builder, sig, args, axis): \n    return _np_stack(context, builder, list(sig.args[0]), cgutils.unpack_tuple(builder, args[0]), sig.return_type, axis)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def retry_on_signal(function): \n    while True: \n      try: \n         return function() \n      except EnvironmentError as e: \n         if (e.errno != errno.EINTR): \n            raise",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def is_exe(filepath): \n    return (os.path.exists(filepath) and os.access(filepath, os.X_OK))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def capacity_assessment_data(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getAnalyzePluginsDirectoryPath(subName=''): \n    return getJoinedPath(getSkeinforgePluginsPath('analyze_plugins'), subName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ns(tag, namespace=NAMESPACES['phy']): \n    return ('{%s}%s' % (namespace, tag))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MakeRenewedExpiredResponse(): \n    return kVerifyResponseRenewedExpired",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ljust(s, width, *args): \n    return s.ljust(width, *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_nodes(node, klass): \n    for child in node.children: \n      if isinstance(child, klass): \n         (yield child) \n      for grandchild in get_nodes(child, klass): \n         (yield grandchild)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def se_cov(cov): \n    return np.sqrt(np.diag(cov))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def version_date(): \n    return version.DATE.split('   ')[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cache_subnet_group_exists(name, region=None, key=None, keyid=None, profile=None): \n    return bool(describe_cache_subnet_groups(name=name, region=region, key=key, keyid=keyid, profile=profile))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def regularize_network_params(layer, penalty, tags={'regularizable': True}, **kwargs): \n    return apply_penalty(get_all_params(layer, **tags), penalty, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trigger_server_restart(**kwargs): \n    mark_urlconf_as_changed()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def webattack_vector(attack_vector): \n    return {'1': 'java', '2': 'browser', '3': 'harvester', '4': 'tabnapping', '5': 'webjacking', '6': 'multiattack', '7': 'fsattack'}.get(attack_vector, 'ERROR')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def patch_signal(): \n    patch_module('signal')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_has_cache_stats(): \n    return (get_memcached_hosts() is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def restart_with_reloader(): \n    while 1: \n      _log('info', '   *   Restarting   with   reloader') \n      args = ([sys.executable] + sys.argv) \n      new_environ = os.environ.copy() \n      new_environ['WERKZEUG_RUN_MAIN'] = 'true' \n      if (os.name == 'nt'): \n         for (key, value) in new_environ.iteritems(): \n            if isinstance(value, unicode): \n               new_environ[key] = value.encode('iso-8859-1') \n      exit_code = subprocess.call(args, env=new_environ) \n      if (exit_code != 3): \n         return exit_code",
        "line_count": 12,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def get_request_ip(request): \n    return (request.META.get('HTTP_X_FORWARDED_FOR') or request.META.get('REMOTE_ADDR') or request.META.get('HTTP_X_REAL_IP'))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def swapon(device): \n    if (not ismounted(device)): \n      run_as_root(('swapon   %(device)s' % locals()))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def MakeDestinationKey(directory, filename): \n    return utils.SmartStr(utils.JoinPath(directory, filename)).lstrip('/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snowflake_time(id): \n    return datetime.datetime.utcfromtimestamp((((int(id) >> 22) + DISCORD_EPOCH) / 1000))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_python_script(fname): \n    return (osp.isfile(fname) and fname.endswith(('.py', '.pyw', '.ipy')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_file_contents(filepath, mode='r'): \n    with open(filepath, mode) as f: \n      return f.read().decode('utf-8')",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def modifiers_dict(modifiers): \n    return {mod[4:].lower(): ((modifiers & getattr(sys.modules[__name__], mod)) > 0) for mod in ['MOD_SHIFT', 'MOD_CTRL', 'MOD_ALT', 'MOD_CAPSLOCK', 'MOD_NUMLOCK', 'MOD_WINDOWS', 'MOD_COMMAND', 'MOD_OPTION', 'MOD_SCROLLLOCK']}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def RegisterRealUrlHandler(func): \n    _realurl_handlers.append(func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _url(path=''): \n    return (HTTP_BASE_URL + path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cuda_error(): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getWord(form, pos='noun'): \n    return _dictionaryFor(pos).getWord(form)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_input(line_builder_array): \n    assert (len(line_builder_array.comp_glyphs) == 2)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _depth_limited_walk(top, max_depth=None): \n    for (root, dirs, files) in os.walk(top): \n      if (max_depth is not None): \n         rel_depth = (root.count(os.sep) - top.count(os.sep)) \n         if (rel_depth >= max_depth): \n            del dirs[:] \n      (yield (str(root), list(dirs), list(files)))",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_names_from_csr(csr, typ=OpenSSL.crypto.FILETYPE_PEM): \n    return _get_names_from_cert_or_req(csr, OpenSSL.crypto.load_certificate_request, typ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RemovePrefix(a, prefix): \n    return (a[len(prefix):] if a.startswith(prefix) else a)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def softplus(x): \n    return tf.nn.softplus(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show_in_pager(self, data, start, screen_lines): \n    raise TryNext",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disabled(name): \n    return _get_svc('/etc/rc.d/{0}'.format(name), 'NO')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def logAttrib(obj, log, attrib, value=None): \n    if (log or ((log is None) and obj.autoLog)): \n      if (value is None): \n         value = getattr(obj, attrib) \n      message = ('%s:   %s   =   %s' % (obj.name, attrib, value.__repr__())) \n      try: \n         obj.win.logOnFlip(message, level=logging.EXP, obj=obj) \n      except AttributeError: \n         logging.log(message, level=logging.EXP, obj=obj)",
        "line_count": 8,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def exp_server_version(): \n    return odoo.release.version",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shutdown_hook(self): \n    return",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_has_volumes_filter(attached_or_with_snapshots=False): \n    return IMPL.group_has_volumes_filter(attached_or_with_snapshots)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def minify(pelican): \n    for (dirpath, _, filenames) in os.walk(pelican.settings['OUTPUT_PATH']): \n      for name in filenames: \n         if (os.path.splitext(name)[1] in ('.css', '.js')): \n            filepath = os.path.join(dirpath, name) \n            logger.info('minifiy   %s', filepath) \n            verbose = ('-v' if SHOW_OUTPUT else '') \n            call('yuicompressor   {}   --charset   utf-8   {}   -o   {}'.format(verbose, filepath, filepath), shell=True)",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def transmit(msg): \n    lane_stack.transmit(msg, remote_yard.uid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_total_users(): \n    return frappe.db.sql(u'select   sum(simultaneous_sessions)   from   `tabUser`\\n DCTB  DCTB where   enabled=1   and   user_type=\"System   User\"\\n DCTB  DCTB and   name   not   in   ({})'.format(u',   '.join(([u'%s'] * len(STANDARD_USERS)))), STANDARD_USERS)[0][0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def WILLR(barDs, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_hlc(barDs, count, talib.WILLR, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reset_token_store(): \n    auth.reset_default_token_store()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def retweets(string): \n    return [b for (a, b) in TWITTER_RETWEET.findall(string)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _ensure_requested_network_ordering(accessor, unordered, preferred): \n    if preferred: \n      unordered.sort(key=(lambda i: preferred.index(accessor(i))))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def track(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resource_path_tuple(resource, *elements): \n    return tuple(_resource_path_list(resource, *elements))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decode(input, output): \n    while True: \n      line = input.readline() \n      if (not line): \n         break \n      s = binascii.a2b_base64(line) \n      output.write(s)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def create_job(name, priority, control_file, control_type, hosts=[], profiles=[], meta_hosts=[], meta_host_profiles=[], one_time_hosts=[], atomic_group_name=None, synch_count=None, is_template=False, timeout=None, max_runtime_hrs=None, run_verify=True, email_list='', dependencies=(), reboot_before=None, reboot_after=None, parse_failed_repair=None, hostless=False, keyvals=None, drone_set=None, reserve_hosts=False): \n    return rpc_utils.create_job_common(**rpc_utils.get_create_job_common_args(locals()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_user_permission_codename(perm): \n    return get_user_permission_full_codename(perm).split(u'.')[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def logarithmic(): \n    return [(dimensionless_unscaled, function_units.dex, np.log10, (lambda x: (10.0 ** x)))]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text, oozebaneRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), oozebaneRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fsjoin(*args): \n    return encode(os.path.join(*args))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def id_chooser(query, ident): \n    return ['north_america', 'asia', 'europe', 'south_america']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def require_admin_context(ctxt): \n    if (not ctxt.is_admin): \n      raise exception.AdminRequired()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def requires_parallel(task): \n    return ((state.env.parallel and (not getattr(task, 'serial', False))) or getattr(task, 'parallel', False))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _removeBackrefs(senderkey): \n    for receiver_list in connections.pop(senderkey, {}).values(): \n      for receiver in receiver_list: \n         _killBackref(receiver, senderkey)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def __virtual__(): \n    return ((not salt.utils.is_windows()) and (__grains__.get('kernel') == 'Linux'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _is_statement_unnamed(statement): \n    return (statement in ('log', 'channel', 'junction', 'options'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timestamp(date): \n    return (date - datetime(1970, 1, 1)).total_seconds()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hours(h): \n    return (h / HOURS_PER_DAY)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def only_active_assets(reference_date_value, assets): \n    return [a for a in assets if was_active(reference_date_value, a)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def decov(h): \n    return DeCov()(h)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _unchanged(name, msg): \n    return {'name': name, 'result': True, 'comment': msg, 'changes': {}}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def date_validator(optdict, name, value): \n    return optik_ext.check_date(None, name, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ATR(barDs, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_hlc(barDs, count, talib.ATR, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Normal(name, mean, std): \n    return rv(name, NormalDistribution, (mean, std))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _patch_object(target, attribute, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs): \n    return _patch((lambda : target), attribute, new, spec, create, spec_set, autospec, new_callable, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def virtual_interface_get_all(context): \n    return IMPL.virtual_interface_get_all(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_autocommit(using=None): \n    return get_connection(using).get_autocommit()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def loads(string, encoding=None): \n    return pop(string, encoding)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disabled(name): \n    return (name in get_disabled())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def version(*names, **kwargs): \n    return (__salt__['pkg_resource.version'](*names, **kwargs) or {})",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def purge(name=None, pkgs=None, **kwargs): \n    return remove(name=name, pkgs=pkgs, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return fabmetheus_interpret.InterpretRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def install_cache(cache_name='cache', backend='sqlite', expire_after=None, allowable_codes=(200,), allowable_methods=('GET',), session_factory=CachedSession, **backend_options): \n    _patch_session_factory((lambda : session_factory(cache_name=cache_name, backend=backend, expire_after=expire_after, allowable_codes=allowable_codes, allowable_methods=allowable_methods, **backend_options)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text, reversalRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), reversalRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def type_from_value(value): \n    return _type_mapping[type(value)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shutdown(): \n    log.debug('ESXi   proxy   shutdown()   called...')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def draw_if_interactive(): \n    if matplotlib.is_interactive(): \n      figManager = Gcf.get_active() \n      if (figManager is not None): \n         figManager.canvas.draw()",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def checkDeprecatedOptions(args): \n    for _ in args: \n      if (_ in DEPRECATED_OPTIONS): \n         errMsg = (\"switch/option   '%s'   is   deprecated\" % _) \n         if DEPRECATED_OPTIONS[_]: \n            errMsg += ('   (hint:   %s)' % DEPRECATED_OPTIONS[_]) \n         raise SqlmapSyntaxException(errMsg)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def ge(a, b): \n    return (a >= b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_project(project, file_path): \n    json.dump(project, codecs.open(file_path, u'w', u'utf8'), indent=4)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _bcsys(dev, name, value=None, log_lvl=None, log_msg=None): \n    return _sysfs_attr([_bcpath(dev), name], value, log_lvl, log_msg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def recursive_keypairs(d, separator=':'): \n    for (name, value) in sorted(six.iteritems(d)): \n      if isinstance(value, dict): \n         for (subname, subvalue) in recursive_keypairs(value, separator): \n            (yield (('%s%s%s' % (name, separator, subname)), subvalue)) \n      elif isinstance(value, (tuple, list)): \n         (yield (name, decode_unicode(value))) \n      else: \n         (yield (name, value))",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def sign(x): \n    return tf.sign(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init_handler(resource, event, trigger, agent=None): \n    if agent: \n      LinuxBridgeTrunkDriver()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def authorize_quota_class_context(context, class_name): \n    if is_user_context(context): \n      if (not context.quota_class): \n         raise exception.NotAuthorized() \n      elif (context.quota_class != class_name): \n         raise exception.NotAuthorized()",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def notify_event_callbacks(service, resource_type, operation, payload): \n    if (operation in _SUBSCRIBERS): \n      if (resource_type in _SUBSCRIBERS[operation]): \n         for cb in _SUBSCRIBERS[operation][resource_type]: \n            subst_dict = {'cb_name': cb.__name__, 'service': service, 'resource_type': resource_type, 'operation': operation, 'payload': payload} \n            LOG.debug('Invoking   callback   %(cb_name)s   for   event   %(service)s   %(resource_type)s   %(operation)s   for   %(payload)s', subst_dict) \n            cb(service, resource_type, operation, payload)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_keystone_session(**config): \n    return Session(auth=_openstack_auth_from_config(**config), verify=_openstack_verify_from_config(**config))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return HomeRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MakeControlInstance(controlClass, name=None): \n    return MakeControlClass(controlClass, name)()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=TemplateToolkitLexer(), buf_class=TemplateToolkitBuffer, import_handler_class=None, cile_driver_class=TemplateToolkitCILEDriver, is_cpln_lang=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_direct_declarator_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_label_patch(result): \n    return make_instancemethod(TextTestResult.printLabel, result)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def EvalHypergeomPmf(k, N, K, n): \n    return stats.hypergeom.pmf(k, N, K, n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_ovf_descriptor(ovf_path): \n    if path.exists(ovf_path): \n      with open(ovf_path, 'r') as f: \n         try: \n            ovfd = f.read() \n            f.close() \n            return ovfd \n         except: \n            print ('Could   not   read   file:   %s' % ovf_path) \n            exit(1)",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def register_common_cli_options(): \n    cfg.CONF.register_cli_opt(cfg.BoolOpt('verbose', short='v', default=False))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ProfileFeedFromString(xml_string): \n    return atom.CreateClassFromXMLString(ProfileFeed, xml_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def not_allowed(subset=None, show_ipv4=False): \n    return list_not_state(subset=subset, show_ipv4=show_ipv4, state='allowed')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uifft2(inarray): \n    return uifftn(inarray, 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get(request, post=None): \n    return opener.open(request, post).read()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_series(knowledge_dates, earning_dates): \n    return pd.Series(index=pd.to_datetime(knowledge_dates), data=pd.to_datetime(earning_dates))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CreateRPC(): \n    return RPC()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_network_segment(context, segment_id): \n    with context.session.begin(subtransactions=True): \n      context.session.query(segments_model.NetworkSegment).filter_by(id=segment_id).delete()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def import_json(): \n    for fast_json in ('ujson', 'yajl', 'json'): \n      try: \n         mod = __import__(fast_json) \n         log.trace('loaded   {0}   json   lib'.format(fast_json)) \n         return mod \n      except ImportError: \n         continue",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def detect(source): \n    return source.replace('   ', '').startswith('eval(function(p,a,c,k,e,r')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def merge_dict_from_to(d1, d2): \n    for (k, v) in list(d1.items()): \n      if (k in d2): \n         if isinstance(v, type(d2[k])): \n            if isinstance(v, dict): \n               merge_dict_from_to(d1[k], d2[k]) \n            elif isinstance(v, list): \n               d2[k].extend(copy.deepcopy(v)) \n            elif isinstance(v, (basestring, bool, int, float, type(None))): \n               pass \n            else: \n               raise Exception((u'Unknown   type:   %s   value:   %s   in   dictionary' % (type(v), repr(v)))) \n         elif (isinstance(v, (basestring, bool, int, float, type(None))) and isinstance(d2[k], (basestring, bool, int, float, type(None)))): \n            pass \n         else: \n            raise MergeException((u'Merging   key   %s   failed,   conflicting   datatypes   %r   vs.   %r.' % (k, type(v).__name__, type(d2[k]).__name__))) \n      else: \n         d2[k] = copy.deepcopy(v)",
        "line_count": 17,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def _determine_device_class(): \n    if (__salt__['grains.get']('kernel') == 'Linux'): \n      return '/Server/Linux'",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def showroom_download(url, output_dir='.', merge=False, info_only=False, **kwargs): \n    if re.match('(\\\\w+)://www.showroom-live.com/([-\\\\w]+)', url): \n      room_url_key = match1(url, '\\\\w+://www.showroom-live.com/([-\\\\w]+)') \n      room_id = showroom_get_roomid_by_room_url_key(room_url_key) \n      showroom_download_by_room_id(room_id, output_dir, merge, info_only)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_token_prefix(url): \n    return urlparse(url).netloc",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, gcodeText, repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, gcodeText), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetSi(): \n    return _si",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def usecase3(x, N): \n    for k in range(N): \n      print(x.f1[k], x.s1[k], x.f2[k])",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def open(filename, mode='rb', compresslevel=9): \n    return GzipFile(filename, mode, compresslevel)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def indent(string, times=1): \n    return '\\n'.join(((('   ' * (4 * times)) + line) for line in string.splitlines()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def convert_comments(text): \n    return re.sub('(?<=\\\\n)\\\\s*#[^#]', '##', text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def imread_collection(load_pattern, conserve_memory=True, plugin=None, **plugin_args): \n    return call_plugin('imread_collection', load_pattern, conserve_memory, plugin=plugin, **plugin_args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def t_ignore(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _randrat(): \n    return (S((randrange(25) + 10)) / 50)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_rgb_like(image): \n    return ((image.ndim == 3) and (image.shape[2] in (3, 4)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def path_for_import(name): \n    return os.path.dirname(os.path.abspath(import_module(name).__file__))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plugin(): \n    return SelectBracket",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_commit_message_for_suggestion(suggestion_author_username, commit_message): \n    return ('%s   %s:   %s' % (feconf.COMMIT_MESSAGE_ACCEPTED_SUGGESTION_PREFIX, suggestion_author_username, commit_message))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pid_exists(pid): \n    return _psposix.pid_exists(pid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_config_var(name): \n    return get_config_vars().get(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def srv_file(package, type_): \n    return roslib.packages.resource_file(package, 'srv', (type_ + EXT))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_article_tabs(): \n    return _article_tabs",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assignment(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def envs(): \n    return [__opts__['minionfs_env']]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_search_index(): \n    search_services.clear_index(SEARCH_INDEX_COLLECTIONS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def func1(a, b): \n    return (a, b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_and_close(file_like, block_size): \n    while 1: \n      try: \n         block = file_like.read(block_size) \n         if block: \n            (yield block) \n         else: \n            raise StopIteration \n      except StopIteration as si: \n         file_like.close() \n         return",
        "line_count": 10,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def test_array___iadd__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _blockdevice_volume_from_datasetid(volumes, dataset_id): \n    for volume in volumes: \n      if (volume.dataset_id == dataset_id): \n         return volume",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def compose_diffs(iterable_of_diffs): \n    return Diff(changes=reduce((lambda x, y: x.extend(y.changes)), iterable_of_diffs, pvector().evolver()).persistent())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def contains_inf(arr): \n    return (np.isinf(np.nanmax(arr)) or np.isinf(np.nanmin(arr)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def count_from_0(index, collection): \n    return index",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unspew(): \n    sys.settrace(None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in6_isuladdr(str): \n    return in6_isincluded(str, 'fc00::', 7)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rstrip(s): \n    return s.rstrip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def min_maximal_matching(G): \n    return nx.maximal_matching(G)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_target_unit_index(writer, unit): \n    writer.update_document(pk=unit.pk, target=force_text(unit.target), comment=force_text(unit.comment))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rewrite_asserts(mod, module_path=None, config=None): \n    AssertionRewriter(module_path, config).run(mod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tamper(payload, **kwargs): \n    return (base64.b64encode(payload.encode(UNICODE_ENCODING)) if payload else payload)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def concat_tuples(*tuples): \n    return tuple(chain(*tuples))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def temp_ampersand_fixer(s): \n    return s.replace('&amp;', '&')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _item_to_entity(iterator, entity_pb): \n    return helpers.entity_from_protobuf(entity_pb)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def NamesOfDeclaredKeyFlags(): \n    return (NamesOfDefinedFlags() + DECLARED_KEY_FLAGS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw): \n    return loads(fp.read(), encoding=encoding, cls=cls, object_hook=object_hook, parse_float=parse_float, parse_int=parse_int, parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ValidateMSVSSettings(settings, stderr=sys.stderr): \n    _ValidateSettings(_msvs_validators, settings, stderr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_timestamp(): \n    return unicode(int(time.time()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rand_text(length, bad='', chars=allchars): \n    return rand_base(length, bad, chars)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def EI_gaussian_empirical(mean, var, thresh, rng, N): \n    return EI_empirical(((rng.randn(N) * np.sqrt(var)) + mean), thresh)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show_attrs(directory): \n    for f in os.listdir(directory): \n      if _is_audio(f): \n         path = os.path.join(directory, f) \n         _show_one(path)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def followers_of(username, number=(-1), etag=None): \n    return (gh.followers_of(username, number, etag) if username else [])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def update_parent_field(f, new): \n    if (f[u'fieldtype'] == u'Table'): \n      frappe.db.begin() \n      frappe.db.sql((u'update   `tab%s`   set   parentfield=%s   where   parentfield=%s' % (f[u'options'], u'%s', u'%s')), (new, f[u'fieldname'])) \n      frappe.db.commit()",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _find_bad_optimizations0(order, reasons, r_vals): \n    for (i, node) in enumerate(order): \n      for new_r in node.outputs: \n         for (reason, r, old_graph_str, new_graph_str) in reasons[new_r]: \n            new_r_val = r_vals[new_r] \n            r_val = r_vals[r] \n            assert (r.type == new_r.type) \n            if hasattr(new_r.tag, 'values_eq_approx'): \n               check = new_r.tag.values_eq_approx(r_val, new_r_val) \n            elif hasattr(new_r, 'values_eq_approx'): \n               check = new_r.values_eq_approx(r_val, new_r_val) \n            else: \n               check = r.type.values_eq_approx(r_val, new_r_val) \n            if (not check): \n               raise BadOptimization(old_r=r, new_r=new_r, old_r_val=r_val, new_r_val=new_r_val, reason=reason, old_graph=old_graph_str, new_graph=new_graph_str)",
        "line_count": 14,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def watcher(): \n    while True: \n      _process_message()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def pset_field(item_type, optional=False, initial=()): \n    return _sequence_field(CheckedPSet, 'PSet', item_type, optional, initial)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sm_volume_get(context, volume_id): \n    return IMPL.sm_volume_get(context, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def educate_dashes_oldschool(s): \n    return s.replace('---', '&#8212;').replace('--', '&#8211;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return LineDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return TeardropDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return LogModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def registered_tasks(request): \n    return JsonResponse({'regular': tasks.regular().keys(), 'periodic': tasks.periodic().keys()})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_song(d): \n    return is_gm_id(d[u'id'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_cov(fname, cov): \n    cov.save(fname)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten(seq): \n    return [x for sub in seq for x in sub]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def allocate_pixels_buffer(width, height): \n    return (((_c_uint * width) * height) * 4)()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processXMLElement(xmlElement): \n    xmlElement.parent.object.vertexes += getArcPath(xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_saved_post_hooks(): \n    for cmd in post_hook.eventually: \n      logger.info('Running   post-hook   command:   %s', cmd) \n      _run_hook(cmd)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def animal_pre_save_check(signal, sender, instance, **kwargs): \n    pre_save_checks.append((('Count   =   %s   (%s)' % (instance.count, type(instance.count))), ('Weight   =   %s   (%s)' % (instance.weight, type(instance.weight)))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_pointer_4(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log_level(level_string): \n    return getattr(logging, level_string.upper())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _should_profile_development_default(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _process_worker(call_queue, result_queue): \n    while True: \n      call_item = call_queue.get(block=True) \n      if (call_item is None): \n         result_queue.put(None) \n         return \n      try: \n         r = call_item.fn(*call_item.args, **call_item.kwargs) \n      except BaseException: \n         e = sys.exc_info()[1] \n         result_queue.put(_ResultItem(call_item.work_id, exception=e)) \n      else: \n         result_queue.put(_ResultItem(call_item.work_id, result=r))",
        "line_count": 12,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def interface_details(attrs=None, where=None): \n    return _osquery_cmd(table='interface_details', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getTypeURIs(service_element): \n    return [type_element.text for type_element in service_element.findall(type_tag)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def safejoin(*args): \n    return safepath(os.path.join(*args))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encrypt(message, key): \n    return chopstring(message, key['e'], key['n'], encrypt_int)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getTransformedByList(floatList, point): \n    return ((((floatList[0] * point.x) + (floatList[1] * point.y)) + (floatList[2] * point.z)) + floatList[3])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def activelanepermute_wavewidth(src, laneid, identity, useidentity): \n    raise _stub_error",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apply_discount(line, discount, quantity): \n    line.discount(discount, quantity, incl_tax=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def home_directory(name): \n    with settings(hide('running', 'stdout')): \n      return run(('echo   ~' + name))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_removed(exp): \n    return isinstance(exp, Removed)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _create_rpc(deadline): \n    return apiproxy_stub_map.UserRPC('file', deadline)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find(func, iterable): \n    return next(iter(filter(func, iterable)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fcode(expr, assign_to=None, **settings): \n    return FCodePrinter(settings).doprint(expr, assign_to)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def N_equals(a, b): \n    return comp(a.n(), b.n(), 1e-06)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _item_to_sink(iterator, resource): \n    return Sink.from_api_repr(resource, iterator.client)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _can_have_arbitrary_unit(value): \n    return np.all(np.logical_or(np.equal(value, 0.0), (~ np.isfinite(value))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_multi_async(keys, **ctx_options): \n    return [key.get_async(**ctx_options) for key in keys]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def __virtual__(): \n    return ('lvs_server' if ('lvs.get_rules' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def instance_get_active_by_window_joined(context, begin, end=None, project_id=None, host=None, columns_to_join=None, limit=None, marker=None): \n    return IMPL.instance_get_active_by_window_joined(context, begin, end, project_id, host, columns_to_join=columns_to_join, limit=limit, marker=marker)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jsonize(data): \n    return json.dumps(data, sort_keys=False, indent=4)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getFloatGivenBinary(byteIndex, stlData): \n    return unpack('f', stlData[byteIndex:(byteIndex + 4)])[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_type(vendor, field): \n    return ((vendor << 7) | field)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _handle_exception(): \n    if sys.stderr: \n      einfo = sys.exc_info() \n      try: \n         traceback.print_exception(einfo[0], einfo[1], einfo[2], None, sys.stderr) \n      except IOError: \n         pass \n      finally: \n         del einfo",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _walk_subclasses(klass): \n    for sub in klass.__subclasses__(): \n      (yield sub) \n      for subsub in _walk_subclasses(sub): \n         (yield subsub)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def rational_polynomial(data): \n    return (((30.0 * (data[0] - 1)) * (data[2] - 1)) / ((data[1] ** 2) * (data[0] - 10)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ClearAllButEncodingsModules(module_dict): \n    for module_name in module_dict.keys(): \n      if ((not IsEncodingsModule(module_name)) and (module_name != 'sys')): \n         del module_dict[module_name]",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def next(iter): \n    return iter.next()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _mean(values): \n    return (sum(values) / float(max(len(values), 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_number(p): \n    p[0] = eval(p[1])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bytestobits(bytesource): \n    for b in bytesource: \n      value = unpackbyte(b) \n      for bitplusone in range(8, 0, (-1)): \n         bitindex = (bitplusone - 1) \n         nextbit = (1 & (value >> bitindex)) \n         (yield nextbit)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def OpenFileInPreviewWindow(filename): \n    vim.command((u'silent!   pedit!   ' + filename))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _VersionList(release): \n    return [int(part) for part in str(release).split('.')]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _pad_length(stringlen): \n    return ((BLOCK_SIZE - (stringlen % BLOCK_SIZE)) % BLOCK_SIZE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeAtom(line): \n    return filter((lambda x: (not (x in map(chr, (range(33) + [34, 39, 92]))))), line)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_annotation(var, cls): \n    for annotation in getattr(var.tag, 'annotations', []): \n      if isinstance(annotation, cls): \n         return annotation",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def add(x, y): \n    return (x + y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _onenormest_matrix_power(A, p, t=2, itmax=5, compute_v=False, compute_w=False, structure=None): \n    return scipy.sparse.linalg.onenormest(MatrixPowerOperator(A, p, structure=structure))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def raise_error(error_code, error_detail=''): \n    raise apiproxy_errors.ApplicationError(error_code, error_detail=error_detail)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def BOP(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.BOP)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vehicle_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def positive(s, threshold=0.1, **kwargs): \n    return (polarity(s, **kwargs) >= threshold)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iirpeak(w0, Q): \n    return _design_notch_peak_filter(w0, Q, 'peak')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def studio_help_links(page): \n    return page.q(css='.support   .list-actions   a').results",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_bootdev(**kwargs): \n    with _IpmiCommand(**kwargs) as s: \n      return s.get_bootdev()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _gpi11iterator(handle): \n    for inline in handle: \n      if (inline[0] == '!'): \n         continue \n      inrec = inline.rstrip('\\n').split(' DCTB ') \n      if (len(inrec) == 1): \n         continue \n      inrec[2] = inrec[2].split('|') \n      inrec[3] = inrec[3].split('|') \n      inrec[7] = inrec[7].split('|') \n      inrec[8] = inrec[8].split('|') \n      (yield dict(zip(GPI11FIELDS, inrec)))",
        "line_count": 11,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def monitor_get_global(sock, name): \n    return communicate(sock, ('__get_global__(\"%s\")' % name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def effect_mandelbrot(size, extent, quality): \n    return Image()._new(core.effect_mandelbrot(size, extent, quality))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _user_cert_subject(user_id, project_id): \n    return (CONF.crypto.user_cert_subject % (project_id, user_id, utils.isotime()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_content(project_tree, f): \n    return FileContent(f.path, project_tree.content(f.path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    elementNode.parentNode.xmlObject.vertexes += getQuadraticPath(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getSidesBasedOnPrecision(elementNode, radius): \n    return int(math.ceil((math.sqrt(((0.5 * radius) / setting.getPrecision(elementNode))) * math.pi)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or 'vultr'), ('api_key',))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _read_dir_entry_struct(fid, tag, shape, rlims): \n    return [_read_tag_header(fid) for _ in range(((tag.size // 16) - 1))]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def isclass(obj): \n    return isinstance(obj, CLASS_TYPES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_simple_type(value): \n    return (isinstance(value, str) or isinstance(value, int) or isinstance(value, float) or isinstance(value, bool))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_short_name(fq_name): \n    return fq_name.split('.')[(-1):][0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MAXINDEX(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.MAXINDEX, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def event_type(): \n    return s3_rest_controller('event', 'event_type')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_boolean_param(request, param_name): \n    return (request.POST.get(param_name, False) in ['true', 'True', True])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subn(pattern, repl, string, count=0): \n    return _compile(pattern, 0).subn(repl, string, count)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decrypt_int(cyphertext, dkey, n): \n    return encrypt_int(cyphertext, dkey, n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def P_(x, y): \n    return (x, y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete(br=None): \n    return _os_dispatch('brdel', br)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render_to_link_list(link_list): \n    return render_to_js_vardef('tinyMCELinkList', link_list)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_localized_events(generator): \n    if ('i18n_subsites' in generator.settings['PLUGINS']): \n      if (not os.path.exists(generator.settings['OUTPUT_PATH'])): \n         os.makedirs(generator.settings['OUTPUT_PATH']) \n      for e in events: \n         if ('lang' in e.metadata): \n            localized_events[e.metadata['lang']].append(e) \n         else: \n            log.debug(('event   %s   contains   no   lang   attribute' % (e.metadata['title'],)))",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def purge_deleted(): \n    db_api.purge_deleted(CONF.command.age, CONF.command.granularity, CONF.command.project_id, CONF.command.batch_size)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_tool_load_error(obj): \n    return (obj is TOOL_LOAD_ERROR)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MINUS_DI(barDs, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_hlc(barDs, count, talib.MINUS_DI, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def config_option_update(context, data_dict): \n    return {'success': False}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def singularize(word, pos=NOUN, custom={}): \n    return word.rstrip('s')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO___hash__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _resolve_id(val): \n    return (val if isinstance(val, six.string_types) else val.id)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _fail_neg(values, errmsg='negative   value'): \n    for x in values: \n      if (x < 0): \n         raise StatisticsError(errmsg) \n      (yield x)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getInterval(): \n    return 1",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def runtime_hooks(): \n    return [join(curdir, 'pyi_rth_kivy.py')]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_default_page_content_type(): \n    return ContentType.objects.get_for_model(Page)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def utils(opts, whitelist=None, context=None): \n    return LazyLoader(_module_dirs(opts, 'utils', ext_type_dirs='utils_dirs'), opts, tag='utils', whitelist=whitelist, pack={'__context__': context})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ipv4(value, options=None): \n    return _ipv_filter(value, 4, options=options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def UWRatio(s1, s2): \n    return WRatio(s1, s2, force_ascii=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def infinibox_argument_spec(): \n    return dict(system=dict(required=True), user=dict(), password=dict(no_log=True))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _generate_random_string(length=6): \n    return ''.join(random.sample(string.ascii_lowercase, length))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'jitter', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mpf2float(x): \n    return float(mpmath.nstr(x, 17, min_fixed=0, max_fixed=0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _encode_decimal128(name, value, dummy0, dummy1): \n    return (('\\x13' + name) + value.bid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Product(sequence): \n    return reduce((lambda x, y: (x * y)), sequence)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_stderr(name, cmd, no_start=False, preserve_state=True, stdin=None, python_shell=True, output_loglevel='debug', use_vt=False, ignore_retcode=False, keep_env=None): \n    return _run(name, cmd, output='stderr', no_start=no_start, preserve_state=preserve_state, stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, use_vt=use_vt, ignore_retcode=ignore_retcode, keep_env=keep_env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def zeros_like(x, dtype=None, name=None): \n    return tf.zeros_like(x, dtype=dtype, name=name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def returnValue(val): \n    raise _DefGen_Return(val)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def points_at_corner_index(contour, index): \n    return [contour[(i + 1)] for i in index]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def bootstrap_sample(data): \n    return [random.choice(data) for _ in data]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def context(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___iter__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _GetMSBuildToolSettings(msbuild_settings, tool): \n    return msbuild_settings.setdefault(tool.msbuild_name, {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def superuser(*args, **kwargs): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def canvass(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def count(l): \n    return reduce((lambda x, y: (x + 1)), l)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_vs(vs): \n    return V(vs).version",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def split(pattern, string, maxsplit=0): \n    return _compile(pattern, 0).split(string, maxsplit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getDescendingAreaOrientedLoops(allPoints, corners, importRadius): \n    return getOrientedLoops(getDescendingAreaLoops(allPoints, corners, importRadius))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def proxied_site(server_name, enabled=True, **kwargs): \n    site(server_name, template_contents=PROXIED_SITE_TEMPLATE, enabled=enabled, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ssl_protocols(): \n    return _SSL_PROTOCOLS.keys()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def impl_ret_new_ref(ctx, builder, retty, ret): \n    return ret",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def organization_update(context, data_dict): \n    return _group_or_org_update(context, data_dict, is_org=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_info_dict(oldInfoDict, newInfoDict): \n    for (k, v) in newInfoDict.items(): \n      if any((isinstance(v, t) for t in (tuple, list, dict))): \n         pass \n      elif ((oldInfoDict.get(k) is None) or (v not in (None, '', '0', 0))): \n         oldInfoDict[k] = v",
        "line_count": 5,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def install_python(name, version=None, install_args=None, override_args=False): \n    return install(name, version=version, source='python', install_args=install_args, override_args=override_args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sigmoid(x): \n    return tf.nn.sigmoid(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cheby1(N, rp, Wn, btype='low', analog=False, output='ba'): \n    return iirfilter(N, Wn, rp=rp, btype=btype, analog=analog, output=output, ftype='cheby1')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def db_null_instance_uuid_scan(delete=False): \n    return IMPL.db_null_instance_uuid_scan(delete=delete)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_exe(base, target_name): \n    return cx.Executable('qutebrowser/__main__.py', base=base, targetName=target_name, shortcutName='qutebrowser', shortcutDir='ProgramMenuFolder', icon=os.path.join(BASEDIR, 'icons', 'qutebrowser.ico'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def charged_attacks(): \n    return ChargedAttacks",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log_info(**kwargs): \n    Message.log(message_type=_compute_message_type(stack()[1]), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_contract_head_file_path(config): \n    return os.path.join(_get_root_versions_dir(config), CONTRACT_HEAD_FILENAME)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def count_seqs(fasta_filepath, parser=parse_fasta): \n    return count_seqs_from_file(open(fasta_filepath, 'U'), parser=parser)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def huge_deployment(): \n    return _huge(Deployment(), Node(hostname=u'192.0.2.31'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_buffer(remote_conn): \n    if remote_conn.recv_ready(): \n      return remote_conn.recv(MAX_BUFFER)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def replaceHTMLEntity(t): \n    return _htmlEntityMap.get(t.entity)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init_model(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_config_var(name): \n    return get_config_vars().get(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def started(): \n    if (not is_started()): \n      start('shorewall')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_one_liner(script): \n    return ('python   -c   \"%s\"' % script.strip().replace('\\n', ';'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_master_dirs(saltenv='base', prefix=''): \n    return _client().dir_list(saltenv, prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_file_extension(fileName): \n    return os.path.splitext(fileName.lower())[(-1)][1:]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def task(): \n    return s3db.project_task_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_above_limit(count): \n    return ((count is not None) and (count >= UNLIMITED))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def target_list_option(s): \n    return _convert(s, (list, tuple))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def path(dev): \n    return info(dev).get('P', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'skirt', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log_writer(): \n    while True: \n      mpstate.logfile_raw.write(mpstate.logqueue_raw.get()) \n      while (not mpstate.logqueue_raw.empty()): \n         mpstate.logfile_raw.write(mpstate.logqueue_raw.get()) \n      while (not mpstate.logqueue.empty()): \n         mpstate.logfile.write(mpstate.logqueue.get()) \n      if mpstate.settings.flushlogs: \n         mpstate.logfile.flush() \n         mpstate.logfile_raw.flush()",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def c_logout(client): \n    return '@quit'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_dict_of_lists(master, newdata): \n    for (key, values) in newdata.items(): \n      master.setdefault(key, []).extend(values)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _convert_exception(exception): \n    return {'errmsg': str(exception), 'errtype': exception.__class__.__name__}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pootle_context(request): \n    return {'settings': {'POOTLE_CUSTOM_LOGO': getattr(settings, 'POOTLE_CUSTOM_LOGO', ''), 'POOTLE_TITLE': settings.POOTLE_TITLE, 'POOTLE_INSTANCE_ID': settings.POOTLE_INSTANCE_ID, 'POOTLE_CONTACT_ENABLED': (settings.POOTLE_CONTACT_ENABLED and settings.POOTLE_CONTACT_EMAIL), 'POOTLE_MARKUP_FILTER': get_markup_filter_name(), 'POOTLE_SIGNUP_ENABLED': settings.POOTLE_SIGNUP_ENABLED, 'SCRIPT_NAME': settings.SCRIPT_NAME, 'POOTLE_CACHE_TIMEOUT': settings.POOTLE_CACHE_TIMEOUT, 'DEBUG': settings.DEBUG}, 'custom': settings.POOTLE_CUSTOM_TEMPLATE_CONTEXT, 'ALL_LANGUAGES': Language.live.cached_dict(translation.get_language(), request.user.is_superuser), 'ALL_PROJECTS': Project.objects.cached_dict(request.user), 'SOCIAL_AUTH_PROVIDERS': _get_social_auth_providers(request), 'display_agreement': _agreement_context(request)}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test_compound_model_classify_attributes(): \n    inspect.classify_class_attrs((Gaussian1D + Gaussian1D))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_index(page_info): \n    if (page_info.basename == u''): \n      index_txt_path = os.path.join(page_info.basepath, u'index.txt') \n      if os.path.exists(index_txt_path): \n         page_info.index = open(index_txt_path, u'r').read().splitlines()",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def d(message): \n    print_log(message, BLUE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def first(seq, key=(lambda x: bool(x)), default=None, apply=(lambda x: x)): \n    return next((apply(x) for x in seq if key(x)), (default() if callable(default) else default))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def str_to_seconds(s): \n    return timedelta_to_integral_seconds((pd.Timestamp(s, tz='UTC') - EPOCH))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_upper(value): \n    return unicode(value).isupper()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_curdoc(doc): \n    _state.document = doc",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def QTEV(type, uuid, hostname, clock, name=None, timestamp=None): \n    return Event(u'task-{0}'.format(type), uuid=uuid, hostname=hostname, clock=clock, name=name, timestamp=(timestamp or time()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def delete_probes(probes, test=False, commit=True): \n    return __salt__['net.load_template']('delete_probes', probes=probes, test=test, commit=commit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def arithmetic_mean(confirmed_measures): \n    return np.mean(confirmed_measures)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _do_extrapolate(fill_value): \n    return (isinstance(fill_value, string_types) and (fill_value == 'extrapolate'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def hash_dist(x): \n    return (int(sha1(bytes(x)).hexdigest(), base=16) & 4294967295)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dist_is_local(dist): \n    return is_local(dist_location(dist))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def migration_create(context, values): \n    return IMPL.migration_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(uri): \n    return salt.utils.sdb.sdb_get(uri, __opts__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def redirectme(): \n    redirect(URL('hello3'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def argmin(x, axis=None): \n    return ArgMin(axis)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def squared_error_ridge_gradient(x_i, y_i, beta, alpha): \n    return vector_add(squared_error_gradient(x_i, y_i, beta), ridge_penalty_gradient(beta, alpha))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_version_string(parts): \n    return '.'.join((str(x) for x in parts))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_load(jid): \n    with _get_serv(ret=None, commit=True) as cur: \n      sql = 'SELECT   load   FROM   jids   WHERE   jid   =   %s;' \n      cur.execute(sql, (jid,)) \n      data = cur.fetchone() \n      if data: \n         return json.loads(data[0]) \n      return {}",
        "line_count": 7,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def assembleFormattedText(formatted): \n    return _textattributes.flatten(formatted, _FormattingState(), 'toMIRCControlCodes')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_raw_ctf(directory, system_clock='truncate', preload=False, verbose=None): \n    return RawCTF(directory, system_clock, preload=preload, verbose=verbose)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rmtree(path): \n    shutil.rmtree(path, onerror=force_delete)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def memoize_important_follower_config(dict_): \n    dict_['memoized_config'] = {'include_tags': include_tags, 'exclude_tags': exclude_tags}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_status_id_by_name(status_name): \n    return LINODE_STATUS.get(status_name, {}).get('code', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ReadManifest(jar_file_name): \n    with zipfile.ZipFile(jar_file_name) as jar: \n      try: \n         manifest_string = jar.read(_MANIFEST_NAME) \n      except KeyError: \n         return None \n      return _ParseManifest(manifest_string, jar_file_name)",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def copy_headers_into(from_r, to_r): \n    for (k, v) in from_r.headers.items(): \n      if k.lower().startswith('x-object-meta-'): \n         to_r.headers[k] = v",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getNewRepository(): \n    return ExportRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sig_key(s, order): \n    return ((- s[1]), order(s[0]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_7L1M(value): \n    return ((value & 127), ((value >> 7) & 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def os_constant(key): \n    return CLI_DEFAULTS[key]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_timestamp(): \n    return unicode(int(time.time()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_same_object(expected, actual): \n    if (expected is not actual): \n      raise AssertionError(('values   not   identical,   expected   %r,   actual   %r' % (expected, actual)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def iframe_close(request, response_format='html'): \n    return render_to_response('core/iframe_close', {}, context_instance=RequestContext(request), response_format=response_format)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_hibernate_timeout(timeout, power='ac', scheme=None): \n    return _set_powercfg_value(scheme, 'SUB_SLEEP', 'HIBERNATEIDLE', power, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def logs_buffer(): \n    return _global_buffer",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ProfileListEntryFromString(xml_string): \n    return atom.CreateClassFromXMLString(ProfileListEntry, xml_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inputList(var_list): \n    for element in var_list: \n      if isinstance(element, list): \n         inputList(element) \n      elif isinstance(element, str): \n         inputElement(element)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def is_nose_class(cls): \n    return any(((name in [u'setUp', u'tearDown']) for (name, _) in inspect.getmembers(cls)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_disk_type(vm_): \n    return config.get_cloud_config_value('disk_type', vm_, __opts__, default='HDD', search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_location(vm_=None): \n    return __opts__.get('location', config.get_cloud_config_value('location', (vm_ or get_configured_provider()), __opts__, search_global=False))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def norm(x): \n    return sqrt(squared_norm(x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xhtml_escape(value): \n    return _XHTML_ESCAPE_RE.sub((lambda match: _XHTML_ESCAPE_DICT[match.group(0)]), to_basestring(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_no_log_audit(logical_line): \n    if no_audit_log.match(logical_line): \n      (yield (0, 'C304:   Found   LOG.audit.      Use   LOG.info   instead.'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def snapshot_get_all_for_group_snapshot(context, group_snapshot_id): \n    return IMPL.snapshot_get_all_for_group_snapshot(context, group_snapshot_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ipv6_to_int(ip): \n    return type_desc.Int16.to_user(addrconv.ipv6.text_to_bin(ip))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mean_percentile(image, selem, out=None, mask=None, shift_x=False, shift_y=False, p0=0, p1=1): \n    return _apply(percentile_cy._mean, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y, p0=p0, p1=p1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_environment(): \n    return settings.environment",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_installed_extension(name, user=None, host=None, port=None, maintenance_db=None, password=None, runas=None): \n    return installed_extensions(user=user, host=host, port=port, maintenance_db=maintenance_db, password=password, runas=runas).get(name, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def msg_reply(conf, msg_id, reply_q, connection_pool, reply=None, failure=None, ending=False, log_failure=True): \n    with ConnectionContext(conf, connection_pool) as conn: \n      if failure: \n         failure = rpc_common.serialize_remote_exception(failure, log_failure) \n      try: \n         msg = {'result': reply, 'failure': failure} \n      except TypeError: \n         msg = {'result': dict(((k, repr(v)) for (k, v) in reply.__dict__.iteritems())), 'failure': failure} \n      if ending: \n         msg['ending'] = True \n      _add_unique_id(msg) \n      if reply_q: \n         msg['_msg_id'] = msg_id \n         conn.direct_send(reply_q, rpc_common.serialize_msg(msg)) \n      else: \n         conn.direct_send(msg_id, rpc_common.serialize_msg(msg))",
        "line_count": 15,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def put_headers_in_environ(headers, environ): \n    for (key, value) in headers: \n      environ[('HTTP_%s' % key.upper().replace('-', '_'))] = value",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def depart_snippet_literal(self, node): \n    self.depart_literal_block(node)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_backref_chain(obj, predicate, max_depth=20, extra_ignore=()): \n    return _find_chain(obj, predicate, gc.get_referrers, max_depth=max_depth, extra_ignore=extra_ignore)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def single_client_noauth(h=client_context.host, p=client_context.port, **kwargs): \n    return _mongo_client(h, p, authenticate=False, direct=True, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upload_file(self, Filename, Bucket, Key, ExtraArgs=None, Callback=None, Config=None): \n    with S3Transfer(self, Config) as transfer: \n      return transfer.upload_file(filename=Filename, bucket=Bucket, key=Key, extra_args=ExtraArgs, callback=Callback)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _keysFromFilepaths(filepaths, parseKey): \n    for fp in filepaths: \n      if fp.exists(): \n         try: \n            with fp.open() as f: \n               for key in readAuthorizedKeyFile(f, parseKey): \n                  (yield key) \n         except (IOError, OSError) as e: \n            log.msg('Unable   to   read   {0}:   {1!s}'.format(fp.path, e))",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def generate_unique_codename(num_words=7): \n    while True: \n      codename = crypto_util.genrandomid(num_words) \n      if (len(codename) > Source.MAX_CODENAME_LEN): \n         app.logger.warning(\"Generated   a   source   codename   that   was   too   long,   skipping   it.   This   should   not   happen.   (Codename='{}')\".format(codename)) \n         continue \n      sid = crypto_util.hash_codename(codename) \n      matching_sources = Source.query.filter((Source.filesystem_id == sid)).all() \n      if (len(matching_sources) == 0): \n         return codename",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _invalid(m, comment=INVALID_RESPONSE, out=None): \n    return _set_status(m, status=False, comment=comment, out=out)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def system(): \n    return uname()[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([ZigBeeSwitch(hass, ZigBeeDigitalOutConfig(config))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def multiple(messages): \n    return MultiMessage(messages)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sumsets(sets): \n    return frozenset().union(*sets)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return CubeDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find_flaky_tests(suites): \n    for test in _iter_tests(suites): \n      annotation = get_flaky_annotation(test) \n      if annotation: \n         (yield (test, annotation))",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def value(val): \n    return dict(value=val)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qnwlege(n, a, b): \n    return _make_multidim_func(_qnwlege1, n, a, b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_private(name): \n    return (name and (name[0] == PRIV_NAME))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([ManualAlarm(hass, config[CONF_NAME], config.get(CONF_CODE), config.get(CONF_PENDING_TIME, DEFAULT_PENDING_TIME), config.get(CONF_TRIGGER_TIME, DEFAULT_TRIGGER_TIME), config.get(CONF_DISARM_AFTER_TRIGGER, DEFAULT_DISARM_AFTER_TRIGGER))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eval(x): \n    return to_dense(x).eval(session=get_session())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def category(category): \n    return {'0': '0', '1': 'phishing', '2': 'webattack', '3': 'infectious', '4': 'payloads', '5': 'mailer', '6': 'arduino', '7': 'sms', '8': 'wireless', '9': 'modules', '10': 'cloner', '11': 'harvester', '12': 'tabnapping', '13': 'teensy', '14': 'binary2teensy', '15': 'dll_hijacking', '16': 'multiattack', '17': 'java_applet', '18': 'encoding', '19': 'fasttrack', '20': 'autopwn', '21': 'mssql', '22': 'scan', '23': 'direct', '24': 'exploits', '25': 'active_target', '26': 'shell', '27': 'set', '28': 'teensy2powershell', '29': 'powershell', '30': 'delldrac', '31': 'ridenum', '32': 'psexec', '33': 'fsattack'}.get(category, 'ERROR')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RemoveDuplicateDependencies(targets): \n    for (target_name, target_dict) in targets.iteritems(): \n      for dependency_key in dependency_sections: \n         dependencies = target_dict.get(dependency_key, []) \n         if dependencies: \n            target_dict[dependency_key] = Unify(dependencies)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_setting(key, default=None): \n    return get_settings().get(key, default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tokenize(s, *args, **kwargs): \n    return parser.find_tokens(s, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_thread_analytics(exploration_id): \n    return feedback_jobs_continuous.FeedbackAnalyticsAggregator.get_thread_analytics(exploration_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def initialize(linter): \n    utils.register_plugins(linter, __path__[0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def replication_group_exists(name, region=None, key=None, keyid=None, profile=None): \n    return bool(describe_replication_groups(name=name, region=region, key=key, keyid=keyid, profile=profile))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _rename_json_field(data_dict): \n    return _rename_field(data_dict, 'json', 'nested')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gci(): \n    return gcf()._gci()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_sorted_index(l, reverse=True): \n    return sorted(range(len(l)), key=(lambda k: l[k]), reverse=reverse)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ordered_dict_representer(dumper, data): \n    return dumper.represent_dict(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def median(name, num, minimum=0, maximum=0, ref=None): \n    return calc(name, num, 'median', ref)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_entry_map(dist, group=None): \n    return get_distribution(dist).get_entry_map(group)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def draw_if_interactive(): \n    if matplotlib.is_interactive(): \n      figManager = Gcf.get_active() \n      if (figManager != None): \n         figManager.canvas.draw()",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def t_ccomment(t): \n    t.lexer.lineno += t.value.count('\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_repoze_user(user_id): \n    if ('repoze.who.plugins' in request.environ): \n      rememberer = request.environ['repoze.who.plugins']['friendlyform'] \n      identity = {'repoze.who.userid': user_id} \n      response.headerlist += rememberer.remember(request.environ, identity)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def volume_type_extra_specs_delete(context, volume_type_id, key): \n    IMPL.volume_type_extra_specs_delete(context, volume_type_id, key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processXMLElement(xmlElement): \n    processShape(Group, xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def constant_time_compare(val1, val2): \n    return hmac.compare_digest(force_bytes(val1), force_bytes(val2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def map_field(field, func, dict_sequence): \n    for item in dict_sequence: \n      try: \n         item[field] = func(item.get(field, None)) \n         (yield item) \n      except ValueError: \n         pass",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _argus_phi(chi): \n    return ((_norm_cdf(chi) - (chi * _norm_pdf(chi))) - 0.5)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ifequal(parser, token): \n    return do_ifequal(parser, token, False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_timestamp(datetime_value): \n    return int((datetime_value - datetime(1970, 1, 1, tzinfo=utc)).total_seconds())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def interfaces(): \n    return salt.utils.network.win_interfaces()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pathjoin(*args): \n    return '/'.join([p for p in args if p])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def inverse_fourier_transform(F, k, x, **hints): \n    return InverseFourierTransform(F, k, x).doit(**hints)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fakeTargetFunction(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(sql, encoding=None): \n    return tuple(parsestream(sql, encoding))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encipher_substitution(msg, old, new=None): \n    return translate(msg, old, new)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def icon(basename): \n    return from_name(name_from_basename(basename))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_struct_declaration_list_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(name, default=None): \n    return getattr(_get_config(), name, default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def interact(conn): \n    with redirected_stdio(conn): \n      conn.execute('def   _rinteract():\\n                                    def   new_exit():\\n                                                print   \"use   ctrl+D   to   exit   the   interactive   python   interpreter.\"\\n                                    import   code\\n                                    code.interact(local   =   dict({\"exit\":new_exit,   \"quit\":new_exit}))') \n      conn.namespace['_rinteract']()",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('zabbix.usergroup_create' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def weighted_r2_op(predictions, targets, inputs): \n    with tf.name_scope('WeightedStandardError'): \n      if hasattr(inputs, '__len__'): \n         inputs = tf.add_n(inputs) \n      if (inputs.get_shape().as_list() != targets.get_shape().as_list()): \n         raise Exception('Weighted   R2   metric   requires   Inputs   and   Targets   to   have   same   shape.') \n      a = tf.reduce_sum(tf.square((predictions - inputs))) \n      b = tf.reduce_sum(tf.square((targets - inputs))) \n      return tf.div(a, b)",
        "line_count": 8,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def reshape(a, newshape): \n    return a.reshape(newshape)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def block_device_mapping_get_all_by_instance(context, instance_uuid): \n    return IMPL.block_device_mapping_get_all_by_instance(context, instance_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def raw_cleanup(raw): \n    return formatters(cleanup, strip)(raw.lower())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def raw_memcpy(builder, dst, src, count, itemsize, align=1): \n    return _raw_memcpy(builder, 'llvm.memcpy', dst, src, count, itemsize, align)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_url(self, *args, **kwargs): \n    return github3.session.GitHubSession().build_url(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RemoveMultiLineCommentsFromRange(lines, begin, end): \n    for i in range(begin, end): \n      lines[i] = '/**/'",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_current_date_as_string(): \n    return datetime.datetime.utcnow().strftime(feconf.DASHBOARD_STATS_DATETIME_STRING_FORMAT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unexpected_error_msg(error): \n    return gcp_error(error)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rmmod(mod): \n    return quietRun(['rmmod', mod])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def double_urldecode(t): \n    return urllib.unquote(urllib.unquote(t))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _root_diagbroyden_doc(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ansi_color_style_names(): \n    return ANSI_STYLES.keys()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def on_success(result): \n    return result",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_snmp(community): \n    return __execute_cmd('config   -g   cfgOobSnmp   -o                                       cfgOobSnmpAgentCommunity   {0}'.format(community))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def zip_folder_content(folder, filename): \n    with zipfile.ZipFile(filename, 'w', zipfile.ZIP_DEFLATED) as dest: \n      for (root, dirs, files) in os.walk(folder): \n         relative_dir = os.path.relpath(root, folder) \n         for file_ in files: \n            dest.write(os.path.join(root, file_), arcname=os.path.join(relative_dir, file_))",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def service_get_by_compute_host(context, host): \n    return IMPL.service_get_by_compute_host(context, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def alternating(n): \n    for perm in variations(list(range(n)), n): \n      p = Permutation(perm) \n      if p.is_even: \n         (yield p)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def boot_time(): \n    return cext.boot_time()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_frames_patch(f): \n    print('\\n            def   _value_to_graph_object(self,   index,   value,   _raise=True):\\n                        if   isinstance(value,   six.string_types):\\n                                    return   value\\n                        return   super(Frames,   self)._value_to_graph_object(index,   value,\\n                                                                                                                                                                              _raise=_raise)\\n\\n            def   to_string(self,   level=0,   indent=4,   eol=\\'\\\\n\\',\\n                                                      pretty=True,   max_chars=80):\\n                        \"\"\"Get   formatted   string   by   calling   `to_string`   on   children   items.\"\"\"\\n                        if   not   len(self):\\n                                    return   \"{name}()\".format(name=self._get_class_name())\\n                        string   =   \"{name}([{eol}{indent}\".format(\\n                                    name=self._get_class_name(),\\n                                    eol=eol,\\n                                    indent=\\'   \\'   *   indent   *   (level   +   1))\\n                        for   index,   entry   in   enumerate(self):\\n                                    if   isinstance(entry,   six.string_types):\\n                                                string   +=   repr(entry)\\n                                    else:\\n                                                string   +=   entry.to_string(level=level+1,\\n                                                                                                                              indent=indent,\\n                                                                                                                              eol=eol,\\n                                                                                                                              pretty=pretty,\\n                                                                                                                              max_chars=max_chars)\\n                                    if   index   <   len(self)   -   1:\\n                                                string   +=   \",{eol}{indent}\".format(\\n                                                            eol=eol,\\n                                                            indent=\\'   \\'   *   indent   *   (level   +   1))\\n                        string   +=   (\\n                                    \"{eol}{indent}])\").format(eol=eol,   indent=\\'   \\'   *   indent   *   level)\\n                        return   string\\n', file=f, end='')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hidden(path): \n    return os.path.split(path)[1].startswith('.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rpXRDS(request): \n    return util.renderXRDS(request, [RP_RETURN_TO_URL_TYPE], [util.getViewURL(request, finishOpenID)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chart_popup(): \n    return {}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_pull_request(issue): \n    return bool(issue.get('pull_request', {}).get('html_url', None))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def modify_test(id, **data): \n    models.Test.smart_get(id).update_object(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def scipy_sparse_to_sympy(m, **options): \n    return Matrix(m.todense())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enabled(name, **kwargs): \n    return (name in get_enabled())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jres_id(n): \n    return (chr((ord('A') + ((n - 1) % 25))) * ((n / 26) + 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nvgre(version=0, vsid=0, flow_id=0): \n    return gre(version=version, protocol=ether_types.ETH_TYPE_TEB, vsid=vsid, flow_id=flow_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safe_json(obj): \n    return json.dumps(obj).replace('<', '\\\\u003c')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isClassAdvisor(ob): \n    return (isinstance(ob, FunctionType) and hasattr(ob, 'previousMetaclass'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def reverse_enumerate(l): \n    return izip(xrange((len(l) - 1), (-1), (-1)), reversed(l))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_list(*packages): \n    return __salt__['lowpkg.file_list'](*packages)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def build_dependency_list(deps, version_prefix=u''): \n    return sorted([(u'%s%s%s' % (dep_name, version_prefix, dep_version)) for (dep_name, dep_version) in deps.items()], key=(lambda s: s.lower()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def open(name, mode='r', bufsize=(-1)): \n    return _posixfile_().open(name, mode, bufsize)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_lang_js(fortype, name): \n    return (u'\\n\\n$.extend(frappe._messages,   %s)' % json.dumps(get_dict(fortype, name)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load(filepath, retry=True): \n    return _load(filepath, recurse_depth=0, retry=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log_warn_only(): \n    coloredlogs.install(level='WARNING', level_styles={'warn': {'color': 'yellow'}, 'error': {'color': 'red', 'bold': True}}, fmt='%(message)s', isatty=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_str(instance): \n    return state_str(instance_state(instance))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _raise_if_updates_provider_attributes(attrs): \n    if any((validators.is_attr_set(attrs.get(a)) for a in ATTRIBUTES)): \n      msg = _('Plugin   does   not   support   updating   provider   attributes') \n      raise n_exc.InvalidInput(error_message=msg)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def desktop(): \n    return app().desktop()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exec_sorted(statement, *args, **kw): \n    return sorted([tuple(row) for row in statement.execute(*args, **kw).fetchall()])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_dvr_serviced(device_owner): \n    return (device_owner.startswith(n_const.DEVICE_OWNER_COMPUTE_PREFIX) or (device_owner in get_other_dvr_serviced_device_owners()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getVersionFileName(): \n    return getFabmetheusUtilitiesPath('version.txt')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_counter_log4j_record(record): \n    return bool(_INDENTED_COUNTERS_MESSAGE_RE.match(record['message']))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backup_get_all(context, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None): \n    return IMPL.backup_get_all(context, filters=filters, marker=marker, limit=limit, offset=offset, sort_keys=sort_keys, sort_dirs=sort_dirs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_available_project_types_plugins(): \n    return []",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def info(): \n    return _DB.info()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_keypoints_censure_scale_range_error(): \n    assert_raises(ValueError, CENSURE, min_scale=1, max_scale=2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processXMLElement(xmlElement): \n    group.processShape(Cube, xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def virtual_interface_get(context, vif_id): \n    return IMPL.virtual_interface_get(context, vif_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fetch_msx_hdu(cache=True): \n    return fetch_hdu('galactic_center/gc_msx_e.fits', cache=cache)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iterlists(d): \n    return getattr(d, _iterlists)()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def col(loc, strg): \n    return ((((loc < len(strg)) and (strg[loc] == '\\n')) and 1) or (loc - strg.rfind('\\n', 0, loc)))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def __virtual__(): \n    return ('icinga2.generate_ticket' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def year_month_to_month_number(year, month, day=None): \n    return ((((year - start_year) * 12) + (month - 1)) - start_month_0_indexed)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rad(d): \n    return ((d * pi) / 180)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def identity(content): \n    return content",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_load(jid, clear_load, minions=None): \n    for returner_ in __opts__[CONFIG_KEY]: \n      _mminion().returners['{0}.save_load'.format(returner_)](jid, clear_load)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ask(message, options): \n    while 1: \n      if os.environ.get('PIP_NO_INPUT'): \n         raise Exception(('No   input   was   expected   ($PIP_NO_INPUT   set);   question:   %s' % message)) \n      response = raw_input(message) \n      response = response.strip().lower() \n      if (response not in options): \n         print ('Your   response   (%r)   was   not   one   of   the   expected   responses:   %s' % (response, ',   '.join(options))) \n      else: \n         return response",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def list_services(profile=None, api_key=None): \n    return salt.utils.pagerduty.list_items('services', 'name', __salt__['config.option'](profile), api_key, opts=__opts__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getwriter(encoding): \n    return lookup(encoding).streamwriter",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_entries(options): \n    with Session() as session: \n      query = session.query(PendingEntry).filter((PendingEntry.approved == False)) \n      if options.task_name: \n         query = query.filter((PendingEntry.task_name == options.task_name)) \n      deleted = query.delete() \n      console((u'Successfully   deleted   %i   pending   entries' % deleted))",
        "line_count": 6,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def create(): \n    redirect(URL(f='event', args='create'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def page_from_href(href): \n    return page_from_reference(Reference.decode(href))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def catalog_item(): \n    return s3_rest_controller('supply', 'catalog_item', csv_template=('supply', 'catalog_item'), csv_stylesheet=('supply', 'catalog_item.xsl'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def schaffer(individual): \n    return (sum((((((x ** 2) + (x1 ** 2)) ** 0.25) * ((sin((50 * (((x ** 2) + (x1 ** 2)) ** 0.1))) ** 2) + 1.0)) for (x, x1) in zip(individual[:(-1)], individual[1:]))),)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def NOASLR(v): \n    context.defaults['aslr'] = (not asbool(v))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CodesearchEntryFromString(xml_string): \n    return atom.CreateClassFromXMLString(CodesearchEntry, xml_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_generator(obj): \n    return isinstance(obj, types.GeneratorType)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isorted(to_sort): \n    return sorted(to_sort, key=(lambda x: x.lower()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_list_like(value): \n    return (isinstance(value, Iterable) and (not isinstance(value, (base, dict))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def static(request): \n    return {'STATIC_URL': settings.STATIC_URL}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_user_name(uid, name, **kwargs): \n    with _IpmiCommand(**kwargs) as s: \n      return s.set_user_name(uid, name)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def script(*args, **kw): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cmd_action(parent, cmd, fn, *hotkeys): \n    return qtutils.add_action(parent, cmd.name(), (lambda : cmds.do(cmd, fn())), *hotkeys)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def matrix_vector_mul(a, b): \n    return T.dot(a, b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_timeline_data(doctype, name): \n    return dict(frappe.db.sql(u'select   unix_timestamp(posting_date),   count(*)\\n DCTB  DCTB from   `tabStock   Ledger   Entry`   where   item_code=%s\\n DCTB  DCTB  DCTB and   posting_date   >   date_sub(curdate(),   interval   1   year)\\n DCTB  DCTB  DCTB group   by   posting_date', name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('victorops' if ('victorops.create_event' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def image_update(context, image_id, values, purge_props=False): \n    return _image_update(context, values, image_id, purge_props)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_incomplete_list_comprehension(): \n    assert (ParserWithRecovery(load_grammar(), u('(1   for   def')).module.statements == [])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def consistencygroup_update(context, consistencygroup_id, values): \n    return IMPL.consistencygroup_update(context, consistencygroup_id, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def restore(file_name, jail=None, chroot=None, root=None): \n    return __salt__['cmd.run']((_pkg(jail, chroot, root) + ['backup', '-r', file_name]), output_loglevel='trace', python_shell=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _makeLatitude(value): \n    return base.Coordinate(value, Angles.LATITUDE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_server_time(): \n    return datetime.datetime.now().strftime('%Y-%m-%d   %H:%M')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disp(name=None, idx=None): \n    return CMADataLogger((name if name else 'outcmaes')).disp(idx)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def isValid(text): \n    return bool(re.search('\\\\b(news|headline)\\\\b', text, re.IGNORECASE))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ParseResponseEx(response, select_default=False, form_parser_class=FormParser, request_class=_request.Request, entitydefs=None, encoding=DEFAULT_ENCODING, _urljoin=urlparse.urljoin, _urlparse=urlparse.urlparse, _urlunparse=urlparse.urlunparse): \n    return _ParseFileEx(response, response.geturl(), select_default, False, form_parser_class, request_class, entitydefs, False, encoding, _urljoin=_urljoin, _urlparse=_urlparse, _urlunparse=_urlunparse)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _output_to_list(cmdoutput): \n    return [item for line in cmdoutput.splitlines() if _safe_output(line) for item in line.split()]",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _purge(): \n    _cache.clear()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixture_view(context, request): \n    return Response('fixture')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_locally_formatted_datetime(datetime): \n    return format_datetime(localtime(datetime), locale=get_current_babel_locale())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_cached_http(): \n    return _CACHED_HTTP",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isErrorNode(node): \n    return (node and (node.getType() == 'error'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_attrs(str): \n    return _scanner.scan(str)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_test_file(name): \n    return os.path.join(TEST_DATA, name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return SkeinisoRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safe_dump(data, stream=None, **kwds): \n    return dump_all([data], stream, Dumper=SafeDumper, **kwds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rgw_create(**kwargs): \n    return ceph_cfg.rgw_create(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def demo_error_analysis(): \n    postag(error_output='errors.txt')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(handle): \n    return iter(Iterator(handle, RecordParser()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def domain(): \n    redirect(URL(c='admin', args=request.args, vars=request.vars))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nevercache_token(): \n    return (u'nevercache.' + settings.NEVERCACHE_KEY)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Error(filename, linenum, category, confidence, message): \n    if _ShouldPrintError(category, confidence, linenum): \n      _cpplint_state.IncrementErrorCount(category) \n      if (_cpplint_state.output_format == 'vs7'): \n         _cpplint_state.PrintError(('%s(%s):   warning:   %s      [%s]   [%d]\\n' % (filename, linenum, message, category, confidence))) \n      elif (_cpplint_state.output_format == 'eclipse'): \n         sys.stderr.write(('%s:%s:   warning:   %s      [%s]   [%d]\\n' % (filename, linenum, message, category, confidence))) \n      elif (_cpplint_state.output_format == 'junit'): \n         _cpplint_state.AddJUnitFailure(filename, linenum, message, category, confidence) \n      else: \n         final_message = ('%s:%s:      %s      [%s]   [%d]\\n' % (filename, linenum, message, category, confidence)) \n         sys.stderr.write(final_message)",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_tasktrackers(request): \n    return [Tracker(tracker) for tracker in request.jt.all_task_trackers().trackers]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def print_fcode(expr, **settings): \n    print(fcode(expr, **settings))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _parse_date(text): \n    return tuple((int(i) for i in text.split('-')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def call_xenapi(xenapi, method, *args): \n    return xenapi._session.call_xenapi(method, *args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_regressor(estimator): \n    return (getattr(estimator, '_estimator_type', None) == 'regressor')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetQueryNodeText(node): \n    return GetQueryNodeTextUnicode(node).encode('utf-8')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enqueue_task(url, params, countdown): \n    taskqueue.add(queue_name=QUEUE_NAME_EMAILS, url=url, payload=json.dumps(params), countdown=countdown, target=taskqueue.DEFAULT_APP_VERSION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_html(text): \n    return _striptags_re.sub(u'', text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def path_exists(path): \n    return os.path.exists(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pow(x, a): \n    return tf.pow(x, a)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nodes(G): \n    return G.nodes()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_cast_expression_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_spaces_between_tags(value): \n    return re.sub('>\\\\s+<', '>   <', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_credit_course(course_key): \n    return CreditCourse.is_credit_course(course_key=course_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_statement_assign(t): \n    names[t[1]] = t[3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_security_groups(conn, vm_): \n    return config.get_cloud_config_value('securitygroup', vm_, __opts__, default=['default'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetModuleName(): \n    return gflags._GetCallingModule()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=PerlLexer(), buf_class=PerlBuffer, langintel_class=PerlLangIntel, import_handler_class=PerlImportHandler, cile_driver_class=PerlCILEDriver, is_cpln_lang=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CreateWindowsRegistryExecutablePathsDetector(vars_map=None): \n    return core.Detector(extractors=[RunDllExtractor(), ExecutableExtractor()], post_processors=[EnvVarsPostProcessor((vars_map or {}))])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getCraftedText(fileName, gcodeText='', repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, gcodeText), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def batched_tensordot(x, y, axes=2): \n    return _tensordot_as_dot(x, y, axes, dot=batched_dot, batched=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tempredirect(url): \n    return redirect(url, '307   Temporary   Redirect')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fileContents(fn): \n    return open(fn, 'rb').read()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_protected_type(obj): \n    return isinstance(obj, (types.NoneType, int, long, datetime.datetime, datetime.date, datetime.time, float, Decimal))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def config_true_value(value): \n    return ((value is True) or (isinstance(value, basestring) and (value.lower() in TRUE_VALUES)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def list_public_methods(obj): \n    return [member for member in dir(obj) if ((not member.startswith('_')) and hasattr(getattr(obj, member), '__call__'))]",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def figlegend(*args, **kwargs): \n    return gcf().legend(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_with_level(course, level): \n    return ROLES[level](course.id).users_with_role()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getComplex(x=0.0, y=0.0): \n    return complex(x, y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_node_class_names(names): \n    for _name in names: \n      setattr(GenericNodeVisitor, ('visit_' + _name), _call_default_visit) \n      setattr(GenericNodeVisitor, ('depart_' + _name), _call_default_departure) \n      setattr(SparseNodeVisitor, ('visit_' + _name), _nop) \n      setattr(SparseNodeVisitor, ('depart_' + _name), _nop)",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def random_identifier(): \n    return ('%016x' % random.randint(0, ((2 ** 64) - 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def initialized(): \n    return DETAILS.get('initialized', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_compound_statement_4(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rindex(s, *args): \n    return s.rindex(*args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bartlett(M): \n    return bartlett_(M)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def amap(fn, *args): \n    return np.array(list(map(fn, *args)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_thread_from_model(thread_model): \n    return feedback_domain.FeedbackThread(thread_model.id, thread_model.exploration_id, thread_model.state_name, thread_model.original_author_id, thread_model.status, thread_model.subject, thread_model.summary, thread_model.has_suggestion, thread_model.created_on, thread_model.last_updated)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def extract_dependencies(reg, assignments): \n    return sorted([k for (k, v) in assignments.items() if (v == reg)])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def association_proxy(target_collection, attr, **kw): \n    return AssociationProxy(target_collection, attr, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def datetime_from_iso8601(datetime_str): \n    return aniso8601.parse_datetime(datetime_str)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cprint(text, color=None, on_color=None, attrs=None, **kwargs): \n    print(colored(text, color, on_color, attrs), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _b64encode(s): \n    return b2a_base64(s).strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attach_tags(objs): \n    if objs: \n      obj_dict = {obj.id: obj for obj in objs} \n      m2m_name = Tag._get_m2m_name(objs[0]) \n      field_name = getattr(objs[0], m2m_name).query_field_name \n      qs = Tag.objects.not_blocked().filter(**{('%s__in' % field_name): obj_dict.keys()}).values_list(('%s__id' % field_name), 'tag_text') \n      for (obj, tags) in sorted_groupby(qs, (lambda x: x[0])): \n         setattr(obj_dict[obj], ('%s_list' % m2m_name), [t[1] for t in tags])",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def task_install_ssh_key(): \n    return sequence([sudo_from_args(['cp', '.ssh/authorized_keys', '/root/.ssh/authorized_keys'])])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rax_argument_spec(): \n    return dict(api_key=dict(type='str', aliases=['password'], no_log=True), auth_endpoint=dict(type='str'), credentials=dict(type='str', aliases=['creds_file']), env=dict(type='str'), identity_type=dict(type='str', default='rackspace'), region=dict(type='str'), tenant_id=dict(type='str'), tenant_name=dict(type='str'), username=dict(type='str'), verify_ssl=dict(choices=BOOLEANS, type='bool'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return TerrainModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mean_of_targets(dataset): \n    return dataset.y.mean(axis=0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hex_encoding(t): \n    return ('%' + '%'.join((hex(ord(c))[2:] for c in t)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def std_prop(prop, nobs): \n    return np.sqrt(((prop * (1.0 - prop)) / nobs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def r2_score(pred, true, sample_weight=None, multioutput='uniform_average'): \n    return R2_score(sample_weight=sample_weight, multioutput=multioutput)(pred, true)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_ref_to_resource(resource, is_list): \n    return get_ref_to_doc(('webapi2.0-%s-resource' % get_resource_docname(resource, is_list)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_service_type(f): \n    return getattr(f, 'service_type', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def js_del_alert(ident): \n    return ('try   {del_message(\"%s\");}   catch(err)   {}\\n' % ident)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_node_change_list(exploration_id, property_name, new_value): \n    return [{'cmd': collection_domain.CMD_EDIT_COLLECTION_NODE_PROPERTY, 'exploration_id': exploration_id, 'property_name': property_name, 'new_value': new_value}]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixup(adict, k, v): \n    for key in adict.keys(): \n      if (key == k): \n         adict[key] = v \n      elif isinstance(adict[key], dict): \n         fixup(adict[key], k, v)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _bin_to_long(x): \n    return int(binascii.hexlify(x), 16)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_type_create(context, values, projects=None): \n    return IMPL.group_type_create(context, values, projects)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def most_common(d): \n    return sorted(iteritems(d), key=operator.itemgetter(1), reverse=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iirnotch(w0, Q): \n    return _design_notch_peak_filter(w0, Q, 'notch')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ffs(c, s): \n    for i in c: \n      if (i in s): \n         return i",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES): \n    return partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_start_stop(raw, start, stop): \n    return [(c if (isinstance(c, int) or (c is None)) else raw.time_as_index(c)[0]) for c in (start, stop)]",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _compute_residual(proj_op, B_orig, fwd_orig, Q): \n    return (np.dot(proj_op, B_orig) - np.dot(np.dot(Q, fwd_orig), proj_op.T))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_expression_group(t): \n    t[0] = t[2]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cast(conf, context, topic, msg): \n    return rpc_amqp.cast(conf, context, topic, msg, rpc_amqp.get_connection_pool(conf, Connection))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tp_read(fd, n): \n    return get_hub().threadpool.apply(_read, (fd, n))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _need_branch_change(branch, local_branch): \n    return ((branch is not None) and (branch != local_branch))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def register_formats(formats): \n    for (formatter_name, formatter_class_name) in formats: \n      register_as(formatter_name, formatter_class_name)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def xsl_post_save(instance, sender, **kwargs): \n    add_xsl_link(instance.resourcebase_ptr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_marginals_file(filename): \n    with open(filename) as lines: \n      return [float(line) for line in lines]",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def virtualenv_exists(directory): \n    return is_file(posixpath.join(directory, 'bin', 'python'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _log_line_from_hadoop(line, level=None): \n    log.log((level or logging.INFO), ('      %s' % line))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getPublicTypeMembers(type_, onlyValues=False): \n    for (name, value) in inspect.getmembers(type_): \n      if (not name.startswith('__')): \n         if (not onlyValues): \n            (yield (name, value)) \n         else: \n            (yield value)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def fanout_cast(conf, context, topic, msg): \n    return rpc_amqp.fanout_cast(conf, context, topic, msg, rpc_amqp.get_connection_pool(conf, Connection))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_sub_moved_events(src_dir_path, dest_dir_path): \n    for (root, directories, filenames) in os.walk(dest_dir_path): \n      for directory in directories: \n         full_path = os.path.join(root, directory) \n         renamed_path = (full_path.replace(dest_dir_path, src_dir_path) if src_dir_path else None) \n         (yield DirMovedEvent(renamed_path, full_path)) \n      for filename in filenames: \n         full_path = os.path.join(root, filename) \n         renamed_path = (full_path.replace(dest_dir_path, src_dir_path) if src_dir_path else None) \n         (yield FileMovedEvent(renamed_path, full_path))",
        "line_count": 9,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def captured_stdin(): \n    return captured_output('stdin')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def last(seq): \n    return tail(1, seq)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_routes(doctypes): \n    for d in doctypes: \n      frappe.reload_doctype(d) \n      c = get_controller(d) \n      condition = '' \n      if c.website.condition_field: \n         condition = 'where   {0}=1'.format(c.website.condition_field) \n      try: \n         frappe.db.sql('update   ignore   `tab{0}`   set   route   =   concat(ifnull(parent_website_route,   \"\"),\\n DCTB  DCTB  DCTB  DCTB if(ifnull(parent_website_route,   \"\")=\"\",   \"\",   \"/\"),   page_name)   {1}'.format(d, condition)) \n      except Exception as e: \n         if (e.args[0] != 1054): \n            raise",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def circle_perimeter(r, c, radius, method='bresenham', shape=None): \n    return _circle_perimeter(r, c, radius, method, shape)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def calc_baseline_error_to_observed_error(baseline_error, est_error): \n    return (float(baseline_error) / float(est_error))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def full_min(var): \n    return var.min(axis=range(0, len(var.type.broadcastable)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_temp_filename(): \n    with NamedTemporaryFile() as tempfile: \n      return tempfile.name",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLLADDERBOTTOM(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLLADDERBOTTOM)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_type_get(context, id, inactive=False, expected_fields=None): \n    return IMPL.group_type_get(context, id, inactive, expected_fields)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def auth_functions_list(): \n    return _AuthFunctions.keys()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def schedule_tricks(observer, tricks, pathname, recursive): \n    for trick in tricks: \n      for (name, value) in list(trick.items()): \n         TrickClass = load_class(name) \n         handler = TrickClass(**value) \n         trick_pathname = (getattr(handler, 'source_directory', None) or pathname) \n         observer.schedule(handler, trick_pathname, recursive)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def iter_format_modules(lang): \n    if check_for_language(lang): \n      format_locations = ['django.conf.locale.%s'] \n      if settings.FORMAT_MODULE_PATH: \n         format_locations.append((settings.FORMAT_MODULE_PATH + '.%s')) \n         format_locations.reverse() \n      locale = to_locale(lang) \n      locales = [locale] \n      if ('_' in locale): \n         locales.append(locale.split('_')[0]) \n      for location in format_locations: \n         for loc in locales: \n            try: \n               (yield import_module(('%s.formats' % (location % loc)))) \n            except ImportError: \n               pass",
        "line_count": 15,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def softplus(x, beta=1.0): \n    return Softplus(beta=beta)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _generate_user_id(user): \n    return '{0}_user_id'.format(user.name).lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def grad_expected_energy(W, V, H): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def role_exists(role, **kwargs): \n    return (len(tsql_query(query='sp_helprole   \"{0}\"'.format(role), as_dict=True, **kwargs)) == 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return FeedRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def header_table_size(table): \n    return sum((((32 + len(name)) + len(value)) for (name, value) in table))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def beta_from_targets(dataset, **kwargs): \n    return beta_from_design(dataset.y, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_cluster_cpu_times(reactor, runner, nodes, inits, processes): \n    return gather_deferreds(list((get_node_cpu_times(reactor, runner, node, init, processes) for (node, init) in zip(nodes, inits))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def delete_objects(context, model, **kwargs): \n    with context.session.begin(subtransactions=True): \n      db_objs = get_objects(context, model, **kwargs) \n      for db_obj in db_objs: \n         context.session.delete(db_obj) \n      return len(db_objs)",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _is_type(t): \n    return (lambda x: isinstance(x.value, t))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def modClearNameRefs(s, titlesRefs, namesRefs, charactersRefs): \n    return re_nameRef.sub('\\\\1', s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _parse_json(s): \n    return json.loads(s, object_hook=(lambda pairs: JsonDict(pairs.iteritems())))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new_date(d): \n    return date(d.year, d.month, d.day)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_cflags(value): \n    return set_var('CFLAGS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def LOG_LEVEL(x): \n    with context.local(log_level=x): \n      context.defaults['log_level'] = context.log_level",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_tool_elements_from_path(path, load_exception_handler=load_exception_handler, recursive=False, register_load_errors=False): \n    return _load_tools_from_path(path, load_exception_handler=load_exception_handler, recursive=recursive, register_load_errors=register_load_errors, loader_func=loader.load_tool, enable_beta_formats=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def search_collections(query, limit, sort=None, cursor=None): \n    return search_services.search(query, SEARCH_INDEX_COLLECTIONS, cursor, limit, sort, ids_only=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def truncate_week(dt, measure): \n    return truncate_day(dt, (measure * 7))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ion(): \n    matplotlib.interactive(True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeColor(color): \n    return make_color(color)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return HelpModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_quantize_api(method, prec, exprange, restricted_range, itr, stat): \n    for op in all_binary(prec, restricted_range, itr): \n      for rounding in RoundModes: \n         c = randcontext(exprange) \n         quantizeop = (op[0], op[1], rounding, c) \n         t = TestSet(method, quantizeop) \n         try: \n            if (not convert(t)): \n               continue \n            callfuncs(t) \n            verify(t, stat) \n         except VerifyError as err: \n            log(err)",
        "line_count": 12,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def event_return(events): \n    for event in events: \n      ret = event.get('data', False) \n      if ret: \n         returner(ret)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def volume_type_access_add(context, type_id, project_id): \n    return IMPL.volume_type_access_add(context, type_id, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ordered_dict_to_dict(probes): \n    return loads(dumps(probes))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def network_get_associated_fixed_ips(context, network_id, host=None): \n    return IMPL.network_get_associated_fixed_ips(context, network_id, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dup_gcd(f, g, K): \n    return dup_inner_gcd(f, g, K)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def t_comment(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _authn_context_decl_ref(decl_ref, authn_auth=None): \n    return factory(saml.AuthnContext, authn_context_decl_ref=decl_ref, authenticating_authority=factory(saml.AuthenticatingAuthority, text=authn_auth))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_type_name(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_option_values(option_values): \n    return _FakeOptionValues(option_values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def L2(tensor, wd=0.001): \n    return tf.mul(tf.nn.l2_loss(tensor), wd, name='L2-Loss')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_raw_edf(input_fname, montage=None, eog=None, misc=None, stim_channel=(-1), annot=None, annotmap=None, exclude=(), preload=False, verbose=None): \n    return RawEDF(input_fname=input_fname, montage=montage, eog=eog, misc=misc, stim_channel=stim_channel, annot=annot, annotmap=annotmap, exclude=exclude, preload=preload, verbose=verbose)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewMouseTool(): \n    return ViewpointRotate()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_cache(): \n    return _cache",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def on_failure(exc_info): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_message_identifier(command_id): \n    return (MESSAGE_START + (command_id,))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def collection_list(**kwargs): \n    return _query('admin/collections?action=LIST&wt=json', **kwargs)['collections']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _generateX(random, bits): \n    while True: \n      x = _getRandomNumber(random, bits) \n      if (2 <= x <= ((2 ** bits) - 2)): \n         return x",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def __virtual__(): \n    return HAS_COUCH",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getMinimumRadius(beginComplexSegmentLength, endComplexSegmentLength, radius): \n    return min(abs(radius), (0.5 * min(beginComplexSegmentLength, endComplexSegmentLength)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'flow', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def log_error(**kwargs): \n    Message.log(message_type=_compute_message_type(stack()[1]), level=_ERROR_TOKEN, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def serve_download(path, name=None): \n    return serve_file(path, 'application/x-download', 'attachment', name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decode_file_iter(file_obj, codec_options=DEFAULT_CODEC_OPTIONS): \n    while True: \n      size_data = file_obj.read(4) \n      if (len(size_data) == 0): \n         break \n      elif (len(size_data) != 4): \n         raise InvalidBSON('cut   off   in   middle   of   objsize') \n      obj_size = (_UNPACK_INT(size_data)[0] - 4) \n      elements = (size_data + file_obj.read(obj_size)) \n      (yield _bson_to_dict(elements, codec_options))",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_logout_url(*args, **kwargs): \n    return get_client().get_logout_url(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_type_error_if_no_template_name(replay_test_dir): \n    with pytest.raises(TypeError): \n      replay.load(replay_test_dir, None)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'temperature', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLMORNINGSTAR(barDs, count, penetration=(-4e+37)): \n    return call_talib_with_ohlc(barDs, count, talib.CDLMORNINGSTAR, penetration)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def apt_get_update(sudo=False): \n    return _from_args(sudo)(['apt-get', 'update'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_reason(cluster_or_step): \n    return getattr(getattr(cluster_or_step.status, 'statechangereason', ''), 'message', '').rstrip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tamper(payload, **kwargs): \n    return ((payload + \"   and   '0having'='0having'\") if payload else payload)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def load_ipython_extension(ip): \n    warnings.warn('The   rmagic   extension   in   IPython   has   moved   to   `rpy2.ipython`,   please   see   `rpy2`   documentation.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_throw(): \n    while True: \n      try: \n         (yield) \n      except ValueError: \n         pass",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def monitor_copy_global(sock, orig_name, new_name): \n    return communicate(sock, ('__copy_global__(\"%s\",   \"%s\")' % (orig_name, new_name)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def install(app, conf): \n    return auth_token.AuthProtocol(app, conf=dict(conf.get(OPT_GROUP_NAME)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def open_firewalld(service): \n    return sequence(([run_from_args(['firewall-cmd', '--reload'])] + [run_from_args((command + [service])) for command in [['firewall-cmd', '--permanent', '--add-service'], ['firewall-cmd', '--add-service']]]))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def static(request): \n    return {u'STATIC_URL': settings.STATIC_URL}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def config(): \n    return __proxy__['napalm.call']('get_snmp_information', **{})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_dimitem_double(p): \n    p[0] = (p[1], eval(p[3]), eval(p[5]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_image_extension(form_field): \n    if form_field: \n      if ('.' not in form_field.name): \n         raise ValidationError(MSG_IMAGE_EXTENSION) \n      (_, ext) = form_field.name.rsplit('.', 1) \n      if (ext.lower() not in ALLOWED_IMAGE_EXTENSIONS): \n         raise ValidationError(MSG_IMAGE_EXTENSION)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _parse_ddwrt_response(data_str): \n    return {key: val for (key, val) in _DDWRT_DATA_REGEX.findall(data_str)}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_operation_data(year, quarter): \n    if (ct._check_input(year, quarter) is True): \n      ct._write_head() \n      data = _get_operation_data(year, quarter, 1, pd.DataFrame()) \n      if (data is not None): \n         data['code'] = data['code'].map((lambda x: str(x).zfill(6))) \n      return data",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def TimeFromTicks(ticks): \n    return time(*localtime(ticks)[3:6])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_type_get_all_by_group(context, group_id): \n    return IMPL.volume_type_get_all_by_group(context, group_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_registry(): \n    return _registry",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def feed_parser_initialization(generator): \n    generator.plugin_instance = GitHubActivity(generator)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unpack_chunks(hg_unbundle10_obj): \n    while True: \n      (length,) = struct.unpack('>l', readexactly(hg_unbundle10_obj, 4)) \n      if (length <= 4): \n         break \n      if (length < 84): \n         raise Exception('negative   data   length') \n      (node, p1, p2, cs) = struct.unpack('20s20s20s20s', readexactly(hg_unbundle10_obj, 80)) \n      (yield {'node': node.encode('hex'), 'p1': p1.encode('hex'), 'p2': p2.encode('hex'), 'cs': cs.encode('hex'), 'data': [patch for patch in unpack_patches(hg_unbundle10_obj, (length - 84))]})",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def quota_destroy_all_by_project_and_user(context, project_id, user_id): \n    return IMPL.quota_destroy_all_by_project_and_user(context, project_id, user_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _DefaultNamespace(): \n    return namespace_manager.get_namespace()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def metadef_property_delete_namespace_content(context, namespace_name, session=None): \n    return _metadef_delete_namespace_content(metadef_property_get_all, 'metadef_properties', context, namespace_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_true_instance(logical_line): \n    if asse_trueinst_re.match(logical_line): \n      (yield (0, 'N316:   assertTrue(isinstance(a,   b))   sentences   not   allowed'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def register_run_keyword(library, keyword, args_to_process=None, deprecation_warning=True): \n    RUN_KW_REGISTER.register_run_keyword(library, keyword, args_to_process, deprecation_warning)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_dev_environment(): \n    return os.environ.get('SERVER_SOFTWARE', '').startswith('Development')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_audio_mode(new_mode): \n    if (new_mode in ('voice   and   sound', 'silent', 'voice   only', 'sound   only')): \n      global audio_mode \n      audio_mode = new_mode",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def resource_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse(expr, filename='<unknown>', mode='exec'): \n    return compile(expr, filename, mode, PyCF_ONLY_AST)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def image_get(request, image_id): \n    return glanceclient(request).images.get(image_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def colors(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('openvswitch.port_add' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('slack' if ('slack.post_message' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def selectables_overlap(left, right): \n    return bool(set(surface_selectables(left)).intersection(surface_selectables(right)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compactionstats(): \n    return _nodetool('compactionstats')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ellipk(m): \n    return ellipkm1((1 - asarray(m)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_profit_statement(code): \n    if code.isdigit(): \n      request = Request((ct.SINA_PROFITSTATEMENT_URL % code)) \n      text = urlopen(request, timeout=10).read() \n      text = text.decode('GBK') \n      text = text.replace(' DCTB \\n', '\\r\\n') \n      text = text.replace(' DCTB ', ',') \n      df = pd.read_csv(StringIO(text), dtype={'code': 'object'}) \n      return df",
        "line_count": 8,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _log_dirichlet_norm(dirichlet_concentration): \n    return (gammaln(np.sum(dirichlet_concentration)) - np.sum(gammaln(dirichlet_concentration)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test__FileIO_seekable(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_master(client, master_only=False): \n    if (master_only and (not is_master_node(client))): \n      logger.info('Master-only   flag   detected.   Connected   to   non-master   node.   Aborting.') \n      sys.exit(0)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def Scalar(obj): \n    return Sequence([obj])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sync_desktop_icons(): \n    for app in frappe.get_installed_apps(): \n      sync_from_app(app)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def onLoggerAppReady(): \n    INFO_MSG(('onLoggerAppReady:   bootstrapGroupIndex=%s,   bootstrapGlobalIndex=%s' % (os.getenv('KBE_BOOTIDX_GROUP'), os.getenv('KBE_BOOTIDX_GLOBAL'))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def scale(reader, writer, column, start, stop, multiple): \n    for (i, row) in enumerate(reader): \n      if ((i >= start) and (i <= stop)): \n         row[column] = (type(multiple)(row[column]) * multiple) \n      writer.appendRecord(row)",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def idd_frmi(m): \n    return _id.idd_frmi(m)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _hex_to_octets(addr): \n    return '{0}:{1}:{2}:{3}'.format(int(addr[6:8], 16), int(addr[4:6], 16), int(addr[2:4], 16), int(addr[0:2], 16))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def menu(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, mgfunc=None, saltLen=None): \n    return PSS_SigScheme(key, mgfunc, saltLen)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_restart_mode(restart_file, flag='reload'): \n    with open(restart_file, 'w') as f: \n      f.write(str(flag))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def komodo(exe=u'komodo'): \n    install_editor((exe + u'   -l   {line}   {filename}'), wait=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_glance_metadata_delete_by_volume(context, volume_id): \n    return IMPL.volume_glance_metadata_delete_by_volume(context, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def for_in_gen(N): \n    for i in range(N): \n      (yield i)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def indent(text, prefix): \n    return '\\n'.join(map((lambda l: ('%s%s' % (prefix, l))), text.split('\\n')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def authenticate(): \n    return Response('Could   not   verify   your   access   level   for   that   URL.\\nYou   have   to   login   with   proper   credentials', 401, {'WWW-Authenticate': 'Basic   realm=\"Login   Required\"'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_(key, value, profile=None): \n    return environ.setdefault(key, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_hcae_yaml(): \n    limited_epoch_train(os.path.join(pylearn2.__path__[0], 'scripts/autoencoder_example/hcae.yaml'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_buckets(): \n    return (__opts__['s3.buckets'] if ('s3.buckets' in __opts__) else {})",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ipv4_addr(addr): \n    return __ip_addr(addr, socket.AF_INET)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sub_dict(d, keys): \n    return dict([(k, d[k]) for k in keys if (k in d)])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def Benini(name, alpha, beta, sigma): \n    return rv(name, BeniniDistribution, (alpha, beta, sigma))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_tuple(n): \n    return (type(n) == tuple)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def array_encoding_disabled(array): \n    return (array.dtype not in BINARY_ARRAY_TYPES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def execute_compile_sass(args): \n    for sys in args.system: \n      options = '' \n      options += (('   --theme-dirs   ' + '   '.join(args.theme_dirs)) if args.theme_dirs else '') \n      options += (('   --themes   ' + '   '.join(args.themes)) if args.themes else '') \n      options += ('   --debug' if args.debug else '') \n      sh(django_cmd(sys, args.settings, 'compile_sass   {system}   {options}'.format(system=('cms' if (sys == 'studio') else sys), options=options)))",
        "line_count": 6,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def disk_usage(path): \n    return _psplatform.disk_usage(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_all_interfaces(): \n    return _interface_configs()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _root_anderson_doc(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _item_to_topic(iterator, resource): \n    return Topic.from_api_repr({'name': resource.name}, iterator.client)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safe_json(value): \n    return json.dumps(value).replace('</', '<\\\\/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_doc_if_exists(doctype, name, force=0): \n    if db.exists(doctype, name): \n      delete_doc(doctype, name, force=force)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def status(name, runas=None): \n    return prlctl('status', _sdecode(name), runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def json_response(obj): \n    return Response(response=json.dumps(obj, indent=4, cls=AirflowJsonEncoder), status=200, mimetype='application/json')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def randomLetter(): \n    return random.choice(string.ascii_letters)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_packages(package): \n    return [dirpath for (dirpath, dirnames, filenames) in os.walk(package) if os.path.exists(os.path.join(dirpath, '__init__.py'))]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def normalize_data_query_time(dt, time, tz): \n    return pd.Timestamp(datetime.datetime.combine(dt.date(), time), tz=tz).tz_convert('utc')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def loads(s): \n    while s: \n      s = s.strip() \n      (obj, pos) = _decoder.raw_decode(s) \n      if (not pos): \n         raise ValueError((u'no   JSON   object   found   at   %i' % pos)) \n      (yield obj) \n      s = s[pos:]",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def B(alpha, beta): \n    return ((math.gamma(alpha) * math.gamma(beta)) / math.gamma((alpha + beta)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def LoadEntity(entity, keys_only=False, property_names=None): \n    if entity: \n      clone = entity_pb.EntityProto() \n      if property_names: \n         clone.mutable_key().CopyFrom(entity.key()) \n         clone.mutable_entity_group() \n         seen = set() \n         for prop in entity.property_list(): \n            if (prop.name() in property_names): \n               Check((prop.name() not in seen), 'datastore   dev   stub   produced   bad   result', datastore_pb.Error.INTERNAL_ERROR) \n               seen.add(prop.name()) \n               new_prop = clone.add_property() \n               new_prop.set_name(prop.name()) \n               new_prop.set_meaning(entity_pb.Property.INDEX_VALUE) \n               new_prop.mutable_value().CopyFrom(prop.value()) \n               new_prop.set_multiple(False) \n      elif keys_only: \n         clone.mutable_key().CopyFrom(entity.key()) \n         clone.mutable_entity_group() \n      else: \n         clone.CopyFrom(entity) \n      PrepareSpecialPropertiesForLoad(clone) \n      return clone",
        "line_count": 22,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def vstack(operators, size): \n    return lo.LinOp(lo.VSTACK, size, operators, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def maximum(image, selem, out=None, mask=None, shift_x=False, shift_y=False): \n    return _apply_scalar_per_pixel(generic_cy._maximum, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetAttribute(node, attr): \n    return node.attrib.get(attr, '')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reboot(vm_): \n    with _get_xapi_session() as xapi: \n      vm_uuid = _get_label_uuid(xapi, 'VM', vm_) \n      if (vm_uuid is False): \n         return False \n      try: \n         xapi.VM.clean_reboot(vm_uuid) \n         return True \n      except Exception: \n         return False",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def main(argv, env=None): \n    return GenericArgparseImplementation(env).main(argv)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cont_inputs(f): \n    return typefilter(inputvars(f), continuous_types)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_png(filename): \n    return ('n02105855_2933.JPEG' in filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_data(p): \n    p[0] = ('DATA', p[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sm_backend_conf_create(context, values): \n    return IMPL.sm_backend_conf_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def increment_odd(x): \n    raise NotImplementedError('TODO:   implement   the   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_file(filename): \n    with codecs.open(filename, 'r', 'utf8') as f: \n      return f.read()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_json_for_js(data, indent=None): \n    return json.dumps(data, indent=indent, cls=JSONEncoderForHTML)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def defined_at(): \n    if DEBUG: \n      frame = inspect.currentframe() \n      while frame: \n         try: \n            if (frame.f_globals['__package__'] != __package__): \n               break \n         except KeyError: \n            break \n         frame = frame.f_back \n      ret = Frame(frame.f_lineno, frame.f_globals.get('__package__'), frame.f_globals.get('__name__'), frame.f_code.co_filename) \n      del frame \n      return ret",
        "line_count": 12,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def resource_filename(fn): \n    return os.path.join(os.path.dirname(sys.testing_document_filename), 'resources', os.path.splitext(os.path.basename(sys.testing_document_filename))[0], fn)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CreateConfig(**kwds): \n    return datastore_rpc.Configuration(**kwds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_error(string): \n    sys.stderr.write((string + '\\n'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unparse_url(scheme, host, port, path=''): \n    return ('%s://%s%s' % (scheme, hostport(scheme, host, port), path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_table_headings(choices): \n    return filter((lambda x: (x['id'] in choices)), HEADING_CHOICES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def IsNone(value): \n    return ((value is None) or (value == '') or (value.lower() == 'none'))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def test_get_init_4(): \n    nt.assert_is_none(mp.get_init(TMP_TEST_DIR))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shrink_tensor(x, w): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_snapshot_destroy(context, group_snapshot_id): \n    return IMPL.group_snapshot_destroy(context, group_snapshot_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_string(obj): \n    return isinstance(obj, _STRING_TYPES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isPower2(num): \n    return (((num & (num - 1)) == 0) and (num > 0))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def install(domain): \n    gettext.install(domain, localedir=os.environ.get((domain.upper() + '_LOCALEDIR')), unicode=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def softplus(z): \n    return np.log((1 + np.exp(z)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def proxy_connect(args): \n    if args.proxy_host: \n      if ((args.proxy_type.lower() == 'socks5') or (not args.proxy_type)): \n         socks.set_default_proxy(socks.SOCKS5, args.proxy_host, int(args.proxy_port)) \n      elif (args.proxy_type.lower() == 'http'): \n         socks.set_default_proxy(socks.HTTP, args.proxy_host, int(args.proxy_port)) \n      elif (args.proxy_type.lower() == 'socks4'): \n         socks.set_default_proxy(socks.SOCKS4, args.proxy_host, int(args.proxy_port)) \n      else: \n         printNicely(magenta('Sorry,   wrong   proxy   type   specified!   Aborting...')) \n         sys.exit() \n      socket.socket = socks.socksocket",
        "line_count": 11,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def sub(pattern, repl, string, count=0, flags=0, pos=None, endpos=None, concurrent=None, **kwargs): \n    return _compile(pattern, flags, kwargs).sub(repl, string, count, pos, endpos, concurrent)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _contains_bad_names(file_names): \n    return any([xml_unsafe.search(f) for f in file_names])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def marker_weight(matches, marker): \n    return len(set((match.name for match in matches.range(predicate=marker_comparator_predicate, *marker.span))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_test_cases(class_): \n    return _list_testloader().loadTestsFromTestCase(class_)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def softplus(x): \n    return theano.tensor.nnet.softplus(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot(name, suffix=None): \n    return _virt_call(name, 'snapshot', 'saved', 'Snapshot   has   been   taken', suffix=suffix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compressor(request): \n    return gzip_compressor(request)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_subscription_key(uid, event): \n    return u'{}_{}'.format(uid, event)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_task_id_from_xmodule_args(xmodule_instance_args): \n    return (xmodule_instance_args.get('task_id', UNKNOWN_TASK_ID) if (xmodule_instance_args is not None) else UNKNOWN_TASK_ID)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ProfilesFeedFromString(xml_string): \n    return atom.CreateClassFromXMLString(ProfilesFeed, xml_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cyclen(n, iterable): \n    return chain.from_iterable(repeat(tuple(iterable), n))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_ast_good_get(): \n    can_compile(u'(get   x   y)')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def untag(tagged_sentence): \n    return [w for (w, t) in tagged_sentence]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def bind_context(gr, role, account_id, *args): \n    gr.context = ':'.join(([role, str(account_id)] + [str(arg) for arg in args]))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def split(pattern, string, maxsplit=0, flags=0): \n    return _compile(pattern, flags).split(string, maxsplit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def walk_units_targets(): \n    return walk_test_targets(path='test/units', module_path='test/units/modules/', extensions=('.py',), prefix='test_')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trunk_can_be_managed(context, trunk): \n    if (not trunk.admin_state_up): \n      raise trunk_exc.TrunkDisabled(trunk_id=trunk.id)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_generation_hash(x): \n    return GenerationHash(hash_value=generation_hash(x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def from_record_like(rec, stream=0, gpu_data=None): \n    return DeviceRecord(rec.dtype, stream=stream, gpu_data=gpu_data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dist_in_site_packages(dist): \n    return normalize_path(dist_location(dist)).startswith(normalize_path(site_packages))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=XMLLexer(), buf_class=XMLBuffer, langintel_class=XMLLangIntel, import_handler_class=None, cile_driver_class=None, is_cpln_lang=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _backing_file_name(volume): \n    return ((volume.blockdevice_id.encode('ascii') + '_') + bytes(volume.size))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def aggregate_host_add(context, aggregate_id, host): \n    IMPL.aggregate_host_add(context, aggregate_id, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_dir_to_list(dirlist, dir): \n    if ((dir is not None) and os.path.isdir(dir) and (dir not in dirlist)): \n      dirlist.insert(0, dir)",
        "line_count": 2,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def relu(x, use_cudnn=True): \n    return ReLU(use_cudnn)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _arg_slen1(dvi, delta): \n    return dvi._arg((delta + 1), True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLKICKINGBYLENGTH(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLKICKINGBYLENGTH)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save(file, arr): \n    numpy.save(file, cupy.asnumpy(arr))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def verify_assertions(data, assertion_description_list): \n    for assertion_description in assertion_description_list: \n      verify_assertion(data, assertion_description)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def parse_cookie(data): \n    return ((k, v) for (k, v) in _parse_cookie(data) if _valid_cookie_name(k))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def backref(name, **kwargs): \n    return (name, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_group_get(context, group_uuid): \n    return IMPL.instance_group_get(context, group_uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rm_fetched(dist): \n    raise NotImplementedError()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def refresh_db(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_options(source): \n    options.set_source(source)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def AllocateIds(model_key, size=None, **kwargs): \n    return AllocateIdsAsync(model_key, size, **kwargs).get_result()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_update(context, address, values): \n    return IMPL.fixed_ip_update(context, address, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dmp_gf_factor(f, u, K): \n    raise NotImplementedError('multivariate   polynomials   over   finite   fields')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _es_down_template(request, *args, **kwargs): \n    return ('search/mobile/down.html' if request.MOBILE else 'search/down.html')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _is_sunder(name): \n    return ((name[0] == name[(-1)] == '_') and (name[1:2] != '_') and (name[(-2):(-1)] != '_') and (len(name) > 2))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'oozebane', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_filemask(val): \n    if ('*' not in val): \n      raise ValidationError(_('File   mask   does   not   contain   *   as   a   language   placeholder!'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def start(name): \n    return (_get_domain(name).create() == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_if(p): \n    p[0] = ('IF', p[2], int(p[4]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upsampling_2d(x, indexes, ksize, stride=None, pad=0, outsize=None, cover_all=True): \n    return Upsampling2D(indexes, ksize, stride, pad, outsize, cover_all)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_flags(obj, flag_field, flags): \n    for flag in flags: \n      if (flag[1] & flag_field): \n         obj.__dict__[flag[0]] = True \n      else: \n         obj.__dict__[flag[0]] = False",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def __virtual__(): \n    return suos.check_swift()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_brick(var): \n    return get_annotation(var, Brick)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape_xml_illegal_chars(val, replacement=''): \n    return _illegal_xml_chars_re.sub(replacement, val)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_(a, b, msg=None): \n    assert (a is b), (msg or ('%r   is   not   %r' % (a, b)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_enum_seq(p): \n    _parse_seq(p)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_class_get(context, class_name, resource): \n    return IMPL.quota_class_get(context, class_name, resource)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connects_to_emergency_number(number, region_code): \n    return _matches_emergency_number_helper(number, region_code, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mean(image, selem, out=None, mask=None, shift_x=False, shift_y=False): \n    return _apply_scalar_per_pixel(generic_cy._mean, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_image_list(releaseid): \n    return _caa_request(releaseid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_follower_count(context, data_dict): \n    return _follower_count(context, data_dict, ckan.logic.schema.default_follow_group_schema(), context['model'].UserFollowingGroup)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def VisualWait(verbose, *args, **kwargs): \n    return (_VisualWait(*args, **kwargs) if (verbose > 1) else _NotVisualWait())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def clean_dir(directory): \n    sh('find   {dir}   -type   f   -delete'.format(dir=directory))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def leaks(url='http://localhost:8080/manager', timeout=180): \n    return _wget('findleaks', {'statusLine': 'true'}, url, timeout=timeout)['msg']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Reader(database): \n    return open_database(database)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deprecatedDeferredGenerator(f): \n    return runWithWarningsSuppressed([SUPPRESS(message='twisted.internet.defer.deferredGenerator   was   deprecated')], deferredGenerator, f)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_data(): \n    _test_raw_reader(read_raw_nicolet, input_fname=fname, ch_type='eeg', ecg='auto', eog='auto', emg='auto', misc=['PHO'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def endpoint_type(bmAttributes): \n    return (bmAttributes & _ENDPOINT_TRANSFER_TYPE_MASK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_auth_username(): \n    return LDAP_USERNAME.get()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def now(tz=None): \n    return _factory.now(tz)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chown(path, owner=None): \n    if owner: \n      try: \n         (x, y) = (owner, (-1)) \n         (x, y) = (x if isinstance(x, tuple) else (x, y)) \n         (x, y) = ((pwd.getpwnam(x).pw_uid if (not isinstance(x, int)) else x), (grp.getgrnam(y).gr_gid if (not isinstance(y, int)) else y)) \n         os.chown(path, x, y) \n         return True \n      except: \n         return False",
        "line_count": 9,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def instance_get(context, instance_id, columns_to_join=None): \n    return IMPL.instance_get(context, instance_id, columns_to_join=columns_to_join)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_element_text_is(output, path, text): \n    assert_element_text_matches(output, path, re.escape(text))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_informational(status): \n    return ((100 <= status) and (status <= 199))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def actions_get(context, uuid): \n    return IMPL.actions_get(context, uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_master_key(): \n    return os.urandom(32)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def batch_matmul(a, b, transa=False, transb=False): \n    return BatchMatMul(transa=transa, transb=transb)(a, b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addNegatives(derivation, negatives, paths): \n    for path in paths: \n      loopListsByPath = getLoopListsByPath(derivation, 1.000001, path) \n      geometryOutput = triangle_mesh.getPillarsOutput(loopListsByPath) \n      negatives.append(geometryOutput)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def assert_true(expr, msg=None): \n    if (not expr): \n      _report_failure(msg)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_credit_requests_for_user(username): \n    return CreditRequest.credit_requests_for_user(username)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _blockdevicevolume_from_dataset_id(dataset_id, size, attached_to=None): \n    return BlockDeviceVolume(size=size, attached_to=attached_to, dataset_id=dataset_id, blockdevice_id=u'block-{0}'.format(dataset_id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set(ctid_or_name, save=True, **kwargs): \n    return _vzctl('set', ctid_or_name, save=save, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def embeddings_with_init(vocab_size, embedding_dim, name): \n    return tf.get_variable(name=name, shape=[vocab_size, embedding_dim], initializer=tf.random_normal_initializer(stddev=math.sqrt((1.0 / embedding_dim))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def votes_visible(user): \n    return ((c.user_is_loggedin and (c.user.name == user.name)) or user.pref_public_votes or c.user_is_admin)",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def features(vectors=[]): \n    return set(chain(*vectors))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_feature_enabled(): \n    return settings.FEATURES.get('USE_MICROSITES', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_product_images(product): \n    return list(product.images.all())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unlink_paths_older_than(filepaths, mtime): \n    for fpath in filepaths: \n      try: \n         if (os.path.getmtime(fpath) < mtime): \n            os.unlink(fpath) \n      except OSError: \n         pass",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_shapes(imshp=(1, 1), kshp=(1, 1), subsample=(1, 1), img_stride=(1, 1), kern_stride=(1, 1)): \n    return [(((1, 2) + imshp), ((1, 2) + kshp), subsample, img_stride, kern_stride), (((3, 1) + imshp), ((1, 1) + kshp), subsample, img_stride, kern_stride), (((1, 1) + imshp), ((2, 1) + kshp), subsample, img_stride, kern_stride), (((3, 1) + imshp), ((2, 1) + kshp), subsample, img_stride, kern_stride), (((3, 2) + imshp), ((1, 2) + kshp), subsample, img_stride, kern_stride), (((1, 2) + imshp), ((2, 2) + kshp), subsample, img_stride, kern_stride), (((2, 2) + imshp), ((2, 2) + kshp), subsample, img_stride, kern_stride), (((3, 2) + imshp), ((4, 2) + kshp), subsample, img_stride, kern_stride)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mul(a, b): \n    return (a * b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_args(value=NEW): \n    return value",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eq(a, b): \n    return (a == b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_k_fold_splits(cv): \n    for (k, (train, test)) in enumerate(cv): \n      valid_k = (k + 1) \n      if (valid_k == len(cv)): \n         valid_k = 0 \n      valid = cv[valid_k][1] \n      train = np.setdiff1d(train, valid) \n      (yield (train, valid, test))",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def ishold(): \n    return gca().ishold()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write(file_name, contents): \n    with open(file_name, WRITE_ONLY) as file_handle: \n      file_handle.write(contents)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _date_time_match(cron, **kwargs): \n    return all([((kwargs.get(x) is None) or (cron[x] == str(kwargs[x])) or ((str(kwargs[x]).lower() == 'random') and (cron[x] != '*'))) for x in ('minute', 'hour', 'daymonth', 'month', 'dayweek')])",
        "line_count": 1,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def ResampleRows(df): \n    return SampleRows(df, len(df), replace=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_rhel(distribution): \n    return distribution.startswith('rhel-')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def std(data): \n    return np.std(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_lapack_funcs(names, arrays=(), dtype=None): \n    return _get_funcs(names, arrays, dtype, 'LAPACK', _flapack, _clapack, 'flapack', 'clapack', _lapack_alias)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _imghdr_what_wrapper(data): \n    return (imghdr.what(None, h=data) or _wider_test_jpeg(data))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def update_headers(headers, api_version): \n    if (not api_version.is_null()): \n      version_string = api_version.get_string() \n      if (api_version.ver_minor != 0): \n         headers[LEGACY_HEADER_NAME] = version_string \n      if (api_version.ver_minor >= 27): \n         headers[HEADER_NAME] = ('%s   %s' % (SERVICE_TYPE, version_string))",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def to_img(arr, os): \n    return Image.fromarray((arr.reshape(os, os) * 255.0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_folder_list(path=''): \n    return [os.path.join(path, o) for o in os.listdir(path) if os.path.isdir(os.path.join(path, o))]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def query(params): \n    return ShowTicketsQuery(*params).query()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nics_skip(name, nics, ipv6): \n    return nics_skipped(name, nics=nics, ipv6=ipv6)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_all_exploration_summaries(): \n    return _get_exploration_summaries_from_models(exp_models.ExpSummaryModel.get_all())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def starttime(pid): \n    return (psutil.Process(pid).create_time() - psutil.boot_time())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_cache(): \n    _resource_cache.clear()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_get_all_servicemanage_sorted(context): \n    return IMPL.service_get_all_servicemanage_sorted(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fake_cluster_ovo(context, **updates): \n    return objects.Cluster._from_db_object(context, objects.Cluster(), fake_cluster_orm(**updates))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def yaml_from_dict(dictionary, width=80): \n    return yaml.safe_dump(dictionary, default_flow_style=False, width=width)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def checkRun(cmd): \n    return check_call(cmd.split('   '))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_python_version(): \n    if (sys.version_info[:2] != (2, 7)): \n      raise CuckooStartupError('You   are   running   an   incompatible   version   of   Python,   please   use   2.7')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'fill', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_yahoo_index_url(symbol, start_date, end_date): \n    return ('http://ichart.finance.yahoo.com/table.csv?' + urlencode({'s': symbol, 'a': (start_date.month - 1), 'b': start_date.day, 'c': start_date.year, 'd': (end_date.month - 1), 'e': end_date.day, 'f': end_date.year, 'g': 'd'}))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _colors(n): \n    for i in xrange(n): \n      (yield colorsys.hsv_to_rgb((float(i) / n), 1.0, 1.0))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def compute_node_update(context, compute_id, values, prune_stats=False): \n    return IMPL.compute_node_update(context, compute_id, values, prune_stats)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def null_error_tracker(msg): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decode_fs_path(path): \n    return force_unicode(path, HDFS_ENCODING, errors='strict')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def am_following_user(context, data_dict): \n    return _am_following(context, data_dict, ckan.logic.schema.default_follow_user_schema(), context['model'].UserFollowingUser)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_errant_logs_for_tree(root_node): \n    return (log for node in root_node.node_and_primary_descendants() for log in get_errant_logs(node))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def tree2str(tree, concat='   '): \n    return concat.join([word for (word, tag) in tree])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def default_deadline_for_credit_eligibility(): \n    return (datetime.datetime.now(pytz.UTC) + datetime.timedelta(days=getattr(settings, 'CREDIT_ELIGIBILITY_EXPIRATION_DAYS', 365)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('modjk.workers' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getFabmetheusPath(subName=''): \n    return getJoinedPath(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), subName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encryptMessage(key, message): \n    return translateMessage(key, message, 'encrypt')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def centroid(y): \n    return linkage(y, method='centroid', metric='euclidean')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SlashSlugCheck(slug): \n    return SlugCheck(slug, allow='/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_default_object_values(): \n    return json.loads(utils.get_file_contents(feconf.OBJECT_DEFAULT_VALUES_FILE_PATH))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_snmp(community, host=None, admin_username=None, admin_password=None): \n    return __execute_cmd('config   -g   cfgOobSnmp   -o   cfgOobSnmpAgentCommunity   {0}'.format(community), host=host, admin_username=admin_username, admin_password=admin_password)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def binary_erosion(input, structure=None, iterations=1, mask=None, output=None, border_value=0, origin=0, brute_force=False): \n    return _binary_erosion(input, structure, iterations, mask, output, border_value, origin, 0, brute_force)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timedelta_to_integral_seconds(delta): \n    return int(delta.total_seconds())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_call_item_to_queue(pending_work_items, work_ids, call_queue): \n    while True: \n      if call_queue.full(): \n         return \n      try: \n         work_id = work_ids.get(block=False) \n      except queue.Empty: \n         return \n      else: \n         work_item = pending_work_items[work_id] \n         if work_item.future.set_running_or_notify_cancel(): \n            call_queue.put(_CallItem(work_id, work_item.fn, work_item.args, work_item.kwargs), block=True) \n         else: \n            del pending_work_items[work_id] \n            continue",
        "line_count": 14,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def quota_usage_get(context, project_id, resource): \n    return IMPL.quota_usage_get(context, project_id, resource)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_user(username): \n    return sendline('show   run   |   include   \"^username   {0}   password   5   \"'.format(username))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def structure_to_mongo(structure, course_context=None): \n    with TIMER.timer('structure_to_mongo', course_context) as tagger: \n      tagger.measure('blocks', len(structure['blocks'])) \n      check('BlockKey', structure['root']) \n      check('dict(BlockKey:   BlockData)', structure['blocks']) \n      for block in structure['blocks'].itervalues(): \n         if ('children' in block.fields): \n            check('list(BlockKey)', block.fields['children']) \n      new_structure = dict(structure) \n      new_structure['blocks'] = [] \n      for (block_key, block) in structure['blocks'].iteritems(): \n         new_block = dict(block.to_storable()) \n         new_block.setdefault('block_type', block_key.type) \n         new_block['block_id'] = block_key.id \n         new_structure['blocks'].append(new_block) \n      return new_structure",
        "line_count": 15,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def gemset_delete(ruby, gemset, runas=None): \n    return _rvm_do(ruby, ['rvm', '--force', 'gemset', 'delete', gemset], runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Uniform(name, left, right): \n    return rv(name, UniformDistribution, (left, right))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RegexAnalyzer(expression='\\\\w+(\\\\.?\\\\w+)*', gaps=False): \n    return RegexTokenizer(expression=expression, gaps=gaps)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def authorize(): \n    subprocess.call(['open', get_oauth_service().get_authorize_url(**constants.AUTHORIZE_DATA)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _maybe_schedule_rebuild(form): \n    if (('title' in form.changed_data) or ('slug' in form.changed_data)): \n      schedule_rebuild_kb()",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def candies(): \n    return _inventory.candy",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def LocalPathToCanonicalPath(path): \n    return utils.NormalizePath(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shows_by_name(normalized_name, session=None): \n    return session.query(Series).filter(Series._name_normalized.contains(normalized_name)).order_by(func.char_length(Series.name)).all()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def binary_str(data): \n    return ''.join((('\\\\x%02x' % byte) for byte in bytearray(data)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def mean_absolute_error(y_true, y_pred): \n    return tf.reduce_mean(tf.abs((y_pred - y_true)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_employees_who_are_born_today(): \n    return frappe.db.sql(u\"select   name,   personal_email,   company_email,   user_id,   employee_name\\n DCTB  DCTB from   tabEmployee   where   day(date_of_birth)   =   day(%(date)s)\\n DCTB  DCTB and   month(date_of_birth)   =   month(%(date)s)\\n DCTB  DCTB and   status   =   'Active'\", {u'date': today()}, as_dict=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def header(hdr, value): \n    context.headers.append((hdr, value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_required(action): \n    return (((not action.option_strings) and (not isinstance(action, _SubParsersAction))) or (action.required == True))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def serialize_tree(items): \n    for (name, mode, hexsha) in items: \n      (yield ((((('%04o' % mode).encode('ascii') + '   ') + name) + '\\x00') + hex_to_sha(hexsha)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_validation_set_from_train(train, train_cv): \n    for (new_train, new_valid) in train_cv: \n      return (train[new_train], train[new_valid])",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _unauthorized(): \n    return Response('Unauthorized', 401, {'WWW-Authenticate': 'Negotiate'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_attr_info(): \n    return {'distributed': {'default': cfg.CONF.router_distributed}, 'ha': {'default': cfg.CONF.l3_ha}, 'ha_vr_id': {'default': 0}, 'availability_zone_hints': {'default': '[]', 'transform_to_db': az.convert_az_list_to_string, 'transform_from_db': az.convert_az_string_to_list}}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def case_status(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _timestamp_from_json(value, field): \n    if _not_null(value, field): \n      return _datetime_from_microseconds((1000000.0 * float(value)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def object_build_datadescriptor(node, member, name): \n    return _base_class_object_build(node, member, [], name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_new_element(items, prefix, numeric=False): \n    while True: \n      if numeric: \n         candidate = (prefix + generate_random_numeric(8)) \n      else: \n         candidate = (prefix + generate_random_alphanumeric(8)) \n      if (candidate not in items): \n         return candidate \n      LOG.debug(('Random   collision   on   %s' % candidate))",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def organization_show(context, data_dict): \n    return _group_or_org_show(context, data_dict, is_org=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return ClipRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_direct_abstract_declarator_4(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable_microsites(log): \n    if is_feature_enabled(): \n      BACKEND.enable_microsites(log)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def abort(code=500, text='Unknown   Error:   Application   stopped.'): \n    raise HTTPError(code, text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def worker_create(context, **values): \n    return IMPL.worker_create(context, **values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_masked_string(s, p): \n    return fromstring(s, dtype=uint8)[p].tostring()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def v6_int_to_packed(address): \n    return struct.pack('!QQ', (address >> 64), (address & ((2 ** 64) - 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_index(group): \n    return (u'%s_%s' % (settings.ES_INDEX_PREFIX, settings.ES_INDEXES[group]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disable(): \n    return (_parse_return_code_powershell(_psrdp('$RDP.SetAllowTsConnections(0,1)')) == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ATOM(atom): \n    return etree.XML(atom, atom_parser)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode, prefix, sideLength): \n    return EquationDerivation(elementNode, prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decompress(body, content_type): \n    return get_decoder(content_type)(body)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ad_as_ts(expr): \n    return (None if (expr is None) else bz.transform(expr, **{TS_FIELD_NAME: expr[AD_FIELD_NAME]}))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ttylog_close(logfile, stamp): \n    with open(logfile, 'ab') as f: \n      (sec, usec) = (int(stamp), int((1000000 * (stamp - int(stamp))))) \n      f.write(struct.pack('<iLiiLL', 2, 0, 0, 0, sec, usec))",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPluginFileNames(): \n    return archive.getPluginFileNamesFromDirectoryPath(archive.getSkeinforgePluginsPath())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete(models, **kwargs): \n    delete_async(models, **kwargs).get_result()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isValid(text): \n    return bool(re.search('\\\\bnotification|Facebook\\\\b', text, re.IGNORECASE))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fanout_cast(conf, context, topic, msg, **kwargs): \n    _multi_send(_cast, context, ('fanout~' + str(topic)), msg, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_spaces_between_tags(value): \n    return re.sub(u'>\\\\s+<', u'><', force_text(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _clamp_norm_point(pos): \n    return (min(100, max((-100), pos[0])), min(100, max((-100), pos[1])))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_gcp_environ_var(var_name, default_value): \n    return os.environ.get(var_name, default_value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_dz(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def recho(text): \n    return text[::(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def configure_cluster(cluster, dataset_backend_configuration, provider, logging_config=None): \n    return sequence([configure_control_node(cluster, provider, logging_config), parallel([sequence([configure_node(cluster, node, certnkey, dataset_backend_configuration, provider, logging_config)]) for (certnkey, node) in zip(cluster.certificates.nodes, cluster.agent_nodes)])])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def import_object(import_str, *args, **kwargs): \n    return import_class(import_str)(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timestamp(): \n    return time.time()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text, repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hmac_sha256_digest(key, msg): \n    return hmac.new(key, msg, hashlib.sha256).digest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stop(search, one=True): \n    return _action('stop', search, one)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def item_candidates(item, artist, title): \n    for plugin in find_plugins(): \n      for item_candidate in plugin.item_candidates(item, artist, title): \n         (yield item_candidate)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def log(msg): \n    if _log: \n      print >>_log, msg",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def compose(): \n    return s3db.hrm_compose()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wordcount(value): \n    return len(value.split())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_mongo_application(): \n    return Application(name=MONGO_APPLICATION, image=DockerImage.from_string((MONGO_IMAGE + u':latest')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def not_equal(x, y): \n    return tf.not_equal(x, y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lshift(a, b): \n    return (a << b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def simulate_post(app, path, **kwargs): \n    return simulate_request(app, 'POST', path, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _find_aggregate(cs, aggregate): \n    return utils.find_resource(cs.aggregates, aggregate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, svgText='', repository=None): \n    return getCraftedTextFromText(fileName, archive.getTextIfEmpty(fileName, svgText), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def draw_spring(G, **kwargs): \n    draw(G, spring_layout(G), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return AntennaModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_shift_expression_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bucket_upload_file(self, Filename, Key, ExtraArgs=None, Callback=None, Config=None): \n    return self.meta.client.upload_file(Filename=Filename, Bucket=self.name, Key=Key, ExtraArgs=ExtraArgs, Callback=Callback, Config=Config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floordiv(a, b): \n    return (a // b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize_node_id(nid): \n    return ('\"%s\"' % nid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _append(filename, regex, use_sudo): \n    with hide('stdout', 'warnings'): \n      return append(filename, regex, use_sudo=use_sudo)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_applicable_vm_recs(xenapi): \n    for vm_ref in call_xenapi(xenapi, 'VM.get_all'): \n      try: \n         vm_rec = call_xenapi(xenapi, 'VM.get_record', vm_ref) \n      except XenAPI.Failure as e: \n         if (e.details[0] != 'HANDLE_INVALID'): \n            raise \n         continue \n      if (vm_rec['is_a_template'] or vm_rec['is_control_domain']): \n         continue \n      (yield (vm_ref, vm_rec))",
        "line_count": 10,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def register_create_keys_from_csr_arguments(session, argument_table, **kwargs): \n    argument_table['certificate-pem-outfile'] = QueryOutFileArgument(session=session, name='certificate-pem-outfile', query='certificatePem', after_call_event='after-call.iot.CreateCertificateFromCsr', perm=384)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def split_named_range(range_string): \n    for range_string in SPLIT_NAMED_RANGE_RE.split(range_string)[1::2]: \n      match = NAMED_RANGE_RE.match(range_string) \n      if (match is None): \n         raise NamedRangeException(('Invalid   named   range   string:   \"%s\"' % range_string)) \n      else: \n         match = match.groupdict() \n         sheet_name = (match['quoted'] or match['notquoted']) \n         xlrange = match['range'] \n         sheet_name = sheet_name.replace(\"''\", \"'\") \n         (yield (sheet_name, xlrange))",
        "line_count": 10,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def zipp(params, tparams): \n    for (kk, vv) in params.items(): \n      tparams[kk].set_value(vv)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _write_enums(enum_descriptors, out): \n    for enum in (enum_descriptors or []): \n      (out << '') \n      (out << '') \n      (out << ('class   %s(messages.Enum):' % enum.name)) \n      (out << '') \n      with out.indent(): \n         if (not enum.values): \n            (out << 'pass') \n         else: \n            for enum_value in enum.values: \n               (out << ('%s   =   %s' % (enum_value.name, enum_value.number)))",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def _include_profile_image(requested_fields): \n    return (requested_fields and ('profile_image' in requested_fields))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def parse_yahoo_historical_ohlc(fh, adjusted=True, asobject=False): \n    return _parse_yahoo_historical(fh, adjusted=adjusted, asobject=asobject, ochl=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def posixize_path(rel_path): \n    return rel_path.replace(os.sep, u'/')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_cache_key(shop): \n    return (str(u'%s:%s') % (_SHOP_CONF_NAMESPACE, (shop.pk if shop else 0)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def imprint(env, input_arr): \n    env.generate_input_data = (lambda _: input_arr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def genome_generator(): \n    return MutableSeq('1234', TestAlphabet())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_ST3(): \n    return (sys.version_info >= (3, 0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_specify_shape_c_code(typ, code, version=(), c_support_code_apply=None): \n    SpecifyShape.c_code_and_version[typ] = (code, version, c_support_code_apply)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def release(): \n    return uname().release",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ce_unknown_host_cb(host, fingerprint): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def div_expr(lh_op, rh_op): \n    return lo.LinOp(lo.DIV, lh_op.size, [lh_op], rh_op)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isValid(text): \n    return bool(re.search('\\\\b(hack(er)?|HN)\\\\b', text, re.IGNORECASE))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pvector_field(item_type, optional=False, initial=()): \n    return _sequence_field(CheckedPVector, 'PVector', item_type, optional, initial)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def str_join(arr, sep): \n    return _na_map(sep.join, arr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_emerge_default_opts(): \n    return get_var('EMERGE_DEFAULT_OPTS')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plugin(): \n    return SelectAttr",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def agent_build_destroy(context, agent_update_id): \n    IMPL.agent_build_destroy(context, agent_update_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_session(session): \n    with open(SESSION_FILE, 'w') as res_file: \n      json.dump(session, res_file)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_self_paced(course): \n    return (course and course.self_paced and SelfPacedConfiguration.current().enabled)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def index(_): \n    return HttpResponse()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find(function, list): \n    for item in list: \n      if (function(item) == True): \n         return item",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def __virtual__(): \n    return 'pip'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onCellAppDataDel(key): \n    DEBUG_MSG(('onCellAppDataDel:   %s' % key))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tamper(payload, **kwargs): \n    return payload.replace(\"'\", \"\\\\'\").replace('\"', '\\\\\"')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isEmptyOrCancelled(fileName, wasCancelled): \n    return ((str(fileName) == '') or (str(fileName) == '()') or wasCancelled)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def repr_events(h, events): \n    return u',   '.join((u'{0}({1})->{2}'.format(_rcb(callback_for(h, fd, fl, u'(GONE)')), fd, repr_flag(fl)) for (fd, fl) in events))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def setup(app): \n    app.connect('source-read', source_read)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def package(pkg_name, update=False): \n    if (not is_installed(pkg_name)): \n      install(pkg_name, update=update)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def print_python(expr, **settings): \n    print(python(expr, **settings))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Application_Start(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_hostname(): \n    return socket.gethostname()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def walk_compile_targets(): \n    return walk_test_targets(module_path='lib/ansible/modules/', extensions=('.py',))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def confidenceIntervalSize(stdev, nbsamples): \n    return (((2 * 1.98) * stdev) / sqrt(nbsamples))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connected(): \n    return {'out': __proxy__['napalm.ping']()}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text, coolRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), coolRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete(filename): \n    OggOpus(filename).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def merge(path_from, path_to, time_from=None, time_to=None): \n    with open(path_from, 'rb') as fh_from: \n      with open(path_to, 'rb+') as fh_to: \n         return file_merge(fh_from, fh_to, time_from, time_to)",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_cohort_names(course): \n    return {cohort.id: cohort.name for cohort in get_course_cohorts(course)}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def find_referenced_templates(ast): \n    for node in ast.find_all((nodes.Extends, nodes.FromImport, nodes.Import, nodes.Include)): \n      if (isinstance(node.template, nodes.Const) and isinstance(node.template.value, basestring)): \n         (yield node.template.value) \n      else: \n         (yield None)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def vni_to_bin(vni): \n    return type_desc.Int3.from_user(vni)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None, concurrent=None, **kwargs): \n    return _compile(pattern, flags, kwargs).subn(repl, string, count, pos, endpos, concurrent)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _FindRuleTriggerFiles(rule, sources): \n    return rule.get('rule_sources', [])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=NodeJSLexer(mgr), buf_class=NodeJSBuffer, langintel_class=NodeJSLangIntel, import_handler_class=NodeJSImportHandler, cile_driver_class=NodeJSCILEDriver, is_cpln_lang=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sendBundle(bundle, ipAddr='127.0.0.1', port=9000): \n    with oscLock: \n      outSocket.sendto(bundle.message, (ipAddr, port))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def push(): \n    return run(Push)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onearg(x): \n    return (2 * x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def toggle_actions(actions, enable): \n    if (actions is not None): \n      for action in actions: \n         if (action is not None): \n            action.setEnabled(enable)",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def notdefault(item): \n    return (bool(item) and (str(item).lower() not in ('default', '*', '', str(DEFAULT_PRIORITY))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _ScrubShareNew(op_args): \n    _ScrubForClass(Viewpoint, op_args['viewpoint'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _byte_string(s): \n    return s.encode('US-ASCII')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_current_user_admin(): \n    return (os.environ.get('USER_IS_ADMIN', '0') == '1')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def typed(ruletypes): \n    return switch(type, ruletypes)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fake_get_vim_object(arg): \n    return fake.FakeVim()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def EnqueueBackgroundThread(request_id, target, args, kwargs): \n    return _pending_background_threads.EnqueueBackgroundThread(request_id, target, args, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_item_user_text(item, text): \n    item.setData(0, Qt.UserRole, to_qvariant(text))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_get_all_by_topic(context, topic): \n    return IMPL.service_get_all_by_topic(context, topic)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _compare_keys(key_record1, key_record2): \n    return cmp(key_record1[0], key_record2[0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iterhosts(resources): \n    for (module_name, key, resource) in resources: \n      (resource_type, name) = key.split(u'.', 1) \n      try: \n         parser = PARSERS[resource_type] \n      except KeyError: \n         continue \n      (yield parser(resource, module_name))",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_python_version(): \n    return sys.version_info[:3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inplace_tanh_derivative(Z, delta): \n    delta *= (1 - (Z ** 2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete(filename): \n    OggTheora(filename).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_destination(script_parts): \n    for part in script_parts: \n      if ((part not in {'ln', '-s', '--symbolic'}) and os.path.exists(part)): \n         return part",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_build_id_offsets(): \n    return {'i386': [372], 'arm': [372], 'thumb': [372], 'aarch64': [568], 'amd64': [624, 372], 'powerpc': [372], 'powerpc64': [568], 'sparc': [372], 'sparc64': [624]}.get(context.arch, [])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isclass(object): \n    return (isinstance(object, types.ClassType) or hasattr(object, '__bases__'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_id_mappings(): \n    with sql.session_for_read() as session: \n      refs = session.query(mapping_sql.IDMapping).all() \n      return [x.to_dict() for x in refs]",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def create_instance(c_instance): \n    return Launchpad(c_instance)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exactly_one(l): \n    return exactly_n(l)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isvector(X): \n    return (np.prod(X.shape) == np.max(X.shape))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def collection_creation_options(): \n    return CREATION_ONLY_OPTION",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ascii_lower(string): \n    return string.encode(u'utf8').lower().decode(u'utf8')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def identity(X): \n    return X",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def os_version(attrs=None, where=None): \n    return _osquery_cmd(table='os_version', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _expand_path(path): \n    return (path if is_win() else ('\"$(echo   %s)\"' % path))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def v_str(v_tuple): \n    return '.'.join((str(x) for x in v_tuple))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def block_inception_b(inputs, scope=None, reuse=None): \n    with slim.arg_scope([slim.conv2d, slim.avg_pool2d, slim.max_pool2d], stride=1, padding='SAME'): \n      with tf.variable_scope(scope, 'BlockInceptionB', [inputs], reuse=reuse): \n         with tf.variable_scope('Branch_0'): \n            branch_0 = slim.conv2d(inputs, 384, [1, 1], scope='Conv2d_0a_1x1') \n         with tf.variable_scope('Branch_1'): \n            branch_1 = slim.conv2d(inputs, 192, [1, 1], scope='Conv2d_0a_1x1') \n            branch_1 = slim.conv2d(branch_1, 224, [1, 7], scope='Conv2d_0b_1x7') \n            branch_1 = slim.conv2d(branch_1, 256, [7, 1], scope='Conv2d_0c_7x1') \n         with tf.variable_scope('Branch_2'): \n            branch_2 = slim.conv2d(inputs, 192, [1, 1], scope='Conv2d_0a_1x1') \n            branch_2 = slim.conv2d(branch_2, 192, [7, 1], scope='Conv2d_0b_7x1') \n            branch_2 = slim.conv2d(branch_2, 224, [1, 7], scope='Conv2d_0c_1x7') \n            branch_2 = slim.conv2d(branch_2, 224, [7, 1], scope='Conv2d_0d_7x1') \n            branch_2 = slim.conv2d(branch_2, 256, [1, 7], scope='Conv2d_0e_1x7') \n         with tf.variable_scope('Branch_3'): \n            branch_3 = slim.avg_pool2d(inputs, [3, 3], scope='AvgPool_0a_3x3') \n            branch_3 = slim.conv2d(branch_3, 128, [1, 1], scope='Conv2d_0b_1x1') \n         return tf.concat(3, [branch_0, branch_1, branch_2, branch_3])",
        "line_count": 18,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getTopOverBottom(angle, endZ, inradiusComplex, startZ): \n    return max((1.0 - ((abs((endZ - startZ)) * math.tan(angle)) / lineation.getRadiusAverage(inradiusComplex))), 0.0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_extension(template): \n    return template[:(- len('.template'))]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Frechet(name, a, s=1, m=0): \n    return rv(name, FrechetDistribution, (a, s, m))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def in_travis(): \n    return (os.getenv(IN_TRAVIS_ENV) == 'true')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addGeometryList(vertexes, xmlElement): \n    for vertex in vertexes: \n      vertexElement = getUnboundVertexElement(vertex) \n      vertexElement.parent = xmlElement \n      xmlElement.children.append(vertexElement)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def BetaPrime(name, alpha, beta): \n    return rv(name, BetaPrimeDistribution, (alpha, beta))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_user_model_path(): \n    return getattr(settings, u'AUTH_USER_MODEL', u'auth.User')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_qapp_name(qapp): \n    assert (qapp.applicationName() == 'qute_test')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def visit_snippet_literal(self, node): \n    self.visit_literal_block(node)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ParseFileEx(file, base_uri, select_default=False, form_parser_class=FormParser, request_class=_request.Request, entitydefs=None, encoding=DEFAULT_ENCODING, _urljoin=urlparse.urljoin, _urlparse=urlparse.urlparse, _urlunparse=urlparse.urlunparse): \n    return _ParseFileEx(file, base_uri, select_default, False, form_parser_class, request_class, entitydefs, False, encoding, _urljoin=_urljoin, _urlparse=_urlparse, _urlunparse=_urlunparse)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PackBlob(name, value, pbvalue): \n    pbvalue.set_stringvalue(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_connection(new=True): \n    return _get_impl().create_connection(CONF, new=new)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sub(pattern, repl, string, count=0): \n    return _compile(pattern, 0).sub(repl, string, count)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_dark_lang_config(apps, schema_editor): \n    raise RuntimeError(u'Cannot   reverse   this   migration.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def find(callable, desktop=None): \n    return root(desktop).find(callable)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_view_plugin(view_type): \n    for plugin in p.PluginImplementations(p.IResourceView): \n      info = plugin.info() \n      name = info.get('name') \n      if (name == view_type): \n         return plugin",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def urlunquote(quoted_url): \n    return force_text(urllib_parse.unquote(force_str(quoted_url)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def InsertNodesBefore(new_nodes, target): \n    for node in new_nodes: \n      _InsertNodeAt(node, target, after=False)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def apphook_post_delete_page_checker(instance, **kwargs): \n    if instance.application_urls: \n      request_finished.connect(trigger_restart, dispatch_uid=DISPATCH_UID)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_matrix(): \n    raise NotImplementedError('TODO:   implement   this   function.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_nonce(): \n    return random.randrange(1000000000, 2000000000)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def push_connection(redis): \n    _connection_stack.push(patch_connection(redis))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def virt_type(): \n    return __grains__['virtual']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_id(ID): \n    return (re.match(u'^[A-Za-z_][A-Za-z0-9_\\\\.\\\\-]*$', ID) is not None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gather(reference, indices): \n    return tf.gather(reference, indices)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compile_single(source, options, full_module_name=None): \n    return run_pipeline(source, options, full_module_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nowtime(): \n    return now_datetime().strftime(TIME_FORMAT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _iso8601(dt): \n    return dt.isoformat()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def supports_selection(): \n    return QApplication.clipboard().supportsSelection()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_permissions(path, permission): \n    return (oct((os.stat(path).st_mode & 511)) == oct(permission))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dict_option(s): \n    return DictValueComponent.create(s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fftn(x, shape=None, axes=None, overwrite_x=False): \n    return _raw_fftn_dispatch(x, shape, axes, overwrite_x, 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getRoundZAxisByPlaneAngle(planeAngle, vector3): \n    return Vector3(((vector3.x * planeAngle.real) - (vector3.y * planeAngle.imag)), ((vector3.x * planeAngle.imag) + (vector3.y * planeAngle.real)), vector3.z)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_collection_summaries_matching_ids(collection_ids): \n    return [(get_collection_summary_from_model(model) if model else None) for model in collection_models.CollectionSummaryModel.get_multi(collection_ids)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getGeometryUtilitiesPath(subName=''): \n    return getJoinedPath(getGeometryPath('geometry_utilities'), subName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index_alt(): \n    s3_redirect_default(URL(f='shelter'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_columnize_random(): \n    for row_first in [True, False]: \n      for nitems in [random.randint(2, 70) for i in range(2, 20)]: \n         displaywidth = random.randint(20, 200) \n         rand_len = [random.randint(2, displaywidth) for i in range(nitems)] \n         items = [('x' * l) for l in rand_len] \n         out = text.columnize(items, row_first=row_first, displaywidth=displaywidth) \n         longer_line = max([len(x) for x in out.split('\\n')]) \n         longer_element = max(rand_len) \n         if (longer_line > displaywidth): \n            print ('Columnize   displayed   something   lager   than   displaywidth   :   %s   ' % longer_line) \n            print ('longer   element   :   %s   ' % longer_element) \n            print ('displaywidth   :   %s   ' % displaywidth) \n            print ('number   of   element   :   %s   ' % nitems) \n            print ('size   of   each   element   :\\n   %s' % rand_len) \n            assert False, 'row_first={0}'.format(row_first)",
        "line_count": 15,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def paragraph(): \n    return u'   '.join([sentence() for i in range(random.randint(1, 4))])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getctime(filename): \n    return os.stat(filename).st_ctime",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def EntityGroupKind(key): \n    return key.path().element(0).type()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove(fd, wd): \n    libc.inotify_rm_watch(fd, wd)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _interpolate(a, b, fraction): \n    return (a + ((b - a) * fraction))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _consume_topics(pubsub_client): \n    return list(pubsub_client.list_topics())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_save_all(id, driver): \n    SAVE_ALL[id.upper()] = driver",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def healthz(request): \n    return HttpResponse('ok')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def available_community_plugins(): \n    return _availables_plugins(resources.PLUGINS_COMMUNITY)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetFlow(state=None): \n    return client.OAuth2WebServerFlow(client_id=CLIENT_ID, client_secret=CLIENT_SECRET, scope='https://www.googleapis.com/auth/sqlservice', user_agent=USER_AGENT, state=state)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_default_profile_image_urls(): \n    return _get_profile_image_urls(configuration_helpers.get_value('PROFILE_IMAGE_DEFAULT_FILENAME', settings.PROFILE_IMAGE_DEFAULT_FILENAME), staticfiles_storage, file_extension=settings.PROFILE_IMAGE_DEFAULT_FILE_EXTENSION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rand(m, n, density=0.01, format='coo', dtype=None, random_state=None): \n    return random(m, n, density, format, dtype, random_state)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def db_exists(db_): \n    return os.path.exists(db_)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def regions(): \n    return get_regions('sdb', region_cls=SDBRegionInfo)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove(target, identifier, fn): \n    _event_key(target, identifier, fn).remove()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gen_mac(prefix='AC:DE:48'): \n    return '{0}:{1:02X}:{2:02X}:{3:02X}'.format(prefix, random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assertRequestGenerationFailed(self, deferred, reasonTypes): \n    return assertWrapperExceptionTypes(self, deferred, RequestGenerationFailed, reasonTypes)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def elu(x, alpha=1): \n    return tensor.switch((x > 0), x, (alpha * (tensor.exp(x) - 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getStepKey(x, y): \n    return (x, y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _has_catalog_visibility(course, visibility_type): \n    return (ACCESS_GRANTED if (course.catalog_visibility == visibility_type) else ACCESS_DENIED)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def logistic_log_gradient_i(x_i, y_i, beta): \n    return [logistic_log_partial_ij(x_i, y_i, beta, j) for (j, _) in enumerate(beta)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def quota_reserve(context, resources, quotas, user_quotas, deltas, expire, until_refresh, max_age, project_id=None, user_id=None): \n    return IMPL.quota_reserve(context, resources, quotas, user_quotas, deltas, expire, until_refresh, max_age, project_id=project_id, user_id=user_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assign_keywords(resource): \n    for i in range(0, randint(0, 5)): \n      resource.keywords.add(('keyword_%s' % randint(0, n_keywords)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def load_metadefs(): \n    return get_backend().db_load_metadefs(engine=db_api.get_engine(), metadata_path=None, merge=False, prefer_new=False, overwrite=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_finalize(): \n    assert ('' == render('{{   x   }}', {'x': None}))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_backends(): \n    return _ACTIVE_BACKENDS",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _time_from_iso8601_time_naive(value): \n    return datetime.datetime.strptime(value, '%H:%M:%S').time()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def idPage(request): \n    return direct_to_template(request, 'server/idPage.html', {'server_url': getViewURL(request, endpoint)})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_proxy_win(): \n    if (__grains__['os'] == 'Windows'): \n      return _get_proxy_windows()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_exception_from_fault(fault): \n    return pyamf.ERROR_CLASS_MAP.get(fault.code, RemotingError)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_hop_by_hop_header(header): \n    return (header.lower() in _hop_by_hop_headers)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_read(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_jid(jid): \n    with _get_serv(ret=None, commit=True) as cur: \n      sql = 'SELECT   id,   full_ret   FROM   salt_returns\\n                                                WHERE   jid   =   %s' \n      cur.execute(sql, (jid,)) \n      data = cur.fetchall() \n      ret = {} \n      if data: \n         for (minion, full_ret) in data: \n            ret[minion] = json.loads(full_ret) \n      return ret",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def render_form_group(content, css_class=FORM_GROUP_CLASS): \n    return u'<div   class=\"{klass}\">{content}</div>'.format(klass=css_class, content=content)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_initializable_thread_fields(data, context): \n    _check_fields(get_initializable_thread_fields(context), data, 'This   field   is   not   initializable.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def worker_claim_for_cleanup(context, claimer_id, orm_worker): \n    return IMPL.worker_claim_for_cleanup(context, claimer_id, orm_worker)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_gentoo_mirrors(value): \n    return set_var('GENTOO_MIRRORS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def top_down(brule, fns=basic_fns): \n    return chain(do_one(brule, identity), (lambda expr: sall(top_down(brule, fns), fns)(expr)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def randomSource(): \n    return struct.unpack('H', randbytes.secureRandom(2, fallback=True))[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addXIntersectionIndexesFromSegments(index, segments, xIntersectionIndexList): \n    for segment in segments: \n      addXIntersectionIndexesFromSegment(index, segment, xIntersectionIndexList)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def resource_op_defaults_to(name, op_default, value, extra_args=None, cibname=None): \n    return _item_present(name=name, item='resource', item_id='{0}={1}'.format(op_default, value), item_type=None, show=['op', 'defaults'], create=['op', 'defaults'], extra_args=extra_args, cibname=cibname)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FIRST(fragment): \n    return fragment.startchar",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connect(creds): \n    return swiftclient.Connection(authurl=creds.authurl, user=creds.user, key=creds.password, auth_version=creds.auth_version, tenant_name=creds.tenant_name, os_options={'region_name': creds.region, 'endpoint_type': creds.endpoint_type, 'domain_id': creds.domain_id, 'domain_name': creds.domain_name, 'tenant_id': creds.tenant_id, 'user_id': creds.user_id, 'user_domain_id': creds.user_domain_id, 'user_domain_name': creds.user_domain_name, 'project_id': creds.project_id, 'project_name': creds.project_name, 'project_domain_id': creds.project_domain_id, 'project_domain_name': creds.project_domain_name})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def from_iterable(iterables): \n    for it in iterables: \n      for element in it: \n         (yield element)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([KNXSwitch(hass, KNXConfig(config))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_abstract_declarator_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_file_input_end(p): \n    p[0] = ast.Stmt(p[1])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetNodeAnnotation(node, annotation, default=None): \n    return getattr(node, (_NODE_ANNOTATION_PREFIX + annotation), default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetBlobStorage(): \n    return apiproxy_stub_map.apiproxy.GetStub('blobstore').storage",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('cloud.profile' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _reusing_db(): \n    return (os.getenv('REUSE_DB', 'false').lower() in ('true', '1', ''))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MINUS_DM(barDs, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_hl(barDs, count, talib.MINUS_DM, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_tests(test_suite): \n    return unittest.TextTestRunner(verbosity=2).run(test_suite)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pbkdf2_hex(data, salt, iterations=1000, keylen=24, hashfunc=None): \n    return pbkdf2_bin(data, salt, iterations, keylen, hashfunc).encode('hex')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def memory_usage(): \n    return _GetSystemStats().memory()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def defer(fn, *args, **kwargs): \n    deferred.defer(fn, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convertXMLElement(geometryOutput, xmlElement): \n    xmlElement.getXMLProcessor().createChildren(geometryOutput['shapes'], xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_conn(options): \n    return Connection(options[u'auth'], options[u'user'], options[u'key'], options[u'retries'], auth_version=options[u'auth_version'], os_options=options[u'os_options'], snet=options[u'snet'], cacert=options[u'os_cacert'], insecure=options[u'insecure'], cert=options[u'os_cert'], cert_key=options[u'os_key'], ssl_compression=options[u'ssl_compression'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete(url, **kwargs): \n    return request('delete', url, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return RaftRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _estimate_gaussian_covariances_spherical(resp, X, nk, means, reg_covar): \n    return _estimate_gaussian_covariances_diag(resp, X, nk, means, reg_covar).mean(1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_number(n): \n    return (type(n) in (IntType, LongType, FloatType))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stop_tomcat(): \n    run_as_root('/etc/init.d/tomcat   stop')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unregister_alias_type(klass): \n    return ALIAS_TYPES.pop(klass, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plugin(): \n    return TagNameSelect",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def db_version(database='main', context=None): \n    return IMPL.db_version(database=database, context=context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_scope_name(scope): \n    return rtnl.rt_scope.get(scope, scope)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volunteer(): \n    return s3db.vol_volunteer_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('uptime.checks_list' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_homog(points): \n    return vstack((points, ones((1, points.shape[1]))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def kill(greenlet, exception=GreenletExit, block=True, polling_period=0.2): \n    if (not greenlet.dead): \n      waiter = Waiter() \n      core.active_event(_kill, greenlet, exception, waiter) \n      if block: \n         waiter.wait() \n         join(greenlet, polling_period=polling_period)",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def predict_true(args): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def num2epoch(d): \n    return ((np.asarray(d) - EPOCH_OFFSET) * SEC_PER_DAY)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rosstack_depends_on_1(s): \n    return rosstackexec(['depends-on1', s]).split()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_type_get(context, id): \n    return IMPL.instance_type_get(context, id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_markdown(doc, meta): \n    for field in meta.fields: \n      if (field.fieldtype == u'Text   Editor'): \n         value = doc.get(field.fieldname) \n         if (value and (u'<!--   markdown   -->' in value)): \n            doc.set(field.fieldname, markdown(value))",
        "line_count": 5,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def _pid_file(name): \n    return wf().cachefile(u'{0}.pid'.format(name))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add64(a, b): \n    return np.add(a, b, dtype=np.uint64)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reset(): \n    _HOOKS.clear()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_stopped(): \n    return sorted((set(list_all()) - set(list_running())))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PLUS_DI(barDs, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_hlc(barDs, count, talib.PLUS_DI, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def demean(x, axis=0): \n    return detrend_mean(x, axis=axis)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_entry_info(dist, group, name): \n    return get_distribution(dist).get_entry_info(group, name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def end_tag(doc, name, namespace=None): \n    doc.endElementNS((namespace, name), name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def replace_course_urls(course_id, block, view, frag, context): \n    return wrap_fragment(frag, static_replace.replace_course_urls(frag.content, course_id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices((VeraSensor(device, VERA_CONTROLLER) for device in VERA_DEVICES['sensor']))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def string_suggestions(string, vocabulary, cutoff=0.6, maxnum=3): \n    return [tup[1] for tup in sorted([(string_similarity(string, sugg), sugg) for sugg in vocabulary], key=(lambda tup: tup[0]), reverse=True) if (tup[0] >= cutoff)][:maxnum]",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def raises(exc, func, *args, **kwds): \n    with pytest.raises(exc): \n      func(*args, **kwds)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start(search, one=True): \n    return _action('start', search, one)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __flatten_into(root, prefix, target): \n    for (name, value) in root.items(): \n      key = (prefix + name) \n      if isinstance(value, dict): \n         __flatten_into(value, (key + '.'), target) \n      else: \n         target[key] = value",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _screenshot(viewport=None, alpha=True): \n    return read_pixels(viewport, alpha)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_routing_table(ip_version, namespace=None): \n    return list(privileged.get_routing_table(ip_version, namespace))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_field(field, func, dict_sequence): \n    for item in dict_sequence: \n      if (field not in item): \n         item[field] = func(item) \n      (yield item)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def drop_database(manager): \n    manager.execute(('DROP   DATABASE   `%s`' % manager.get_db_name()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cellnameabs(rowx, colx): \n    return ('$%s$%d' % (colname(colx), (rowx + 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def okAssemblies(num): \n    for i in xrange(num): \n      createAssembly(i, i, i)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_cached_value(key, value, timeout=None): \n    cache.set(key, value, timeout=timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RetrieveCachedStats(): \n    return memcache.get(KINDS_AND_SIZES_VAR, namespace=MEMCACHE_NAMESPACE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def frender(path, **keywords): \n    return Template(open(path).read(), filename=path, **keywords)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assertNotIsInstance(obj, cls, msg=''): \n    if isinstance(obj, cls): \n      err_msg = '{0}Input   must   not   be   type   {1}' \n      raise AssertionError(err_msg.format(msg, cls))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def task(): \n    return s3db.project_task_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_xml_as_object(elt, cls): \n    return xml_object.from_element(None, cls, elt)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_literals(literal_type): \n    return tuple(literals[literal_type])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def toNorm(raw): \n    return np.power(MAX_NORM, (raw * NORM_RATIO))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_expression_uminus(t): \n    t[0] = (- t[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_create(context, values): \n    return IMPL.snapshot_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def human_readable(size, precision=2): \n    return (((('%.' + str(precision)) + 'f') + 'MB') % ((size / (1024.0 * 1024.0)),))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_rate_limit_error_message(message): \n    return (isinstance(message, list) and (len(message) > 0) and ('code' in message[0]) and (message[0]['code'] == 88))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def results(): \n    return __proxy__['napalm.call']('get_probes_results', **{})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def average(values): \n    return ((sum(values) / len(values)) if values else 0)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _reconstruct_ppa_name(owner_name, ppa_name): \n    return 'ppa:{0}/{1}'.format(owner_name, ppa_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _match_css_class(str): \n    return re.compile(('(^|.*\\\\s)%s($|\\\\s)' % str))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_nics(vm_): \n    with _get_xapi_session() as xapi: \n      nic = {} \n      vm_rec = _get_record_by_label(xapi, 'VM', vm_) \n      if (vm_rec is False): \n         return False \n      for vif in vm_rec['VIFs']: \n         vif_rec = _get_record(xapi, 'VIF', vif) \n         nic[vif_rec['MAC']] = {'mac': vif_rec['MAC'], 'device': vif_rec['device'], 'mtu': vif_rec['MTU']} \n      return nic",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _from_json(encoded): \n    return [str(x) for x in jsonutils.loads(encoded)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def flatten(list): \n    return chain(*list)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disable(level): \n    root.manager.disable = level",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _code_to_file(co): \n    return BytesIO(((imp.get_magic() + '\\x00\\x00\\x00\\x00') + marshal.dumps(co)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_standard_values(): \n    return np.array([[0, 0.1, 0.5, 0.9, 1.0]], dtype=K.floatx())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def at_server_start(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GetRequestApiCpuUsage(): \n    return _apphosting_runtime___python__apiproxy.get_request_api_cpu_usage()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_safe(data): \n    return salt.utils.simple_types_filter(object_to_dict(data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def divmod(x, y): \n    return (floor_div(x, y), mod_check(x, y))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dynamic_choice_param(registry, xml_parent, data): \n    dynamic_param_common(registry, xml_parent, data, 'ChoiceParameterDefinition')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def export_metadefs(): \n    return get_backend().db_export_metadefs(engine=db_api.get_engine(), metadata_path=None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gdal_full_version(): \n    return _version_info('')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Error(filename, linenum, category, confidence, message): \n    if _ShouldPrintError(category, confidence, linenum): \n      _cpplint_state.IncrementErrorCount(category) \n      if (_cpplint_state.output_format == 'vs7'): \n         sys.stderr.write(('%s(%s):      %s      [%s]   [%d]\\n' % (filename, linenum, message, category, confidence))) \n      elif (_cpplint_state.output_format == 'eclipse'): \n         sys.stderr.write(('%s:%s:   warning:   %s      [%s]   [%d]\\n' % (filename, linenum, message, category, confidence))) \n      else: \n         sys.stderr.write(('%s:%s:      %s      [%s]   [%d]\\n' % (filename, linenum, message, category, confidence)))",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _get_valid_file_types(): \n    return ',   '.join([',   '.join(IMAGE_TYPES[ft].extensions) for ft in IMAGE_TYPES.keys()])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def collection_reload(collection, **kwargs): \n    _query('admin/collections?action=RELOAD&name={collection}&wt=json'.format(collection=collection), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _create_object(table, table_obj): \n    _db_content[table][table_obj.obj] = table_obj",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def underscore(text): \n    return UNDERSCORE[1].sub('\\\\1_\\\\2', UNDERSCORE[0].sub('\\\\1_\\\\2', text)).lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, mode, *args, **kwargs): \n    return _create_cipher(sys.modules[__name__], key, mode, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_tree_changes(repo): \n    with open_repo_closing(repo) as r: \n      index = r.open_index() \n      tracked_changes = {'add': [], 'delete': [], 'modify': []} \n      try: \n         tree_id = r['HEAD'].tree \n      except KeyError: \n         tree_id = None \n      for change in index.changes_from_tree(r.object_store, tree_id): \n         if (not change[0][0]): \n            tracked_changes['add'].append(change[0][1]) \n         elif (not change[0][1]): \n            tracked_changes['delete'].append(change[0][0]) \n         elif (change[0][0] == change[0][1]): \n            tracked_changes['modify'].append(change[0][0]) \n         else: \n            raise AssertionError('git   mv   ops   not   yet   supported') \n      return tracked_changes",
        "line_count": 17,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def test_is_repo_url_for_local_urls(local_repo_url): \n    assert (is_repo_url(local_repo_url) is False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def tokenwrap(tokens, separator='   ', width=70): \n    return '\\n'.join(textwrap.wrap(separator.join(tokens), width=width))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rospack_depends_on_1(pkg): \n    return rospackexec(['depends-on1', pkg]).split()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLRICKSHAWMAN(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLRICKSHAWMAN)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_atomic_group(name, max_number_of_machines=None, description=None): \n    return models.AtomicGroup.add_object(name=name, max_number_of_machines=max_number_of_machines, description=description).id",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _owner_isinstance(inp, test_class): \n    return (bool(inp.owner) and isinstance(inp.owner.op, test_class))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _makeLongitude(value): \n    return base.Coordinate(value, Angles.LONGITUDE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def spatial_pyramid_pooling_2d(x, pyramid_height, pooling_class, use_cudnn=True): \n    return SpatialPyramidPooling2D(x.shape[1:], pyramid_height, pooling_class, use_cudnn=use_cudnn)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def open_ufw(service): \n    return sequence([run_from_args(['ufw', 'allow', service])])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def drop_protected_attrs(model_class, values): \n    for attr in model_class.__protected_attributes__: \n      if (attr in values): \n         del values[attr]",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def explode(df): \n    return (df.index, df.columns, df.values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_writable(fname): \n    os.chmod(fname, (stat.S_IMODE(os.lstat(fname)[stat.ST_MODE]) | 128))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def article(word, function=INDEFINITE, gender=MALE, role=SUBJECT): \n    return (((function == DEFINITE) and definite_article(word, gender, role)) or indefinite_article(word, gender, role))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def uncomment(path, regex, char='#', backup='.bak'): \n    return comment_line(path=path, regex=regex, char=char, cmnt=False, backup=backup)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def top_down_once(rule, fns=basic_fns): \n    return do_one(rule, (lambda expr: sall(top_down(rule, fns), fns)(expr)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def identifies(id, ref): \n    return ((id == ref.alias) or (id == ref.name) or (ref.schema and (id == ((ref.schema + '.') + ref.name))))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def is_signature(sig): \n    return isinstance(sig, (str, tuple, typing.Signature))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_transaction_objects_mapped_for_all_models(db, default_namespace): \n    assert set(HasRevisions.__subclasses__()).issubset(transaction_objects().values())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sort_string(s): \n    return (''.join(sorted(list(s))) if s else s)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def CDLHARAMI(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLHARAMI)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _lstsq_residual(b, n, rhs): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_post_update_script(component, previous_head): \n    run_hook(component, None, component.post_update_script, env={'WL_PREVIOUS_HEAD': previous_head})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group(name, gid=None): \n    if (not exists(name)): \n      create(name, gid=gid)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dumpPorts(switches): \n    for switch in switches: \n      output(('%s   ' % switch.name)) \n      for intf in switch.intfList(): \n         port = switch.ports[intf] \n         output(('%s:%d   ' % (intf, port))) \n      output('\\n')",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def random(value): \n    return random_module.choice(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def aggregate_metadata_get_by_host(context, host, key=None): \n    return IMPL.aggregate_metadata_get_by_host(context, host, key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def returner(ret): \n    print(ret)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tf2sos(b, a, pairing='nearest'): \n    return zpk2sos(pairing=pairing, *tf2zpk(b, a))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def os_release_info(): \n    return _distro.os_release_info()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getLong(value): \n    return long(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_current_connection(): \n    return _connection_stack.top",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _makeHeaderUnix(sig=V2_SIGNATURE, verCom='!', famProto='1', addrLength='\\x00\\xd8', addrs=(('/home/tests/mysockets/sock' + ('\\x00' * 82)) * 2)): \n    return ((((sig + verCom) + famProto) + addrLength) + addrs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def out_format(data, out, opts=None, **kwargs): \n    return try_printout(data, out, opts, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def translate_urls(json_home, new_prefix): \n    for (dummy_rel, resource) in json_home['resources'].items(): \n      if ('href' in resource): \n         resource['href'] = (new_prefix + resource['href']) \n      elif ('href-template' in resource): \n         resource['href-template'] = (new_prefix + resource['href-template'])",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def package(pkg_name, update=False, yes=None): \n    if (not is_installed(pkg_name)): \n      install(pkg_name, update, yes)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def model_to_protobuf(model_instance, _entity_class=datastore.Entity): \n    return model_instance._populate_entity(_entity_class).ToPb()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDLCOUNTERATTACK(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDLCOUNTERATTACK)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def substitute_category_name(category_name): \n    return re.sub('\\\\s', '_', category_name).replace('-', '_').lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ParseFile(file, base_uri, *args, **kwds): \n    return _ParseFileEx(file, base_uri, *args, **kwds)[1:]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def WMA(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.WMA, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def raise_cmdexc_if_invalid(url): \n    if (not url.isValid()): \n      raise cmdexc.CommandError(get_errstring(url))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def reconnect(hass): \n    hass.services.call(DOMAIN, SERVICE_RECONNECT, {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processor(): \n    return uname()[5]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def datetime_is_naive(dateTime): \n    return ((dateTime.tzinfo is None) or (dateTime.tzinfo.utcoffset(dateTime) is None))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sqrt(arg): \n    return Pow(arg, S.Half)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def composite(image1, image2, mask): \n    return Image.composite(image1, image2, mask)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def locate_unbalanced_start(unbalanced_start, pre_delete, post_delete): \n    while 1: \n      if (not unbalanced_start): \n         break \n      finding = unbalanced_start[0] \n      finding_name = finding.split()[0].strip('<>') \n      if (not post_delete): \n         break \n      next = post_delete[0] \n      if ((next is DEL_START) or (not next.startswith('<'))): \n         break \n      if (next[1] == '/'): \n         break \n      name = next.split()[0].strip('<>') \n      if (name == 'ins'): \n         break \n      assert (name != 'del'), ('Unexpected   delete   tag:   %r' % next) \n      if (name == finding_name): \n         unbalanced_start.pop(0) \n         pre_delete.append(post_delete.pop(0)) \n      else: \n         break",
        "line_count": 21,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def list_master_dirs(saltenv='base', prefix=''): \n    return __context__['fileclient'].dir_list(saltenv, prefix)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_selection_statement_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_get(context, project_id, resource, user_id=None): \n    return IMPL.quota_get(context, project_id, resource, user_id=user_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def EvalNormalPdf(x, mu, sigma): \n    return stats.norm.pdf(x, mu, sigma)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def take(n, iterable): \n    return list(islice(iterable, n))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getMax(first, second): \n    return max(first, second)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_vnic_manager(host_reference): \n    return host_reference.configManager.virtualNicManager",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _makeHeaderIPv6(sig=V2_SIGNATURE, verCom='!', famProto='!', addrLength='\\x00$', addrs=((('\\x00' * 15) + '\\x01') * 2), ports='\\x1f\\x90\"\\xb8'): \n    return (((((sig + verCom) + famProto) + addrLength) + addrs) + ports)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_names_from_cert(csr, typ=OpenSSL.crypto.FILETYPE_PEM): \n    return _get_names_from_cert_or_req(csr, OpenSSL.crypto.load_certificate, typ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_declaration_specifiers_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deprecated_attr(namespace, attr, replacement): \n    _deprecated_attrs.setdefault(namespace, []).append((attr, replacement))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _read_float64(f): \n    return np.float64(struct.unpack('>d', f.read(8))[0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compute_accuracy(predictions, labels): \n    return labels[(predictions.ravel() < 0.5)].mean()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def arr_dtype_number(arr, num): \n    return np.dtype((arr.dtype.str[:2] + str(num)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def HandleCommandLine(allow_service=True): \n    win32serviceutil.HandleCommandLine(SABHelper)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def InitSecretsForTest(): \n    GetSharedSecretsManager(can_prompt=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def close_serial_port(*args): \n    DEVICE.zb.serial.close()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rand_uuid(): \n    return uuidutils.generate_uuid()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def env(dev): \n    return info(dev).get('E', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def HTML(html): \n    return markupsafe.Markup(html)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_day_names(width='wide', context='format', locale=LC_TIME): \n    return Locale.parse(locale).days[context][width]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _decode_utf8(s): \n    return unicode(s, 'utf-8')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, gcodeText='', repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, gcodeText), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def block_device_mapping_get_all_by_instance_uuids(context, instance_uuids): \n    return IMPL.block_device_mapping_get_all_by_instance_uuids(context, instance_uuids)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_dataset_root(): \n    return _dataset_root",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def watcher(command, files): \n    while True: \n      if timecheck(files): \n         os.system(command) \n      time.sleep(1)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def evaluate_template(text, install_environment): \n    return Template(text).safe_substitute(get_env_var_values(install_environment))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([TcpBinarySensor(hass, config)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return __virtualname__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_tokenid(p): \n    p[0] = p[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_temp_file_path(file_path): \n    return (file_path + '.tmp')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_cache_security_group(name, region=None, key=None, keyid=None, profile=None, **args): \n    return _create_resource(name, name_param='CacheSecurityGroupName', desc='cache   security   group', res_type='cache_security_group', region=region, key=key, keyid=keyid, profile=profile, **args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_thread_safe_app(): \n    if (_local is not None): \n      WSGIApplication.app = WSGIApplication.active_instance = _local('app') \n      WSGIApplication.request = _local('request')",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_id_list(lst): \n    return all(map(is_gm_id, lst))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_id(): \n    return get_id(uuid.uuid4())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_binops_check_loose(self, obj): \n    return (isinstance(obj, (_set_binop_bases + (self.__class__,))) or (util.duck_type_collection(obj) == set))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _update_config(template_name, template_source=None, template_path=None, template_hash=None, template_hash_name=None, template_user='root', template_group='root', template_mode='755', saltenv=None, template_engine='jinja', skip_verify=True, defaults=None, test=False, commit=True, debug=False, replace=False, **template_vars): \n    return __salt__['net.load_template'](template_name, template_source=template_source, template_path=template_path, template_hash=template_hash, template_hash_name=template_hash_name, template_user=template_user, template_group=template_group, template_mode=template_mode, saltenv=saltenv, template_engine=template_engine, skip_verify=skip_verify, defaults=defaults, test=test, commit=commit, debug=debug, replace=replace, **template_vars)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete(args): \n    for arg in args: \n      try: \n         wincerapi.CeDeleteFile(arg) \n         print ('Deleted:   %s' % arg) \n      except win32api.error as details: \n         print_error(details, (\"Error   deleting   '%s'\" % arg))",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _is_32bit(): \n    return ((struct.calcsize('P') * 8) == 32)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _write_messages(message_descriptors, out): \n    for message in (message_descriptors or []): \n      (out << '') \n      (out << '') \n      (out << ('class   %s(messages.Message):' % message.name)) \n      with out.indent(): \n         if (not (message.enum_types or message.message_types or message.fields)): \n            (out << '') \n            (out << 'pass') \n         else: \n            _write_enums(message.enum_types, out) \n            _write_messages(message.message_types, out) \n            _write_fields(message.fields, out)",
        "line_count": 12,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def dirname(p): \n    return split(p)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_return_stmt(p): \n    p[0] = ast.Return(p[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_namespace_handler(importer_type, namespace_handler): \n    _namespace_handlers[importer_type] = namespace_handler",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quaternion_rotation_matrix(quaternion): \n    return quaternion_matrix(quaternion)[:3, :3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def key_pair_get(context, user_id, name): \n    return IMPL.key_pair_get(context, user_id, name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_install_key(): \n    return sha1(settings.SECRET_KEY).hexdigest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def istask(x): \n    return ((type(x) is tuple) and x and callable(x[0]))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def serialize(obj, **options): \n    return pprint.pformat(json.loads(json.dumps(obj), object_hook=salt.utils.decode_dict), **options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getGeometryToolsPath(subName=''): \n    return getJoinedPath(getGeometryPath('geometry_tools'), subName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_project_description(project): \n    return _(u'{0}   is   translated   into   {1}   languages   using   Weblate.   Join   the   translation   or   start   translating   your   own   project.').format(project, project.get_language_count())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def genVersion(*args, **kwargs): \n    return ('from   incremental   import   Version\\n__version__=%r' % Version(*args, **kwargs)).encode('ascii')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _default_feature_extractor(words): \n    return dict(((word, True) for word in words))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getVersion(): \n    with open(os.path.join(REPO_DIR, 'VERSION'), 'r') as versionFile: \n      return versionFile.read().strip()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def split_by_position(linked_promotions, context): \n    for linked_promotion in linked_promotions: \n      promotion = linked_promotion.content_object \n      if (not promotion): \n         continue \n      key = ('promotions_%s' % linked_promotion.position.lower()) \n      if (key not in context): \n         context[key] = [] \n      context[key].append(promotion)",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def recursive_update_dict(root, changes, ignores=()): \n    if isinstance(changes, dict): \n      for (k, v) in changes.items(): \n         if isinstance(v, dict): \n            if (k not in root): \n               root[k] = {} \n            recursive_update_dict(root[k], v, ignores) \n         elif (v in ignores): \n            if (k in root): \n               root.pop(k) \n         else: \n            root[k] = v",
        "line_count": 11,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def getNewRepository(): \n    return skeinforge_profile.ProfileRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def absolute(self): \n    return Absolute()(self)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unregister(ident): \n    if (ident in _handlers): \n      del _handlers[ident]",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_all_headers(message, key): \n    return message.get_all(key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ref_sort_key(ref): \n    return (len(ref), ref)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_added_exploration_change_list(exploration_id): \n    return [{'cmd': collection_domain.CMD_ADD_COLLECTION_NODE, 'exploration_id': exploration_id}]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filename_priority(filename, cover_names): \n    return [idx for (idx, x) in enumerate(cover_names) if (x in filename)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'cool', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def put(url, data=None, **kwargs): \n    return request('put', url, data=data, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getDecimalPlacesCarried(extraDecimalPlaces, value): \n    return max(0, (1 + int(math.ceil((extraDecimalPlaces - math.log10(value))))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def registration(email): \n    return Registration.objects.get(user__email=email)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def need(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def draw(): \n    get_current_fig_manager().canvas.draw()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def show_help(fd=sys.stdout): \n    with Modules() as m: \n      fd.write(m.help())",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enable_sigusr2_handler(): \n    enable_sig_handler('SIGUSR2', _handle_sigusr2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([DemoSensor('Outside   Temperature', 15.6, TEMP_CELSIUS, 12), DemoSensor('Outside   Humidity', 54, '%', None)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def complete(y): \n    return linkage(y, method='complete', metric='euclidean')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def walk_windows_integration_targets(): \n    for target in walk_integration_targets(): \n      if ('windows/' in target.aliases): \n         (yield target)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def delete_label(id): \n    models.Label.smart_get(id).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rmsle(actual, predicted): \n    return np.sqrt(msle(actual, predicted))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isNumPosStrValue(value): \n    return ((value and isinstance(value, basestring) and value.isdigit() and (int(value) > 0)) or (isinstance(value, int) and (value > 0)))",
        "line_count": 1,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def compute_md5(fp, buf_size=8192, size=None): \n    return compute_hash(fp, buf_size, size, hash_algorithm=md5)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_signal(sender, instance, **kw): \n    if (not kw.get('raw')): \n      save_translations(make_key(instance))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def init(mpstate): \n    return LinkModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pnio_update_config(config): \n    conf.contribs['PNIO_RTC'].update(config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def applies_to_all_images(fileobject): \n    return (fileobject.filetype == 'Image')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_format_modules(lang): \n    if check_for_language(lang): \n      format_locations = ['django.conf.locale.%s'] \n      if settings.FORMAT_MODULE_PATH: \n         format_locations.append((settings.FORMAT_MODULE_PATH + '.%s')) \n         format_locations.reverse() \n      locale = to_locale(lang) \n      locales = [locale] \n      if ('_' in locale): \n         locales.append(locale.split('_')[0]) \n      for location in format_locations: \n         for loc in locales: \n            try: \n               (yield import_module('.formats', (location % loc))) \n            except ImportError: \n               pass",
        "line_count": 15,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def get_current_time_in_millisecs(): \n    return get_time_in_millisecs(datetime.datetime.utcnow())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _all_tags(repo): \n    return [x for x in repo.tags() if (x[0] != 'tip')]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def debug_unittest(testclass): \n    run_unittest(testclass, debug=1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _intersect_items(baselist, comparelist): \n    return list((set(baselist) & set(comparelist)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_get_by_network_host(context, network_uuid, host): \n    return IMPL.fixed_ip_get_by_network_host(context, network_uuid, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setLevel(level): \n    logger.setLevel(level)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('boto_cloudtrail' if ('boto_cloudtrail.exists' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def pop_bilateral(image, selem, out=None, mask=None, shift_x=False, shift_y=False, s0=10, s1=10): \n    return _apply(bilateral_cy._pop, image, selem, out=out, mask=mask, shift_x=shift_x, shift_y=shift_y, s0=s0, s1=s1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def n_files_str(count): \n    return '{}   file{}'.format(count, ('s' if (count != 1) else ''))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def check_valid_file_exists(in_files): \n    for in_file in in_files: \n      if (in_file == u'-'): \n         pass \n      elif os.path.exists(in_file): \n         mode = os.stat(in_file).st_mode \n         if ((os.stat(in_file).st_size > 0) or S_ISBLK(mode) or S_ISFIFO(mode)): \n            return \n         else: \n            print((u'WARNING:   Input   file   %s   is   empty' % in_file), file=sys.stderr) \n      else: \n         print((u'WARNING:   Input   file   %s   not   found' % in_file), file=sys.stderr)",
        "line_count": 11,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def dictitems(d): \n    return list(d.items())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mark_plot_labels(app, document): \n    for (name, explicit) in document.nametypes.iteritems(): \n      if (not explicit): \n         continue \n      labelid = document.nameids[name] \n      if (labelid is None): \n         continue \n      node = document.ids[labelid] \n      if (node.tagname in ('html_only', 'latex_only')): \n         for n in node: \n            if (n.tagname == 'figure'): \n               sectname = name \n               for c in n: \n                  if (c.tagname == 'caption'): \n                     sectname = c.astext() \n                     break \n               node['ids'].remove(labelid) \n               node['names'].remove(name) \n               n['ids'].append(labelid) \n               n['names'].append(name) \n               document.settings.env.labels[name] = (document.settings.env.docname, labelid, sectname) \n               break",
        "line_count": 21,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def set_(*args, **kwargs): \n    raise salt.exceptions.NotImplemented()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def aggregate_get_by_host(context, host, key=None): \n    return IMPL.aggregate_get_by_host(context, host, key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_value_error_if_key_missing_in_context(replay_test_dir, template_name): \n    with pytest.raises(ValueError): \n      replay.dump(replay_test_dir, template_name, {'foo': 'bar'})",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trailing_blank_lines(physical_line, lines, line_number, total_lines): \n    if (line_number == total_lines): \n      stripped_last_line = physical_line.rstrip() \n      if (not stripped_last_line): \n         return (0, 'W391   blank   line   at   end   of   file') \n      if (stripped_last_line == physical_line): \n         return (len(physical_line), 'W292   no   newline   at   end   of   file')",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def isgenerator(object): \n    return isinstance(object, types.GeneratorType)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_base_image_properties(properties=None): \n    if (isinstance(properties, dict) and (len(properties) == 0)): \n      properties['disk_format'] = 'qcow2' \n      properties['container_format'] = 'bare'",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _add_boolean_cli_param(params, key, value): \n    if (value is True): \n      params.append('--{0}'.format(key))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def All(sequence): \n    return bool(reduce((lambda x, y: (x and y)), sequence, True))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_mappings(): \n    return {idxr.get_doctype_name(): idxr.get_mapping() for idxr in indexers}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _is_running_from_main_thread(): \n    return tornado.ioloop.IOLoop.current(instance=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chworkphone(name, workphone): \n    return _update_gecos(name, 'workphone', workphone)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_goto_assignments_keyword(): \n    Script('in').goto_assignments()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def UnregisterServer(clsid, progID=None, verProgID=None, customKeys=None): \n    for args in GetUnregisterServerKeys(clsid, progID, verProgID, customKeys): \n      recurse_delete_key(*args)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _get_record(xapi, rectype, uuid): \n    return getattr(xapi, rectype).get_record(uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def invalidate_module_pricing_cache(driver_type, driver_name): \n    if (driver_name in PRICING_DATA[driver_type]): \n      del PRICING_DATA[driver_type][driver_name]",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_default_language(): \n    return (Settings.get('default_language') or settings.LANGUAGE_CODE or 'en')",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def blog_structure(site): \n    return {'blogid': settings.SITE_ID, 'blogName': site.name, 'url': ('%s://%s%s' % (PROTOCOL, site.domain, reverse('zinnia:entry_archive_index')))}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_default_language(lang_code): \n    Settings.set('default_language', lcode_to_ietf(lang_code))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FakeOpen(filename, flags, mode=511): \n    raise OSError(errno.EPERM, 'Operation   not   permitted', filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def emptyLine(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rand_item_from_iters(iter): \n    return rand_base(1, '', iter)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Kumaraswamy(name, a, b): \n    return rv(name, KumaraswamyDistribution, (a, b))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def evaluate(dataset): \n    with tf.Graph().as_default(): \n      (images, labels) = image_processing.inputs(dataset) \n      num_classes = (dataset.num_classes() + 1) \n      (logits, _) = inception.inference(images, num_classes) \n      top_1_op = tf.nn.in_top_k(logits, labels, 1) \n      top_5_op = tf.nn.in_top_k(logits, labels, 5) \n      variable_averages = tf.train.ExponentialMovingAverage(inception.MOVING_AVERAGE_DECAY) \n      variables_to_restore = variable_averages.variables_to_restore() \n      saver = tf.train.Saver(variables_to_restore) \n      summary_op = tf.merge_all_summaries() \n      graph_def = tf.get_default_graph().as_graph_def() \n      summary_writer = tf.train.SummaryWriter(FLAGS.eval_dir, graph_def=graph_def) \n      while True: \n         _eval_once(saver, summary_writer, top_1_op, top_5_op, summary_op) \n         if FLAGS.run_once: \n            break \n         time.sleep(FLAGS.eval_interval_secs)",
        "line_count": 17,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def unload_all(): \n    unload(*reversed(_PLUGINS))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_labeled_statement_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def img_as_float(image, force_copy=False): \n    return convert(image, np.float64, force_copy)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _prettyformat_lines(lines): \n    for line in lines: \n      data = json.loads(line) \n      (yield (pretty_format(data) + '\\n'))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def usecase2(x, N): \n    for k in range(N): \n      y = x[k] \n      print(y.f1, y.s1, y.f2)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def contains_feat(title): \n    return bool(re.search(plugins.feat_tokens(), title, flags=re.IGNORECASE))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ordered_dict_to_dict(config): \n    return loads(dumps(config))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(key): \n    return _versions.get(key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def covariance(X, Y, condition=None, **kwargs): \n    return expectation(((X - expectation(X, condition, **kwargs)) * (Y - expectation(Y, condition, **kwargs))), condition, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _group_id_from_name(path, project=None): \n    return _name_from_project_path(path, project, _GROUP_TEMPLATE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bucket_download_fileobj(self, Key, Fileobj, ExtraArgs=None, Callback=None, Config=None): \n    return self.meta.client.download_fileobj(Bucket=self.name, Key=Key, Fileobj=Fileobj, ExtraArgs=ExtraArgs, Callback=Callback, Config=Config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_tax_module(): \n    return load_module('SHUUP_TAX_MODULE', 'tax_module')()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_minion_id(): \n    return (_generate_minion_id().first() or 'localhost')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def LINEARREG_SLOPE(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.LINEARREG_SLOPE, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pkgdb(opts): \n    return LazyLoader(_module_dirs(opts, 'pkgdb', base_path=os.path.join(SALT_BASE_PATH, 'spm')), opts, tag='pkgdb')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _calculate_photo_filename(instance, filename): \n    return os.path.join(settings.USER_AVATAR_DIR, (str(uuid.uuid4()) + '.jpg'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def keyring_auth_add(**kwargs): \n    return ceph_cfg.keyring_auth_add(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def image_volume_cache_delete(context, volume_id): \n    return IMPL.image_volume_cache_delete(context, volume_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tic(): \n    return __timer__.tic()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_instance(c_instance): \n    return VCM600(c_instance)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _construct_yaml_str(self, node): \n    return self.construct_scalar(node)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def erfinv(y): \n    return (ndtri(((y + 1) / 2.0)) / sqrt(2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sub_expr(lh_op, rh_op): \n    return sum_expr([lh_op, neg_expr(rh_op)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def force_leave_swarm(client): \n    while True: \n      try: \n         return client.swarm.leave(force=True) \n      except docker.errors.APIError as e: \n         if (e.explanation == 'context   deadline   exceeded'): \n            continue \n         else: \n            return",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def fanout_cast_to_server(conf, context, server_params, topic, msg): \n    return rpc_amqp.fanout_cast_to_server(conf, context, server_params, topic, msg, rpc_amqp.get_connection_pool(conf, Connection))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def task_install_docker_plugin(distribution=None, package_source=PackageSource()): \n    return task_package_install('clusterhq-flocker-docker-plugin', distribution, package_source)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return MultiplyRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dist(distname='', version='', id='', supported_dists=_supported_dists): \n    return linux_distribution(distname, version, id, supported_dists=supported_dists, full_distribution_name=0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isValid(text): \n    return bool(re.search(('\\\\b(weathers?|temperature|forecast|outside|hot|' + 'cold|jacket|coat|rain)\\\\b'), text, re.IGNORECASE))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trg_create(uid, res_type, res_id, cr): \n    return WorkflowService.new(cr, uid, res_type, res_id).create()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ipart(x): \n    return math.modf(x)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _fake_run_horcmgr(*args): \n    return vsp_horcm._HORCM_RUNNING",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def L(seqn): \n    return chain(imap((lambda x: x), R(Ig(G(seqn)))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_tables(db, prefix, tmp_prefix): \n    for table in ('point', 'line', 'roads', 'polygon'): \n      db.execute('BEGIN') \n      try: \n         db.execute(('CREATE   TABLE   %(prefix)s_%(table)s   (   LIKE   %(tmp_prefix)s_%(table)s   )' % locals())) \n      except ProgrammingError as e: \n         db.execute('ROLLBACK') \n         if (e.pgcode != '42P07'): \n            raise \n      else: \n         db.execute((\"INSERT   INTO   geometry_columns\\n                                                                              (f_table_catalog,   f_table_schema,   f_table_name,   f_geometry_column,   coord_dimension,   srid,   type)\\n                                                                              SELECT   f_table_catalog,   f_table_schema,   '%(prefix)s_%(table)s',   f_geometry_column,   coord_dimension,   srid,   type\\n                                                                              FROM   geometry_columns   WHERE   f_table_name   =   '%(tmp_prefix)s_%(table)s'\" % locals())) \n         db.execute('COMMIT')",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def _read_cfg_production(input): \n    return _read_production(input, standard_nonterm_parser)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def normalize_scene(text): \n    return re.sub(u'[^a-zA-Z0-9   \\\\-._()]', u'', normalize(u'NFKD', text).encode(u'ASCII', u'ignore').decode())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array_itemsize(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def activate(language): \n    _active.value = translation(language)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cert_get_cn(cert): \n    return cert.subject.get_attributes_for_oid(x509.OID_COMMON_NAME)[0].value.strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def status(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_current_worker_task(): \n    for task in reversed(_task_stack.stack): \n      if (not task.request.called_directly): \n         return task",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def independent(a, b): \n    return (not dependent(a, b))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_operator_type(): \n    assert (TPOTSelectKBest().type == 'Selector')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def strxor(s1, s2): \n    return ''.join(map((lambda x, y: chr((ord(x) ^ ord(y)))), s1, s2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def network_get_all_by_host(context, host): \n    return IMPL.network_get_all_by_host(context, host)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return Joystick(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_page_path_collation(apps, schema_editor): \n    if (schema_editor.connection.vendor == u'postgresql'): \n      schema_editor.execute(u'\\n                                    ALTER   TABLE   wagtailcore_page   ALTER   COLUMN   path   TYPE   VARCHAR(255)   COLLATE   \"C\"\\n                        ')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_choice(action): \n    return action.choices",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_builtin_mro(): \n    AreEqual(int.__mro__, (int, object))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def glr_path_static(): \n    return os.path.abspath(os.path.join(os.path.dirname(__file__), '_static'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hypernyms(source): \n    return closure(source, HYPERNYM)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_data_disk(vm_): \n    return config.get_cloud_config_value('allocate_data_disk', vm_, __opts__, default=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disable_nat(interface): \n    while (not run(settings.iptables, '-t', 'nat', '-D', 'POSTROUTING', '-o', interface, '-j', 'MASQUERADE')[1]): \n      pass",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def NXM_IS_NX_REG(o): \n    return o.is_reg",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return FlowRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backup_get(context, backup_id): \n    return IMPL.backup_get(context, backup_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def project_absent(name, profile=None, **connection_args): \n    return tenant_absent(name, profile=profile, **connection_args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getmodebandnames(mode): \n    return ImageMode.getmode(mode).bands",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vni_from_bin(buf): \n    return type_desc.Int3.to_user(six.binary_type(buf))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def contract_creation_exceptions(): \n    return {sa.Column: ['subnets.segment_id']}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bottom_up(rule, fns=basic_fns): \n    return chain((lambda expr: sall(bottom_up(rule, fns), fns)(expr)), rule)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _FilterIndexesByKind(key, indexes): \n    return filter((lambda index: (index.definition().entity_type() == _GetKeyKind(key))), indexes)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pack(name, root, path=None, pack_format='tar', compress='bzip2'): \n    if (pack_format == 'tar'): \n      _tar(name, root, path, compress)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def gen_not_started(gen): \n    return (gen.gi_frame and (gen.gi_frame.f_lasti == (-1)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewRepository(): \n    return WidenRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reset_model(model_elements): \n    for model_element in model_elements: \n      model_element.reset()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def rgb_to_hex(rgb): \n    return ('%02x%02x%02x' % rgb)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_common_config(settings): \n    if (not getattr(settings, 'LMS_ROOT_URL', None)): \n      raise ValueError(\"'LMS_ROOT_URL'   is   not   defined.\")",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def MakeCdfFromList(seq, label=None): \n    return Cdf(seq, label=label)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def conv_cond_concat(x, y): \n    return T.concatenate([x, (y * T.ones((x.shape[0], y.shape[1], x.shape[2], x.shape[3])))], axis=1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def walk(root, topdown=True, onerror=None, followlinks=False): \n    for (dirpath, dirnames, filenames) in os.walk(root, topdown, onerror): \n      (yield (dirpath, dirnames, filenames)) \n      if followlinks: \n         for d in dirnames: \n            p = os.path.join(dirpath, d) \n            if os.path.islink(p): \n               for (link_dirpath, link_dirnames, link_filenames) in walk(p): \n                  (yield (link_dirpath, link_dirnames, link_filenames))",
        "line_count": 8,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def exists(file_name): \n    return os.path.exists(file_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wait(service, condition, fail_condition=(lambda e: False), timeout=180, wait=True, poll_interval=3): \n    if wait: \n      start = time.time() \n      while (time.time() < (start + timeout)): \n         entity = get_entity(service) \n         if condition(entity): \n            return \n         elif fail_condition(entity): \n            raise Exception('Error   while   waiting   on   result   state   of   the   entity.') \n         time.sleep(float(poll_interval))",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def ROC(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.ROC, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def capitalize(s): \n    return s.capitalize()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def aggregate_create(context, values, metadata=None): \n    return IMPL.aggregate_create(context, values, metadata)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def round(x): \n    return tf.round(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resource_name_base(name): \n    return name[(name.rfind(PRN_SEPARATOR) + 1):]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filer_image_from_upload(request, path, upload_data, sha1=None): \n    return _filer_file_from_upload(model=Image, request=request, path=path, upload_data=upload_data, sha1=sha1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def HTTP(port=80, **kwargs): \n    return rule(port, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_service(name): \n    return PROVIDER_LOOKUP[name]()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mcycles_to_msecs(mcycles): \n    return int((mcycles_to_seconds(mcycles) * 1000))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rst_fmt(text, fmt): \n    return (fmt % text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strconvert(d): \n    return dict([(str(k), v) for (k, v) in six.iteritems(d)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def CAN_ASSIGN(article, user): \n    return _is_staff_for_article(article, user)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_no_files_specified(tmpdir, mocked_aws_cf_simple): \n    with tmpdir.as_cwd(): \n      config_path = tmpdir.join('config.yaml') \n      config_path.write(mocked_aws_cf_simple) \n      assert (main(['create']) == 0) \n      assert (main(['wait']) == 0) \n      assert (main(['describe']) == 0) \n      assert (main(['pytest']) == 0) \n      assert (main(['delete']) == 0)",
        "line_count": 8,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def is_prerelease(version=None): \n    return (_get_candidate(get_complete_version(version)) != 'final')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return HAS_PAM",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_param(registry, xml_parent, data): \n    base_param(registry, xml_parent, data, False, 'hudson.model.FileParameterDefinition')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_disabled(iface): \n    return (not is_enabled(iface))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Eijk(*args, **kwargs): \n    return LeviCivita(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sm_section(name): \n    return ('submodule   \"%s\"' % name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_overlay2(ax, closes, volumes, colorup=u'k', colordown=u'r', width=4, alpha=1.0): \n    return volume_overlay(ax, closes[:(-1)], closes[1:], volumes[1:], colorup, colordown, width, alpha)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_checkerboard(): \n    data.checkerboard()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addtogether(*things): \n    return reduce(operator.add, things)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_probe(probe_class): \n    if (probe_class not in REGISTERED_PROBES): \n      REGISTERED_PROBES.append(probe_class)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def flush(fmri): \n    return _fmadm_action_fmri('flush', fmri)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def egg_link_path(dist): \n    return (os.path.join(site_packages, dist.project_name) + '.egg-link')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _rummy(): \n    return ['------------------------------------------------------------------------------------------------------------', 'MB###BHHHBBMBBBB#####MBBHHHHBBBBHHAAA&GG&AAAHB###MHAAAAAAAAAHHAGh&&&AAAAH#@As;;shM@@@@@@@@@@@@@@@@@@@@@@@@@@', 'MGBMHAGG&&AAA&&AAM##MHAGG&GG&&GGGG93X5SS2XX9hh3255X2issii5X3h9X22555XXXX9H@A.         rA@@@@@@@@@@@@@@@@@@@@@@@@@@', 'BAM#BAAAAAAHHAAAHM##MBHAAAAAAAAAAAAG9X2X3hGXiii5X9hG3X9Xisi29B##BA33hGGhGB@@r         ;9@@@@@@@@@@@@@@@@@@@@@@@@@@', 'BAM#MHAAAHHHAAAAHM###BHAAAAAAAAAAAAGhXX3h2iSX&A&&AAHAGGAGs;rrri2r;rSiXGA&B@@9.      ,2#@@@@@@@@@@@@@@@@@@@@@@@@@', 'B&B#MHAAAAHHHAAAHM##MBHAAAAAAAAAAHAG93XSrs5Xh93h3XXX93529Xr;:,,:;;s25223AB@@@;         sB@@@@@@@@@@@@@@@@@@@@@@@@@', 'B&B#BAAAAAHHHAAAHB##MBAAAAAAAAAAAHHAh5rs2AGGAhXisiissSsr;r;::,:riiiisrr,s#@@@9.      ,2#@@@@@@@@@@@@@@@@@@@@@@@@', 'B&B#BAAAAAAHAAAAHM###BHA&AAAAAA&AAHA2S&#@MBHGX22s;;;;r;;:,:,,:;;rrr:,,:,.X@@@@r         :9@@@@@@@@@@@@@@@@@@@@@@@@', 'BAM#MAAAAAAAAAAAAB##MBAA&AAAAAAA&AH929AHA9XhXirrir::;r;;:::,:,,:,;rsr;,.,;2@@@#,         :G@@@@@@@@@@@@@@@@@@@@@@B', 'B&B#MAAAAAAHAAAAABM#MHAA&&&&&&&&&H&ss3AXisisisr;;r;::;::::,..,,,,::;rir;,;,A@@@G.         ;9@@@@@@@@@@@@@@@@@@@@@#', 'B&B#MHAAAAHHAAAAABM#MHAAA&G&A&&&AG2rr2X;   .:;;;;::::::::::,,,,,:,.,;::;;,;rr:@@@@X            :2#@@@@@@@@@@@@@@@@@@@@', 'B&B##HAAAAHHAAAAABMMMHAA&&&&&AAA&h2:r2r..:,,,,,,,,,,,,:;:,,,,,,.   ,;;;::,   ;2rr@@@@2            :SB@@@@@@@@@@@@@@@@@@@', 'BGB##HAAAAAAAAAAABMMMBAA&&&&&&&&AHr   ir:;;;;:,,,,,,::::,,:,:,,,,...;:;:,:,:2Xr&@@@@3.         .rG@@@@@@@@@@@@@@@@@@', 'B&B@#B&&AAAAAA&&AHMMMBAA&&&&&&&&AH,.i;;rrr;::,,:::::::,,::::::,,..;,:;.;;iXGSs#@@@@A,            :5#@@@@@@@@@@@@@@@@', 'B&M@@B&&AAAHAA&&AHMMMBAA&&&&&&&&AA;,;rrrrr;;::::::::::::::::::::.:;.::,:5A9r,.9@@@@@M;            .;G@@@@@@@@@@@@@@@', 'B&M@@B&&AAHAAA&&AHMMMBAA&G&GG&&&AM3;rrr;rr;;;;;;:::::;;,:,::,,,..,:;;:,;2r:.:;r@@##@@@i               .sH@@@@@@@@@@@@@', 'BGM@@B&&AAAHAA&&AHMMMBHAGGGG&&&&AMHs;srrr;r:;;;;::::::,..,,,,,,...,;rrrsi,   .   :,#@####@@A;               ,iB@@@@@@@@@@@', 'B&#@@B&&AAAAAA&&AHMMMBAA&GGGGG&&&BHr,rirr;;;::::::::::,,,,,::,,::,.,SS;r:.;r   .,A#HHMBB#@@2,               :iA@@@@@@@@@', 'B&#@@B&&AAAAAA&&AHBMBBAAGGGGGGG&&H#2:sis;;;::,,:::r;rsrr23HMAXr:::,:;...,,,5s,,#BGGAAAAB@@#i.               ,rG@@@@@@@', 'B&#@@BG&AAAAAA&&AHHBMHAAGGhhGGGGGA#Hrs9s;;;;r;:;s5Xrrh@@@@@@@@&5rr;.   .,,;.   ;;.;@Bh39hhhAM#@@Ar.               ,rG#@@@@', 'BA#@@BG&AAAAAA&&AHBMMBA&GGGGGGGGGAM#3r5SsiSSX@@@#@@i.   2h5ir;;:;r;:...,,:,.,;,,3@HG99XX23&H#MMBAS,               .;2H@@', 'BA#@@B&&AAAAAA&&&AHBMBAA&GGGGGGGhABMhsrirrS9#@Mh5iG&::r;..:;:,,.,...,::,,,...,A@A&h9X255XGAA93B#MX;                  .:X', 'BH@@@B&&AAAAAA&G&ABM#BHAGGGGGGGGG&HBAXiir;s2r;;:rrsi.,,.         .....,,,,::,.,,::   :2@H&Gh9X2523AG253AM@@Ai,               ,', 'MB@@@B&&AAAAAAGGAA###@#H&GGGGGGG&AHBAXXi;,.   .:,,,   .;:,.,;:;..,::::;;;:,,,:,srs5@B&hhh32229AG2S29GAB#@#A2;      .', 'MB@@@BGGAAAAA&&GAHr      ,sH#AGGhhGGG&AH&X22s:..,.   .      ;S:,.   .,i9r;::,,:;:::,:::,,5A#BAhhhX22X9AG2i2X9hG&AB#@@B3r', 'MB@@@B&&AAAAAA&AM#;..         ;AAGhhGGG&AHGX2XXis::,,,,,Xi,.:.ri;Xir;:,...,:::;::,.:S9#AGh9X2229A&2i52X39hhG&AM@@&', 'MM@@@B&GAAAHBHBhsiGhhGi.   3MGGhGGG&HH&X52GXshh2r;;rXiB25sX2r;;:ii;,...:;:;:;:..,   r#G33X2223AG2i52XX3339hGAA&&', '#M@@@B&GAM#A3hr      .;S5;:,   ;MAGhGGG&ABAX55X9rS93s::i::i52X;,::,,,;5r:,,,::;;;:,.i      @@AXX222X&G2S52XXXX3399hhh&', '#M@@@BAB&S;      .:,   .,,;,;;.   rBGhhGG&ABAXSS29G5issrrS,,,,,:,...,;i;rr:,:,,::;::,,r      #@@B25523&G2iS2XXX3X33999h&', '#M@@@MH;      ,.   .;i::::;rr;,   ,M&GGGh&AHAXSS2X3hXirss5;r;:;;;2#@@H9Ai;::,,,,:;:;::         ,@@@#Xi23&G2iS2XXX3X33339h&', '#M#@@#i      .:;,.,::,::;&ii;.;#AGhGG&AHAXSS2XX3&hir;;s9GG@@@@@h;,,riirr;:,.:;;;.            i@##@@AS2hh5iS222XXXX3999hG', '#M@@@@:.;,,:r,,;r,,..h#sr:   rHAGhG&AHAXSi52X39AAir::is;::,,.   .::,sssrr;,,;r:               ,@@MM#@@#HBA2iiSS5522XX39hhG', '#M@@@@r.sr,:rr::r;,,   ,As:,      :B&hh&ABAXSiSS5229HHS3r;rSSsiiSSr;:,,,:;;r;;;                     @@#BMM#@@@@@@@@#MH&93XXXXX3G', '#M@@@@A,:r:,:i,,rr,,.   ;;;,.   ;BGhhGAHAX5529hAAAM#AH#2i25Ss;;;:.....,rSi2r                     M@@MMMM##@#@@@@@@@@@@@@@@#MHA', '#M@@@@M::rr::SS,;r;::.:;;r:rHAh9h&ABM##@@@@@@@@ABAAA25i;::;;;:,,,,:r32:                     H@@#MM######@@@@@@@@@@@@@@@@@#', '#M@@@@@5:;sr;;9r:i;,.,sr;;iMHhGABM#####@@@@@@@BHH&H@#AXr;;r;rsr;;ssS;                        H@@##########@@@##@@@@@@@@@@@@#', '#M@@@@##r;;s;:3&;rsSrrisr:h#AHM#######BM#@@@#HHH9hM@@@X&92XX9&&G2i,               .,:,@@@##M########@@@####@@@@@@@@@##', '#M#@@@M@2,:;s;;2s:rAX5SirS#BB##@@@##MAAHB#@#BBH93GA@@@2   2@@@MAAHA      .,,:,,.   G@@#M#################@@@@@@#####', '#M#@@#M@;,;:,,,;h52iX33sX@@#@@@@@@@#Ah&&H####HhA@@@@@@@;s@@@@H5@@      .                  r@@##M###########@###@@@@@@#######', '#M#@@@#r.:;;;;rrrrrri5iA@@#@@@@@@@@#HHAH##MBA&#@@@@@@@@3i@@@@@3:,                        ,@@#M############@@###@@@@@########', '#M@@@@r   r::::;;;;;;rirA@#@@@@@@@@@@@#MGAMMHBAB@@@@@@@@@#2@@@@#i   ..                     #@##M#####@###@@@@###@@@@##########', '#M#@@@      2;;;;;;rr;rish@@#@#@@@@@@@@@@B&hGM#MH#@@@@@@@@@@3;,h@.         ..               :@@MM#######@@@@#####@@@@###########', '#M@@#A      ;r;riirrrr;:2S@###@@@@@@@@@@@#AH#@#HB#@@@@@@@@@@@@2A9                                 @@#BMMM############@#@@@####M#######', '#M@MM#                  ,:,:;;,5ir@B#@@@@@@@@@@@@@@@@@#MMH#@@@@@@@@@@@@r   Ms                        B@#MMMMMM####@###@@#@@@@#####M######@', '##Mh@M      .            ...:;;,:@A#@@@@@@@@@@@#@@@@@@#MMHAB@@@@#G#@@#:   i@@                     r@@#MMM#######@@@@#@@@@@@#####M#####@@', '#H3#@3.   ,.            ...      :@@&@@@@@@@@@@@@@#@@#@@@MMBHGA@H&;:@@i   :B@@@B               .@@#MM####@@@##@@@#@@@@@#######M##M#@@@', 'M&AM5i;.,.         ..,,rA@@MH@@@@@@@@@@@@@##@@@@@MMMBB#@h9hH#s;3######,         .A@#MMM#####@@@@@##@@@#@@#####M#####M39B']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def optimise(): \n    with cd('/home/web2py/'): \n      run('python   web2py.py   -S   eden   -M   -R   applications/eden/static/scripts/tools/indexes.py', pty=True) \n      run('python   web2py.py   -S   eden   -M   -R   applications/eden/static/scripts/tools/compile.py', pty=True)",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_humidity(): \n    return _sensehat.get_humidity()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_user_eligible_for_credit(username, course_key): \n    return CreditEligibility.is_user_eligible_for_credit(course_key, username)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup(name, host='0.0.0.0'): \n    if CONF.profiler.enabled: \n      osprofiler.initializer.init_from_conf(conf=CONF, context=context.get_admin_context().to_dict(), project='neutron', service=name, host=host) \n      LOG.info(_LI(\"OSProfiler   is   enabled.\\nTraces   provided   from   the   profiler   can   only   be   subscribed   to   using   the   same   HMAC   keys   that   are   configured   in   Neutron's   configuration   file   under   the   [profiler]   section.\\n   To   disable   OSprofiler   set   in   /etc/neutron/neutron.conf:\\n[profiler]\\nenabled=false\"))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def wns_send_bulk_message(uri_list, message=None, xml_data=None, raw_data=None, **kwargs): \n    if uri_list: \n      for uri in uri_list: \n         wns_send_message(uri=uri, message=message, xml_data=xml_data, raw_data=raw_data, **kwargs)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _get_pyqt_objects(lines, obj, depth=0): \n    for kid in obj.findChildren(QObject, '', Qt.FindDirectChildrenOnly): \n      lines.append((('            ' * depth) + repr(kid))) \n      _get_pyqt_objects(lines, kid, (depth + 1))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def parse(handle): \n    for line in handle: \n      if line.startswith('#'): \n         continue \n      (yield Record(line))",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def send_mail(subject, message, from_email, recipient_list, fail_silently=False): \n    return _send_mail(subject, message, from_email, recipient_list, connection=get_connection(fail_silently=fail_silently))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def failhard(role): \n    raise FileserverConfigError('Failed   to   load   {0}'.format(role))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_get_ipython_dir_5(): \n    with patch_get_home_dir(HOME_TEST_DIR): \n      with patch('os.name', 'posix'): \n         try: \n            os.rmdir(os.path.join(XDG_TEST_DIR, 'ipython')) \n         except OSError as e: \n            if (e.errno != errno.ENOENT): \n               raise \n         with modified_env({'IPYTHON_DIR': None, 'IPYTHONDIR': None, 'XDG_CONFIG_HOME': XDG_TEST_DIR}): \n            ipdir = paths.get_ipython_dir() \n         nt.assert_equal(ipdir, IP_TEST_DIR)",
        "line_count": 10,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _retrieve_ntp_peers(): \n    return __salt__['ntp.peers']()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assert_instance_of(expected, actual, msg=None): \n    assert isinstance(actual, expected), msg",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def reload_(app, url='http://localhost:8080/manager', timeout=180): \n    return _simple_cmd('reload', app, url, timeout=timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _create_transformations(all_tokens, seen_ts): \n    for (parent, token) in all_tokens: \n      if isinstance(token, TransformationToken): \n         if (token.number not in seen_ts): \n            raise RuntimeError(('Tabstop   %i   is   not   known   but   is   used   by   a   Transformation' % token.number)) \n         Transformation(parent, seen_ts[token.number], token)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def unsafe_version(version): \n    return version.replace('_', '.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _mk_client(): \n    if ('cp.fileclient_{0}'.format(id(__opts__)) not in __context__): \n      __context__['cp.fileclient_{0}'.format(id(__opts__))] = salt.fileclient.get_file_client(__opts__)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def create_connection(conf, new=True): \n    return Connection()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_new_files(dire): \n    return read_in(os.path.join(dire, 'NEW_FILES')).splitlines()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read(tex_root, name): \n    return read_local(tex_root, name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_session_plot_options(): \n    return copy.deepcopy(_session['plot_options'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_available_extension(name, user=None, host=None, port=None, maintenance_db=None, password=None, runas=None): \n    return available_extensions(user=user, host=host, port=port, maintenance_db=maintenance_db, password=password, runas=runas).get(name, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def looks_like_a_tool_cwl(path): \n    return looks_like_a_cwl_artifact(path, classes=['CommandLineTool', 'ExpressionTool'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return skeinforge_profile.ProfileRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def most_square_shape(N): \n    for i in xrange(int(numpy.sqrt(N)), 0, (-1)): \n      if (0 == (N % i)): \n         return (i, (N / i))",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def list_manage_opts(): \n    return [(g, copy.deepcopy(o)) for (g, o) in _manage_opts]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def LoadConfigsFromFile(file_path): \n    with open(file_path) as data: \n      return {d['check_id']: d for d in yaml.safe_load_all(data)}",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _dot_buildout(directory): \n    return os.path.join(os.path.abspath(directory), '.buildout')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def listening_ports(attrs=None, where=None): \n    return _osquery_cmd(table='listening_ports', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_emacs_arguments_for_all_commands(): \n    for key in ANSI_SEQUENCES: \n      if (key != u'\\x1b[200~'): \n         try: \n            (result, cli) = _feed_cli_with_input(((u'hello\\x1b4' + key) + u'X\\n\\n')) \n            (result, cli) = _feed_cli_with_input(((u'hello\\x1b-' + key) + u'X\\n\\n')) \n         except KeyboardInterrupt: \n            assert (key == u'\\x03')",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def pop(): \n    return image_stack.pop()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bin_list_to_int(bin_list): \n    return (bin_list << range(len(bin_list))).sum(0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def H(s): \n    return md5_hex(s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unpickle_backend(cls, args, kwargs): \n    return cls(app=current_app._get_current_object(), *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_private_ip(vm_): \n    return config.get_cloud_config_value('assign_private_ip', vm_, __opts__, default=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_session_view(request): \n    return HttpResponse(request.session.get('session_var', 'NO'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def equateRectangularDotZ(point, returnValue): \n    point.z = returnValue",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_dist_ops(operator): \n    return (SpatiaLiteDistance(operator),)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TimestampFromTicks(ticks): \n    return datetime(*localtime(ticks)[:6])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def binary_accuracy(y, t): \n    return BinaryAccuracy()(y, t)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return MechaslabDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lenSig(obj): \n    return (obj.size() / 8)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def broadcasted_add(a, b): \n    return (a.dimshuffle(2, 'x', 1, 0) + b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def verify(*names, **kwargs): \n    return __salt__['lowpkg.verify'](*names, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Verify(*args): \n    for mock in args: \n      mock._Verify()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _coordinateType(hemisphere): \n    return (Angles.LATITUDE if (hemisphere in 'NS') else Angles.LONGITUDE)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def untilConcludes(f, *a, **kw): \n    while True: \n      try: \n         return f(*a, **kw) \n      except (IOError, OSError) as e: \n         if (e.args[0] == errno.EINTR): \n            continue \n         raise",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _check_fscale(fscale): \n    if ((not isinstance(fscale, string_types)) or (fscale not in ('log', 'linear'))): \n      raise ValueError(('fscale   must   be   \"log\"   or   \"linear\",   got   %s' % (fscale,)))",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def ds_format(ds, input_format, output_format): \n    return datetime.strptime(ds, input_format).strftime(output_format)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def action_start(context, values): \n    return IMPL.action_start(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_disassociate_all_by_timeout(context, host, time): \n    return IMPL.fixed_ip_disassociate_all_by_timeout(context, host, time)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def install_miniconda(prefix='~/miniconda', use_sudo=False, keep_installer=False): \n    with cd('/tmp'): \n      if (not fabtools.files.is_file('Miniconda-latest-Linux-x86_64.sh')): \n         download(MINICONDA_URL) \n      command = ('bash   Miniconda-latest-Linux-x86_64.sh   -b   -p   %(prefix)s' % locals()) \n      if use_sudo: \n         run_as_root(command) \n      else: \n         run(command) \n      files.append('~/.bash_profile', ('export   PATH=%(prefix)s/bin:$PATH' % locals())) \n      if (not keep_installer): \n         run('rm   -f   Miniconda-latest-Linux-x86_64.sh')",
        "line_count": 11,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def create(node): \n    return GenericDriverFields(node)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cm_to_EMU(value): \n    return int((value * 360000))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_pickle(obj, path): \n    with open(path, 'wb') as f: \n      pkl.dump(obj, f, protocol=pkl.HIGHEST_PROTOCOL)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rstrip(s, chars=None): \n    return s.rstrip(chars)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_skip_travis(): \n    if (os.environ.get('TRAVIS') == 'true'): \n      raise SkipTest('This   test   needs   to   be   skipped   on   Travis')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _ca_exists(ca_name, cacert_path=None): \n    return ca_exists(ca_name, cacert_path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def single_client(h=client_context.host, p=client_context.port, **kwargs): \n    return _mongo_client(h, p, direct=True, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _inject_imread_collection_if_needed(module): \n    if ((not hasattr(module, 'imread_collection')) and hasattr(module, 'imread')): \n      imread = getattr(module, 'imread') \n      func = imread_collection_wrapper(imread) \n      setattr(module, 'imread_collection', func)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def on_closing(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _fswalk_no_symlinks(path): \n    for (dirpath, dirnames, filenames) in _os_walk_unicode(path): \n      (yield (dirpath, dirnames, filenames))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_valid_state(state): \n    return (state in const.BGP_FSM_VALID_STATES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def driver_initiator_data_insert_by_key(context, initiator, namespace, key, value): \n    return IMPL.driver_initiator_data_insert_by_key(context, initiator, namespace, key, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sitemap_urls_from_robots(robots_text): \n    for line in robots_text.splitlines(): \n      if line.lstrip().startswith('Sitemap:'): \n         (yield line.split(':', 1)[1].strip())",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def natsortKey(string_): \n    return [(int(s) if s.isdigit() else s) for s in re.split('(\\\\d+)', string_)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getServer(request): \n    return Server(getOpenIDStore(), getViewURL(request, endpoint))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_linked(prefix, dist): \n    return load_meta(prefix, dist)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quote(s): \n    return (('\"' + s.replace('\\\\', '\\\\\\\\').replace('\"', '\\\\\"')) + '\"')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cross_below(values1, values2, start=(-2), end=None): \n    return _cross_impl(values1, values2, start, end, (lambda x: (x < 0)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SerializeError(Exception): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_spam(request, form, url): \n    for spam_filter_path in settings.SPAM_FILTERS: \n      spam_filter = import_dotted_path(spam_filter_path) \n      if spam_filter(request, form, url): \n         return True",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def func2(a, b): \n    return (a, b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random_y_given_x(x): \n    return (x + roll_a_die())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def execute_request(service, property_uri, request): \n    return service.searchanalytics().query(siteUrl=property_uri, body=request).execute()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fully_normalize_name(name): \n    return '   '.join(name.lower().split())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_get_by_name(): \n    assert (Operator.get_by_name('SelectKBest').__class__ == TPOTSelectKBest)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def removeQuotes(s, l, t): \n    return t[0][1:(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_type_extra_specs_update_or_create(context, flavor_id, extra_specs): \n    IMPL.instance_type_extra_specs_update_or_create(context, flavor_id, extra_specs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _tool_path(ostool): \n    return salt.utils.which(ostool)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def channel(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _fake_is_smpl(*args): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quote_slashes(text): \n    return re.sub(u'[;/]', _quote_slashes, text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_running(proxyname): \n    return {'result': _is_proxy_running(proxyname)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def notify(_context, message): \n    NOTIFICATIONS.append(message)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def syncloop(agents, sleep=2): \n    while True: \n      for agent in agents: \n         agent.sync() \n      time.sleep(sleep)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _pattern_of(index): \n    return np.array([[(index & (2 ** 0)), (index & (2 ** 1)), (index & (2 ** 2))], [(index & (2 ** 3)), (index & (2 ** 4)), (index & (2 ** 5))], [(index & (2 ** 6)), (index & (2 ** 7)), (index & (2 ** 8))]], bool)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _long_to_bin(x, hex_format_string): \n    return binascii.unhexlify((hex_format_string % x).encode(u'ascii'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_filename(name): \n    return name.replace('-', '_')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sanitize_host(host): \n    return ''.join([c for c in host[0:255] if (c in ((ascii_letters + digits) + '.-'))])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def setup(): \n    log('setup')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gf_multi_eval(f, A, p, K): \n    return [gf_eval(f, a, p, K) for a in A]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def processElementNode(elementNode): \n    elementNode.parentNode.xmlObject.vertexes.append(evaluate.getVector3FromElementNode(elementNode))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _serialize_allocations_for_resource_provider(allocations, resource_provider): \n    return _allocations_dict(allocations, (lambda x: x.consumer_id), resource_provider=resource_provider)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_dependencies(): \n    return config.check_driver_dependencies(__virtualname__, {'profitbricks': HAS_PROFITBRICKS})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def freeze_support(): \n    if ((sys.platform == 'win32') and getattr(sys, 'frozen', False)): \n      from multiprocessing.forking import freeze_support \n      freeze_support()",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def contract_creation_exceptions(): \n    return {sa.Table: ['ml2_geneve_allocations', 'ml2_geneve_endpoints'], sa.Index: ['ml2_geneve_allocations']}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hex2color(c): \n    return ColorConverter.to_rgb(c)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_comment_count(parser, token): \n    return CommentCountNode.handle_token(parser, token)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Laplace(name, mu, b): \n    return rv(name, LaplaceDistribution, (mu, b))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eval(image, *args): \n    return image.point(args[0])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def duplicate_identical_ops(ops): \n    for i in range(len(ops)): \n      for j in range((i + 1), len(ops)): \n         if (ops[i] == ops[j]): \n            ops[j] = ops[i].duplicate()",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def p_function_definition_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create(): \n    redirect(URL(f='project', args='create'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def typed_ordered_dict(key_type, value_type, default): \n    return (lambda setting: OrderedDict(((key_type(StringConverter(key)), (value_type(StringConverter(value)) if (value != '') else default)) for (key, value) in OrderedDict(setting).items())))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def __virtual__(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookupWellKnownServices(name, timeout=None): \n    return getResolver().lookupWellKnownServices(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return TuneoptModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def randcplx(offset=(-1)): \n    return ((_randrat() + (I * _randrat())) + (I * (1 + offset)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def distort_image(image, height, width, bbox, thread_id=0, scope=None): \n    with tf.op_scope([image, height, width, bbox], scope, 'distort_image'): \n      if (not thread_id): \n         image_with_box = tf.image.draw_bounding_boxes(tf.expand_dims(image, 0), bbox) \n         tf.image_summary('image_with_bounding_boxes', image_with_box) \n      sample_distorted_bounding_box = tf.image.sample_distorted_bounding_box(tf.shape(image), bounding_boxes=bbox, min_object_covered=0.1, aspect_ratio_range=[0.75, 1.33], area_range=[0.05, 1.0], max_attempts=100, use_image_if_no_bounding_boxes=True) \n      (bbox_begin, bbox_size, distort_bbox) = sample_distorted_bounding_box \n      if (not thread_id): \n         image_with_distorted_box = tf.image.draw_bounding_boxes(tf.expand_dims(image, 0), distort_bbox) \n         tf.image_summary('images_with_distorted_bounding_box', image_with_distorted_box) \n      distorted_image = tf.slice(image, bbox_begin, bbox_size) \n      resize_method = (thread_id % 4) \n      distorted_image = tf.image.resize_images(distorted_image, [height, width], method=resize_method) \n      distorted_image.set_shape([height, width, 3]) \n      if (not thread_id): \n         tf.image_summary('cropped_resized_image', tf.expand_dims(distorted_image, 0)) \n      distorted_image = tf.image.random_flip_left_right(distorted_image) \n      distorted_image = distort_color(distorted_image, thread_id) \n      if (not thread_id): \n         tf.image_summary('final_distorted_image', tf.expand_dims(distorted_image, 0)) \n      return distorted_image",
        "line_count": 20,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def check_secret(form_instance, secret): \n    return (make_secret(form_instance) == secret)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_env_vars_available_during_preload(): \n    gunicorn.arbiter.Arbiter(PreloadedAppWithEnvSettings())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_att_double_space(header_checker): \n    header_checker.check_filename('attachment;   filename=\"foo      bar.html\"', 'foo   bar.html')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_pkg_data_fileobjs(datadir, package=None, pattern=u'*', encoding=None): \n    for fn in get_pkg_data_filenames(datadir, package=package, pattern=pattern): \n      with get_readable_fileobj(fn, encoding=encoding) as fd: \n         (yield fd)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def primary_key(name='id'): \n    return field(name, INTEGER, index=PRIMARY, optional=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def collect_merged_boolean_field(block_structure, transformer, xblock_field_name, merged_field_name): \n    for block_key in block_structure.topological_traversal(): \n      parents = block_structure.get_parents(block_key) \n      all_parents_merged_value = (all((block_structure.get_transformer_block_field(parent_key, transformer, merged_field_name, False) for parent_key in parents)) if parents else False) \n      block_structure.set_transformer_block_field(block_key, transformer, merged_field_name, (all_parents_merged_value or get_field_on_block(block_structure.get_xblock(block_key), xblock_field_name, False)))",
        "line_count": 4,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def album_for_id(album_id): \n    for plugin in find_plugins(): \n      album = plugin.album_for_id(album_id) \n      if album: \n         (yield album)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def open(file, flag=None, mode=None): \n    return DirDBM(file)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _match_emr_step_stderr_path(path, step_id=None): \n    return _match_emr_step_log_path(path, 'stderr', step_id=step_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def query_issues(page, after): \n    return read_url(get_issues_url(page, after))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_calls(mock_observer_func): \n    return [call_tuple[0][0].name for call_tuple in mock_observer_func.calls]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_sparse(tensor): \n    return isinstance(tensor, tf.SparseTensor)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pre_track_containers_create_policy_stat(self, conn): \n    conn.executescript('\\n                        CREATE   TABLE   policy_stat   (\\n                                    storage_policy_index   INTEGER   PRIMARY   KEY,\\n                                    object_count   INTEGER   DEFAULT   0,\\n                                    bytes_used   INTEGER   DEFAULT   0\\n                        );\\n                        INSERT   OR   IGNORE   INTO   policy_stat   (\\n                                    storage_policy_index,   object_count,   bytes_used\\n                        )\\n                        SELECT   0,   object_count,   bytes_used\\n                        FROM   account_stat\\n                        WHERE   container_count   >   0;\\n            ')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mad_std(data, axis=None): \n    return (median_absolute_deviation(data, axis=axis) * 1.482602218505602)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_clients(node): \n    return [c for (c, i) in node.outputs[0].clients if (c != 'output')]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def searchsorted(x, v, side='left', sorter=None): \n    return SearchsortedOp(side=side)(x, v, sorter)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_vcs_info(path): \n    for info in SUPPORTED: \n      vcs_path = osp.join(path, info['rootdir']) \n      if osp.isdir(vcs_path): \n         return info",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _is_reference(arg): \n    return (isinstance(arg, dict) and (len(arg) == 1) and isinstance(next(six.itervalues(arg)), six.string_types))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def add_move(move): \n    setattr(_MovedItems, move.name, move)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def name(dev): \n    return info(dev).get('N', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_rc(rc, errno=None): \n    if (rc == (-1)): \n      if (errno is None): \n         from zmq.backend import zmq_errno \n         errno = zmq_errno() \n      from zmq import EAGAIN, ETERM \n      if (errno == EINTR): \n         raise InterruptedSystemCall(errno) \n      elif (errno == EAGAIN): \n         raise Again(errno) \n      elif (errno == ETERM): \n         raise ContextTerminated(errno) \n      else: \n         raise ZMQError(errno)",
        "line_count": 13,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def _package_conf_file_to_dir(file_name): \n    if (file_name in SUPPORTED_CONFS): \n      path = BASE_PATH.format(file_name) \n      if os.path.exists(path): \n         if os.path.isdir(path): \n            return False \n         else: \n            os.rename(path, (path + '.tmpbak')) \n            os.mkdir(path, 493) \n            with salt.utils.fopen((path + '.tmpbak')) as fh_: \n               for line in fh_: \n                  line = line.strip() \n                  if (line and (not line.startswith('#'))): \n                     append_to_package_conf(file_name, string=line) \n            os.remove((path + '.tmpbak')) \n            return True \n      else: \n         os.mkdir(path, 493) \n         return True",
        "line_count": 18,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def StringToMakefileVariable(string): \n    return re.sub('[^a-zA-Z0-9_]', '_', string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_mask(mask): \n    return MASKS.get(mask, 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_installed(package_id): \n    return (package_id in list_())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean(input): \n    return detectYears(input)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skip(reason): \n    return skipif(True, reason=reason)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatnonzero(a): \n    return a.ravel().nonzero()[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_backend_frozen(context, host, cluster_name): \n    return IMPL.is_backend_frozen(context, host, cluster_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text='', repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hash_file(fname, hashtype='sha1'): \n    with open_file(fname) as fdesc: \n      if (hashtype in _HASH_COMMANDS): \n         try: \n            return subprocess.Popen([_HASH_COMMANDS[hashtype]], stdin=fdesc, stdout=subprocess.PIPE, stderr=open(os.devnull, 'w')).communicate()[0].split()[0] \n         except OSError as exc: \n            if (exc.errno != errno.ENOENT): \n               raise \n      result = hashlib.new(hashtype) \n      for data in iter((lambda : fdesc.read(1048576)), ''): \n         result.update(data) \n      return result.hexdigest()",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_language_tuple(site_id=None): \n    return [(lang['code'], lang['name']) for lang in get_languages(site_id)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sample_with_replacement(population, k): \n    return [random.choice(population) for i in range(k)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def msec_time(): \n    return int((time.time() * 1000.0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _run_hook_from_repo_dir(repo_dir, hook_name, project_dir, context): \n    with work_in(repo_dir): \n      try: \n         run_hook(hook_name, project_dir, context) \n      except FailedHookException: \n         rmtree(project_dir) \n         logger.error(u\"Stopping   generation   because   {}   hook   script   didn't   exit   successfully\".format(hook_name)) \n         raise",
        "line_count": 7,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def patch(url, data=None, **kwargs): \n    return request('patch', url, data=data, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_import(node): \n    return (node.type in (syms.import_name, syms.import_from))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rm_handlers(app, handlers, key=None): \n    for (handler_name, func) in handlers.iteritems(): \n      rm_handler(app, handler_name, func, key=key)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get(): \n    return Context._context_instance",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sqlite_version(): \n    return sqlite3.sqlite_version",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def node(): \n    return uname().node",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_cinder(): \n    for (name, function) in globals().items(): \n      if (not inspect.isfunction(function)): \n         continue \n      args = inspect.getargspec(function)[0] \n      if (args and name.startswith('cinder')): \n         exec ('pep8.%s   =   %s' % (name, name))",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def instance_get_all_by_host_and_node(context, host, node, columns_to_join=None): \n    return IMPL.instance_get_all_by_host_and_node(context, host, node, columns_to_join=columns_to_join)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register(): \n    return 'serializer'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_timestamp(): \n    return unicode(int(time.time()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('eselect' if ('eselect.exec_action' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def t_comment(t): \n    t.lexer.lineno += t.value.count('\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def preDeploy(site): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def truncate(path): \n    with open(path, 'wb'): \n      os.utime(path, None)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def merge(dest, upd): \n    return dictupdate.update(dest, upd)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getrss(tag='', popular=0, url='', user=''): \n    return dlcs_rss_request(tag=tag, popular=popular, user=user, url=url)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_foreign_columns(base_table, columns): \n    return filter_list((lambda c: (c.table == base_table)), columns)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_subtensor(x, y, inplace=False, tolerate_inplace_aliasing=False): \n    return inc_subtensor(x, y, inplace, set_instead_of_inc=True, tolerate_inplace_aliasing=tolerate_inplace_aliasing)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stripList(listObj): \n    return '   '.join((str(i) for i in listObj))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def task_install_control_certificates(ca_cert, control_cert, control_key): \n    return sequence([run('mkdir   -p   /etc/flocker'), run('chmod   u=rwX,g=,o=   /etc/flocker'), put(path='/etc/flocker/cluster.crt', content=ca_cert.getContent()), put(path='/etc/flocker/control-service.crt', content=control_cert.getContent()), put(path='/etc/flocker/control-service.key', content=control_key.getContent(), log_content_filter=_remove_private_key)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def string_range(last): \n    for k in range(len(last)): \n      for x in product(string.ascii_lowercase, repeat=(k + 1)): \n         result = ''.join(x) \n         (yield result) \n         if (result == last): \n            return",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def blacklist(*field_list): \n    return Role(Role.blacklist, field_list)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_colors(): \n    for i in CONF['COLORS']: \n      if isinstance(CONF['COLORS'][i], dict): \n         for j in CONF['COLORS'][i]: \n            CONF['COLORS'][i][j] = '' \n      else: \n         CONF['COLORS'][i] = ''",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def fastprint(text, show_prefix=False, end='', flush=True): \n    return puts(text=text, show_prefix=show_prefix, end=end, flush=flush)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_decimal(string): \n    return get_i18n().parse_decimal(string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nativejoin(base, path): \n    return url2pathname(pathjoin(base, path))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return (__virtualname__ if __salt__.get('pkg.get_selections', False) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_folder(fileName): \n    return os.path.dirname(fileName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timedelta_range(start=None, end=None, periods=None, freq='D', name=None, closed=None): \n    return TimedeltaIndex(start=start, end=end, periods=periods, freq=freq, name=name, closed=closed)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getTemplatesPath(subName=''): \n    return getJoinedPath(getFabmetheusUtilitiesPath('templates'), subName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addToHeadings(headingLineTable, headings, line): \n    for depth in xrange(4, (-1), (-1)): \n      equalSymbolLength = (depth + 2) \n      if (line[:equalSymbolLength] == ('=' * equalSymbolLength)): \n         headings.append(Heading(depth).getFromLine(headingLineTable, line)) \n         return",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def normcase(s): \n    return s.replace('\\\\', '/').lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fuzzy_not_equal(a_str, b_str, threshold=0.6): \n    return (not relative_distance_boolean(a_str, b_str, threshold))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_version(): \n    return open(VERSION_PATH).read().strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_closed_polygon(X): \n    return np.all((X[0] == X[(-1)]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_ip(ip): \n    return (is_ipv4(ip) or is_ipv6(ip))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _enum_to_index(enum, key): \n    return list(enum).index(key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def powered_off(name): \n    return _virt_call(name, 'stop', 'unpowered', 'Machine   has   been   powered   off')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_super_powers(): \n    return (os.geteuid() == 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_cookie(payload): \n    return u'{0}|{1}'.format(payload, _cookie_digest(payload))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def win_service_iter(): \n    for (name, display_name) in cext.winservice_enumerate(): \n      (yield WindowsService(name, display_name))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def wang_ryzin_reg(h, Xi, x): \n    return (h ** abs((Xi - x)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clearScreen(): \n    sys.stdout.write((((SEQ_PREFIX + '[H') + SEQ_PREFIX) + '[2J'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _SecretName(user): \n    return '{0}_otp'.format(user)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start(win, ctx): \n    Clock.schedule_once(partial(create_console, win, ctx))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fix_all_html(container): \n    for (name, mt) in container.mime_map.iteritems(): \n      if (mt in OEB_DOCS): \n         container.parsed(name) \n         container.dirty(name)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def p_statement_interactive(p): \n    p[0] = (0, (p[1], 0))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_include_dirs(): \n    return ['/usr/local/include', '/usr/include']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def skipUnlessAnyDBFeature(*features): \n    return _deferredSkip((lambda : (not any((getattr(connection.features, feature, False) for feature in features)))), (\"Database   doesn't   support   any   of   the   feature(s):   %s\" % ',   '.join(features)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def decode_json(json_string): \n    return json.loads(unicodehelper.decode(json_string))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plugin(): \n    return FoldBrackets",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timestamp_index(index): \n    return ('%s-%s' % (index, datetime.datetime.now().strftime('%Y%m%d%H%M%S')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def equateRectangular(point, returnValue): \n    point.setToVector3(evaluate.getVector3ByDictionaryListValue(returnValue, point))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _iter_content_lines(content): \n    return _iter_lines(content.iter_bytes(), '\\n')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FindMissingAndroidPlainAssets(referenced_images, android_assets): \n    for (name, inset) in referenced_images.iteritems(): \n      if (inset is not None): \n         continue \n      if (name in SKIP_PLAIN): \n         print ('WARNING:   %s:   skipping   due   to   hard-coded   exclusion   in   assets-tool.py' % name) \n         continue \n      android_name = ImageNameAndroid(name) \n      if (android_name not in android_assets): \n         name_2x = ImageName2X(name) \n         shutil.copyfile(os.path.join(IOS_IMAGES_DIR, name_2x), os.path.join(ANDROID_IMAGES_DIR, android_name)) \n         print ('%s:   not   in   android   assets,   copied   %s   ->   %s' % (name, name_2x, android_name)) \n      elif options.options.v: \n         print ('%s:   OK' % name)",
        "line_count": 13,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def submission_allowed(user, parsed_addon_data): \n    return ((not parsed_addon_data.get('is_experiment', False)) or action_allowed_user(user, 'Experiments', 'submit'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def expires(name): \n    return _expires(name).isoformat()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Time(hour, minute, second): \n    return datetime.time(hour, minute, second)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def LONGER(fragment): \n    return (0 - len(fragment))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_list(node): \n    return (isinstance(node, Node) and (len(node.children) > 1) and isinstance(node.children[0], Leaf) and isinstance(node.children[(-1)], Leaf) and (node.children[0].value == '[') and (node.children[(-1)].value == ']'))",
        "line_count": 1,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def event_location(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def FDistribution(name, d1, d2): \n    return rv(name, FDistributionDistribution, (d1, d2))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Get(keys, **kwargs): \n    return GetAsync(keys, **kwargs).get_result()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fs2web(path): \n    return '/'.join(path.split(os.path.sep))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def refresh_info_cache_for_instance(context, instance): \n    if (instance.info_cache is not None): \n      instance.info_cache.refresh()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def download(url=u'', method=GET, query={}, timeout=10, cached=True, throttle=0, proxy=None, user_agent=USER_AGENT, referrer=REFERRER, authentication=None, unicode=False): \n    return URL(url, method, query).download(timeout, cached, throttle, proxy, user_agent, referrer, authentication, unicode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def disallow_proxying(): \n    ScopeReplacer._should_proxy = False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _proxy(): \n    return __proxy__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_deps(post, lang, task): \n    task.file_dep.update([p for p in post.fragment_deps(lang) if (not p.startswith('####MAGIC####'))])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def where(condition, x, y): \n    return Where()(condition, x, y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getWarningMethod(): \n    return warn",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _has_fulfilled_all_milestones(user, course_id): \n    return (MilestoneError() if any_unfulfilled_milestones(course_id, user.id) else ACCESS_GRANTED)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _attempt_id_to_task_id(attempt_id): \n    return ('task_' + '_'.join(attempt_id.split('_')[1:5]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _context(response): \n    return {u'request': response.wsgi_request}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _bcpath(dev): \n    return os.path.join(_syspath(dev), 'bcache')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pick_installer(config, default, plugins, question='How   would   you   like   to   install   certificates?'): \n    return pick_plugin(config, default, plugins, question, (interfaces.IInstaller,))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_database(name, clazz): \n    _databases[name] = clazz",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_partition(G, communities): \n    return all(((sum(((1 if (v in c) else 0) for c in communities)) == 1) for v in G))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def cnv_color(attribute, arg, element): \n    return str(arg)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_get_all_by_project(context, project_id): \n    return IMPL.floating_ip_get_all_by_project(context, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _read(fd): \n    return os.read(fd, 1024)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_path_finder(path): \n    return finders.FileSystemFinder().find(path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_hashable(data): \n    return freezedicts(data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_compressed(path): \n    with gzip.open(path, 'rb') as f: \n      return f.read()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def serialize_dt(value): \n    return (value.isoformat() if hasattr(value, 'isoformat') else value)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def module_to_dict(module, omittable=(lambda k: k.startswith('_'))): \n    return dict(((k, repr(v)) for (k, v) in module.__dict__.items() if (not omittable(k))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _update_users(users): \n    return __salt__['users.set_users'](users, commit=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setnmaplimits(): \n    for (limit, value) in NMAP_LIMITS.iteritems(): \n      resource.setrlimit(limit, value)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewRepository(): \n    return StatisticRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getoutputerror(cmd): \n    return get_output_error_code(cmd)[:2]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def intra_community_edges(G, partition): \n    return sum((G.subgraph(block).size() for block in partition))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def resolve_ambiguity(all_tokens, seen_ts): \n    for (parent, token) in all_tokens: \n      if isinstance(token, MirrorToken): \n         if (token.number not in seen_ts): \n            seen_ts[token.number] = TabStop(parent, token) \n         else: \n            Mirror(parent, seen_ts[token.number], token)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def query(): \n    return LotteryPage(QUERY_URL)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def version(*names, **kwargs): \n    if (len(names) == 1): \n      return str(__proxy__['rest_sample.package_status'](names[0]))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def success_revocation(cert_path): \n    z_util(interfaces.IDisplay).notification('Congratulations!   You   have   successfully   revoked   the   certificate   that   was   located   at   {0}{1}{1}'.format(cert_path, os.linesep), pause=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _potential_after(i, input_string): \n    return (((i + 2) >= len(input_string)) or ((input_string[(i + 2)] == input_string[i]) and (input_string[(i + 1)] not in seps)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def trg_delete(uid, res_type, res_id, cr): \n    return WorkflowService.new(cr, uid, res_type, res_id).delete()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_expr_number(p): \n    p[0] = ('NUM', eval(p[1]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jsonrpc_error(id, code, message, data=None): \n    return {'jsonrpc': '2.0', 'error': {'code': code, 'message': message, 'data': data}, 'id': id}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def block_reduction_a(inputs, scope=None, reuse=None): \n    with slim.arg_scope([slim.conv2d, slim.avg_pool2d, slim.max_pool2d], stride=1, padding='SAME'): \n      with tf.variable_scope(scope, 'BlockReductionA', [inputs], reuse=reuse): \n         with tf.variable_scope('Branch_0'): \n            branch_0 = slim.conv2d(inputs, 384, [3, 3], stride=2, padding='VALID', scope='Conv2d_1a_3x3') \n         with tf.variable_scope('Branch_1'): \n            branch_1 = slim.conv2d(inputs, 192, [1, 1], scope='Conv2d_0a_1x1') \n            branch_1 = slim.conv2d(branch_1, 224, [3, 3], scope='Conv2d_0b_3x3') \n            branch_1 = slim.conv2d(branch_1, 256, [3, 3], stride=2, padding='VALID', scope='Conv2d_1a_3x3') \n         with tf.variable_scope('Branch_2'): \n            branch_2 = slim.max_pool2d(inputs, [3, 3], stride=2, padding='VALID', scope='MaxPool_1a_3x3') \n         return tf.concat(3, [branch_0, branch_1, branch_2])",
        "line_count": 11,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_update(groupname, user=None, host=None, port=None, maintenance_db=None, password=None, createdb=None, createroles=None, createuser=None, encrypted=None, inherit=None, login=None, superuser=None, replication=None, rolepassword=None, groups=None, runas=None): \n    return _role_update(groupname, user=user, host=host, port=port, maintenance_db=maintenance_db, password=password, createdb=createdb, typ_='group', createroles=createroles, createuser=createuser, encrypted=encrypted, login=login, inherit=inherit, superuser=superuser, replication=replication, rolepassword=rolepassword, groups=groups, runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Radian(radians): \n    return radians",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def abstractMethod(): \n    raise NotImplementedError('Method   not   implemented!')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def needs_update(targ_capacity, curr_capacity, num_up_to_date): \n    return (not (num_up_to_date >= curr_capacity == targ_capacity))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_eol_chars(text): \n    for (eol_chars, _os_name) in EOL_CHARS: \n      if (text.find(eol_chars) > (-1)): \n         return eol_chars",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def log_loss(actual, predicted): \n    return np.mean(ll(actual, predicted))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def regions(): \n    return get_regions('cloudwatch', connection_cls=CloudWatchConnection)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_fixers_from_package(pkg_name): \n    return [((pkg_name + '.') + fix_name) for fix_name in get_all_fix_names(pkg_name, False)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _check_valid(key, val, valid): \n    if (val not in valid): \n      raise ValueError(('%s   must   be   one   of   %s,   not   \"%s\"' % (key, valid, val)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _yield_attached_role_policies(conn, role_name): \n    for resp in _repeat(_list_attached_role_policies, conn, role_name): \n      for policy_data in resp['attached_policies']: \n         (yield policy_data['policy_arn'])",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def __virtual__(): \n    return ('pagerduty' if ('pagerduty.create_event' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def asint(text): \n    if (text is not None): \n      return int(text)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_fields(node): \n    return dict(iter_fields(node))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def single(y): \n    return linkage(y, method='single', metric='euclidean')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _from_hass_brightness(brightness): \n    return (brightness / 255)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fake_loads_value_error(content, *args, **kwargs): \n    raise ValueError('HAHAHA!   Totally   not   simplejson   &   you   gave   me   bad   JSON.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'dwindle', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iteritems(d): \n    return iter(getattr(d, _iteritems)())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_review_request_field(field_id): \n    return field_registry.get(u'field_id', field_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def argmax(x, axis=None): \n    return ArgMax(axis)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_instance(c_instance): \n    return GenericScript(c_instance, Live.MidiMap.MapMode.absolute, Live.MidiMap.MapMode.absolute, DEVICE_CONTROLS, TRANSPORT_CONTROLS, VOLUME_CONTROLS, TRACKARM_CONTROLS, BANK_CONTROLS, CONTROLLER_DESCRIPTION, MIXER_OPTIONS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_count(objects): \n    assert (objects.history.count() == len(ITEMS))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def check_errcode(result, func, cargs, cpl=False): \n    check_err(result, cpl=cpl)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_overlay2(ax, closes, volumes, colorup='k', colordown='r', width=4, alpha=1.0): \n    return volume_overlay(ax, closes[:(-1)], closes[1:], volumes[1:], colorup, colordown, width, alpha)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SpecificServiceManager(service_name, run=utils.run): \n    return _SpecificServiceManager(service_name, _auto_create_specific_service_command_generator(run), _get_service_result_parser(run), run)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def griewank(individual): \n    return (((((1.0 / 4000.0) * sum(((x ** 2) for x in individual))) - reduce(mul, (cos((x / sqrt((i + 1.0)))) for (i, x) in enumerate(individual)), 1)) + 1),)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def removeTrueListFromDictionary(dictionary, keys): \n    for key in keys: \n      removeTrueFromDictionary(dictionary, key)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _norm(x): \n    return np.sqrt(squared_norm(x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def water_source(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xml_escape(text): \n    return escape(text, entities={\"'\": '&apos;', '\"': '&quot;', '|': '&#124;', '[': '&#91;', ']': '&#93;'})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def alexnet_spec(batch_size=500): \n    return DataSpec(batch_size=batch_size, scale_size=256, crop_size=227, isotropic=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_signal_handlers(signal_handler_map): \n    for (signal_number, handler) in signal_handler_map.items(): \n      signal.signal(signal_number, handler)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def normalize_line_endings(lines, newline): \n    return [(line.rstrip(u'\\n\\r') + newline) for line in lines]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def diff_hists(h1, h2): \n    for k in h1: \n      if (k not in h2): \n         h2[k] = 0 \n      if (h1[k] != h2[k]): \n         print ('%s:   %d   ->   %d   (%s%d)' % (k, h1[k], h2[k], (((h2[k] > h1[k]) and '+') or ''), (h2[k] - h1[k])))",
        "line_count": 5,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def _ordered_points(p): \n    return tuple(sorted(p, key=(lambda x: x.args)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def backref(name, **kwargs): \n    return (name, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def merge_dicts(dict1, dict2, append_lists=False): \n    for key in dict2: \n      if isinstance(dict2[key], dict): \n         if ((key in dict1) and (key in dict2)): \n            merge_dicts(dict1[key], dict2[key]) \n         else: \n            dict1[key] = dict2[key] \n      elif (isinstance(dict2[key], list) and append_lists): \n         if ((key in dict1) and isinstance(dict1[key], list)): \n            dict1[key].extend(dict2[key]) \n         else: \n            dict1[key] = dict2[key] \n      else: \n         dict1[key] = dict2[key]",
        "line_count": 13,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def is_safe_filesystem_path_component(path): \n    return (path and (not os.path.splitdrive(path)[0]) and (not os.path.split(path)[0]) and (path not in (os.curdir, os.pardir)) and (not path.startswith('.')) and (not path.endswith('~')))",
        "line_count": 1,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def ts_dlldy(y, df): \n    return ((((- (df + 1)) / df) / (1 + ((y ** 2) / df))) * y)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def identity(p): \n    return p",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onGlobalData(key, value): \n    DEBUG_MSG(('onGlobalData:   %s' % key))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def total_seconds(td): \n    return ((((td.days * 60) * 60) * 24) + td.seconds)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timestamp_index(index): \n    return ('%s-%s' % (index, datetime.datetime.now().strftime('%Y%m%d%H%M%S')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_backend(): \n    return os.environ.get('BACKEND_ID', None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def atomp(lst): \n    return (not isinstance(lst, list))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cert_get_not_after(cert): \n    return cert.not_valid_after",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_parameter(param, params): \n    return params.has_key(param)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mk_body(**kwargs): \n    return json.dumps(kwargs, ensure_ascii=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_unique_value(type, id): \n    return {u'File': os.path.abspath(create_tempfile()), u'Boolean': True, u'Number': abs(hash(id)), u'String': id}[type]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_type_specs_update_or_create(context, group_type_id, group_specs): \n    return IMPL.group_type_specs_update_or_create(context, group_type_id, group_specs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_enrollment(user_id, course_id): \n    return _data_api().get_course_enrollment(user_id, course_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iam_profile(vm_): \n    return config.get_cloud_config_value('iam_profile', vm_, __opts__, search_global=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_integer(obj): \n    return isinstance(obj, integer_types)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_readable_field_data_type(field): \n    return (field.description % field.__dict__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(*args, **kwargs): \n    return _factory.get(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_usage_get(context, project_id, resource, user_id=None): \n    return IMPL.quota_usage_get(context, project_id, resource, user_id=user_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def efuse_write_reg_addr(block, word): \n    return (EFUSE_REG_WRITE[block] + (4 * word))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wiki_to_html(wiki_markup, locale=settings.WIKI_DEFAULT_LANGUAGE, nofollow=True): \n    return WikiParser().parse(wiki_markup, show_toc=False, locale=locale, nofollow=nofollow)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CDL3INSIDE(barDs, count): \n    return call_talib_with_ohlc(barDs, count, talib.CDL3INSIDE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def calculate_duration(num_samples, sample_rate): \n    return Gst.util_uint64_scale(num_samples, Gst.SECOND, sample_rate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def toposort(dsk, dependencies=None): \n    return _toposort(dsk, dependencies=dependencies)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jinja_error(): \n    raise Exception('hehehe')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_port_mapper(): \n    return search_upnp_device().addCallback((lambda x: UPnPMapper(x)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plugin(): \n    return SwapBrackets",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def overwriteDictionary(fromDictionary, keys, toDictionary): \n    for key in keys: \n      if (key in fromDictionary): \n         toDictionary[key] = fromDictionary[key]",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_mapper_params(): \n    return context.get().mapreduce_spec.mapper.params",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safeseq(value): \n    return [mark_safe(force_unicode(obj)) for obj in value]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def first(func, items): \n    for item in items: \n      if func(item): \n         return item",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_enabled(): \n    return _get_svc_list('YES')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_copy_from_header(req): \n    return _check_path_header(req, 'X-Copy-From', 2, 'X-Copy-From   header   must   be   of   the   form   <container   name>/<object   name>')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def client_class_for_service(service): \n    return _client_classes.get(service)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reverse_library_url(handler_name, library_key, kwargs=None): \n    return reverse_url(handler_name, 'library_key_string', library_key, kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(): \n    if (len(sys.argv) > 1): \n      getCarving('   '.join(sys.argv[1:]))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _Train(model, data_batcher): \n    with tf.device('/cpu:0'): \n      model.build_graph() \n      saver = tf.train.Saver() \n      summary_writer = tf.train.SummaryWriter(FLAGS.train_dir) \n      sv = tf.train.Supervisor(logdir=FLAGS.log_root, is_chief=True, saver=saver, summary_op=None, save_summaries_secs=60, save_model_secs=FLAGS.checkpoint_secs, global_step=model.global_step) \n      sess = sv.prepare_or_wait_for_session(config=tf.ConfigProto(allow_soft_placement=True)) \n      running_avg_loss = 0 \n      step = 0 \n      while ((not sv.should_stop()) and (step < FLAGS.max_run_steps)): \n         (article_batch, abstract_batch, targets, article_lens, abstract_lens, loss_weights, _, _) = data_batcher.NextBatch() \n         (_, summaries, loss, train_step) = model.run_train_step(sess, article_batch, abstract_batch, targets, article_lens, abstract_lens, loss_weights) \n         summary_writer.add_summary(summaries, train_step) \n         running_avg_loss = _RunningAvgLoss(running_avg_loss, loss, summary_writer, train_step) \n         step += 1 \n         if ((step % 100) == 0): \n            summary_writer.flush() \n      sv.Stop() \n      return running_avg_loss",
        "line_count": 18,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def version(request): \n    return {'ZINNIA_VERSION': __version__}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return LashRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_to_epsilon_closure(state_set, state): \n    if (not state_set.get(state, 0)): \n      state_set[state] = 1 \n      state_set_2 = state.transitions.get_epsilon() \n      if state_set_2: \n         for state2 in state_set_2: \n            add_to_epsilon_closure(state_set, state2)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def p_relational_expression_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_intersection(set_, iterable): \n    return bool(set_.intersection([i for i in iterable if i.__hash__]))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getCraftedText(fileName, gcodeText='', repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, gcodeText), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def version_cmp(pkg1, pkg2, ignore_epoch=False): \n    return __salt__['lowpkg.version_cmp'](pkg1, pkg2, ignore_epoch=ignore_epoch)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_file(name, s): \n    with open(name, 'w') as f: \n      f.write(s)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def solo(name, **kwargs): \n    return _run(name, 'chef.solo', kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def restore_warnings_state(state): \n    warnings.filters = state[:]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def evac_route(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_api(auth_entry): \n    return ((auth_entry == AUTH_ENTRY_LOGIN_API) or (auth_entry == AUTH_ENTRY_REGISTER_API))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def DEFINE_enum(name, default, enum_values, help, flag_values=FLAGS, **args): \n    DEFINE_flag(EnumFlag(name, default, help, enum_values, **args), flag_values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_nova(): \n    for (name, function) in globals().items(): \n      if (not inspect.isfunction(function)): \n         continue \n      args = inspect.getargspec(function)[0] \n      if (args and name.startswith('nova')): \n         exec ('pep8.%s   =   %s' % (name, name))",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def flavor_get_all(context, inactive=False, filters=None, sort_key='flavorid', sort_dir='asc', limit=None, marker=None): \n    return IMPL.flavor_get_all(context, inactive=inactive, filters=filters, sort_key=sort_key, sort_dir=sort_dir, limit=limit, marker=marker)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _clean_up_temporary_files(dataset_dir): \n    for filename in [_TRAIN_DATA_FILENAME, _TRAIN_LABELS_FILENAME, _TEST_DATA_FILENAME, _TEST_LABELS_FILENAME]: \n      filepath = os.path.join(dataset_dir, filename) \n      tf.gfile.Remove(filepath)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_cxxflags(value): \n    return set_var('CXXFLAGS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def idd_reconint(idx, proj): \n    return _id.idd_reconint(idx, proj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_root_user(): \n    if (os.name == 'posix'): \n      import pwd \n      if (pwd.getpwuid(os.getuid())[0] == 'root'): \n         sys.stderr.write(\"Running   as   user   'root'   is   a   security   risk.\\n\")",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def aggregate_update(context, aggregate_id, values): \n    return IMPL.aggregate_update(context, aggregate_id, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hstack(xs): \n    return Hstack()(*xs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_profile_url(): \n    return get_client().get_profile_url()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clf(): \n    gcf().clf()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_abstract_method(attr): \n    return (hasattr(attr, '__isabstractmethod__') and getattr(attr, '__isabstractmethod__'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _sessionCounter(counter=itertools.count()): \n    return next(counter)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def as_property(fact): \n    return ('is_%s' % fact)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def change_name(command_table, session, **kwargs): \n    utils.rename_command(command_table, 'config', 'configservice')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_aes_key(token, secret): \n    return hashlib.sha256((token + secret)).digest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_statement_expr2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def which(executable): \n    for path in os.getenv('PATH', '').split(os.pathsep): \n      trial = os.path.join(path, executable) \n      if (os.path.isfile(trial) and os.access(trial, os.X_OK)): \n         return trial",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def getLoopConvexCentroid(polygonComplex): \n    return getLoopCentroid(getLoopConvex(polygonComplex))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ensure_headings_linkable(soups): \n    for soup in soups.values(): \n      existing_anchors = find_existing_anchors(soup) \n      count = 100 \n      for tag in soup.find_all(_heading_re): \n         if (not (tag.has_attr(u'id') or tag.has_attr(u'name'))): \n            snippet = u''.join([c for c in tag.text if c.isalpha()])[:20] \n            while True: \n               count += 1 \n               candidate_id = u'heading_{0}_{1}'.format(snippet, count).lower() \n               if (not (candidate_id in existing_anchors)): \n                  existing_anchors.add(candidate_id) \n                  tag[u'id'] = candidate_id \n                  break",
        "line_count": 13,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def resolve_document_etag(documents, resource): \n    if config.IF_MATCH: \n      ignore_fields = config.DOMAIN[resource]['etag_ignore_fields'] \n      if (not isinstance(documents, list)): \n         documents = [documents] \n      for document in documents: \n         document[config.ETAG] = document_etag(document, ignore_fields=ignore_fields)",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def weekday(year, month, day): \n    return datetime.date(year, month, day).weekday()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_children_text(parent, tag, construct=unicode): \n    return [construct(child.text) for child in parent.findall(_ns(tag)) if child.text]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def p_iteration_statement_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_index_videos(course): \n    return list(({attr: video[attr] for attr in ['edx_video_id', 'client_video_id', 'created', 'duration', 'status']} for video in _get_videos(course)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def showinfo(title=None, message=None, **options): \n    return _show(title, message, INFO, OK, **options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_statement(t): \n    names[t[1]] = t[3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Shutdown(): \n    ioloop.IOLoop.current().stop()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _OutputFormat(): \n    return _cpplint_state.output_format",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_multi_async(keys, **ctx_options): \n    return [key.delete_async(**ctx_options) for key in keys]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dup_cancel(f, g, K, include=True): \n    return dmp_cancel(f, g, 0, K, include=include)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def config_true_value(value): \n    return ((value is True) or (isinstance(value, six.string_types) and (value.lower() in TRUE_VALUES)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def valid_sensor(value): \n    return _valid_device(value, 'sensor')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ifft2(x, shape=None, axes=((-2), (-1)), overwrite_x=False): \n    return ifftn(x, shape, axes, overwrite_x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def app(): \n    return QtWidgets.QApplication.instance()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Timestamp(year, month, day, hour, minute, second): \n    return dateconverter.Timestamp(year, month, day, hour, minute, second)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def applyRedirects(manifest, redirects): \n    for binding in redirects: \n      for dep in manifest.dependentAssemblies: \n         if match_binding_redirect(dep, binding): \n            logger.info('Redirecting   %s   version   %s   ->   %s', binding.name, dep.version, binding.newVersion) \n            dep.version = binding.newVersion",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def warn(): \n    __salt__['cmd.run']('quotawarn')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def re_show(regexp, string, left='{', right='}'): \n    print(re.compile(regexp, re.M).sub(((left + '\\\\g<0>') + right), string.rstrip()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def restart(service): \n    _service(service, 'restart')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def matches(what, glob_patterns): \n    return any((fnmatch.fnmatch(what, glob_pattern) for glob_pattern in glob_patterns))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _path_info(): \n    return {'config': standarddir.config(), 'data': standarddir.data(), 'system_data': standarddir.system_data(), 'cache': standarddir.cache(), 'download': standarddir.download(), 'runtime': standarddir.runtime()}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_unsubscribed(mailchimp, list_id): \n    return get_members(mailchimp, list_id, 'unsubscribed')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cast_to_server(conf, context, server_params, topic, msg): \n    return rpc_amqp.cast_to_server(conf, context, server_params, topic, msg, rpc_amqp.get_connection_pool(conf, Connection))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_plain_double(file_obj, count): \n    return struct.unpack('<{0}d'.format(count).encode(u'utf-8'), file_obj.read((8 * count)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName): \n    skeinforge_craft.writeOutput(fileName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_main_process(): \n    return (multiprocessing.current_process().name == 'MainProcess')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_leap(year): \n    return (((year % 4) == 0) and (((year % 100) != 0) or ((year % 400) == 0)))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _get_cachedir(): \n    return _get_config_or_cache_dir(_get_xdg_cache_dir())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftModule(fileName): \n    return archive.getModuleWithDirectoryPath(getPluginsDirectoryPath(), fileName)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __get_aliases_filename(): \n    return __salt__['config.option']('aliases.file')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sha1b64(*data): \n    return _hash(hashlib.sha1, data).digest().encode('base64')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lena(): \n    raise RuntimeError('lena()   is   no   longer   included   in   SciPy,   please   use   ascent()   or   face()   instead')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chunkiter(fp, chunk_size=65536): \n    while True: \n      chunk = fp.read(chunk_size) \n      if chunk: \n         (yield chunk) \n      else: \n         break",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_messages(): \n    return BackendMessage.objects.filter(name=BACKEND_NAME)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_png(filename): \n    return ('.png' in filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def key_has_dot_or_dollar(d): \n    for (k, v) in d.items(): \n      if ((('.' in k) or ('$' in k)) or (isinstance(v, dict) and key_has_dot_or_dollar(v))): \n         return True",
        "line_count": 3,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def join(left, right, onclause=None, isouter=False, full=False, join_to_left=None): \n    return _ORMJoin(left, right, onclause, isouter, full)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_playlist(res): \n    return _playlist_schema.validate(res.text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_xml_char_ordinal(i): \n    return ((32 <= i <= 55295) or (i in (9, 10, 13)) or (57344 <= i <= 65533) or (65536 <= i <= 1114111))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def combine_paths(*paths): \n    return expand_path(combine_values(*paths))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chop(s): \n    return '   '.join(s.split()[:(-1)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_element_by_id(id, html): \n    return get_element_by_attribute(u'id', id, html)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def security_group_get_by_instance(context, instance_id): \n    return IMPL.security_group_get_by_instance(context, instance_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def scale(s, a): \n    s.set_value((s.get_value() * np.cast[config.floatX](a)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_valid_msg_field_name(x): \n    return roslib.names.is_legal_resource_base_name(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def search_object_by_tag(key=None, category=None): \n    return ObjectDB.objects.get_by_tag(key=key, category=category)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def format_html_join(sep, format_string, args_generator): \n    return mark_safe(conditional_escape(sep).join((format_html(format_string, *tuple(args)) for args in args_generator)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def task_has_custom(task, attr): \n    return mro_lookup(task.__class__, attr, stop={BaseTask, object}, monkey_patched=[u'celery.app.task'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def notBefore(cert_path): \n    return _notAfterBefore(cert_path, OpenSSL.crypto.X509.get_notBefore)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mm(value): \n    return dpi2px(value, 'mm')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_impl_tag(): \n    return '{0}{1}'.format(get_abbr_impl(), get_impl_ver())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('zabbix.user_create' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getSource(ao): \n    return indentify(('app   =   ' + prettify(ao)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_attribute_explicitly_set(attribute_name, resource, target): \n    return (('default' in resource[attribute_name]) and (attribute_name in target) and (target[attribute_name] is not attributes.ATTR_NOT_SPECIFIED) and (target[attribute_name] != resource[attribute_name]['default']))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _ProjectionPartialEntityGenerator(cursor): \n    for row in cursor: \n      entity_original = entity_pb.EntityProto(row[1]) \n      entity = entity_pb.EntityProto() \n      entity.mutable_key().MergeFrom(entity_original.key()) \n      entity.mutable_entity_group().MergeFrom(entity_original.entity_group()) \n      for (name, value_data) in zip(row[2::2], row[3::2]): \n         prop_to_add = entity.add_property() \n         prop_to_add.set_name(ToUtf8(name)) \n         value_decoder = sortable_pb_encoder.Decoder(array.array('B', str(value_data))) \n         prop_to_add.mutable_value().Merge(value_decoder) \n         prop_to_add.set_multiple(False) \n      datastore_stub_util.PrepareSpecialPropertiesForLoad(entity) \n      (yield entity)",
        "line_count": 13,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def ungroup(expr): \n    return TokenConverter(expr).setParseAction((lambda t: t[0]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def se(actual, predicted): \n    return np.power((np.array(actual) - np.array(predicted)), 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def all_events(number=(-1), etag=None): \n    return gh.all_events(number, etag)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def restrict_dict(d, keys): \n    return {k: v for (k, v) in six.iteritems(d) if (k in keys)}",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def remove_projection(X, w): \n    return [remove_projection_from_vector(x_i, w) for x_i in X]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def manage_mode(mode): \n    return salt.utils.normalize_mode(mode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode): \n    return HeightmapDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_sfffile(): \n    if (not which('sfffile')): \n      raise ApplicationNotFoundError((_MISSING_APP_MESSAGE % 'sfffile'))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_valid_uri(uri, encoding='utf-8', **kwargs): \n    return URIReference.from_string(uri, encoding).is_valid(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def queryset_manager(func): \n    return QuerySetManager(func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unixtime(dt_obj): \n    return calendar.timegm(dt_obj.utctimetuple())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_dir(dir): \n    shutil.rmtree(dir, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getReadProfileRepository(): \n    return settings.getReadRepository(ProfileRepository())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decode_region(code): \n    for (tag, (language, region, iso639, iso3166)) in LANGUAGE_REGION.items(): \n      if (iso3166 == code.upper()): \n         return region",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _get_object(obj_ref): \n    return _db_content[obj_ref.type][obj_ref]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enhex(x): \n    return x.encode('hex')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text, hopRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), hopRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _api_options(name, output, kwargs): \n    return options_list(output)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def l2_inner_product(a, b, lim): \n    return integrate((conjugate(a) * b), lim)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def path_joiner(target, search_paths): \n    return (os.path.join(path, target) for path in search_paths)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def has_author_view(descriptor): \n    return getattr(descriptor, 'has_author_view', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def seek_end_of_string(module_data, start_line, start_col, next_node_line, next_node_col): \n    raise NotImplementedError('Finding   end   of   string   not   yet   implemented')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_version(): \n    return open(get_resource_path('version.txt')).read().strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def epoch2num(e): \n    return (EPOCH_OFFSET + (np.asarray(e) / SEC_PER_DAY))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _UsecToSec(t): \n    return (t / 1000000.0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _clear_weights(): \n    Distance.__dict__['_weights'].computed = False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def suspend_to_background_supported(): \n    return hasattr(signal, u'SIGTSTP')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_process_statistics(collectl_playback_cli, pid, statistics=DEFAULT_STATISTICS): \n    with tempfile.NamedTemporaryFile() as tmp_tsv: \n      collectl_playback_cli.run(stdout=tmp_tsv) \n      with open(tmp_tsv.name, 'r') as tsv_file: \n         return _read_process_statistics(tsv_file, pid, statistics)",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def atoi(string): \n    return int(delocalize(string))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def body_check(octet): \n    return (chr(octet) != _QUOPRI_BODY_MAP[octet])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tree_hash_from_str(str_as_bytes): \n    return bytes_to_hex(tree_hash(chunk_hashes(str_as_bytes)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trasnlate(js, HEADER=DEFAULT_HEADER): \n    return translate_js(js, HEADER)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def L1(tensor, wd=0.001): \n    return tf.mul(tf.reduce_sum(tf.abs(tensor)), wd, name='L1-Loss')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_long_description(): \n    return 'Bruteforce   plugins   automatically   crawl   logins   and   bruteforce\\n            them   using   the   knowledge   about   the   remote   web   application   (users,   password\\n            profiling,   etc).\\n            '",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _dummy_save_config(): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def idd_frm(n, w, x): \n    return _id.idd_frm(n, w, x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def buildMessageRegistry(seq, suffixes=[''], bases=(Message,)): \n    for (name, args) in sorted(seq): \n      for suffix in suffixes: \n         typename = (toTypeName(name) + suffix) \n         typens = {'__slots__': args, '__assoc__': name, 'typeName': name} \n         msgtype = type(typename, bases, typens) \n         if (name in registry): \n            registry[name] = (registry[name] + (msgtype,)) \n         else: \n            registry[name] = (msgtype,)",
        "line_count": 9,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def emerge_default_opts_contains(value): \n    return var_contains('EMERGE_DEFAULT_OPTS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_data_get_for_project(context, project_id, session=None): \n    return IMPL.volume_data_get_for_project(context, project_id, session)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _obj_to_dict(obj): \n    return {key: getattr(obj, key) for key in dir(obj) if ((key[0] != '_') and (not hasattr(getattr(obj, key), '__call__')))}",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def getdefaulttimeout(): \n    return _default_timeout",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_defined(value): \n    return (not isinstance(value, Undefined))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def article(word, function=INDEFINITE): \n    return (((function == DEFINITE) and definite_article(word)) or indefinite_article(word))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def log_traceback(log=log, level=logging.DEBUG): \n    for line in traceback.format_exc().splitlines(): \n      log.log(level, line)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _json_encode_datetime(o): \n    return {'isostr': o.strftime(_DATETIME_FORMAT)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strips(text, remove): \n    return rstrips(lstrips(text, remove), remove)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def guess_kern_maxfilesperproc(): \n    return int((0.8 * guess_kern_maxfiles()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def from_7L7M(lsb, msb): \n    return (lsb + (msb << 7))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return OutlineRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cert_is_san(cert): \n    if (len(cert_get_domains(cert)) > 1): \n      return True",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _parse_file(descriptor_file, validate=False, **kwargs): \n    while True: \n      annotations = _read_until_keywords('onion-key', descriptor_file) \n      descriptor_lines = [] \n      onion_key_line = descriptor_file.readline() \n      if onion_key_line: \n         descriptor_lines.append(onion_key_line) \n      else: \n         break \n      while True: \n         last_position = descriptor_file.tell() \n         line = descriptor_file.readline() \n         if (not line): \n            break \n         elif (line.startswith('@') or line.startswith('onion-key')): \n            descriptor_file.seek(last_position) \n            break \n         else: \n            descriptor_lines.append(line) \n      if descriptor_lines: \n         if descriptor_lines[0].startswith('@type'): \n            descriptor_lines = descriptor_lines[1:] \n         annotations = list(map(bytes.strip, annotations)) \n         descriptor_text = bytes.join('', descriptor_lines) \n         (yield Microdescriptor(descriptor_text, validate, annotations, **kwargs)) \n      else: \n         break",
        "line_count": 26,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def read_charlist(filename): \n    with open(filename) as datafile: \n      charlist = [] \n      for line in datafile: \n         if ('#' in line): \n            line = line[:line.index('#')] \n         line = line.strip() \n         if (not line): \n            continue \n         if line.startswith('U+'): \n            line = line[2:] \n         char = int(line, 16) \n         charlist.append(char) \n      return charlist",
        "line_count": 13,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_period_names(width='wide', context='stand-alone', locale=LC_TIME): \n    return Locale.parse(locale).day_periods[context][width]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _report_invalid_cookie(data): \n    logging.error('invalid   Cookie:   %r', data)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text='', repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hinge(x, t, norm='L1'): \n    return Hinge(norm)(x, t)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_SAMPHubError(): \n    SAMPHubError('test')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_active_vms(): \n    return __salt__['vmadm.list'](search=\"state='running'\", order='uuid')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def msle(actual, predicted): \n    return np.mean(sle(actual, predicted))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connectedServerAndClient(ServerClass=SimpleSymmetricProtocol, ClientClass=SimpleSymmetricProtocol, *a, **kw): \n    return iosim.connectedServerAndClient(ServerClass, ClientClass, *a, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_changes(attrs=None, where=None): \n    return _osquery_cmd(table='file_changes', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_course_in_cache(course_key): \n    return get_block_structure_manager(course_key).get_collected()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_quoted_strings(string): \n    return re.sub('\\\\\"(.*)\\\\\"', '', string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rolling_count(arg, window, **kwargs): \n    return ensure_compat('rolling', 'count', arg, window=window, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_faces_from_pb(faces): \n    return [Face.from_pb(face) for face in faces]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _get_configdir(): \n    return _get_config_or_cache_dir(_get_xdg_config_dir())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def draw_circular(G, **kwargs): \n    draw(G, circular_layout(G), **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_net_list(cs, args): \n    do_tenant_network_list(cs, args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mirror(image): \n    return image.transpose(Image.FLIP_LEFT_RIGHT)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _set_tcp_keepalive(zmq_socket, opts): \n    if (hasattr(zmq, 'TCP_KEEPALIVE') and opts): \n      if ('tcp_keepalive' in opts): \n         zmq_socket.setsockopt(zmq.TCP_KEEPALIVE, opts['tcp_keepalive']) \n      if ('tcp_keepalive_idle' in opts): \n         zmq_socket.setsockopt(zmq.TCP_KEEPALIVE_IDLE, opts['tcp_keepalive_idle']) \n      if ('tcp_keepalive_cnt' in opts): \n         zmq_socket.setsockopt(zmq.TCP_KEEPALIVE_CNT, opts['tcp_keepalive_cnt']) \n      if ('tcp_keepalive_intvl' in opts): \n         zmq_socket.setsockopt(zmq.TCP_KEEPALIVE_INTVL, opts['tcp_keepalive_intvl'])",
        "line_count": 9,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def smart_unicode(s, strings_only=False, errors='strict'): \n    return django.utils.encoding.smart_unicode(s, get_site_encoding(), strings_only, errors)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_type_get_by_name(context, name): \n    return IMPL.instance_type_get_by_name(context, name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qnwtrap(n, a, b): \n    return _make_multidim_func(_qnwtrap1, n, a, b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def search_script_tag(key=None, category=None): \n    return ScriptDB.objects.get_by_tag(key=key, category=category)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hash_shard(word): \n    return ('server%d' % (hash(word) % 4))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, gcodeText, stretchRepository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, gcodeText), stretchRepository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def frames_iter(socket): \n    while True: \n      n = next_frame_size(socket) \n      if (n == 0): \n         break \n      while (n > 0): \n         result = read(socket, n) \n         n -= len(result) \n         (yield result)",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def img_as_uint(image, force_copy=False): \n    return convert(image, np.uint16, force_copy)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PackBool(name, value, pbvalue): \n    pbvalue.set_booleanvalue(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def notify(context, message): \n    for driver in _get_drivers(): \n      try: \n         driver.notify(context, message) \n      except Exception as e: \n         LOG.exception(_(\"Problem   '%(e)s'   attempting   to   send   to   notification   driver   %(driver)s.\"), locals())",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getStrokeRadius(xmlElement): \n    return (0.5 * getRightStripAlphabetPercent(getStyleValue('1.0', 'stroke-width', xmlElement)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sha1_mangle_key(key): \n    return sha1(key).hexdigest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_lock_uri(cloud_tmp_dir, cluster_id, step_num): \n    return ((((cloud_tmp_dir + 'locks/') + cluster_id) + '/') + str(step_num))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connectionCreatorFromEndpoint(memoryReactor, tlsEndpoint): \n    return tlsEndpoint._wrapperFactory(None)._connectionCreator",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def visit_snippet_latex(self, node): \n    self.verbatim = ''",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def beneficiary_type(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dt_to_http(dt): \n    return dt.strftime('%a,   %d   %b   %Y   %H:%M:%S   GMT')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fix_unix_encoding(folder): \n    if ((not sabnzbd.WIN32) and (not sabnzbd.DARWIN) and gUTF): \n      for (root, dirs, files) in os.walk(folder.encode('utf-8')): \n         for name in files: \n            new_name = special_fixer(name).encode('utf-8') \n            if (name != new_name): \n               try: \n                  shutil.move(os.path.join(root, name), os.path.join(root, new_name)) \n               except: \n                  logging.info('Cannot   correct   name   of   %s', os.path.join(root, name))",
        "line_count": 9,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def __virtual__(): \n    return ('chocolatey' if ('chocolatey.install' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _is_cookie_marked_for_deletion(request): \n    return getattr(request, 'need_to_delete_cookie', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mro_lookup(cls, attr, stop=set(), monkey_patched=[]): \n    for node in cls.mro(): \n      if (node in stop): \n         try: \n            value = node.__dict__[attr] \n            module_origin = value.__module__ \n         except (AttributeError, KeyError): \n            pass \n         else: \n            if (module_origin not in monkey_patched): \n               return node \n         return \n      if (attr in node.__dict__): \n         return node",
        "line_count": 13,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def teardown_module(): \n    reload_module(db_replicator)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getAroundsFromLoops(loops, radius, thresholdRatio=0.9): \n    return getAroundsFromPoints(getPointsFromLoops(loops, radius, thresholdRatio), radius)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render(markdown): \n    return Markup(m.html(markdown, extensions=((m.EXT_AUTOLINK | m.EXT_STRIKETHROUGH) | m.EXT_NO_INTRA_EMPHASIS), render_flags=(((m.HTML_SKIP_HTML | m.HTML_TOC) | m.HTML_SMARTYPANTS) | m.HTML_SAFELINK)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processors(): \n    return Rebulk().rules(EnlargeGroupMatches, EquivalentHoles, RemoveAmbiguous, SeasonYear, Processors)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_hide_supppressed(): \n    for f in ['html']: \n      results = [] \n      for hide_value in (False, 'after'): \n         try: \n            pass_through('a', hide, hide_value, pass_through, 'b', raise_error) \n         except: \n            results.append(format(f)) \n         else: \n            assert 0 \n      if (results[0] != results[1]): \n         print_diff(results[0], results[1]) \n         assert 0",
        "line_count": 12,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def check_success(ODBC_obj, ret): \n    if (ret not in (SQL_SUCCESS, SQL_SUCCESS_WITH_INFO, SQL_NO_DATA)): \n      if isinstance(ODBC_obj, Cursor): \n         ctrl_err(SQL_HANDLE_STMT, ODBC_obj.stmt_h, ret, ODBC_obj.ansi) \n      elif isinstance(ODBC_obj, Connection): \n         ctrl_err(SQL_HANDLE_DBC, ODBC_obj.dbc_h, ret, ODBC_obj.ansi) \n      else: \n         ctrl_err(SQL_HANDLE_ENV, ODBC_obj, ret, False)",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _dataset_id_to_blockdevice_id(dataset_id): \n    return (_PREFIX + unicode(dataset_id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_code_expiry(): \n    return (now() + EXPIRE_CODE_DELTA)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _print_baremetal_node_interfaces(interfaces): \n    utils.print_list(interfaces, ['ID', 'Datapath_ID', 'Port_No', 'Address'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sibpath(path, sibling): \n    return os.path.join(os.path.dirname(os.path.abspath(path)), sibling)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def install_webpi(name, install_args=None, override_args=False): \n    return install(name, source='webpi', install_args=install_args, override_args=override_args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def poweroff(): \n    return shutdown()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def concatenate_epochs(epochs_list): \n    return _finish_concat(*_concatenate_epochs(epochs_list))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mock_render_to_string(template_name, context): \n    return str((template_name, sorted(context.iteritems())))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def release_group(): \n    return Rebulk().rules(SceneReleaseGroup, AnimeReleaseGroup, ExpectedReleaseGroup)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makePersonalServerFactory(site): \n    return pb.PBServerFactory(distrib.ResourcePublisher(site))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_dev_url(backend, instance=None): \n    return ('http://%s' % _get_dev_hostname(backend, instance))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_row(input_row, parsers): \n    return [(parser(value) if (parser is not None) else value) for (value, parser) in zip(input_row, parsers)]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def double_urlencode(t): \n    return urllib.quote(urllib.quote(t))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def false_(): \n    return False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_glance_metadata_copy_to_volume(context, volume_id, snapshot_id): \n    return IMPL.volume_glance_metadata_copy_to_volume(context, volume_id, snapshot_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shutdown(handlerList=_handlerList): \n    for h in handlerList[:]: \n      try: \n         h.flush() \n         h.close() \n      except: \n         if raiseExceptions: \n            raise",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def render_template_multiple_times(request): \n    return HttpResponse((render_to_string('base.html') + render_to_string('base.html')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remote(expr): \n    return _annotate_columns(expression._clause_element_as_expr(expr), {'remote': True})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def yaml_dquote(text): \n    with io.StringIO() as ostream: \n      yemitter = yaml.emitter.Emitter(ostream, width=six.MAXSIZE) \n      yemitter.write_double_quoted(six.text_type(text)) \n      return ostream.getvalue()",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safe_quote(s): \n    return (urllib.quote(s) if (s == urllib.unquote(s)) else s)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def merge(dict1, dict2): \n    for (key, val2) in dict2.items(): \n      if (val2 is not None): \n         val1 = dict1.get(key) \n         if isinstance(val2, dict): \n            if (val1 is None): \n               val1 = {} \n            if isinstance(val1, Alias): \n               val1 = (val1, val2) \n            elif isinstance(val1, tuple): \n               (alias, others) = val1 \n               others = others.copy() \n               merge(others, val2) \n               val1 = (alias, others) \n            else: \n               val1 = val1.copy() \n               merge(val1, val2) \n         else: \n            val1 = val2 \n         dict1[key] = val1",
        "line_count": 19,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def mean(a, axis=None, dtype=None, out=None, keepdims=False): \n    return a.mean(axis=axis, dtype=dtype, out=out, keepdims=keepdims)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def award_program_certificate(client, username, program_uuid): \n    client.credentials.post({'username': username, 'credential': {'program_uuid': program_uuid}, 'attributes': []})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def init(mpstate): \n    return RCSetupModule(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def export_set(dataset): \n    return yaml.safe_dump(dataset._package(ordered=False))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def undoc(func): \n    return func",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ROCP(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.ROCP, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _property_name_to_value(entities): \n    return {key: values[0] for (key, values) in _property_name_to_values(entities).iteritems()}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def make_absolute(request, view_name, kwargs=None): \n    return request.build_absolute_uri(urlresolvers.reverse(view_name, kwargs=kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def event2json(event): \n    return jdumps(dict(type=event.type, send_event=event.send_event, time=event.time, root=str(event.root), window=str(event.window), same_screen=event.same_screen, child=str(event.child), root_x=event.root_x, root_y=event.root_y, event_x=event.event_x, event_y=event.event_y, state=event.state, detail=event.detail))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def membership(): \n    redirect(URL(c='admin', args=request.args, vars=request.vars))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chunks(in_list, chunk_size): \n    for i in xrange(0, len(in_list), chunk_size): \n      (yield in_list[i:(i + chunk_size)])",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_dirty(using=None): \n    get_connection(using).set_dirty()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def debug_repr(obj): \n    return DebugReprGenerator().repr(obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _bytes2int(LSB, MSB): \n    return int(((256 * int(MSB)) | int(LSB)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_getitem(hist): \n    for i in range(0, len(HISTORY)): \n      assert (hist[i] == HISTORY[i])",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def missing(name): \n    return (name not in get_all())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_public_ip(): \n    return file_io.read(constants.PUBLIC_IP_LOC).rstrip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def usb_devices(attrs=None, where=None): \n    return _osquery_cmd(table='usb_devices', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def attr_call(): \n    return __salt__.grains.items()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quality_parsed(mime_type, parsed_ranges): \n    return fitness_and_quality_parsed(mime_type, parsed_ranges)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_netloc(url): \n    return urlparse.urlparse(url)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vereq(a, b): \n    if (not (a == b)): \n      raise TestFailed(('%r   ==   %r' % (a, b)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def shutdown(opts): \n    log.debug('fx2   proxy   shutdown()   called...')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def merge(dict_1, dict_2): \n    return dict(((str(key), (dict_1.get(key) or dict_2.get(key))) for key in (set(dict_2) | set(dict_1))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def tanh(x): \n    return tensor.tanh(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_chassis_location(location, host=None, admin_username=None, admin_password=None): \n    return __execute_cmd('setsysinfo   -c   chassislocation   {0}'.format(location), host=host, admin_username=admin_username, admin_password=admin_password)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_description(desc): \n    return textwrap.dedent(desc)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def title(value): \n    return re.sub(\"([a-z])'([A-Z])\", (lambda m: m.group(0).lower()), value.title())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_cached_content(content): \n    CONTENT_CACHE.set(unicode(content.location).encode('utf-8'), content, version=STATIC_CONTENT_VERSION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _collins_crt(r, R, P, p, K): \n    return gf_int(gf_crt([r, R], [P, p], K), (P * p))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def guid64(): \n    return base91(random.randint(0, ((2 ** 64) - 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_key_func(key, key_prefix, version): \n    return ':'.join([key_prefix, str(version), smart_str(key)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_admin_context(show_deleted=False): \n    return RequestContext(auth_token=None, tenant=None, is_admin=True, show_deleted=show_deleted, overwrite=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_usage_get_all_by_project_and_user(context, project_id, user_id): \n    return IMPL.quota_usage_get_all_by_project_and_user(context, project_id, user_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def process_survey_link(survey_link, user): \n    return survey_link.format(UNIQUE_ID=unique_id_for_user(user))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def directLoops(isWiddershins, loops): \n    for loop in loops: \n      directLoop(isWiddershins, loop)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_binary_name(): \n    return os.path.basename(inspect.stack()[(-1)][1])[:16]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rolling_apply(arg, window, func, min_periods=None, freq=None, center=False, args=(), kwargs={}): \n    return ensure_compat('rolling', 'apply', arg, window=window, freq=freq, center=center, min_periods=min_periods, func_kw=['func', 'args', 'kwargs'], func=func, args=args, kwargs=kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def noSentence(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hyponyms(source): \n    return closure(source, HYPONYM)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_masquerading_as_student(user, course_key): \n    return (get_masquerade_role(user, course_key) == 'student')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def generate_glance_url(): \n    return ('%s://%s:%d' % (CONF.glance_protocol, CONF.glance_host, CONF.glance_port))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def add_skip_patch(result): \n    return make_instancemethod(TextTestResult.addSkip, result)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_kit2fiff(): \n    check_usage(mne_kit2fiff, force_help=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_center(value, width=80): \n    return text_type(value).center(width)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TYPPRICE(barDs, count): \n    return call_talib_with_hlc(barDs, count, talib.TYPPRICE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_tp_relative_path(pootle_path): \n    return u'/'.join(pootle_path.split(u'/')[3:])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getmtime(filename): \n    return os.stat(filename).st_mtime",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _msg_filter(f): \n    return (os.path.isfile(f) and f.endswith(EXT))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ValidateStringLength(name, value, max_len): \n    if (len(value) > max_len): \n      raise datastore_errors.BadValueError(('Property   %s   is   %d   bytes   long;   it   must   be   %d   or   less.   Consider   Text   instead,   which   can   store   strings   of   any   length.' % (name, len(value), max_len)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def csm_indices(csm): \n    return csm_properties(csm)[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def index_alt(): \n    s3_redirect_default(URL(f='hospital', args=['map']))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_expr_binary(p): \n    p[0] = ('BINOP', p[2], p[1], p[3])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def render_from_lms(template_name, dictionary, context=None, namespace='main'): \n    return render_to_string(template_name, dictionary, context, namespace=('lms.' + namespace))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def image_upload_to_dispatcher(entry, filename): \n    return entry.image_upload_to(filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def try_dbfield(fn, field_class): \n    for cls in field_class.mro(): \n      if (cls is models.Field): \n         continue \n      data = fn(cls) \n      if data: \n         return data",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def xyxy_to_xywh(boxes): \n    return np.hstack((boxes[:, 0:2], ((boxes[:, 2:4] - boxes[:, 0:2]) + 1)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_get(context, id, get_network=False): \n    return IMPL.fixed_ip_get(context, id, get_network)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_identify(on=True, duration=600, **kwargs): \n    with _IpmiCommand(**kwargs) as s: \n      return s.set_identify(on=on, duration=duration)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_member_names(group): \n    return [r.name for r in get_members(group)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def positive(s, threshold=0.1, **kwargs): \n    return (polarity(unicode(s), **kwargs) >= threshold)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def copy(x, dst): \n    return Copy(dst)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, use_decimal=False, **kw): \n    return loads(fp.read(), encoding=encoding, cls=cls, object_hook=object_hook, parse_float=parse_float, parse_int=parse_int, parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, use_decimal=use_decimal, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eliminate_implications(expr): \n    return to_nnf(expr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_headers(request): \n    return HttpResponse(('HTTP_X_ARG_CHECK:   %s' % request.META.get('HTTP_X_ARG_CHECK', 'Undefined')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def logspace(xmin, xmax, N): \n    return np.exp(np.linspace(np.log(xmin), np.log(xmax), N))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_version_of_draft_valid(exp_id, version): \n    return (get_exploration_by_id(exp_id).version == version)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quote(a): \n    return shlex_quote(a)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_member_role(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RequestID(): \n    return os.environ.get(REQUEST_LOG_ID, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete(file_name): \n    os.remove(file_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_definition_start(p): \n    print (\"start   =   '%s'\" % p[2])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def option_was_set(option, value): \n    return (set_by_cli(option) or (not has_default_value(option, value)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def tuple_variable(t): \n    raise NotImplementedError()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def re_unescape(s): \n    return _re_unescape_pattern.sub(_re_unescape_replacement, s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decargs(arglist): \n    return [s.decode(_encoding()) for s in arglist]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_user_email(user): \n    return user.email()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def gf_sub_mul(f, g, h, p, K): \n    return gf_sub(f, gf_mul(g, h, p, K), p, K)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def join(words, sep='   '): \n    return sep.join(words)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def guess_kern_maxfiles(): \n    return 65536",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decode_jpeg(image_buffer, scope=None): \n    with tf.op_scope([image_buffer], scope, 'decode_jpeg'): \n      image = tf.image.decode_jpeg(image_buffer, channels=3) \n      image = tf.image.convert_image_dtype(image, dtype=tf.float32) \n      return image",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_default_fetch_deadline(value): \n    _thread_local_settings.default_fetch_deadline = value",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_impl_ver(): \n    return ''.join(map(str, sys.version_info[:2]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_saved_rules(conf_file=None, family='ipv4'): \n    return _parse_conf(conf_file=conf_file, family=family)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_error(index, code, errmsg, operation): \n    return {_UINDEX: index, _UCODE: code, _UERRMSG: errmsg, _UOP: operation}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iterlists(d, **kw): \n    return iter(getattr(d, _iterlists)(**kw))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_statement_blank(p): \n    p[0] = (0, ('BLANK', int(p[1])))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create(num, course_key): \n    for __ in range(num): \n      (user, _, _) = _do_create_account(make_random_form()) \n      if (course_key is not None): \n         CourseEnrollment.enroll(user, course_key)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_(a, b): \n    return (a is b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def f_1(): \n    return __doc__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def svd(a, name=None): \n    return tsqr(a, name, compute_svd=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def collect_assets(systems, settings, **kwargs): \n    for sys in systems: \n      collectstatic_stdout_str = _collect_assets_cmd(sys, **kwargs) \n      sh(django_cmd(sys, settings, 'collectstatic   --noinput   {logfile_str}'.format(logfile_str=collectstatic_stdout_str))) \n      print(' DCTB  DCTB Finished   collecting   {}   assets.'.format(sys))",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def xml_root_close(): \n    return '</resource>'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dict_factory(crs, row): \n    return dict(((col[0], row[idx]) for (idx, col) in enumerate(crs.description)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def xmlencode(s): \n    return _encre.sub((lambda m: ('&#%d;' % ord(m.group(1)))), s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assertIsSubdomainOf(testCase, descendant, ancestor): \n    testCase.assertTrue(dns._isSubdomainOf(descendant, ancestor), ('%r   is   not   a   subdomain   of   %r' % (descendant, ancestor)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unregister_unpack_format(name): \n    del _UNPACK_FORMATS[name]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def s3_required_label(field_label): \n    return TAG[''](('%s:' % field_label), SPAN('   *', _class='req'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_two_args(a, b): \n    return (a, b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qbytearray_to_str(qba): \n    return str(bytes(qba.toHex().data()).decode())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _copy(master_fd, master_read=_read, stdin_read=_read): \n    while 1: \n      (rfds, wfds, xfds) = select([master_fd, STDIN_FILENO], [], []) \n      if (master_fd in rfds): \n         data = master_read(master_fd) \n         os.write(STDOUT_FILENO, data) \n      if (STDIN_FILENO in rfds): \n         data = stdin_read(STDIN_FILENO) \n         _writen(master_fd, data)",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def mulrowscaler(row, scaler, K): \n    return [(scaler * element) for element in row]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def pbucket(tail): \n    return ('s3://' + bucket(tail))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def missing(job_label): \n    return (False if _service_by_name(job_label) else True)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def msg(caller, text='', always_page=False, session=None, justify_kwargs=None, **kwargs): \n    EvMore(caller, text, always_page=always_page, session=session, justify_kwargs=justify_kwargs, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_instance(c_instance): \n    return OpenLabs(c_instance)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _load_parameters_npzfile(file_): \n    with tarfile.open(fileobj=file_, mode='r') as tar_file: \n      return numpy.load(tar_file.extractfile(tar_file.getmember('_parameters')))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def initial_seed(): \n    return default_generator.initial_seed()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_file_contents(path): \n    with open(path) as file_handle: \n      return file_handle.read()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def preprocess_form(): \n    BoundField.label_tag = add_required_label_tag(BoundField.label_tag)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_dig_points(fid, dig, block=False, coord_frame=None): \n    if (dig is not None): \n      data_size = (5 * 4) \n      if block: \n         start_block(fid, FIFF.FIFFB_ISOTRAK) \n      if (coord_frame is not None): \n         write_int(fid, FIFF.FIFF_MNE_COORD_FRAME, coord_frame) \n      for d in dig: \n         fid.write(np.array(FIFF.FIFF_DIG_POINT, '>i4').tostring()) \n         fid.write(np.array(FIFF.FIFFT_DIG_POINT_STRUCT, '>i4').tostring()) \n         fid.write(np.array(data_size, dtype='>i4').tostring()) \n         fid.write(np.array(FIFF.FIFFV_NEXT_SEQ, '>i4').tostring()) \n         fid.write(np.array(d['kind'], '>i4').tostring()) \n         fid.write(np.array(d['ident'], '>i4').tostring()) \n         fid.write(np.array(d['r'][:3], '>f4').tostring()) \n      if block: \n         end_block(fid, FIFF.FIFFB_ISOTRAK)",
        "line_count": 16,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def auth(opts, whitelist=None): \n    return LazyLoader(_module_dirs(opts, 'auth'), opts, tag='auth', whitelist=whitelist, pack={'__salt__': minion_mods(opts)})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return ScaleRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def salustowicz_1d(data): \n    return ((((exp((- data[0])) * (data[0] ** 3)) * cos(data[0])) * sin(data[0])) * ((cos(data[0]) * (sin(data[0]) ** 2)) - 1))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_all_specs(context, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None): \n    return objects.QualityOfServiceSpecsList.get_all(context, filters=filters, marker=marker, limit=limit, offset=offset, sort_keys=sort_keys, sort_dirs=sort_dirs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def full_restart(name): \n    restart(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def int_from_bool_as_string(subject): \n    return ((bool_from_string(subject) and 1) or 0)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, use_decimal=False, namedtuple_as_object=True, tuple_as_array=True, **kw): \n    return loads(fp.read(), encoding=encoding, cls=cls, object_hook=object_hook, parse_float=parse_float, parse_int=parse_int, parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, use_decimal=use_decimal, **kw)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_output(s): \n    return re.sub('\\n(   *\\n)+', '\\n', s).replace('            ', '      ')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_language_objects(site_id=None): \n    return list(get_languages(site_id))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jsonify(tokens): \n    for token in tokens: \n      if (token.type == u'FUNCTION'): \n         (yield (token.type, token.function_name, list(jsonify(token.content)))) \n      elif token.is_container: \n         (yield (token.type, list(jsonify(token.content)))) \n      else: \n         (yield (token.type, token.value))",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def argmin(a, axis=None, dtype=None, out=None, keepdims=False): \n    return a.argmin(axis=axis, dtype=dtype, out=out, keepdims=keepdims)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_error(message): \n    return (message.get('level') == _ERROR_TOKEN)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def detrend_none(x): \n    return x",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def label_rgb(colors): \n    return ('rgb(%s,   %s,   %s)' % (colors[0], colors[1], colors[2]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processElementNode(elementNode): \n    evaluate.processArchivable(Intersection, elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def config_option_list(context, data_dict): \n    return {'success': False}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def provider_handlers(providers): \n    return _load_provider_feature('default_handlers', providers)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_suites(package): \n    for module in find_modules(package, include_packages=True): \n      mod = import_string(module) \n      if hasattr(mod, 'suite'): \n         (yield mod.suite())",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def errfunc(*args): \n    raise ValueError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sub(pattern, repl, string, count=0, flags=0): \n    return _compile(pattern, flags).sub(repl, string, count)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_7L5M(value): \n    return ((value & 127), ((value >> 7) & 31))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_np_state_ptr(context, builder): \n    return get_state_ptr(context, builder, 'np')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def DecodeControlTuples(ldapControlTuples): \n    return [knownLDAPControls.get(controlType, LDAPControl)(controlType, criticality, encodedControlValue=encodedControlValue) for (controlType, criticality, encodedControlValue) in (ldapControlTuples or [])]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def read_int32(fid): \n    return _unpack_simple(fid, '>i4', np.int32)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def xssescape(text): \n    return escape(text, quote=True).replace(':', '&#58;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_x11(): \n    return ('DISPLAY' in os.environ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_data_get_for_host(context, host, count_only=False): \n    return IMPL.volume_data_get_for_host(context, host, count_only)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_complete_graph_global_efficiency(): \n    for n in range(10): \n      G = nx.complete_graph(5) \n      assert_equal(nx.global_efficiency(G), 1)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def saturate(color, percent): \n    return adjust(color, 1, percent)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _to_gapic_feature(feature): \n    return image_annotator_pb2.Feature(type=getattr(image_annotator_pb2.Feature, feature.feature_type), max_results=feature.max_results)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quaternion_imag(quaternion): \n    return numpy.array(quaternion[1:4], dtype=numpy.float64, copy=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_option_exclude_module(pyi_builder): \n    pyi_builder.test_source(\"\\n                        try:\\n                                    import   xml.sax\\n                                    #   Option   --exclude-module=xml.sax   did   not   work   and   the   module\\n                                    #   was   successfully   imported.\\n                                    raise   SystemExit('Module   xml.sax   was   excluded   but   it   is   '\\n                                                                                       'bundled   with   the   executable.')\\n                        except   ImportError:\\n                                    #   The   Import   error   is   expected   since   PyInstaller   should\\n                                    #   not   bundle   'xml.sax'   module.\\n                                    pass\\n                        \", pyi_args=['--exclude-module', 'xml.sax'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _normalize_diallable_chars_only(number): \n    return _normalize_helper(number, _DIALLABLE_CHAR_MAPPINGS, True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sub(x, y): \n    return (x + (- y))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_coreg(): \n    assert_true(hasattr(mne_coreg, 'run'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_iter(obj): \n    return (((not hasattr(obj, '__iter__')) and [obj]) or obj)",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def strips(a, b): \n    return rstrips(lstrips(a, b), b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_build_dir(*append): \n    return __get_root('build', *append)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_services(profile='pagerduty', subdomain=None, api_key=None): \n    return _list_items('services', 'id', profile=profile, subdomain=subdomain, api_key=api_key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_item(x, slices): \n    return GetItem(slices)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _process_worker(call_queue, result_queue): \n    while True: \n      call_item = call_queue.get(block=True) \n      if (call_item is None): \n         result_queue.put(os.getpid()) \n         return \n      try: \n         r = call_item.fn(*call_item.args, **call_item.kwargs) \n      except BaseException as e: \n         result_queue.put(_ResultItem(call_item.work_id, exception=e)) \n      else: \n         result_queue.put(_ResultItem(call_item.work_id, result=r))",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([KNXThermostat(hass, KNXConfig(config))])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isfinite(arr): \n    return (np.isfinite(np.max(arr)) and np.isfinite(np.min(arr)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def poll(*args, **kwargs): \n    return _get_poller()(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_events(): \n    return read_events(event_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def print_headers_traditional(args): \n    for (idx, filename) in enumerate(args.filename): \n      if ((idx > 0) and (not args.keywords)): \n         print() \n      try: \n         formatter = HeaderFormatter(filename) \n         print(formatter.parse(args.extensions, args.keywords, args.compressed), end=u'') \n      except IOError as e: \n         log.error(str(e))",
        "line_count": 8,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([DemoCamera('Demo   camera')])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lowest(logging=logging): \n    return _set_priority('Lowest', logging=logging)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def string_attributes(domain): \n    return [attr for attr in (domain.variables + domain.metas) if attr.is_string]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices((VeraSwitch(device, VERA_CONTROLLER) for device in VERA_DEVICES['switch']))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def GetAllHeaders(message, name): \n    for header_line in message.getallmatchingheaders(name): \n      (yield header_line.split(':', 1)[1].strip())",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def init(mpstate): \n    return example(mpstate)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('boto_lc' if ('boto_asg.exists' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def send_mail_raise_smtp(messages): \n    raise SMTPRecipientsRefused(recipients=messages[0].recipients())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def abs__file__(): \n    for m in sys.modules.values(): \n      if hasattr(m, '__loader__'): \n         continue \n      try: \n         m.__file__ = os.path.abspath(m.__file__) \n      except (AttributeError, OSError): \n         pass",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def test_starts_with_empty_strings(): \n    assert (strings.strings == {})",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False, concurrent=None, **kwargs): \n    return _compile(pattern, flags, kwargs).fullmatch(string, pos, endpos, concurrent, partial)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_campaign(campaign): \n    return (campaign and (campaign in campaigns.get_campaigns()))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_struct_declarator_list_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _children_with_tags(element, tags): \n    return itertools.chain(*(_children_with_tag(element, tag) for tag in tags))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def colorStr(c): \n    return (('%02x' * 4) % colorTuple(c))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def notTorNZBFile(filename): \n    return (not (filename.endswith(u'.torrent') or filename.endswith(u'.nzb')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def Hypergeometric(name, N, m, n): \n    return rv(name, HypergeometricDistribution, N, m, n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mean_absolute_error(x0, x1): \n    return MeanAbsoluteError()(x0, x1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_opts(): \n    return __opts__",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isfinal(elt): \n    return (type(elt) in [str, int, float, unicode, datetime.datetime, REGEXP_T])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key, *args, **kwargs): \n    return CAST128Cipher(key, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('snapper' if ('snapper.diff' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getStepKeyFromPoint(point): \n    return (int(round(point.real)), int(round(point.imag)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def comparePosition(firstElement, secondElement): \n    return cmp(firstElement._markpos, secondElement._markpos)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_ignorable_404(uri): \n    return any((pattern.search(uri) for pattern in getattr(settings, 'IGNORABLE_404_URLS', ())))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def tstd(a, limits=None, inclusive=(True, True), axis=0, ddof=1): \n    return np.sqrt(tvar(a, limits, inclusive, axis, ddof))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ifconfig_getnode(): \n    for args in ('', '-a', '-av'): \n      mac = _find_mac('ifconfig', args, ['hwaddr', 'ether'], (lambda i: (i + 1))) \n      if mac: \n         return mac",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def isnull(obj): \n    return _isnull(obj)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_port_trusted(port): \n    return port['device_owner'].startswith(n_const.DEVICE_OWNER_NETWORK_PREFIX)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def epoch(dttm): \n    return ((int(time.mktime(dttm.timetuple())) * 1000),)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def copy_weights(teacher_model, student_model, layer_names): \n    for name in layer_names: \n      weights = teacher_model.get_layer(name=name).get_weights() \n      student_model.get_layer(name=name).set_weights(weights)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def GenBankCdsFeatureIterator(handle, alphabet=Alphabet.generic_protein): \n    return GenBankScanner(debug=0).parse_cds_features(handle, alphabet)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def all_subindices(index): \n    return (index[start:stop] for (start, stop) in product_upper_triangle(range((len(index) + 1))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _fake_specify_ep(self, season, episode): \n    _ = (self, season, episode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getDeprecationWarningString(callableThing, version, format=None, replacement=None): \n    return _getDeprecationWarningString(_fullyQualifiedName(callableThing), version, format, replacement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def brand(): \n    return s3_rest_controller('supply', 'brand')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wait_for_read(socks, timeout=None): \n    return _wait_for_io_events(socks, EVENT_READ, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_linux(): \n    return sys.platform.startswith(u'linux')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def floating_ip_get_by_fixed_ip_id(context, fixed_ip_id): \n    return IMPL.floating_ip_get_by_fixed_ip_id(context, fixed_ip_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_migrate_snapshot_name(volume): \n    return ('cinder-migrate-snapshot-%(id)s' % volume)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_lambda(n): \n    for i in range(n): \n      (yield (lambda : i))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def set_sysctl(key, value): \n    run_as_root(('/sbin/sysctl   -n   -e   -w   %(key)s=%(value)s' % locals()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def chrange(start, stop): \n    return list(map(chr, range(ord(start), (ord(stop) + 1))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def document(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _is_cluster_bootstrapping(cluster_summary): \n    return ((cluster_summary.status.state != 'STARTING') and (not hasattr(cluster_summary.status.timeline, 'readydatetime')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def with_return(): \n    with ContextManager('value') as x: \n      return x",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def B(attr): \n    return range_property(attr, 0, 255)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_raw_nicolet(input_fname, ch_type, montage=None, eog=(), ecg=(), emg=(), misc=(), preload=False, verbose=None): \n    return RawNicolet(input_fname, ch_type, montage=montage, eog=eog, ecg=ecg, emg=emg, misc=misc, preload=preload, verbose=verbose)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def max_pooling_2d(x, ksize, stride=None, pad=0, cover_all=True, use_cudnn=True): \n    return MaxPooling2D(ksize, stride, pad, cover_all, use_cudnn)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _GetNumNonVisibleFiles(file_list): \n    return len([f for f in file_list if (not BufferIsVisible(GetBufferNumberForFilename(f, False)))])",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def dup_isolate_all_roots_sqf(f, K, eps=None, inf=None, sup=None, fast=False, blackbox=False): \n    return (dup_isolate_real_roots_sqf(f, K, eps=eps, inf=inf, sup=sup, fast=fast, blackbox=blackbox), dup_isolate_complex_roots_sqf(f, K, eps=eps, inf=inf, sup=sup, blackbox=blackbox))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shrink_tensor(x, w): \n    return x[tuple(([slice(w, (- w))] * x.ndim))]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getRegistry(): \n    return globalRegistry",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def public_methods(obj): \n    return [name for name in all_methods(obj) if (name[0] != '_')]",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def convert_coords(chunkx, chunkz): \n    return ((chunkx + chunkz), (chunkz - chunkx))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flatten(x): \n    return list(iflatten(x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def put_multi(entities, **ctx_options): \n    return [future.get_result() for future in put_multi_async(entities, **ctx_options)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def tokenize_asdl(buf): \n    for (lineno, line) in enumerate(buf.splitlines(), 1): \n      for m in re.finditer('\\\\s*(\\\\w+|--.*|.)', line.strip()): \n         c = m.group(1) \n         if c[0].isalpha(): \n            if c[0].isupper(): \n               (yield Token(TokenKind.ConstructorId, c, lineno)) \n            else: \n               (yield Token(TokenKind.TypeId, c, lineno)) \n         elif (c[:2] == '--'): \n            break \n         else: \n            try: \n               op_kind = TokenKind.operator_table[c] \n            except KeyError: \n               raise ASDLSyntaxError(('Invalid   operator   %s' % c), lineno) \n            (yield Token(op_kind, c, lineno))",
        "line_count": 16,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def volumes_update(context, values_list): \n    return IMPL.volumes_update(context, values_list)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upload_view(request): \n    return HttpResponse(',   '.join(request.FILES.keys()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _makeDefaultReporter(): \n    return Reporter(sys.stdout, sys.stderr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def activeCount(): \n    with _active_limbo_lock: \n      return (len(_active) + len(_limbo))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _a_decode_float(stream, offset, count, _): \n    return ((offset + count), float(stream[offset:(offset + count)]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_radian_base(): \n    assert ((1 * u.degree).si.unit == u.rad)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def urljoin(base_uri, uri_reference): \n    return urlunsplit(urljoin_parts(urlsplit(base_uri), urlsplit(uri_reference)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def educate_single_backticks(s): \n    return s.replace('`', '&#8216;').replace(\"'\", '&#8217;')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def construct_yaml_str(self, node): \n    return self.construct_scalar(node)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def simulate_get(app, path, **kwargs): \n    return simulate_request(app, 'GET', path, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_id_pairs(track_list): \n    return [(t[u'id'], t.get(u'playlistEntryId')) for t in track_list]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getNewRepository(): \n    return RaftRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _wait_select(conn): \n    while 1: \n      try: \n         state = conn.poll() \n         if (state == POLL_OK): \n            break \n         elif (state == POLL_READ): \n            select.select([conn.fileno()], [], [], _WAIT_SELECT_TIMEOUT) \n         elif (state == POLL_WRITE): \n            select.select([], [conn.fileno()], [], _WAIT_SELECT_TIMEOUT) \n         else: \n            raise conn.OperationalError(('bad   state   from   poll:   %s' % state)) \n      except KeyboardInterrupt: \n         conn.cancel() \n         continue",
        "line_count": 14,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def _ips_get_pkgname(line): \n    return line.split()[0].split('@')[0].strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def file_open(*args, **kwargs): \n    return open(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def namegen_filename(obj, file_data): \n    return secure_filename(file_data.filename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete(uri): \n    return salt.utils.sdb.sdb_delete(uri, __opts__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return __salt__['cmd.has_exec']('svn')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_custom_settings(sections, custom_settings_list, origin, line_parser): \n    for setting_definition in custom_settings_list: \n      (_, key_tuples, value, _) = line_parser.parse(setting_definition) \n      for key_tuple in key_tuples: \n         append_to_sections(sections, key=key_tuple[1], value=value, origin=origin, section_name=key_tuple[0], from_cli=True)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def barycentric_interpolate(xi, yi, x, axis=0): \n    return BarycentricInterpolator(xi, yi, axis=axis)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parent_dir(directory): \n    return os.path.normpath(os.path.join(directory, os.pardir))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_following(user, actor): \n    return Follow.objects.is_following(user, actor)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_index(sender, instance, **kwargs): \n    if (isinstance(instance, Object) and instance.is_searchable()): \n      ix = index.open_dir(settings.WHOOSH_INDEX) \n      try: \n         writer = ix.writer() \n         try: \n            writer.delete_by_term(u'id', unicode(instance.id)) \n            writer.commit() \n         except: \n            writer.cancel() \n      except: \n         pass",
        "line_count": 11,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def dals(string): \n    return dedent(string).lstrip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_eye_loader(dates, sids): \n    return EyeLoader(TestingDataSet.columns, dates, sids)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def orchestrate(mods, saltenv='base', test=None, exclude=None, pillar=None, pillarenv=None): \n    return _orchestrate(mods=mods, saltenv=saltenv, test=test, exclude=exclude, pillar=pillar, pillarenv=pillarenv)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text='', repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onCreateAccountCallbackFromDB(accountName, errorno, datas): \n    INFO_MSG(('onCreateAccountCallbackFromDB()   accountName=%s,   errorno=%s' % (accountName, errorno)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decode(data): \n    return consume(LookaheadIterator(data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clipMinMax(size, minSize, maxSize): \n    return size.expandedTo(minSize).boundedTo(maxSize)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_margin(layout, margin): \n    layout.setContentsMargins(margin, margin, margin, margin)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rm(repo='.', paths=None): \n    with open_repo_closing(repo) as r: \n      index = r.open_index() \n      for p in paths: \n         del index[p.encode(sys.getfilesystemencoding())] \n      index.write()",
        "line_count": 5,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def safe_mkdtemp(cleaner=_mkdtemp_atexit_cleaner, **kw): \n    with _MKDTEMP_LOCK: \n      return register_rmtree(tempfile.mkdtemp(**kw), cleaner=cleaner)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def authorize_project_context(context, project_id): \n    if is_user_context(context): \n      if (not context.project_id): \n         raise exception.Forbidden() \n      elif (context.project_id != project_id): \n         raise exception.Forbidden()",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def _LineHasContinuationMarkers(uwline): \n    return any((tok.is_continuation for tok in uwline.tokens))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _image_mode(backup_mode): \n    return (backup_mode == 'image')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ellip(N, rp, rs, Wn, btype='low', analog=False, output='ba'): \n    return iirfilter(N, Wn, rs=rs, rp=rp, btype=btype, analog=analog, output=output, ftype='elliptic')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_colormap_reversing(): \n    for name in cm.cmap_d: \n      cmap = plt.get_cmap(name) \n      cmap_r = cmap.reversed() \n      if (not cmap_r._isinit): \n         cmap._init() \n         cmap_r._init() \n      assert_array_almost_equal(cmap._lut[:(-3)], cmap_r._lut[(-4)::(-1)])",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def gravatar_hash(email): \n    return make_safe_digest(email.lower(), hashlib.md5)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def argmax(seq, func): \n    return max(seq, key=func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_destroy(context, service_id): \n    return IMPL.service_destroy(context, service_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def argmin(seq, func): \n    return min(seq, key=func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_iso2231_iso8859_invalid_chars(header_checker): \n    header_checker.check_ignored(\"attachment;   filename*=iso-8859-1''foo-%80.html\")",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def close_tab(data, socket): \n    if (socket.tab is not None): \n      socket.tab.close() \n      socket.factory[socket].tab = None",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def deactivate(): \n    if hasattr(_active, 'value'): \n      del _active.value",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_users(profile=None, api_key=None): \n    return salt.utils.pagerduty.list_items('users', 'id', __salt__['config.option'](profile), api_key, opts=__opts__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _multilingual(function, *args, **kwargs): \n    return getattr(_module(kwargs.pop('language', 'en')), function)(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vpn_disable(name): \n    run(settings.service, 'openvpn', 'stop', name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def zero_x_encoding(t): \n    return ('0x' + ''.join((hex(ord(c))[2:] for c in t)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def load_shared_variable(val): \n    return tensor_constructor(val)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def matching(u, v): \n    return hamming(u, v)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isNaN(value): \n    return ((_exponent(value) == 2047) and (not _zero_mantissa(value)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def take(iter, n): \n    return [value for (_, value) in zip(range(n), iter)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def unserializeObject(value): \n    return (base64unpickle(value) if value else None)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def disable_site(site_name): \n    if is_site_enabled(site_name): \n      run_as_root(('a2dissite   %s' % _site_config_filename(site_name)))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _check_value(value): \n    return (value.get() if isinstance(value, SpecialValue) else value)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def run_wsgi_app(application): \n    run_bare_wsgi_app(add_wsgi_middleware(application))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sublist_reverse(lst, a, b): \n    while (b > a): \n      (lst[a], lst[b]) = (lst[b], lst[a]) \n      b -= 1 \n      a += 1",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fixRelativeLinks(document, linkrel): \n    for attr in ('src', 'href'): \n      for node in domhelpers.findElementsWithAttribute(document, attr): \n         href = node.getAttribute(attr) \n         if ((not href.startswith('http')) and (not href.startswith('/'))): \n            node.setAttribute(attr, (linkrel + node.getAttribute(attr)))",
        "line_count": 5,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def sitrep(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def commit_index(object_store, index): \n    return commit_tree(object_store, index.iterblobs())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_command_def_bad_rhs(p): \n    p[0] = 'BAD   EXPRESSION   IN   DEF   STATEMENT'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_type(): \n    with pytest.raises(NotImplementedError): \n      hug.types.Type()('value')",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new(key): \n    return PKCS115_Cipher(key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def length_gt(value, arg): \n    return (len(value) > int(arg))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inertia_of_point_mass(mass, pos_vec, frame): \n    return (mass * (((((frame.x | frame.x) + (frame.y | frame.y)) + (frame.z | frame.z)) * (pos_vec & pos_vec)) - (pos_vec | pos_vec)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def demo_serialize_tagger(): \n    postag(serialize_output='tagger.pcl')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cmd_set(args): \n    mpstate.settings.command(args)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_values_bytes(dict_): \n    return {k: six.b(v) for (k, v) in dict_.items()}",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getInteriorOverhangRadians(elementNode): \n    return math.radians(getInteriorOverhangAngle(elementNode))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_default(ruby, runas=None): \n    return _rvm(['alias', 'create', 'default', ruby], runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def foreign(expr): \n    return _annotate_columns(expression._clause_element_as_expr(expr), {'foreign': True})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def recv(shape, dtype, source, tag): \n    return MPIRecvWait(tag)(*irecv(shape, dtype, source, tag))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def take(n, seq): \n    return itertools.islice(seq, n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def mock_render_to_response(*args, **kwargs): \n    return render_to_response(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _match_emr_step_syslog_path(path, step_id=None): \n    return _match_emr_step_log_path(path, 'syslog', step_id=step_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def available(job_label): \n    return (True if _service_by_name(job_label) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def is_logged_in_cookie_set(request): \n    return ((settings.EDXMKTG_LOGGED_IN_COOKIE_NAME in request.COOKIES) and (settings.EDXMKTG_USER_INFO_COOKIE_NAME in request.COOKIES))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_port(context, port_id): \n    with context.session.begin(subtransactions=True): \n      try: \n         record = context.session.query(models_v2.Port).enable_eagerloads(False).filter(models_v2.Port.id.startswith(port_id)).one() \n         return record \n      except exc.NoResultFound: \n         return \n      except exc.MultipleResultsFound: \n         LOG.error(_LE('Multiple   ports   have   port_id   starting   with   %s'), port_id) \n         return",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def __virtual__(): \n    return ('splunk' if ('splunk.list_users' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _describe_volume(volume): \n    return {'id': volume.id, 'creation_time': _format_time(_get_volume_creation_time(volume)), 'provider': volume.driver.name, 'region': _get_volume_region(volume), 'extra': repr(volume.extra)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _update_on_fields(prev_ele, new_ele): \n    return dict(((prop_name, prop_val) for (prop_name, prop_val) in six.iteritems(new_ele) if ((new_ele.get(prop_name) != prev_ele.get(prop_name)) or (prop_name in _MATCH_KEYS))))",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def usd(value): \n    return Money(value, u'USD')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_rebroadcast_c_code(typ, code, version=()): \n    Rebroadcast.c_code_and_version[typ] = (code, version)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def datetime_to_utc_timestamp(timeval): \n    if (timeval is not None): \n      return (timegm(timeval.utctimetuple()) + (timeval.microsecond / 1000000))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def tree(plist, l, a, f): \n    if (l > 3): \n      lst = [] \n      for p in plist: \n         p.forward(l) \n         q = p.clone() \n         p.left(a) \n         q.right(a) \n         lst.append(p) \n         lst.append(q) \n      for x in tree(lst, (l * f), a, f): \n         (yield None)",
        "line_count": 11,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def DEFINE_multi(parser, serializer, name, default, help, flag_values=FLAGS, **args): \n    DEFINE_flag(MultiFlag(parser, serializer, name, default, help, **args), flag_values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dev_from_index(if_index): \n    return IFACES.dev_from_index(if_index)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def convert_TextProperty(model, prop, kwargs): \n    return f.TextAreaField(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_printable(unichar): \n    return (unicodedata.category(unichar) not in _control)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pool_list(**kwargs): \n    return ceph_cfg.pool_list(**kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ValidatePropertyNothing(name, value): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_ansi_codes(s): \n    return re.sub(u'\\x1b\\\\[([0-9]+)(;[0-9]+)*m', u'', s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_exclusive_or_expression_1(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_name(type_, value): \n    return (type_._VALUES_TO_NAMES[value] if (value is not None) else u'None')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def import_set(stream, format=None, **kwargs): \n    return Dataset().load(stream, format, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def copula_bv_max(u, v): \n    return np.maximum(((u + v) - 1), 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ids(probabilities): \n    return [str(c) for c in np.argmax(probabilities, 1)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def create_from_options(options, name='unknown'): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_started(): \n    return (status() == 'running')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def candlestick_ochl(ax, quotes, width=0.2, colorup=u'k', colordown=u'r', alpha=1.0): \n    return _candlestick(ax, quotes, width=width, colorup=colorup, colordown=colordown, alpha=alpha, ochl=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _api_get_cats(name, output, kwargs): \n    return report(output, keyword='categories', data=list_cats(False))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dup_from_sympy(f, K): \n    return dup_strip([K.from_sympy(c) for c in f])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fixed_ip_create(context, values): \n    return IMPL.fixed_ip_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def CreatePriceTableRow(header, description, final_url, price_in_micros, currency_code, price_unit): \n    return {'header': header, 'description': description, 'finalUrls': {'urls': [final_url]}, 'price': {'money': {'microAmount': price_in_micros}, 'currencyCode': currency_code}, 'priceUnit': price_unit, 'xsi_type': 'PriceTableRow'}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def req_match(): \n    return s3db.req_match(rheader=s3db.transport_rheader)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def escape_uri_path(path): \n    return quote(force_bytes(path), safe=\"/:@&+$,-_.!~*'()\")",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_verifier_for_dsa(signature, hash_method, public_key): \n    return public_key.verifier(signature, hash_method)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, gcodeText, repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, gcodeText), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_str(key): \n    return (slice_to_str(key[0]), slice_to_str(key[1]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_id_from_href(href): \n    return urlparse.urlsplit(('%s' % href)).path.split('/')[(-1)]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_implementation(cls): \n    return symbol_by_name(cls, ALIASES)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def domain(url): \n    return urlparse.urlsplit(url)[1].split(':')[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def enabled(name, **kwargs): \n    return (name in get_enabled())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_username_for_svn_txn(repo_path, txn_id): \n    return subproc_check_output(['svnlook', 'author', repo_path, '-t', txn_id]).strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def copy_header_subset(from_r, to_r, condition): \n    for (k, v) in from_r.headers.items(): \n      if condition(k): \n         to_r.headers[k] = v",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def jsonable2thrift(jsonable, thrift_class): \n    return _jsonable2thrift_helper(jsonable, TType.STRUCT, (thrift_class, thrift_class.thrift_spec), default=None, recursion_depth=0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def compression_level(n, q, oversampling=10, min_subspace_size=20): \n    return min(max(min_subspace_size, (q + oversampling)), n)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_jump_statement_3(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read_crop(fname, lims=(0, None)): \n    return read_raw_fif(fname, allow_maxshield='yes').crop(*lims)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_event_handlers(name): \n    _events.pop(name, None)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def user_details(strategy, details, user=None, *args, **kwargs): \n    if user: \n      changed = False \n      protected = (('username', 'id', 'pk', 'email') + tuple(strategy.setting('PROTECTED_USER_FIELDS', []))) \n      for (name, value) in details.items(): \n         if (not hasattr(user, name)): \n            continue \n         current_value = getattr(user, name, None) \n         if ((not current_value) or (name not in protected)): \n            changed |= (current_value != value) \n            setattr(user, name, value) \n      if changed: \n         strategy.storage.user.changed(user)",
        "line_count": 12,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def SCORE(fragment): \n    return None",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_service_by_id_or_name(consul_api, service_id_or_name): \n    for (name, service) in consul_api.agent.services().items(): \n      if ((service['ID'] == service_id_or_name) or (service['Service'] == service_id_or_name)): \n         return ConsulService(loaded=service)",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def i0(x): \n    return tt.switch(tt.lt(x, 5), ((((((1 + ((x ** 2) / 4)) + ((x ** 4) / 64)) + ((x ** 6) / 2304)) + ((x ** 8) / 147456)) + ((x ** 10) / 14745600)) + ((x ** 12) / 2123366400)), (((np.e ** x) / (((2 * np.pi) * x) ** 0.5)) * ((((1 + (1 / (8 * x))) + (9 / (128 * (x ** 2)))) + (225 / (3072 * (x ** 3)))) + (11025 / (98304 * (x ** 4))))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sources_add(source_uri, ruby=None, runas=None, gem_bin=None): \n    return _gem(['sources', '--add', source_uri], ruby, gem_bin=gem_bin, runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_function_definition_4(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_addition(): \n    assert ((1 + 1) == 2)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def demographic(): \n    return s3_rest_controller('stats', 'demographic')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _validate_time(req, values): \n    for time_field in ['created_at', 'updated_at', 'deleted_at']: \n      if ((time_field in values) and values[time_field]): \n         try: \n            time = timeutils.parse_isotime(values[time_field]) \n            if (time.year < 1900): \n               raise ValueError \n            values[time_field] = time.strftime(timeutils.PERFECT_TIME_FORMAT) \n         except ValueError: \n            msg = (_('Invalid   time   format   for   %s.') % time_field) \n            raise HTTPBadRequest(explanation=msg, request=req)",
        "line_count": 10,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def rubygems(ruby, version, runas=None): \n    return _rvm_do(ruby, ['rubygems', version], runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _cursor(): \n    return connections[router.db_for_read(Document)].cursor()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stub_and_esp32_function_only(func): \n    return check_supported_function(func, (lambda o: (o.IS_STUB or (o.CHIP_NAME == 'ESP32'))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def validate_maximum(value, maximum): \n    if ((maximum is not None) and (value > maximum)): \n      raise ValueError((u'%r   must   be   smaller   than   %r.' % (value, maximum)))",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def remove_comments(src): \n    return re.sub('#.*', '', src)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GammaInverse(name, a, b): \n    return rv(name, GammaInverseDistribution, (a, b))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _make_ptr_array(xs): \n    return PointerArray([x.data.ptr for x in xs], xs)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def cert_generation_enabled(course_key): \n    return (CertificateGenerationConfiguration.current().enabled and CertificateGenerationCourseSetting.is_enabled_for_course(course_key))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def mul_expr(lh_op, rh_op, size): \n    return lo.LinOp(lo.MUL, size, [rh_op], lh_op)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _points_table(): \n    for i in range(256): \n      for j in itertools.repeat(i, 256): \n         (yield j)",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def branch_create(repo, name, objectish=None, force=False): \n    with open_repo_closing(repo) as r: \n      if isinstance(name, bytes): \n         names = [name] \n      elif isinstance(name, list): \n         names = name \n      else: \n         raise TypeError(('Unexpected   branch   name   type   %r' % name)) \n      if (objectish is None): \n         objectish = 'HEAD' \n      object = parse_object(r, objectish) \n      refname = ('refs/heads/' + name) \n      if ((refname in r.refs) and (not force)): \n         raise KeyError(('Branch   with   name   %s   already   exists.' % name)) \n      r.refs[refname] = object.id",
        "line_count": 14,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def _string_concat(*strings): \n    return u''.join([force_unicode(s) for s in strings])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def v6_int_to_packed(address): \n    return Bytes(struct.pack('!QQ', (address >> 64), (address & ((2 ** 64) - 1))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def delete_users(users, test=False, commit=True): \n    return __salt__['net.load_template']('delete_users', users=users, test=test, commit=commit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Subscript(index_node): \n    return Node(syms.trailer, [Leaf(token.LBRACE, u'['), index_node, Leaf(token.RBRACE, u']')])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rocket(): \n    return load('rocket.jpg')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def referenced(word, article=INDEFINITE, gender=MALE): \n    return ('%s   %s' % (_article(word, article, gender), word))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def warning(msg): \n    log(msg, logging.WARNING)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _MPpow(x, y, z): \n    return MP(pow(x, y, z))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_asset_url(module, path): \n    return '{}/{}/{}'.format(settings.STATIC_URL.rstrip('/'), module, path)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def HT_DCPHASE(ds, count): \n    return call_talib_with_ds(ds, count, talib.HT_DCPHASE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write(trees, handle, plain=False, **kwargs): \n    return Writer(trees).write(handle, plain=plain, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_simple_stmt(p): \n    p[0] = p[1]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jog_music(): \n    if (music_enabled and (not music.get_busy())): \n      start_next_music()",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def escape_html(t): \n    return cgi.escape(t)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rgba_to_hex(rgba_string): \n    return ('#' + ''.join([hex(int(each)).replace('0x', '').upper() for each in rgba_string.replace('rgba(', '').replace(')', '').split(',')[:(-1)]]))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def test__FileIO_isatty(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _translate(string): \n    return string",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MA(ds, count, timeperiod=(- (2 ** 31)), matype=0): \n    return call_talib_with_ds(ds, count, talib.MA, timeperiod, matype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _letter_to_number(letter): \n    return (ord(letter) - 96)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tag_structure(tag, site): \n    return {'tag_id': tag.pk, 'name': tag.name, 'count': tag.count, 'slug': tag.name, 'html_url': ('%s://%s%s' % (PROTOCOL, site.domain, reverse('zinnia:tag_detail', args=[tag.name]))), 'rss_url': ('%s://%s%s' % (PROTOCOL, site.domain, reverse('zinnia:tag_feed', args=[tag.name])))}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clone_image(img): \n    return QImage(img)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_deprecated_download_cell_limit(): \n    return ((DOWNLOAD_CELL_LIMIT.get() / 100) if (DOWNLOAD_CELL_LIMIT.get() > 0) else DOWNLOAD_CELL_LIMIT.get())",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def default_bucket_name(): \n    return files._default_gs_bucket_name()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('hipchat' if ('hipchat.send_message' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def backward(variables, grad_variables, retain_variables=False): \n    Variable._execution_engine.run_backward(tuple(variables), tuple(grad_variables), retain_variables)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def children(ppid): \n    return [p.pid for p in psutil.Process(ppid).children()]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def gitlab_notifier(registry, xml_parent, data): \n    XML.SubElement(xml_parent, 'com.dabsquared.gitlabjenkins.publisher.GitLabCommitStatusPublisher')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fill_diagonal(a, val): \n    return fill_diagonal_(a, val)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Help(): \n    return _STYLE_HELP",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def strip_trailing_whitespace(content): \n    return re.sub(u'   +\\n', u'\\n', content)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def popall(seq): \n    for i in xrange(len(seq)): \n      seq.pop()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _nova_to_osvif_subnets(subnets): \n    return objects.subnet.SubnetList(objects=[_nova_to_osvif_subnet(subnet) for subnet in subnets])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def remote_postgres(client_ip, host, command): \n    return remote_command(client_ip, ('psql', ((((((('postgres://' + POSTGRESQL_USERNAME) + ':') + POSTGRESQL_PASSWORD) + '@') + host) + ':') + str(POSTGRESQL_PORT)), '--command={}'.format(command)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_SAMPHubServer(): \n    SAMPHubServer(web_profile=False, mode='multiple', pool_size=1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MathtextBackendBitmap(): \n    return MathtextBackendBbox(MathtextBackendBitmapRender())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Event(*args, **kwargs): \n    return _Event(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_service(hass, config, discovery_info=None): \n    return FreeSMSNotificationService(config[CONF_USERNAME], config[CONF_ACCESS_TOKEN])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def almost_same_datetime(dt1, dt2, allowed_delta=timedelta(minutes=1)): \n    return (abs((dt1 - dt2)) < allowed_delta)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _generate_course_structure(course_key): \n    with modulestore().bulk_operations(course_key): \n      course = modulestore().get_course(course_key, depth=None) \n      blocks_stack = [course] \n      blocks_dict = {} \n      discussions = {} \n      while blocks_stack: \n         curr_block = blocks_stack.pop() \n         children = (curr_block.get_children() if curr_block.has_children else []) \n         key = unicode(curr_block.scope_ids.usage_id) \n         block = {'usage_key': key, 'block_type': curr_block.category, 'display_name': curr_block.display_name, 'children': [unicode(child.scope_ids.usage_id) for child in children]} \n         if ((curr_block.category == 'discussion') and hasattr(curr_block, 'discussion_id') and curr_block.discussion_id): \n            discussions[curr_block.discussion_id] = unicode(curr_block.scope_ids.usage_id) \n         attrs = (('graded', False), ('format', None)) \n         for (attr, default) in attrs: \n            if hasattr(curr_block, attr): \n               block[attr] = getattr(curr_block, attr, default) \n            else: \n               log.warning('Failed   to   retrieve   %s   attribute   of   block   %s.   Defaulting   to   %s.', attr, key, default) \n               block[attr] = default \n         blocks_dict[key] = block \n         blocks_stack.extend(children) \n      return {'structure': {'root': unicode(course.scope_ids.usage_id), 'blocks': blocks_dict}, 'discussion_id_map': discussions}",
        "line_count": 22,
        "cyclomatic_complexity": 9
    },
    {
        "method": "def assert_true(v1, msg=''): \n    assert v1, msg",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def standard_deviation(X, condition=None, **kwargs): \n    return sqrt(variance(X, condition, **kwargs))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def polarity(s, **kwargs): \n    return sentiment(s, **kwargs)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def NamesOfDefinedFlags(): \n    return ['tmod_foo_bool', 'tmod_foo_str', 'tmod_foo_int']",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dnsdomain_list(context): \n    return IMPL.dnsdomain_list(context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sudo_network_interacting_from_args(*a, **kw): \n    return retry_effect_with_timeout(sudo_from_args(*a, **kw), timeout=_TIMEOUT.total_seconds())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_module(modulename): \n    return importlib.import_module(modulename)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_suite(): \n    return DocTestSuite()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(): \n    util.run_bare_wsgi_app(app)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def TestResult_addSkipped(self, test, err): \n    self.skipped.append((test, str(err[1])))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_jid(jid): \n    with _get_serv(ret=None, commit=True) as cur: \n      sql = 'SELECT   id,   full_ret   FROM   salt_returns\\n                                                WHERE   jid   =   %s' \n      cur.execute(sql, (jid,)) \n      data = cur.fetchall() \n      ret = {} \n      if data: \n         for (minion, full_ret) in data: \n            ret[minion] = full_ret \n      return ret",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_host_queue_entries(**filter_data): \n    return rpc_utils.prepare_rows_as_nested_dicts(models.HostQueueEntry.query_objects(filter_data), ('host', 'atomic_group', 'job'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def preDeployFile(file): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rospack_depends(pkg): \n    return rospackexec(['deps', pkg]).split()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ComputeSplitPenalties(tree): \n    _TreePenaltyAssigner().Visit(tree)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def comment(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def resume(vm_): \n    with _get_xapi_session() as xapi: \n      vm_uuid = _get_label_uuid(xapi, 'VM', vm_) \n      if (vm_uuid is False): \n         return False \n      try: \n         xapi.VM.unpause(vm_uuid) \n         return True \n      except Exception: \n         return False",
        "line_count": 9,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _nftables_cmd(): \n    return 'nft'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def traverse_pre_order(start_node, get_children, filter_func=None): \n    return _traverse_generic(start_node, get_parents=None, get_children=get_children, filter_func=filter_func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wait_until_appeared(browser, css_selector, timeout=10, frequency=1.0): \n    wait_until_condition(browser, condition=(lambda x: x.driver.find_element_by_css_selector(css_selector).is_displayed()), timeout=timeout, frequency=frequency)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Timer(*args, **kwargs): \n    return _Timer(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewDerivation(elementNode, prefix, sideLength): \n    return TranslateDerivation(elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connect(user=None, host='localhost', unix_sock=None, port=5432, database=None, password=None, ssl=False, timeout=None, **kwargs): \n    return Connection(user, host, unix_sock, port, database, password, ssl, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getGeometryOutputByArguments(arguments, elementNode): \n    return getGeometryOutput(None, elementNode)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _iface_hdlr(iface_node): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def post_save_layer(instance, sender, **kwargs): \n    ModelDescription.objects.filter(name=instance.name).update(layer=instance)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def put(url, data=None, **kwargs): \n    return request('put', url, data=data, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(): \n    pcsInit()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_unicode_escape_decode(): \n    if is_cli: \n      AssertError(NotImplementedError, codecs.unicode_escape_decode, 'abc')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def RemoveMultiLineCommentsFromRange(lines, begin, end): \n    for i in range(begin, end): \n      lines[i] = '//   dummy'",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_disks(vm_): \n    with _get_xapi_session() as xapi: \n      disk = {} \n      vm_uuid = _get_label_uuid(xapi, 'VM', vm_) \n      if (vm_uuid is False): \n         return False \n      for vbd in xapi.VM.get_VBDs(vm_uuid): \n         dev = xapi.VBD.get_device(vbd) \n         if (not dev): \n            continue \n         prop = xapi.VBD.get_runtime_properties(vbd) \n         disk[dev] = {'backend': prop['backend'], 'type': prop['device-type'], 'protocol': prop['protocol']} \n      return disk",
        "line_count": 12,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def expand_mul(expr, deep=True): \n    return sympify(expr).expand(deep=deep, mul=True, power_exp=False, power_base=False, basic=False, multinomial=False, log=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _instrumented_test_render(self, *args, **data): \n    with _MAKO_LOCK: \n      def mako_callable_(context, *args, **kwargs): \n         template_rendered.send(sender=self, template=self, context=context) \n         return self.original_callable_[(-1)](context, *args, **kwargs) \n      if hasattr(self, 'original_callable_'): \n         self.original_callable_.append(self.callable_) \n      else: \n         self.original_callable_ = [self.callable_] \n      self.callable_ = mako_callable_ \n      try: \n         response = runtime._render(self, self.original_callable_[(-1)], args, data) \n      finally: \n         self.callable_ = self.original_callable_.pop() \n      return response",
        "line_count": 14,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def find_full_path(path_to_file): \n    for (subdir, dirs, files) in os.walk('.'): \n      full = os.path.relpath(os.path.join(subdir, path_to_file)) \n      if os.path.exists(full): \n         return full",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def make_violin_rugplot(vals, pdf_max, distance, color='#1f77b4'): \n    return graph_objs.Scatter(y=vals, x=([((- pdf_max) - distance)] * len(vals)), marker=graph_objs.Marker(color=color, symbol='line-ew-open'), mode='markers', name='', showlegend=False, hoverinfo='y')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cm(value): \n    return dpi2px(value, 'cm')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_br_int_port_name(prefix, port_id): \n    return ('%si-%s' % (prefix, port_id))[:constants.DEVICE_NAME_MAX_LEN]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def inplace_relu_derivative(Z, delta): \n    delta[(Z == 0)] = 0",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tidy_cli(arguments): \n    TidyCommandLine().execute_cli(arguments)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def arg_byref(args, offset=(-1)): \n    return args[offset]._obj.value",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _check_meg_type(meg, allow_auto=False): \n    if isinstance(meg, string_types): \n      allowed_types = ['grad', 'mag', 'planar1', 'planar2'] \n      allowed_types += (['auto'] if allow_auto else []) \n      if (meg not in allowed_types): \n         raise ValueError(('meg   value   must   be   one   of   %s   or   bool,   not   %s' % (allowed_types, meg)))",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def quota_class_get_all_by_name(context, class_name): \n    return IMPL.quota_class_get_all_by_name(context, class_name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uninstall_flocker(nodes): \n    return _run_on_all_nodes(nodes, task=(lambda node: task_uninstall_flocker(node.distribution)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _apply_forwards_to_bindings(forward, bindings): \n    for (var, value) in bindings.items(): \n      while (id(value) in forward): \n         value = forward[id(value)] \n      bindings[var] = value",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def outport(port_name='', props=[], mac_name=None): \n    return __create_port_dict('out', port_name, mac_name, props)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def versiontuple(v): \n    return tuple((int(x) for x in v.split('.')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def p_command_stop(p): \n    p[0] = ('STOP',)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def UppercaseEnum(*args): \n    return Enum(*[(v, v) for v in args])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def wait_for_debugger(pid): \n    with log.waitfor('Waiting   for   debugger') as l: \n      while (tracer(pid) is None): \n         time.sleep(0.01) \n      l.success()",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def f1_score(y_real, y_pred): \n    return fbeta_score(y_real, y_pred, 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def object_download_file(self, Filename, ExtraArgs=None, Callback=None, Config=None): \n    return self.meta.client.download_file(Bucket=self.bucket_name, Key=self.key, Filename=Filename, ExtraArgs=ExtraArgs, Callback=Callback, Config=Config)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expand_power_base(expr, deep=True, force=False): \n    return sympify(expr).expand(deep=deep, log=False, mul=False, power_exp=False, power_base=True, multinomial=False, basic=False, force=force)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def run_all(name, cmd, exec_driver=None, stdin=None, python_shell=True, output_loglevel='debug', use_vt=False, ignore_retcode=False, keep_env=None): \n    return _run(name, cmd, exec_driver=exec_driver, output='all', stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, use_vt=use_vt, ignore_retcode=ignore_retcode, keep_env=keep_env)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_get_all_for_cgsnapshot(context, project_id): \n    return IMPL.snapshot_get_all_for_cgsnapshot(context, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def boto_supports_kms_key_id(): \n    return (hasattr(boto, 'Version') and (LooseVersion(boto.Version) >= LooseVersion('2.39.0')))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def for_signed_dtypes(name='dtype'): \n    return for_dtypes(_signed_dtypes, name=name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_called_from_pytest(): \n    return getattr(matplotlib, u'_called_from_pytest', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def bootstrap_statistic(data, stats_fn, num_samples): \n    return [stats_fn(bootstrap_sample(data)) for _ in range(num_samples)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def symptom_comma_in_SAML_public_certificate_path(): \n    return (',' in CONF.saml.certfile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addVector3ToXMLElement(key, vector3, xmlElement): \n    xmlElement.attributeDictionary[key] = ('[%s,%s,%s]' % (vector3.x, vector3.y, vector3.z))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ver_str(version): \n    return '.'.join(map(str, version))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_file(file_to_test): \n    return all((hasattr(file_to_test, method) for method in ['read', 'name']))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def ttest_1samp(X): \n    return stats.ttest_1samp(X, 0)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def average(values): \n    return ((sum(values) / len(values)) if values else None)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _merge_results(x, y): \n    return dict(((s, dict((x.get(s, {}).items() + y.get(s, {}).items()))) for s in set((x.keys() + y.keys()))))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def size(data): \n    return data[0].get_value(borrow=True).shape[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Unicode2Str(s, d): \n    return s.encode()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _solve_compute_return(b, bcpy): \n    raise NotImplementedError",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def scan(): \n    return (glob.glob('/dev/ttyS*') + glob.glob('/dev/ttyUSB*'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hexWithoutQuotes(l): \n    return str([hex(i) for i in l]).replace(\"'\", '')",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def depart_snippet_latex(self, node): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def start_request(request_id): \n    with _request_states_lock: \n      _request_states[request_id] = RequestState(request_id)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def vgg_19(inputs, num_classes=1000, is_training=True, dropout_keep_prob=0.5, spatial_squeeze=True, scope='vgg_19'): \n    with tf.variable_scope(scope, 'vgg_19', [inputs]) as sc: \n      end_points_collection = (sc.name + '_end_points') \n      with slim.arg_scope([slim.conv2d, slim.fully_connected, slim.max_pool2d], outputs_collections=end_points_collection): \n         net = slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1') \n         net = slim.max_pool2d(net, [2, 2], scope='pool1') \n         net = slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2') \n         net = slim.max_pool2d(net, [2, 2], scope='pool2') \n         net = slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3') \n         net = slim.max_pool2d(net, [2, 2], scope='pool3') \n         net = slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4') \n         net = slim.max_pool2d(net, [2, 2], scope='pool4') \n         net = slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5') \n         net = slim.max_pool2d(net, [2, 2], scope='pool5') \n         net = slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6') \n         net = slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6') \n         net = slim.conv2d(net, 4096, [1, 1], scope='fc7') \n         net = slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7') \n         net = slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8') \n         end_points = slim.utils.convert_collection_to_dict(end_points_collection) \n         if spatial_squeeze: \n            net = tf.squeeze(net, [1, 2], name='fc8/squeezed') \n            end_points[(sc.name + '/fc8')] = net \n         return (net, end_points)",
        "line_count": 23,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def fixed_ip_get(context, id, get_network=False): \n    return IMPL.fixed_ip_get(context, id, get_network)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def prepare_bearer_body(token, body=u''): \n    return add_params_to_qs(body, [(u'access_token', token)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trace_dot(X, Y): \n    return np.dot(X.ravel(), Y.ravel())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cosine_similarity(v1, v2): \n    return (tf.reduce_sum(tf.mul(v1, v2), reduction_indices=1) / (tf.sqrt(tf.reduce_sum(tf.mul(v1, v1), reduction_indices=1)) * tf.sqrt(tf.reduce_sum(tf.mul(v2, v2), reduction_indices=1))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def showwarning(title=None, message=None, **options): \n    return _show(title, message, WARNING, OK, **options)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def imsave(fname, arr, format_str=None): \n    return _imread.imsave(fname, arr, formatstr=format_str)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _has_fulfilled_prerequisites(user, course_id): \n    return (MilestoneError() if get_pre_requisite_courses_not_completed(user, course_id) else ACCESS_GRANTED)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sp(value): \n    return dpi2px(value, 'sp')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def worker_stop(worker, lbn, profile='default'): \n    return _worker_ctl(worker, lbn, 's', profile)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _a_encode_bool(value, mapping): \n    return [('0T' if value else '0F')]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def blue(text, attrib=None): \n    return colorize(text, 'blue', attrib)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def demo_repr_rule_format(): \n    postag(ruleformat='repr')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_usage_create(context, project_id, resource, in_use, reserved, until_refresh): \n    return IMPL.quota_usage_create(context, project_id, resource, in_use, reserved, until_refresh)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fix_lib64(lib_dir, symlink=True): \n    if [p for p in distutils.sysconfig.get_config_vars().values() if (isinstance(p, basestring) and ('lib64' in p))]: \n      if is_pypy: \n         logger.debug('PyPy   detected,   skipping   lib64   symlinking') \n         return \n      logger.debug('This   system   uses   lib64;   symlinking   lib64   to   lib') \n      assert (os.path.basename(lib_dir) == ('python%s' % sys.version[:3])), ('Unexpected   python   lib   dir:   %r' % lib_dir) \n      lib_parent = os.path.dirname(lib_dir) \n      top_level = os.path.dirname(lib_parent) \n      lib_dir = os.path.join(top_level, 'lib') \n      lib64_link = os.path.join(top_level, 'lib64') \n      assert (os.path.basename(lib_parent) == 'lib'), ('Unexpected   parent   dir:   %r' % lib_parent) \n      if os.path.lexists(lib64_link): \n         return \n      if symlink: \n         os.symlink('lib', lib64_link) \n      else: \n         copyfile('lib', lib64_link)",
        "line_count": 17,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def lookupPointer(name, timeout=None): \n    return getResolver().lookupPointer(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def read(handle): \n    return Record(handle)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def liberal_is_HDN(text): \n    return (not IPV4_RE.search(text))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def default_feedback_url(): \n    return 'http://groups.google.com/a/cloudera.org/group/hue-user'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isPosInf(value): \n    return ((_sign(value) == 0) and (_exponent(value) == 2047) and _zero_mantissa(value))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def base64encode(value): \n    return base64.b64encode(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_buffer(length): \n    return array.array('B', (_dummy_s * length))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cooperate(iterator): \n    return _theCooperator.cooperate(iterator)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def local_repo_to_remote(): \n    with lcd(LOGDIR): \n      put(local_path='le.tar.gz', remote_path='') \n      run('tar   xzf   le.tar.gz')",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def duplicate_txn_id(ipn_obj): \n    return (ipn_obj._default_manager.filter(txn_id=ipn_obj.txn_id).count() > 0)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def data_dir(component): \n    return os.path.join(appsettings.DATA_DIR, component)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def makeExtension(*args, **kwargs): \n    return HeaderAnchorExtension(*args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_installed(runas=None): \n    return __salt__['cmd.has_exec'](_rbenv_bin(runas))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ar2lhs(ar): \n    return (- ar[1:])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _format_for_table(plugins): \n    return [[data[u'name'], data[u'version'], data[u'description'], data[u'authors'], data[u'home']] for data in plugins]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def kivy_register_post_configuration(callback): \n    __kivy_post_configuration.append(callback)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ishex(c): \n    return (('0' <= c <= '9') or ('a' <= c <= 'f') or ('A' <= c <= 'F'))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def sge_debug_print(message): \n    logger.debug(((((DEBUGGING_PREFIX + u'   ') + (u'=!' * 3)) + u'      ') + message))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def collect_uncollected_logs(host): \n    if host.job: \n      try: \n         logs = host.job.get_client_logs() \n         for (hostname, remote_path, local_path) in logs: \n            if (hostname == host.hostname): \n               logging.info('Retrieving   logs   from   %s:%s   into   %s', hostname, remote_path, local_path) \n               host.get_file((remote_path + '/'), (local_path + '/')) \n      except Exception as e: \n         logging.warning('Error   while   trying   to   collect   stranded   Autotest   client   logs:   %s', e)",
        "line_count": 9,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def toUnicode(articles): \n    return tuple([art.decode('utf_8') for art in articles])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def routes(attrs=None, where=None): \n    return _osquery_cmd(table='routes', attrs=attrs, where=where)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _export_drafts(modulestore, course_key, export_fs, xml_centric_course_key): \n    with modulestore.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course_key): \n      draft_modules = modulestore.get_items(course_key, qualifiers={'category': {'$nin': DIRECT_ONLY_CATEGORIES}}, revision=ModuleStoreEnum.RevisionOption.draft_only) \n      draft_modules = [module for module in draft_modules if modulestore.has_changes(module)] \n      if draft_modules: \n         draft_course_dir = export_fs.makeopendir(DRAFT_DIR) \n         draft_node_list = [] \n         for draft_module in draft_modules: \n            parent_loc = modulestore.get_parent_location(draft_module.location, revision=ModuleStoreEnum.RevisionOption.draft_preferred) \n            parent_url = None \n            if (parent_loc is not None): \n               parent_url = parent_loc.to_deprecated_string() \n            draft_node = draft_node_constructor(draft_module, location=draft_module.location, url=draft_module.location.to_deprecated_string(), parent_location=parent_loc, parent_url=parent_url) \n            draft_node_list.append(draft_node) \n         for draft_node in get_draft_subtree_roots(draft_node_list): \n            if (not hasattr(draft_node.module, 'xml_attributes')): \n               draft_node.module.xml_attributes = {} \n            if (draft_node.parent_location is None): \n               continue \n            logging.debug('parent_loc   =   %s', draft_node.parent_location) \n            draft_node.module.xml_attributes['parent_url'] = draft_node.parent_url \n            parent = modulestore.get_item(draft_node.parent_location) \n            if (draft_node.module.location not in parent.children): \n               continue \n            index = parent.children.index(draft_node.module.location) \n            draft_node.module.xml_attributes['index_in_children_list'] = str(index) \n            draft_node.module.runtime.export_fs = draft_course_dir \n            adapt_references(draft_node.module, xml_centric_course_key, draft_course_dir) \n            node = lxml.etree.Element('unknown') \n            draft_node.module.add_xml_to_node(node)",
        "line_count": 29,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def log_event(event): \n    tracker.send(event)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Dot(): \n    return Leaf(token.DOT, u'.')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_parameter_list_2(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def coins(): \n    return load('coins.png')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def next_run(): \n    return default_scheduler.next_run",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _betmap(G_normalized_weight_sources_tuple): \n    return nx.betweenness_centrality_source(*G_normalized_weight_sources_tuple)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def slugify_iarc_name(obj): \n    return obj.iarc_name.lower().replace('   ', '-')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _simpleprint_styles(_styles): \n    return u'[{}]'.format(u'|'.join(map(u\"   '{}'   \".format, sorted(_styles))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def softmax(x, use_cudnn=True): \n    return Softmax(use_cudnn)(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iteritems_compat(d): \n    return iter(getattr(d, _iteritems)())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ROCR100(ds, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_ds(ds, count, talib.ROCR100, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rs_client(h=client_context.host, p=client_context.port, **kwargs): \n    return _mongo_client(h, p, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def serialize_user(user): \n    return {'email': {'email': user.username}, 'email_type': 'html', 'merge_vars': {'fname': user.given_name, 'lname': user.family_name}}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_tiff(h, f): \n    if (h[:2] in ('MM', 'II')): \n      return 'tiff'",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def reduceCopyRegistered(cr): \n    return (CopyRegisteredLoaded, ())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def list_dvs(service_instance): \n    return list_objects(service_instance, vim.DistributedVirtualSwitch)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def candlestick_ohlc(ax, quotes, width=0.2, colorup=u'k', colordown=u'r', alpha=1.0): \n    return _candlestick(ax, quotes, width=width, colorup=colorup, colordown=colordown, alpha=alpha, ochl=False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_default_pants_config_file(): \n    return os.path.join(get_buildroot(), u'pants.ini')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def timedelta_to_seconds(td): \n    return (td.seconds + (((td.days * 24) * 60) * 60))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def jwt_response_payload_handler(token, user=None, request=None): \n    return {'token': token}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dup_quo(f, g, K): \n    return dup_div(f, g, K)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_scenario_with_table_and_no_step_fails(): \n    assert_raises(LettuceSyntaxError, Scenario.from_string, SCENARIO_FAILED)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def replace_links(container, link_map, frag_map=(lambda name, frag: frag), replace_in_opf=False): \n    for (name, media_type) in container.mime_map.iteritems(): \n      if ((name == container.opf_name) and (not replace_in_opf)): \n         continue \n      repl = LinkReplacer(name, container, link_map, frag_map) \n      container.replace_links(name, repl)",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def trailing_blank_lines(physical_line, lines, line_number): \n    if ((not physical_line.rstrip()) and (line_number == len(lines))): \n      return (0, 'W391   blank   line   at   end   of   file')",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def monomial_pow(A, n): \n    return tuple([(a * n) for a in A])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def mod(a, b): \n    return (a % b)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pyfunc(): \n    return 'pyfunc'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_grunt_files(): \n    for filename in ['Gruntfile.js']: \n      os.remove(os.path.join(PROJECT_DIRECTORY, filename))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def DocumentListFeedFromString(xml_string): \n    return atom.CreateClassFromXMLString(DocumentListFeed, xml_string)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def do_mark_safe(value): \n    return Markup(value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_stochastic(mode): \n    return resolve_iterator_class(mode).stochastic",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def block_inception_c(inputs, scope=None, reuse=None): \n    with slim.arg_scope([slim.conv2d, slim.avg_pool2d, slim.max_pool2d], stride=1, padding='SAME'): \n      with tf.variable_scope(scope, 'BlockInceptionC', [inputs], reuse=reuse): \n         with tf.variable_scope('Branch_0'): \n            branch_0 = slim.conv2d(inputs, 256, [1, 1], scope='Conv2d_0a_1x1') \n         with tf.variable_scope('Branch_1'): \n            branch_1 = slim.conv2d(inputs, 384, [1, 1], scope='Conv2d_0a_1x1') \n            branch_1 = tf.concat(3, [slim.conv2d(branch_1, 256, [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, 256, [3, 1], scope='Conv2d_0c_3x1')]) \n         with tf.variable_scope('Branch_2'): \n            branch_2 = slim.conv2d(inputs, 384, [1, 1], scope='Conv2d_0a_1x1') \n            branch_2 = slim.conv2d(branch_2, 448, [3, 1], scope='Conv2d_0b_3x1') \n            branch_2 = slim.conv2d(branch_2, 512, [1, 3], scope='Conv2d_0c_1x3') \n            branch_2 = tf.concat(3, [slim.conv2d(branch_2, 256, [1, 3], scope='Conv2d_0d_1x3'), slim.conv2d(branch_2, 256, [3, 1], scope='Conv2d_0e_3x1')]) \n         with tf.variable_scope('Branch_3'): \n            branch_3 = slim.avg_pool2d(inputs, [3, 3], scope='AvgPool_0a_3x3') \n            branch_3 = slim.conv2d(branch_3, 256, [1, 1], scope='Conv2d_0b_1x1') \n         return tf.concat(3, [branch_0, branch_1, branch_2, branch_3])",
        "line_count": 16,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_string(x, encoder): \n    return str(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _error(name, msg): \n    return {'name': name, 'result': False, 'comment': msg, 'changes': {}}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cpu_seconds_to_megacycles(cpu_secs): \n    return int((cpu_secs * MCYCLES_PER_SECOND))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qiime_blastx_seqs(seqs, blast_constructor=Blastall, blast_db=None, refseqs=None, refseqs_fp=None, blast_mat_root=None, params={}, WorkingDir=None, seqs_per_blast_run=1000, HALT_EXEC=False): \n    return qiime_blast_seqs(seqs, blast_constructor=blast_constructor, blast_program='blastx', blast_db=blast_db, refseqs=refseqs, refseqs_fp=refseqs_fp, blast_mat_root=blast_mat_root, params={}, WorkingDir=WorkingDir, seqs_per_blast_run=seqs_per_blast_run, is_protein=True, HALT_EXEC=HALT_EXEC)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hash_shard(word): \n    return ('server%d' % (hash(word) % 4))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connect_to_cloud_databases(region=None): \n    return _create_client(ep_name='database', region=region)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def urldecode(t): \n    return urllib.unquote(t)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def has_permission(permission, context, request): \n    return request.has_permission(permission, context)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_ext_comm_subtype(type_high): \n    return _ext_comm_subtypes_classes.get(type_high, {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hex_decode(data, errors='strict'): \n    return (unicode(''.join(('{:02X}   '.format(ord(b)) for b in serial.iterbytes(data)))), len(data))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dnsdomain_unregister(context, fqdomain): \n    return IMPL.dnsdomain_unregister(context, fqdomain)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def encode_body(body): \n    return encodeutils.to_utf8(body)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lcm2(a, b): \n    return ((a * b) // gcd(a, b))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reservation_destroy(context, uuid): \n    return IMPL.reservation_destroy(context, uuid)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _track_tasks(task_ids): \n    while True: \n      statuses = _get_task_statuses(task_ids) \n      if all([(status == 'STOPPED') for status in statuses]): \n         logger.info('ECS   tasks   {0}   STOPPED'.format(','.join(task_ids))) \n         break \n      time.sleep(POLL_TIME) \n      logger.debug('ECS   task   status   for   tasks   {0}:   {1}'.format(','.join(task_ids), status))",
        "line_count": 7,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def opener_for(ca_bundle=None): \n    return urllib2.build_opener(VerifyingHTTPSHandler((ca_bundle or find_ca_bundle()))).open",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def purge(name=None, pkgs=None, version=None, **kwargs): \n    return remove(name=name, pkgs=pkgs, version=version, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def curl(vect, coord_sys): \n    return coord_sys.delop.cross(vect).doit()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exp(x): \n    return tf.exp(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def person_tag_descriptions_for_tag_text(person, tag_text): \n    return person.get_tag_descriptions_for_keyword(tag_text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def VolMagic(vm): \n    return Object('VOLATILITY_MAGIC', 0, vm=vm)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_get(context, snapshot_id): \n    return IMPL.snapshot_get(context, snapshot_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_bool_list(value, min=None, max=None): \n    return [is_boolean(mem) for mem in is_list(value, min, max)]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def translateVector3Path(path, translateVector3): \n    for point in path: \n      point.setToVector3((point + translateVector3))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def warnpy3k(message, category=None, stacklevel=1): \n    if sys.py3kwarning: \n      if (category is None): \n         category = DeprecationWarning \n      warn(message, category, (stacklevel + 1))",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def lookupAuthority(name, timeout=None): \n    return getResolver().lookupAuthority(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def python_implementation(): \n    return _sys_version()[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def tac(): \n    return __timer__.tac()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def remove_na(series): \n    return series[notnull(_values_from_object(series))]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def longest_ones(x): \n    return longest_contiguous_ones(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def base(url): \n    return urlparse.urlparse(url).netloc",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cast_to_floatx(x): \n    return np.asarray(x, dtype=_FLOATX)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def output(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_start(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_end_of_clause(): \n    eq_('<a   href=\"http://ex.com/foo\"   rel=\"nofollow\">ex.com/foo</a>,   bar', linkify('ex.com/foo,   bar'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getPluginsDirectoryPath(): \n    return archive.getAbsoluteFolderPath(os.path.dirname(__file__), os.path.join('skeinforge_plugins', 'meta_plugins'))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def snapshot_destroy(context, snapshot_id): \n    return IMPL.snapshot_destroy(context, snapshot_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def selection(): \n    return selection_model().selection()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _setWarningRegistryToNone(modules): \n    for v in list(modules.values()): \n      if (v is not None): \n         try: \n            v.__warningregistry__ = None \n         except: \n            pass",
        "line_count": 6,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def show_blob(repo, blob, decode, outstream=sys.stdout): \n    outstream.write(decode(blob.data))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def nopackage(pkg_name): \n    if is_installed(pkg_name): \n      uninstall(pkg_name)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_sysctl(key): \n    with settings(hide('running', 'stdout')): \n      return run_as_root(('/sbin/sysctl   -n   -e   %(key)s' % locals()))",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def eigvalsh(a, b=None, lower=True, overwrite_a=False, overwrite_b=False, turbo=True, eigvals=None, type=1, check_finite=True): \n    return eigh(a, b=b, lower=lower, eigvals_only=True, overwrite_a=overwrite_a, overwrite_b=overwrite_b, turbo=turbo, eigvals=eigvals, type=type, check_finite=check_finite)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addMtime(document, fullpath): \n    for node in domhelpers.findElementsWithAttribute(document, 'class', 'mtime'): \n      txt = dom.Text() \n      txt.data = time.ctime(os.path.getmtime(fullpath)) \n      node.appendChild(txt)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def volume_type_extra_specs_update_or_create(context, volume_type_id, extra_specs): \n    IMPL.volume_type_extra_specs_update_or_create(context, volume_type_id, extra_specs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _indent(s, indent=4): \n    return re.sub('(?m)^(?!$)', (indent * '   '), s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pids(): \n    return _psplatform.pids()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _validate_flavor_service_type(validate_type, valid_values=None): \n    if (not directory.get_plugin(validate_type)): \n      raise InvalidFlavorServiceType(service_type=validate_type)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def processElementNode(elementNode): \n    path.convertElementNode(elementNode, getGeometryOutput(None, elementNode))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Decompression_zip(specific_file): \n    if zipfile.is_zipfile(specific_file): \n      try: \n         zipfile.ZipFile(specific_file).extractall(os.path.split(specific_file)[0]) \n      except Exception as err: \n         traceback.print_exc()",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def iter_child_nodes(node): \n    for (name, field) in iter_fields(node): \n      if isinstance(field, AST): \n         (yield field) \n      elif isinstance(field, list): \n         for item in field: \n            if isinstance(item, AST): \n               (yield item)",
        "line_count": 7,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def _close_conn(conn): \n    conn.close()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def put_multi_async(entities, **ctx_options): \n    return [entity.put_async(**ctx_options) for entity in entities]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def release(): \n    return uname()[2]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def expanduser(path): \n    return path",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def restore_disks(job, restore=False, disk_list=None): \n    if (restore and (disk_list is not None)): \n      prepare_disks(job, 'ext2   /   -q   -i20480   -m1   /   /   restore_ext2', disk1_only=False, disk_list=disk_list)",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_load(jid): \n    with _get_serv(ret=None, commit=True) as cur: \n      sql = 'SELECT   `load`   FROM   `jids`   WHERE   `jid`   =   %s;' \n      cur.execute(sql, (jid,)) \n      data = cur.fetchone() \n      if data: \n         return json.loads(data[0]) \n      return {}",
        "line_count": 7,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def sizeof(object): \n    return sys.getsizeof(object)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _checkState(manager): \n    manager.checkState()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def query_log_status(module, le_path, path, state='present'): \n    if (state == 'present'): \n      (rc, out, err) = module.run_command(('%s   followed   %s' % (le_path, path))) \n      if (rc == 0): \n         return True \n      return False",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _error_type_to_str(mod, type_): \n    return ('%s(%d)' % (_get_value_name(mod, type_, 'OFPET_'), type_))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def post_mortem(level=1): \n    if (config.DEBUG >= level): \n      pdb.post_mortem()",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _silent_no_wrap(func, modname): \n    return func(modname)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dup_add_mul(f, g, h, K): \n    return dup_add(f, dup_mul(g, h, K), K)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addPrefixDictionary(dictionary, keys, value): \n    for key in keys: \n      dictionary[key.lstrip('_')] = value",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def action_initdb(): \n    make_wiki().init_database()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quorum_size(n): \n    return ((n + 1) // 2)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return ('kmod.available' in __salt__)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def APO(ds, count, fastperiod=(- (2 ** 31)), slowperiod=(- (2 ** 31)), matype=0): \n    return call_talib_with_ds(ds, count, talib.APO, fastperiod, slowperiod, matype)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_prerequisite_courses_enabled(): \n    return (settings.FEATURES.get('ENABLE_PREREQUISITE_COURSES') and settings.FEATURES.get('MILESTONES_APP'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list2string(obj): \n    return '.'.join([str(x) for x in obj])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_python_version(): \n    return sys.version[:3]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Sourceify(path): \n    return path",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def new_uuid(): \n    return uuid.uuid4().hex",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def with_metaclass(meta, base=object): \n    return meta(('%sBase' % meta.__name__), (base,), {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setattr_on_read(func): \n    return OneTimeProperty(func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clean_slashes(path): \n    return (path.strip(u'/') if settings.APPEND_SLASH else path.lstrip(u'/'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def list_artifacts_opts(): \n    return [(g, copy.deepcopy(o)) for (g, o) in _artifacts_opts]",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def getRadiusArealizedMultiplier(sides): \n    return math.sqrt(((globalTau / sides) / math.sin((globalTau / sides))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _clear_prospective_search_storage(prospective_search_path): \n    if os.path.lexists(prospective_search_path): \n      try: \n         os.remove(prospective_search_path) \n      except OSError as e: \n         logging.warning('Failed   to   remove   prospective   search   file   %r:   %s', prospective_search_path, e)",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _should_update_date(verified_mode): \n    return (not ((verified_mode is None) or verified_mode.expiration_datetime_is_explicit))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def constant(value): \n    return TT.constant(numpy.asarray(value, dtype=theano.config.floatX))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dictreverse(mapping): \n    return dict([(value, key) for (key, value) in iteritems(mapping)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def bool_option(arg): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def demo_high_accuracy_rules(): \n    postag(num_sents=3000, min_acc=0.96, min_score=10)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cleanup_tempdir(the_dir): \n    if os.path.exists(the_dir): \n      shutil.rmtree(the_dir)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def llite_fs(directory): \n    for fs in os.listdir(directory): \n      (fs_name, _, fs_id) = fs.partition('-') \n      (yield fs_name)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def endswith_cr(line): \n    return line.endswith(('\\r' if isinstance(line, str) else '\\r'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def find_fork_top_parent(pid): \n    while True: \n      ppid = find_parent_pid(pid) \n      if (ppid and (ppid != pid) and pid_invoked_with_cmdline(ppid, get_cmdline_from_pid(pid))): \n         pid = ppid \n      else: \n         return pid",
        "line_count": 6,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def _getOneModelInfo(nupicModelID): \n    return _iterModels([nupicModelID]).next()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def terminate(name): \n    return stop(name, kill=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iterkeys(d, **kw): \n    return iter(getattr(d, _iterkeys)(**kw))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_top_keywords(service, profile_id): \n    return service.data().ga().get(ids=('ga:' + profile_id), start_date='2012-01-01', end_date='2012-01-15', metrics='ga:visits', dimensions='ga:source,ga:keyword', sort='-ga:visits', filters='ga:medium==organic', start_index='1', max_results='25').execute()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_date_time_mgr(host_reference): \n    return host_reference.configManager.dateTimeSystem",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stable_json_sha1(obj): \n    return sha1(stable_json_dumps(obj)).hexdigest()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def send_email_with_reset_password_hash(email, link): \n    send_email(to=email, action=PASSWORD_RESET, subject=MAILS[PASSWORD_RESET]['subject'].format(app_name=get_settings()['app_name']), html=MAILS[PASSWORD_RESET]['message'].format(link=link))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def broker_tops(days=5, retry_count=3, pause=0.001): \n    if (ct._check_lhb_input(days) is True): \n      ct._write_head() \n      df = _broker_tops(days, pageNo=1, retry_count=retry_count, pause=pause) \n      return df",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def quota_class_create(context, class_name, resource, limit): \n    return IMPL.quota_class_create(context, class_name, resource, limit)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def register_logging_handler(callback): \n    special_logging_handlers.append(callback)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None): \n    return a.trace(offset, axis1, axis2, dtype, out)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_buf_size(fd): \n    if (OS_PIPE_SZ and hasattr(fcntl, 'F_SETPIPE_SZ')): \n      fcntl.fcntl(fd, fcntl.F_SETPIPE_SZ, OS_PIPE_SZ)",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def getNewRepository(): \n    return LimitRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def profile(request): \n    return render(None, request, _profile_dict(request.user))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setVersion(template, version): \n    for node in domhelpers.findElementsWithAttribute(template, 'class', 'version'): \n      text = dom.Text() \n      text.data = version \n      node.appendChild(text)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def debug(msg, level=1): \n    log(msg, ((logging.DEBUG + 1) - level))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def block_device_mapping_get_by_instance_and_volume_id(context, volume_id, instance_uuid, columns_to_join=None): \n    return IMPL.block_device_mapping_get_by_instance_and_volume_id(context, volume_id, instance_uuid, columns_to_join)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def from_string(s): \n    return reduce((lambda a, b: ((a << 8) | b)), map(int, s.split('.')))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def save_notebook(work_notebook, write_file): \n    with open(write_file, 'w') as out_nb: \n      json.dump(work_notebook, out_nb, indent=2)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___mul__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def plugin(): \n    return SwapQuotes",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def main(): \n    util.run_wsgi_app(app)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def abs(a): \n    return _abs(a)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def patch_os(): \n    patch_module('os')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _generate_new_xsrf_secret_key(): \n    return os.urandom(16).encode('hex')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def busses(): \n    return (Bus(g) for (k, g) in groupby(sorted(core.find(find_all=True), key=(lambda d: d.bus)), (lambda d: d.bus)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _ValidateSettings(validators, settings, stderr): \n    for tool_name in settings: \n      if (tool_name in validators): \n         tool_validators = validators[tool_name] \n         for (setting, value) in settings[tool_name].iteritems(): \n            if (setting in tool_validators): \n               try: \n                  tool_validators[setting](value) \n               except ValueError as e: \n                  print >>stderr, ('Warning:   for   %s/%s,   %s' % (tool_name, setting, e)) \n            else: \n               _ValidateExclusionSetting(setting, tool_validators, ('Warning:   unrecognized   setting   %s/%s' % (tool_name, setting)), stderr) \n      else: \n         print >>stderr, ('Warning:   unrecognized   tool   %s' % tool_name)",
        "line_count": 13,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def register(mgr): \n    mgr.set_lang_info(lang, silvercity_lexer=TwigLexer(), buf_class=TwigBuffer, langintel_class=TwigLangIntel, import_handler_class=None, cile_driver_class=TwigCILEDriver, is_cpln_lang=True)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def short_name(nt_uri): \n    return nt_uri[SHORTNAME_SLICE]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def permute_signs(t): \n    for signs in cartes(*([(1, (-1))] * (len(t) - t.count(0)))): \n      signs = list(signs) \n      (yield type(t)([((i * signs.pop()) if i else i) for i in t]))",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def metric_cleanup(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_indexes(**kwargs): \n    return get_indexes_async(**kwargs).get_result()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_random_text_and_whitespace(length=10): \n    return ''.join(random.sample(BLOG_CHARACTERS, length)).strip()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def LoadFirmwareImage(chip, filename): \n    with open(filename, 'rb') as f: \n      if (chip == 'esp32'): \n         return ESP32FirmwareImage(f) \n      else: \n         magic = ord(f.read(1)) \n         f.seek(0) \n         if (magic == ESPLoader.ESP_IMAGE_MAGIC): \n            return ESPFirmwareImage(f) \n         elif (magic == ESPBOOTLOADER.IMAGE_V2_MAGIC): \n            return OTAFirmwareImage(f) \n         else: \n            raise FatalError(('Invalid   image   magic   number:   %d' % magic))",
        "line_count": 12,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def get_seqs_to_keep_lookup_from_seq_id_file(id_to_keep_f): \n    return set([l.split()[0].strip() for l in id_to_keep_f if (l.strip() and (not l.startswith('#')))])",
        "line_count": 1,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def raw_memmove(builder, dst, src, count, itemsize, align=1): \n    return _raw_memcpy(builder, 'llvm.memmove', dst, src, count, itemsize, align)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addPlainListings(document, dir): \n    for node in domhelpers.findElementsWithAttribute(document, 'class', 'listing'): \n      filename = node.getAttribute('href') \n      val = ('<pre>\\n%s</pre>' % cgi.escape(open(os.path.join(dir, filename)).read())) \n      _replaceWithListing(node, val, filename, 'listing')",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def squeeze(x, axis): \n    return tf.squeeze(x, [axis])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def foo(a): \n    return (a + 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def binary_ip(host): \n    return socket.inet_aton(socket.gethostbyname(host))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pairwise_tukeyhsd(endog, groups, alpha=0.05): \n    return MultiComparison(endog, groups).tukeyhsd(alpha=alpha)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_role(username, role): \n    return (role in get_roles(username))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pre_call_hook(service, call, request, response, rpc=None): \n    if recorder_proxy.has_recorder_for_current_request(): \n      if config.DEBUG: \n         logging.debug('pre_call_hook:   recording   %s.%s', service, call) \n      recorder_proxy.record_rpc_request(service, call, request, response, rpc)",
        "line_count": 4,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def link_reverse_func(reverse_name): \n    return (lambda course, reverse_url_func: reverse_url_func(reverse_name, args=[course.id.to_deprecated_string()]))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_long_description(): \n    return 'Attack   plugins   exploit   the   vulnerabilities   that   were   found   by   audit\\n            plugins   in   order   to   get   a   remote   shell,   or   a   local   proxy   that   routes   traffic\\n            through   the   target   host.\\n            '",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def solidity_unresolved_symbols(hex_code): \n    return set(re.findall('_.{39}', hex_code))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def v_measure_score(labels_true, labels_pred): \n    return homogeneity_completeness_v_measure(labels_true, labels_pred)[2]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _add_cli_param(params, key, value): \n    if (value is not None): \n      params.append('--{0}={1}'.format(key, value))",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def has_archive_provider(node, user): \n    return node.has_addon(settings.ARCHIVE_PROVIDER)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'comb', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def deregister(*args): \n    for data in args: \n      if isinstance(data, np.ndarray): \n         _hsadrv.hsa_memory_deregister(data.ctypes.data, data.nbytes) \n      else: \n         raise TypeError(type(data))",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def _seqmatrix2strmatrix(matrix): \n    return dict(((t, str(matrix[t])) for t in matrix))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def no_select(): \n    PCap.use_select = False",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_user_access(uid, channel=14, **kwargs): \n    with _IpmiCommand(**kwargs) as s: \n      return s.get_user_access(uid, channel=channel)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def hosts(*host_list): \n    return _list_annotating_decorator('hosts', *host_list)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def GzipEncode(s): \n    with closing(StringIO()) as sio: \n      with gzip.GzipFile(fileobj=sio, mode='wb') as gzfile: \n         gzfile.write(escape.utf8(s)) \n      return sio.getvalue()",
        "line_count": 4,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def virtual_interface_get_by_instance_and_network(context, instance_id, network_id): \n    return IMPL.virtual_interface_get_by_instance_and_network(context, instance_id, network_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _satisfied_by(t, o): \n    return t.satisfied_by(o)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def line_aa(r0, c0, r1, c1): \n    return _line_aa(r0, c0, r1, c1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def load_string(source, target): \n    target.update(flatten(yaml.load(source, Loader=yaml.Loader)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_safe_digest(string, hash_func=hashlib.sha1): \n    return force_text(hash_func(string.encode('utf-8')).hexdigest())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ipyfunc2(): \n    return 'pyfunc2'",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def array_str(arr, max_line_width=None, precision=None, suppress_small=None): \n    return numpy.array_str(cupy.asnumpy(arr), max_line_width, precision, suppress_small)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _match_sort_key(m): \n    return ((m['timestamp'] is None), (m['timestamp'] or ''))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _games_in_week(year, week, kind='REG'): \n    return nflgame._search_schedule(year, week, kind=kind)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_transparent_proxy(global_conf, force_host=None, force_scheme='http'): \n    return TransparentProxy(force_host=force_host, force_scheme=force_scheme)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_destroy_by_project(*args, **kwargs): \n    quota_destroy_all_by_project(only_quotas=True, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def to_unit(value, unit): \n    return (value / (1024 ** BYTE_SIZES.index(unit)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dmp_subresultants(f, g, u, K): \n    return dmp_inner_subresultants(f, g, u, K)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def git_new_branch(name): \n    check_call(['git', 'checkout', '-b', name])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def network_get_by_cidr(context, cidr): \n    return IMPL.network_get_by_cidr(context, cidr)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_membership_status(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def arg(*args, **kwargs): \n    return {'args': args, 'kwargs': kwargs}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sm_backend_conf_get(context, sm_backend_conf_id): \n    return IMPL.sm_backend_conf_get(context, sm_backend_conf_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cache_root(environ=None): \n    return zipline_path(['cache'], environ=environ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def urlunquote_plus(quoted_url): \n    return force_text(unquote_plus(force_str(quoted_url)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def with_metaclass(meta, base=object): \n    return meta('NewBase', (base,), {})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNewRepository(): \n    return InsetRepository()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setting(name, default=None): \n    return getattr(settings, name, default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_array___deepcopy__(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def quota_usage_update_resource(context, old_res, new_res): \n    return IMPL.quota_usage_update_resource(context, old_res, new_res)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def moveTower(height, fromPole, toPole, withPole): \n    if (height >= 1): \n      moveTower((height - 1), fromPole, withPole, toPole) \n      moveDisk(fromPole, toPole) \n      moveTower((height - 1), withPole, toPole, fromPole)",
        "line_count": 4,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def find_node(v, cls, ignore_clients=False): \n    if ((v.owner is not None) and (ignore_clients or (len(v.clients) == 1))): \n      if isinstance(v.owner.op, cls): \n         return v.owner \n      elif (isinstance(v.owner.op, GpuFromHost) and (v.owner.inputs[0].owner is not None) and (ignore_clients or (len(v.owner.inputs[0].clients) == 1)) and isinstance(v.owner.inputs[0].owner.op, HostFromGpu)): \n         return find_node(v.owner.inputs[0].owner.inputs[0], cls) \n      else: \n         return None",
        "line_count": 7,
        "cyclomatic_complexity": 10
    },
    {
        "method": "def read(*parts): \n    with codecs.open(os.path.join(HERE, *parts), 'r') as f: \n      return f.read()",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dir_list(load): \n    return _file_lists(load, 'dirs')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fixed_ip_get_by_address(context, address): \n    return IMPL.fixed_ip_get_by_address(context, address)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def install_memory_dumper(dump_signal=signal.SIGPROF): \n    signal.signal(dump_signal, dump_memory)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fix_win_pythonw_std_stream(): \n    if ((sys.platform == 'win32') and (os.path.basename(sys.executable) == 'pythonw.exe')): \n      if (sys.stdout is None): \n         sys.stdout = open(os.devnull, 'w') \n      if (sys.stderr is None): \n         sys.stderr = open(os.devnull, 'w')",
        "line_count": 5,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def waypoint(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftSequence(): \n    return 'chop   preface   outset   mill   multiply   drill   lift   flow   feed   home   lash   fillet   limit   unpause   alteration   export'.split()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def standby(): \n    set_power_state('standby')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def push_context(ctx): \n    _local.__dict__.setdefault('stack', []).append(ctx)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_localizer(request): \n    return request.localizer",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fake_text_id(size=6, chars=(string.ascii_lowercase + string.digits)): \n    return ''.join((random.choice(chars) for x in range(size)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def rand(*shape): \n    return backend.id_srand(np.prod(shape)).reshape(shape)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def l2_norm(f, lim): \n    return sqrt(integrate((Abs(f) ** 2), lim))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def i1(x): \n    return tt.switch(tt.lt(x, 5), (((((((x / 2) + ((x ** 3) / 16)) + ((x ** 5) / 384)) + ((x ** 7) / 18432)) + ((x ** 9) / 1474560)) + ((x ** 11) / 176947200)) + ((x ** 13) / 29727129600)), (((np.e ** x) / (((2 * np.pi) * x) ** 0.5)) * ((((1 - (3 / (8 * x))) + (15 / (128 * (x ** 2)))) + (315 / (3072 * (x ** 3)))) + (14175 / (98304 * (x ** 4))))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def exe(pid): \n    return psutil.Process(pid).exe()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_not_blank(value): \n    if (not value.strip()): \n      raise ValidationError('This   field   may   not   be   blank.')",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def check_python_version(): \n    if (sys.hexversion < 50593792): \n      version_str = '.'.join(map(str, sys.version_info[:3])) \n      text = (('At   least   Python   3.4   is   required   to   run   qutebrowser,   but   ' + version_str) + '   is   installed!\\n') \n      if (Tk and ('--no-err-windows' not in sys.argv)): \n         root = Tk() \n         root.withdraw() \n         messagebox.showerror('qutebrowser:   Fatal   error!', text) \n      else: \n         sys.stderr.write(text) \n         sys.stderr.flush() \n      sys.exit(1)",
        "line_count": 11,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def drop_database(name): \n    _run_as_pg(('dropdb   %(name)s' % locals()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def assertIsInstance(obj, cls, msg=''): \n    if (not isinstance(obj, cls)): \n      err_msg = '{0}Expected   type   {1},   found   {2}   instead' \n      raise AssertionError(err_msg.format(msg, cls, type(obj)))",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def edges(G, nbunch=None): \n    return G.edges(nbunch)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def no_vi_headers(physical_line, line_number, lines): \n    if ((line_number <= 5) or (line_number > (len(lines) - 5))): \n      if vi_header_re.match(physical_line): \n         return (0, \"N314:   Don't   put   vi   configuration   in   source   files\")",
        "line_count": 3,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def getprime(nbits): \n    while True: \n      integer = rsa.randnum.read_random_int(nbits) \n      integer |= 1 \n      if is_prime(integer): \n         return integer",
        "line_count": 5,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def removeElementsFromDictionary(dictionary, keys): \n    for key in keys: \n      removeElementFromDictionary(dictionary, key)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def get_class(module_label, classname, module_prefix='oscar.apps'): \n    return get_classes(module_label, [classname], module_prefix)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ADX(barDs, count, timeperiod=(- (2 ** 31))): \n    return call_talib_with_hlc(barDs, count, talib.ADX, timeperiod)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _StripSeparators(value): \n    return re.sub('      [   ]*', '   ', re.sub(_WORD_SEPARATOR_RE, '   ', value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def all_dependencies(target, dep_context): \n    for dep in target.closure(bfs=True, **dep_context.target_closure_kwargs): \n      (yield dep)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def should_overwrite(settings): \n    return settings.get('GZIP_CACHE_OVERWRITE', False)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def html_unescape(text): \n    return re.sub('&#?\\\\w+;', fixup, text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _specialized_from_args(signatures, args, kwargs): \n    raise Exception('yet   to   be   implemented')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_value_for_org(org, val_name, default=None): \n    return BACKEND.get_value_for_org(org, val_name, default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def update_csp(): \n    for key in ('CSP_SCRIPT_SRC',): \n      values = getattr(settings, key) \n      new = set() \n      for value in values: \n         if (value.startswith('https://') and settings.DEBUG): \n            res = value.replace('https://', 'http://') \n            for v in (value, res): \n               new.add(v) \n            continue \n         elif (value.startswith('http://') and (not settings.DEBUG)): \n            continue \n         else: \n            new.add(value) \n      setattr(settings, key, tuple(new))",
        "line_count": 14,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def lookupText(name, timeout=None): \n    return getResolver().lookupText(name, timeout)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shape(x): \n    return x.shape",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def processXMLElement(xmlElement): \n    group.processShape(Difference, xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def set_interface(dev, bInterfaceNumber, bAlternateSetting): \n    dev.set_interface_altsetting(bInterfaceNumber, bAlternateSetting)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def lookup_template(namespace, name): \n    return LOOKUP[namespace].get_template(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __routes_doctest(): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def libdoc(library_or_resource, outfile, name='', version='', format=None): \n    LibDoc().execute(library_or_resource, outfile, name=name, version=version, format=format)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unjelly(sexp, taster=DummySecurityOptions(), persistentLoad=None, invoker=None): \n    return _Unjellier(taster, persistentLoad, invoker).unjellyFull(sexp)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_flat(var, outdim=1): \n    return (var.ndim == outdim)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def where_art_thy_filehandles(): \n    os.system(('ls   -l   /proc/%d/fd   >>   /dev/tty' % os.getpid()))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def optimize_images(pelican): \n    for (dirpath, _, filenames) in os.walk(pelican.settings['OUTPUT_PATH']): \n      for name in filenames: \n         if (os.path.splitext(name)[1] in COMMANDS.keys()): \n            optimize(dirpath, name)",
        "line_count": 4,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def ip_to_uuid(ip): \n    return UUID(bytes=md5(ip.encode('utf-8')).digest())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_octal(string): \n    return all(((ch in OCT_DIGITS) for ch in string))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def looks_like_a_tool_yaml(path): \n    return is_a_yaml_with_class(path, ['GalaxyTool'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _new_value_pb(entity_pb, name): \n    return entity_pb.properties.get_or_create(name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Get(setting_name): \n    return _style[setting_name]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_site_path(*joins): \n    return os.path.join(local.site_path, *joins)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def All(other, arrexpr, operator=operators.eq): \n    return arrexpr.all(other, operator)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def ObjectSpecification(direct, cls): \n    return Provides(cls, direct)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def addPre(klass, name, func): \n    _addHook(klass, name, PRE, func)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_pricing_data(): \n    invalidate_pricing_cache()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isFixedGroup(kexAlgorithm): \n    return _IFixedGroupKexAlgorithm.providedBy(getKex(kexAlgorithm))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_configured_provider(): \n    return config.is_provider_configured(__opts__, (__active_provider_name__ or 'dimensiondata'), ('user_id', 'key', 'region'))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def clean(x): \n    return ensure_sorted_indices(remove0(x))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_collection_change_list(property_name, new_value): \n    return [{'cmd': collection_domain.CMD_EDIT_COLLECTION_PROPERTY, 'property_name': property_name, 'new_value': new_value}]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def fg2(x): \n    return (np.sin((2 * x)) + (2 * np.exp(((-16) * (x ** 2)))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_subdomain(subdomain, base): \n    return ((subdomain == base) or ((subdomain is not None) and subdomain.endswith(('.' + base))))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def after_table_create(event, target, bind, tables=None, **kw): \n    if tables: \n      with flexget.manager.manager.acquire_lock(event=False): \n         tables = [table.name for table in tables] \n         for (plugin, info) in plugin_schemas.items(): \n            if all(((table in tables) for table in info[u'tables'])): \n               set_version(plugin, info[u'version'])",
        "line_count": 6,
        "cyclomatic_complexity": 6
    },
    {
        "method": "def sources_remove(source_uri, ruby=None, runas=None, gem_bin=None): \n    return _gem(['sources', '--remove', source_uri], ruby, gem_bin=gem_bin, runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def version_parts(best=False): \n    return _distro.version_parts(best)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def running(): \n    return (True if _status_apf() else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def print_julia_code(expr, **settings): \n    print(julia_code(expr, **settings))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def netserviceHandle(target): \n    GlobalObject().netfactory.service.mapTarget(target)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def Rayleigh(name, sigma): \n    return rv(name, RayleighDistribution, (sigma,))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def last_arg_byref(args): \n    return args[(-1)]._obj.value",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def detect(source): \n    return source.strip().lower().startswith('eval(function(')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'home', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_info_cache_update(context, instance_uuid, values): \n    return IMPL.instance_info_cache_update(context, instance_uuid, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_assigned_metadata(csvfile): \n    with open(csvfile, 'rb') as f: \n      for record in csv.reader(f): \n         module = record[0] \n         supported_by = record[1] \n         status = [] \n         if record[2]: \n            status.append('stableinterface') \n         if record[4]: \n            status.append('deprecated') \n         if record[5]: \n            status.append('removed') \n         if record[6]: \n            status.append('tested') \n         if ((not status) or record[3]): \n            status.append('preview') \n         (yield (module, {'version': '1.0', 'supported_by': supported_by, 'status': status}))",
        "line_count": 16,
        "cyclomatic_complexity": 8
    },
    {
        "method": "def backend(comment, content_object, request): \n    return (len(comment.comment.split()) < COMMENT_MIN_WORDS)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def service_update(context, service_id, values): \n    return IMPL.service_update(context, service_id, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def role_list(**kwargs): \n    return tsql_query(query='sp_helprole', as_dict=True, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def shutdown(opts, *args, **kw): \n    return True",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getRank(width): \n    return int(math.floor((3.0 * math.log10(width))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_installed(pkg_name): \n    with settings(hide('running', 'stdout', 'stderr', 'warnings'), warn_only=True): \n      res = run(('pacman   -Q   %(pkg_name)s' % locals())) \n      return res.succeeded",
        "line_count": 3,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def __virtual__(): \n    return (True if ('alternatives.auto' in __salt__) else False)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def generate_sentence(start_with_lorem=False): \n    return _GENERATOR.generate_sentence(start_with_lorem)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def is_foreground_light(color): \n    return (rgb_to_hsl(*parse_color(color)[:3])[2] < 17.9)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_last_modification(fileName): \n    return QtCore.QFileInfo(fileName).lastModified()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def queues(request): \n    return render('queues.html', request, {'queuelist': request.jt.queues()})",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def json_objs_equal(left, right): \n    return (_ordered(left) == _ordered(right))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getCraftedText(fileName, text='', repository=None): \n    return getCraftedTextFromText(archive.getTextIfEmpty(fileName, text), repository)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def kill_job(jid): \n    return signal_job(jid, salt_SIGKILL)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setval(key, val, destructive=False): \n    return setvals({key: val}, destructive)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _writen(fd, data): \n    while (data != ''): \n      n = os.write(fd, data) \n      data = data[n:]",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def requires_reload(action, plugins): \n    return any((p.get_plugin_class_instance().requires_reload(action) for p in plugins))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def migration_get_in_progress_by_host_and_node(context, host, node): \n    return IMPL.migration_get_in_progress_by_host_and_node(context, host, node)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def raise_config_error(key, dummy): \n    raise ConfigurationError(('Unknown   option   %s' % (key,)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def stop(ctid_or_name, fast=False, **kwargs): \n    return _vzctl('stop', ctid_or_name, fast=fast, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pid(accessing_obj, accessed_obj, *args, **kwargs): \n    return dbref(_to_player(accessing_obj), accessed_obj, *args, **kwargs)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def wrap_file(environ, file, buffer_size=8192): \n    return environ.get('wsgi.file_wrapper', FileWrapper)(file, buffer_size)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _encode_float(name, value, dummy0, dummy1): \n    return (('\\x01' + name) + _PACK_FLOAT(value))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def repr_strength(strength): \n    return {REQUIRED: u'Required', STRONG: u'Strong', MEDIUM: u'Medium', WEAK: u'Weak'}[strength]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def sdm_deg(f): \n    return max((sdm_monomial_deg(M[0]) for M in f))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def unpicklechops(string): \n    return loads(zlib.decompress(base64.decodestring(string)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def pause_execution(message='Test   execution   paused.   Press   OK   to   continue.'): \n    MessageDialog(message).show()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get(shop, key, default=None): \n    return _get_configuration(shop).get(key, default)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def filter_pad(val, width, fillchar=u'0'): \n    return str(val).rjust(width, fillchar)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def squish(text): \n    return re.sub('\\\\s+', '   ', text)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _setAuthCred(): \n    if (kb.passwordMgr and all(((_ is not None) for _ in (conf.scheme, conf.hostname, conf.port, conf.authUsername, conf.authPassword)))): \n      kb.passwordMgr.add_password(None, ('%s://%s:%d' % (conf.scheme, conf.hostname, conf.port)), conf.authUsername, conf.authPassword)",
        "line_count": 2,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def sample(operation, metric, name): \n    with start_action(action_type=u'flocker:benchmark:sample', sample=name): \n      sampling = DeferredContext(maybeDeferred(operation.get_probe)) \n      def run_probe(probe): \n         probing = metric.measure(probe.run) \n         probing.addCallback((lambda measurement: dict(success=True, value=measurement))) \n         probing.addCallback(bypass, probe.cleanup) \n         return probing \n      sampling.addCallback(run_probe) \n      def convert_to_result(failure): \n         return dict(success=False, reason=failure.getTraceback()) \n      sampling.addErrback(convert_to_result) \n      return sampling.addActionFinish()",
        "line_count": 12,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SigTermHandler(signum, frame): \n    raise KeyboardInterrupt()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def RemoveOneFlag(flag_name, flag_values=FLAGS): \n    if (flag_name in flag_values.FlagDict()): \n      flag_values.__delattr__(flag_name)",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def dmp_gf_sqf_list(f, u, K, all=False): \n    raise NotImplementedError('multivariate   polynomials   over   finite   fields')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def writeOutput(fileName, shouldAnalyze=True): \n    skeinforge_craft.writeChainTextWithNounMessage(fileName, 'splodge', shouldAnalyze)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def create_rpc(deadline=None, callback=None): \n    return apiproxy_stub_map.UserRPC('memcache', deadline, callback)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def raisehttp(): \n    raise HTTP(400, 'internal   error')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def security_group_update(context, security_group_id, values, columns_to_join=None): \n    return IMPL.security_group_update(context, security_group_id, values, columns_to_join=columns_to_join)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parseSqliteTableSchema(value): \n    if value: \n      table = {} \n      columns = {} \n      for match in re.finditer('(\\\\w+)\\\\s+(INT|INTEGER|TINYINT|SMALLINT|MEDIUMINT|BIGINT|UNSIGNED   BIG   INT|INT2|INT8|INTEGER|CHARACTER|VARCHAR|VARYING   CHARACTER|NCHAR|NATIVE   CHARACTER|NVARCHAR|TEXT|CLOB|TEXT|BLOB|NONE|REAL|DOUBLE|DOUBLE   PRECISION|FLOAT|REAL|NUMERIC|DECIMAL|BOOLEAN|DATE|DATETIME|NUMERIC)\\\\b', value, re.I): \n         columns[match.group(1)] = match.group(2) \n      table[conf.tbl] = columns \n      kb.data.cachedColumns[conf.db] = table",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def is_stopped(): \n    return (status() == 'stopped')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cluster_exists(version, name='main'): \n    return ('{0}/{1}'.format(version, name) in cluster_list())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def write_drawing(worksheet): \n    if (worksheet._charts or worksheet._images): \n      rel = Relationship(type='drawing', target='') \n      worksheet._rels.append(rel) \n      drawing = Related() \n      drawing.id = ('rId%s' % len(worksheet._rels)) \n      return drawing.to_tree('drawing')",
        "line_count": 6,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def b2a_hex(s): \n    return binascii.b2a_hex(s)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_preferred_file_name_encoding(): \n    return (sys.getfilesystemencoding() or locale.getpreferredencoding() or u'utf-8')",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def get_top_state_rule_answers(exploration_id, state_name, rule_str_list): \n    return get_top_state_rule_answers_multi([(exploration_id, state_name)], rule_str_list)[0]",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _recurse_config_to_dict(t_data): \n    if (not isinstance(t_data, type(None))): \n      if isinstance(t_data, list): \n         t_list = [] \n         for i in t_data: \n            t_list.append(_recurse_config_to_dict(i)) \n         return t_list \n      elif isinstance(t_data, dict): \n         t_dict = {} \n         for (k, v) in t_data.iteritems(): \n            t_dict[k] = _recurse_config_to_dict(v) \n         return t_dict \n      elif hasattr(t_data, '__dict__'): \n         return _recurse_config_to_dict(t_data.__dict__) \n      else: \n         return _serializer(t_data)",
        "line_count": 15,
        "cyclomatic_complexity": 7
    },
    {
        "method": "def assert_in(x, thing, msg=''): \n    if (x not in thing): \n      assert False, (msg or ('%r   is   not   in   %r' % (x, thing)))",
        "line_count": 2,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def floating_ip_create(context, values): \n    return IMPL.floating_ip_create(context, values)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def setup_platform(hass, config, add_devices, discovery_info=None): \n    add_devices([DemoClimate('HeatPump', 68, TEMP_FAHRENHEIT, None, 77, 'Auto   Low', None, None, 'Auto', 'heat', None, None, None), DemoClimate('Hvac', 21, TEMP_CELSIUS, True, 22, 'On   High', 67, 54, 'Off', 'cool', False, None, None), DemoClimate('Ecobee', None, TEMP_CELSIUS, None, 23, 'Auto   Low', None, None, 'Auto', 'auto', None, 24, 21)])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def uniform(stdev, size): \n    return numpy.random.uniform(low=((- stdev) * numpy.sqrt(3)), high=(stdev * numpy.sqrt(3)), size=size).astype(theano.config.floatX)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_fastq(in_fasta, quals, label_transform=split_lib_transform): \n    for (label, seq) in parse_fasta(in_fasta): \n      (new_label, qual_id) = label_transform(label) \n      seq_id = label.split()[0] \n      if seq_id.startswith('>'): \n         seq_id = seq_id[1:] \n      qual = quals[qual_id] \n      (yield (make_fastq_rec(new_label, seq, qual), seq_id))",
        "line_count": 7,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def cache_path(paths, environ=None): \n    return zipline_path((['cache'] + list(paths)), environ=environ)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_release_group_image_front(releasegroupid, size=None): \n    return get_image(releasegroupid, 'front', size=size, entitytype='release-group')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_from_object(): \n    assert (hug.api.from_object(TestAPI) == api)",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def _babel_locale(locale): \n    return locale.replace('-', '_')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _indent(value): \n    return '{0}{1}'.format(_INDENT, value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def branching_weight(G, attr='weight', default=1): \n    return sum((edge[2].get(attr, default) for edge in G.edges(data=True)))",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def rzpad(value, total_length): \n    return (value + ('\\x00' * max(0, (total_length - len(value)))))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def distribution(): \n    return s3_rest_controller()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def am_following_dataset(context, data_dict): \n    return _am_following(context, data_dict, ckan.logic.schema.default_follow_dataset_schema(), context['model'].UserFollowingDataset)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def onGlobalBases(key, value): \n    DEBUG_MSG(('onGlobalBases:   %s' % key))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def SocketConnection(host, port=DEFAULT_PORT): \n    return Connection(Channel(SocketStream.from_new_socket(host, port)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dictize_job(job): \n    return {u'id': job.id, u'title': job.meta.get(u'title'), u'created': job.created_at.strftime(u'%Y-%m-%dT%H:%M:%S'), u'queue': remove_queue_name_prefix(job.origin)}",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def check_paths(paths): \n    for path in paths: \n      if is_binary(path): \n         continue \n      for line in open(path, 'r'): \n         match = RE_OBJ.search(line) \n         msg = 'cookiecutter   variable   not   replaced   in   {}' \n         assert (match is None), msg.format(path)",
        "line_count": 7,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def get_network_settings(): \n    return _read_file(_RH_NETWORK_FILE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_service(hass, config, discovery_info=None): \n    return FacebookNotificationService(config[CONF_PAGE_ACCESS_TOKEN])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def dir_option(s): \n    return s",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def test_clock(): \n    data.clock()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_course_enrollment_info(course_id, include_expired=False): \n    return _get_fake_course_info(course_id, include_expired)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cbrt(arg): \n    return Pow(arg, Rational(1, 3))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def monitor_set_global(sock, name, value): \n    return communicate(sock, ('__set_global__(\"%s\")' % name), settings=[value])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _at_origin(x): \n    return (np.sum((x * x)) < 1e-08)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def upath(path): \n    return path",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ValidateContacts(contact_dicts): \n    for contact in contact_dicts: \n      if ('identity' in contact): \n         Identity.ValidateKey(contact['identity'])",
        "line_count": 3,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def stub_out(stubs, funcs): \n    for func in funcs: \n      func_name = '_'.join(func.__name__.split('_')[1:]) \n      stubs.Set(db, func_name, func)",
        "line_count": 3,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def planted_partition_graph(l, k, p_in, p_out, seed=None, directed=False): \n    return random_partition_graph(([k] * l), p_in, p_out, seed, directed)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _get_proc_pid(proc): \n    return proc.pid",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def unpublicize_exploration(committer_id, exploration_id): \n    _unpublicize_activity(committer_id, exploration_id, feconf.ACTIVITY_TYPE_EXPLORATION)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def random_bytes(size=1024): \n    return ''.join([six.int2byte(random.randint(0, 255)) for i in range(size)])",
        "line_count": 1,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def deep_merge(base, extra): \n    for key in extra: \n      if ((key in base) and isinstance(base[key], dict) and isinstance(extra[key], dict)): \n         deep_merge(base[key], extra[key]) \n         continue \n      base[key] = extra[key]",
        "line_count": 5,
        "cyclomatic_complexity": 5
    },
    {
        "method": "def rotate_90_clockwise(request, fileobjects): \n    transpose_image(request, fileobjects, 4)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def IncludeUtilitiesInUserAgent(value): \n    with _UTILITY_LOCK: \n      _utility_registry.SetEnabled(value)",
        "line_count": 2,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def p_error_handler(t): \n    pass",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _item_to_entry(iterator, resource, loggers): \n    return entry_from_resource(resource, iterator.client, loggers)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def iter_http_requests(server, player): \n    while ((not player) or player.running): \n      try: \n         (yield server.open(timeout=2.5)) \n      except OSError: \n         continue",
        "line_count": 5,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def register_admin_extension(url_prefix, extension_data): \n    ADMIN_EXTENSIONS[url_prefix] = extension_data",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def yellow(text, attrib=None): \n    return colorize(text, 'yellow', attrib)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getShouldReverse(xmlElement): \n    return evaluate.getEvaluatedBooleanDefault(True, 'reverse', xmlElement)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def reinstall_ruby(ruby, runas=None): \n    return _rvm(['reinstall', ruby], runas=runas)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def validate_reading(data): \n    return (data != 'Disabled')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def group_snapshot_get(context, group_snapshot_id): \n    return IMPL.group_snapshot_get(context, group_snapshot_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def isIPv6Address(addr): \n    return isIPAddress(addr, AF_INET6)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_enrolled(): \n    return User.objects.raw('SELECT   *   FROM   auth_user   where   id   not   in   (SELECT   user_id   from   student_usersignupsource)')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def get_string_scope(project, code, resource=None): \n    return get_string_module(project, code, resource).get_scope()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def parse_basic_auth(src_ip_port, dst_ip_port, headers, authorization_header): \n    if authorization_header: \n      try: \n         header_val = headers[authorization_header.group()] \n      except KeyError: \n         return \n      b64_auth_re = re.match('basic   (.+)', header_val, re.IGNORECASE) \n      if (b64_auth_re != None): \n         basic_auth_b64 = b64_auth_re.group(1) \n         basic_auth_creds = base64.decodestring(basic_auth_b64) \n         msg = ('Basic   Authentication:   %s' % basic_auth_creds) \n         printer(src_ip_port, dst_ip_port, msg)",
        "line_count": 11,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def append_gentoo_mirrors(value): \n    return append_var('GENTOO_MIRRORS', value)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def MakeCdfFromItems(items, label=None): \n    return Cdf(dict(items), label=label)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def make_median(q2): \n    return graph_objs.Scatter(x=[0], y=[q2], text=[('median:   ' + '{:0.2f}'.format(q2))], mode='markers', marker=dict(symbol='square', color='rgb(255,255,255)'), hoverinfo='text')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def _ScrubUpdateUser(op_args): \n    _ScrubForClass(User, op_args['user_dict'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def qubit_to_matrix(qubit, format='sympy'): \n    return represent(qubit, format=format)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def clear_lookups(namespace): \n    if (namespace in LOOKUP): \n      del LOOKUP[namespace]",
        "line_count": 2,
        "cyclomatic_complexity": 2
    },
    {
        "method": "def savehist(): \n    readline.write_history_file(HISTFILE)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getVector3(x=0.0, y=0.0, z=0.0): \n    return Vector3(x, y, z)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def volume_attached(context, volume_id, instance_id, mountpoint): \n    return IMPL.volume_attached(context, volume_id, instance_id, mountpoint)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def connection_before_request(): \n    CLIENT_POOL.acquire()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def getNormalWeighted(begin, center, end): \n    return (center - begin).cross((end - center))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def rehash(): \n    return (win32gui.SendMessageTimeout(win32con.HWND_BROADCAST, win32con.WM_SETTINGCHANGE, 0, 'Environment', 0, 10000)[0] == 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def cpu_count_logical(): \n    return cext.cpu_count_logical()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def partitionby(func, seq): \n    return map(tuple, pluck(1, itertools.groupby(seq, key=func)))",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def empty_iter(): \n    (yield iter([]).next())",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def decryptMessage(key, message): \n    return translateMessage(key, message, 'decrypt')",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def safe_name(name): \n    return re.sub('[^A-Za-z0-9.]+', '-', name)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def signed_permutations(t): \n    return (type(t)(i) for j in permutations(t) for i in permute_signs(j))",
        "line_count": 1,
        "cyclomatic_complexity": 3
    },
    {
        "method": "def write_course_block_detail_report(course_data): \n    with open('xblock_course_detail.csv', 'wb') as csvfile: \n      detail_writer = csv.writer(csvfile, delimiter=',', quotechar='\"', quoting=csv.QUOTE_ALL) \n      detail_writer.writerow(['XBLOCK_TYPE_NAME', 'COURSE_NAME', 'COURSE_ID', 'COURSE_START', 'COURSE_END', 'NUM_XBLOCK_INSTANCES']) \n      for course in course_data: \n         for (block_type, count) in course.get(BLOCK_COUNTS_KEY, []).items(): \n            if (count > 0): \n               detail_writer.writerow([block_type, course.get(COURSE_NAME_KEY, '').encode('utf-8'), course.get(COURSE_ID_KEY, ''), course.get(COURSE_START_KEY, ''), course.get(COURSE_END_KEY, ''), str(count)]) \n      csvfile.close()",
        "line_count": 8,
        "cyclomatic_complexity": 4
    },
    {
        "method": "def sin(x): \n    return Sin()(x)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def flip_vertical(request, fileobjects): \n    transpose_image(request, fileobjects, 1)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def askdirectory(**options): \n    return Directory(**options).show()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def regex_tuple_from_key_alias(obj): \n    return (re.compile(ordered_permutation_regex('   '.join(([obj.key] + obj.aliases.all()))), _RE_FLAGS), obj, obj.key)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def PresentDialog_Confirm_Call(message): \n    return call(message, [u'Ok', u'Cancel'])",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def classname(obj): \n    return obj.__class__.__name__.lower()",
        "line_count": 1,
        "cyclomatic_complexity": 1
    },
    {
        "method": "def instance_group_get_all_by_project_id(context, project_id): \n    return IMPL.instance_group_get_all_by_project_id(context, project_id)",
        "line_count": 1,
        "cyclomatic_complexity": 1
    }
]